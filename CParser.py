# Generated from C.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\177")
        buf.write("\u04c8\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\3\2\3\2\3\2\6\2\u00c8\n\2\r\2\16")
        buf.write("\2\u00c9\3\2\3\2\3\2\3\2\3\2\3\2\5\2\u00d2\n\2\3\2\3\2")
        buf.write("\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\5\2\u00e6\n\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\4\3\4\3\4\7\4\u00f2\n\4\f\4\16\4\u00f5\13\4\3\5\3\5\5")
        buf.write("\5\u00f9\n\5\3\5\3\5\3\5\3\6\3\6\5\6\u0100\n\6\3\6\3\6")
        buf.write("\3\6\3\6\3\6\3\6\5\6\u0108\n\6\3\6\3\6\5\6\u010c\n\6\3")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\5\6\u0114\n\6\3\6\3\6\3\6\3\6\7")
        buf.write("\6\u011a\n\6\f\6\16\6\u011d\13\6\3\7\3\7\5\7\u0121\n\7")
        buf.write("\3\b\3\b\3\b\7\b\u0126\n\b\f\b\16\b\u0129\13\b\3\t\7\t")
        buf.write("\u012c\n\t\f\t\16\t\u012f\13\t\3\t\3\t\3\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\5\t\u013c\n\t\3\n\3\n\3\13\5\13\u0141")
        buf.write("\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u014a\n")
        buf.write("\13\3\f\3\f\3\f\7\f\u014f\n\f\f\f\16\f\u0152\13\f\3\r")
        buf.write("\3\r\3\r\7\r\u0157\n\r\f\r\16\r\u015a\13\r\3\16\3\16\3")
        buf.write("\16\7\16\u015f\n\16\f\16\16\16\u0162\13\16\3\17\3\17\3")
        buf.write("\17\7\17\u0167\n\17\f\17\16\17\u016a\13\17\3\20\3\20\3")
        buf.write("\20\7\20\u016f\n\20\f\20\16\20\u0172\13\20\3\21\3\21\3")
        buf.write("\21\7\21\u0177\n\21\f\21\16\21\u017a\13\21\3\22\3\22\3")
        buf.write("\22\7\22\u017f\n\22\f\22\16\22\u0182\13\22\3\23\3\23\3")
        buf.write("\23\7\23\u0187\n\23\f\23\16\23\u018a\13\23\3\24\3\24\3")
        buf.write("\24\7\24\u018f\n\24\f\24\16\24\u0192\13\24\3\25\3\25\3")
        buf.write("\25\7\25\u0197\n\25\f\25\16\25\u019a\13\25\3\26\3\26\3")
        buf.write("\26\3\26\3\26\3\26\5\26\u01a2\n\26\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\5\27\u01aa\n\27\3\30\3\30\3\31\3\31\3\31\7")
        buf.write("\31\u01b1\n\31\f\31\16\31\u01b4\13\31\3\32\3\32\3\33\3")
        buf.write("\33\5\33\u01ba\n\33\3\33\3\33\3\33\5\33\u01bf\n\33\3\34")
        buf.write("\6\34\u01c2\n\34\r\34\16\34\u01c3\3\35\7\35\u01c7\n\35")
        buf.write("\f\35\16\35\u01ca\13\35\3\35\3\35\7\35\u01ce\n\35\f\35")
        buf.write("\16\35\u01d1\13\35\3\36\6\36\u01d4\n\36\r\36\16\36\u01d5")
        buf.write("\3\37\3\37\3\37\3\37\5\37\u01dc\n\37\3 \3 \3 \3 \3 \5")
        buf.write(" \u01e3\n \3!\3!\3!\7!\u01e8\n!\f!\16!\u01eb\13!\3\"\3")
        buf.write("\"\3\"\5\"\u01f0\n\"\3#\3#\3$\3$\6$\u01f6\n$\r$\16$\u01f7")
        buf.write("\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u0207\n$\3")
        buf.write("$\3$\7$\u020b\n$\f$\16$\u020e\13$\3%\3%\5%\u0212\n%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\5%\u021b\n%\3&\3&\3\'\6\'\u0220\n")
        buf.write("\'\r\'\16\'\u0221\3(\3(\5(\u0226\n(\3(\3(\3(\5(\u022b")
        buf.write("\n(\3)\3)\5)\u022f\n)\3)\5)\u0232\n)\3*\3*\3*\7*\u0237")
        buf.write("\n*\f*\16*\u023a\13*\3+\3+\5+\u023e\n+\3+\3+\5+\u0242")
        buf.write("\n+\3,\3,\5,\u0246\n,\3,\3,\3,\5,\u024b\n,\3,\3,\3,\3")
        buf.write(",\5,\u0251\n,\3-\3-\3-\7-\u0256\n-\f-\16-\u0259\13-\3")
        buf.write(".\3.\3.\5.\u025e\n.\3/\3/\3\60\3\60\3\60\3\60\3\60\3\61")
        buf.write("\3\61\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u026f\n\62\3")
        buf.write("\63\3\63\3\63\3\63\5\63\u0275\n\63\3\63\3\63\3\64\5\64")
        buf.write("\u027a\n\64\3\64\3\64\7\64\u027e\n\64\f\64\16\64\u0281")
        buf.write("\13\64\3\65\5\65\u0284\n\65\3\65\3\65\7\65\u0288\n\65")
        buf.write("\f\65\16\65\u028b\13\65\3\66\3\66\3\66\5\66\u0290\n\66")
        buf.write("\3\66\3\66\3\66\3\66\3\66\5\66\u0297\n\66\3\66\3\66\5")
        buf.write("\66\u029b\n\66\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write("\3\67\3\67\3\67\5\67\u02a8\n\67\3\67\3\67\3\67\3\67\5")
        buf.write("\67\u02ae\n\67\3\67\3\67\3\67\5\67\u02b3\n\67\3\67\5\67")
        buf.write("\u02b6\n\67\3\67\3\67\3\67\3\67\3\67\5\67\u02bd\n\67\3")
        buf.write("\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write("\3\67\3\67\5\67\u02cc\n\67\3\67\3\67\3\67\3\67\3\67\3")
        buf.write("\67\3\67\3\67\3\67\3\67\5\67\u02d8\n\67\3\67\7\67\u02db")
        buf.write("\n\67\f\67\16\67\u02de\13\67\38\38\38\68\u02e3\n8\r8\16")
        buf.write("8\u02e4\38\38\58\u02e9\n8\39\39\39\39\39\39\39\3:\5:\u02f3")
        buf.write("\n:\3:\3:\5:\u02f7\n:\7:\u02f9\n:\f:\16:\u02fc\13:\3;")
        buf.write("\3;\3;\5;\u0301\n;\3;\5;\u0304\n;\3<\3<\3<\3<\3<\7<\u030b")
        buf.write("\n<\f<\16<\u030e\13<\3=\3=\5=\u0312\n=\6=\u0314\n=\r=")
        buf.write("\16=\u0315\3>\6>\u0319\n>\r>\16>\u031a\3?\3?\3?\5?\u0320")
        buf.write("\n?\3@\3@\3@\7@\u0325\n@\f@\16@\u0328\13@\3A\3A\3A\3A")
        buf.write("\3A\5A\u032f\nA\5A\u0331\nA\3B\3B\3B\7B\u0336\nB\fB\16")
        buf.write("B\u0339\13B\3C\3C\5C\u033d\nC\3D\3D\5D\u0341\nD\3D\3D")
        buf.write("\7D\u0345\nD\fD\16D\u0348\13D\5D\u034a\nD\3E\3E\3E\3E")
        buf.write("\3E\7E\u0351\nE\fE\16E\u0354\13E\3E\3E\5E\u0358\nE\3E")
        buf.write("\5E\u035b\nE\3E\3E\3E\3E\5E\u0361\nE\3E\3E\3E\3E\3E\3")
        buf.write("E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u0371\nE\3E\3E\7E\u0375\n")
        buf.write("E\fE\16E\u0378\13E\5E\u037a\nE\3E\3E\3E\5E\u037f\nE\3")
        buf.write("E\5E\u0382\nE\3E\3E\3E\3E\3E\5E\u0389\nE\3E\3E\3E\3E\3")
        buf.write("E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u039c\nE\3E\3")
        buf.write("E\7E\u03a0\nE\fE\16E\u03a3\13E\7E\u03a5\nE\fE\16E\u03a8")
        buf.write("\13E\3F\3F\3G\3G\3G\3G\5G\u03b0\nG\3G\3G\3G\3G\5G\u03b6")
        buf.write("\nG\3H\5H\u03b9\nH\3H\3H\3H\5H\u03be\nH\3H\7H\u03c1\n")
        buf.write("H\fH\16H\u03c4\13H\3I\3I\3I\3J\6J\u03ca\nJ\rJ\16J\u03cb")
        buf.write("\3K\3K\3K\3K\3K\3K\5K\u03d4\nK\3L\3L\3L\3L\3L\6L\u03db")
        buf.write("\nL\rL\16L\u03dc\3L\3L\3L\3M\3M\3M\3M\3M\3M\3M\3M\3M\3")
        buf.write("M\3M\3M\3M\7M\u03ef\nM\fM\16M\u03f2\13M\5M\u03f4\nM\3")
        buf.write("M\3M\3M\3M\7M\u03fa\nM\fM\16M\u03fd\13M\5M\u03ff\nM\7")
        buf.write("M\u0401\nM\fM\16M\u0404\13M\3M\3M\5M\u0408\nM\3N\3N\3")
        buf.write("N\3N\3N\3N\3N\3N\3N\3N\3N\5N\u0415\nN\3O\3O\5O\u0419\n")
        buf.write("O\3O\3O\3P\6P\u041e\nP\rP\16P\u041f\3Q\3Q\5Q\u0424\nQ")
        buf.write("\3R\5R\u0427\nR\3R\3R\3S\3S\3S\3S\3S\3S\3S\5S\u0432\n")
        buf.write("S\3S\3S\3S\3S\3S\3S\5S\u043a\nS\3T\3T\3T\3T\3T\5T\u0441")
        buf.write("\nT\3T\3T\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3")
        buf.write("U\3U\3U\3U\3U\3U\5U\u0459\nU\3V\3V\5V\u045d\nV\5V\u045f")
        buf.write("\nV\3V\3V\5V\u0463\nV\3V\3V\5V\u0467\nV\3W\3W\5W\u046b")
        buf.write("\nW\3X\3X\3X\7X\u0470\nX\fX\16X\u0473\13X\3Y\3Y\3Y\3Y")
        buf.write("\3Y\5Y\u047a\nY\3Y\3Y\5Y\u047e\nY\3Y\3Y\3Z\5Z\u0483\n")
        buf.write("Z\3Z\3Z\3[\6[\u0488\n[\r[\16[\u0489\3\\\3\\\3\\\3\\\3")
        buf.write("\\\5\\\u0491\n\\\3]\3]\5]\u0495\n]\3]\3]\5]\u0499\n]\3")
        buf.write("]\3]\3^\5^\u049e\n^\3^\3^\5^\u04a2\n^\3^\3^\3_\6_\u04a7")
        buf.write("\n_\r_\16_\u04a8\3_\3_\5_\u04ad\n_\3`\3`\3`\7`\u04b2\n")
        buf.write("`\f`\16`\u04b5\13`\3a\3a\5a\u04b9\na\3a\3a\5a\u04bd\n")
        buf.write("a\3a\3a\5a\u04c1\na\3b\6b\u04c4\nb\rb\16b\u04c5\3b\2\5")
        buf.write("Fl\u0088c\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&")
        buf.write("(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~")
        buf.write("\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090")
        buf.write("\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2")
        buf.write("\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4")
        buf.write("\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\2\32\3\2kl")
        buf.write("\4\2MMOO\5\2,,MMOO\4\2,,\67\67\7\2LLNNPPSSXY\3\2PR\4\2")
        buf.write("LLNN\3\2JK\3\2FI\3\2ij\3\2^h\b\2\24\24\37\37\'\'--\60")
        buf.write("\60??\n\2\6\b\27\27\34\34  %&*+\62\639:\3\2\6\b\4\2..")
        buf.write("\61\61\6\2\30\30((\64\6488\5\2\n\13$$==\4\2@A]]\3\2@A")
        buf.write("\4\2PPWW\4\2\r\r\17\17\4\2\20\20\64\64\4\2\25\25\31\31")
        buf.write("\3\2\60\60\2\u0535\2\u00e5\3\2\2\2\4\u00e7\3\2\2\2\6\u00ee")
        buf.write("\3\2\2\2\b\u00f8\3\2\2\2\n\u010b\3\2\2\2\f\u0120\3\2\2")
        buf.write("\2\16\u0122\3\2\2\2\20\u012d\3\2\2\2\22\u013d\3\2\2\2")
        buf.write("\24\u0149\3\2\2\2\26\u014b\3\2\2\2\30\u0153\3\2\2\2\32")
        buf.write("\u015b\3\2\2\2\34\u0163\3\2\2\2\36\u016b\3\2\2\2 \u0173")
        buf.write("\3\2\2\2\"\u017b\3\2\2\2$\u0183\3\2\2\2&\u018b\3\2\2\2")
        buf.write("(\u0193\3\2\2\2*\u019b\3\2\2\2,\u01a9\3\2\2\2.\u01ab\3")
        buf.write("\2\2\2\60\u01ad\3\2\2\2\62\u01b5\3\2\2\2\64\u01be\3\2")
        buf.write("\2\2\66\u01c1\3\2\2\28\u01c8\3\2\2\2:\u01d3\3\2\2\2<\u01db")
        buf.write("\3\2\2\2>\u01e2\3\2\2\2@\u01e4\3\2\2\2B\u01ec\3\2\2\2")
        buf.write("D\u01f1\3\2\2\2F\u0206\3\2\2\2H\u021a\3\2\2\2J\u021c\3")
        buf.write("\2\2\2L\u021f\3\2\2\2N\u022a\3\2\2\2P\u022e\3\2\2\2R\u0233")
        buf.write("\3\2\2\2T\u0241\3\2\2\2V\u0250\3\2\2\2X\u0252\3\2\2\2")
        buf.write("Z\u025a\3\2\2\2\\\u025f\3\2\2\2^\u0261\3\2\2\2`\u0266")
        buf.write("\3\2\2\2b\u026e\3\2\2\2d\u0270\3\2\2\2f\u0279\3\2\2\2")
        buf.write("h\u0283\3\2\2\2j\u029a\3\2\2\2l\u02ad\3\2\2\2n\u02e8\3")
        buf.write("\2\2\2p\u02ea\3\2\2\2r\u02f2\3\2\2\2t\u02fd\3\2\2\2v\u030c")
        buf.write("\3\2\2\2x\u0313\3\2\2\2z\u0318\3\2\2\2|\u031c\3\2\2\2")
        buf.write("~\u0321\3\2\2\2\u0080\u0330\3\2\2\2\u0082\u0332\3\2\2")
        buf.write("\2\u0084\u033a\3\2\2\2\u0086\u0349\3\2\2\2\u0088\u0379")
        buf.write("\3\2\2\2\u008a\u03a9\3\2\2\2\u008c\u03b5\3\2\2\2\u008e")
        buf.write("\u03b8\3\2\2\2\u0090\u03c5\3\2\2\2\u0092\u03c9\3\2\2\2")
        buf.write("\u0094\u03d3\3\2\2\2\u0096\u03d5\3\2\2\2\u0098\u0407\3")
        buf.write("\2\2\2\u009a\u0414\3\2\2\2\u009c\u0416\3\2\2\2\u009e\u041d")
        buf.write("\3\2\2\2\u00a0\u0423\3\2\2\2\u00a2\u0426\3\2\2\2\u00a4")
        buf.write("\u0439\3\2\2\2\u00a6\u043b\3\2\2\2\u00a8\u0458\3\2\2\2")
        buf.write("\u00aa\u045e\3\2\2\2\u00ac\u0468\3\2\2\2\u00ae\u046c\3")
        buf.write("\2\2\2\u00b0\u047d\3\2\2\2\u00b2\u0482\3\2\2\2\u00b4\u0487")
        buf.write("\3\2\2\2\u00b6\u0490\3\2\2\2\u00b8\u0492\3\2\2\2\u00ba")
        buf.write("\u049d\3\2\2\2\u00bc\u04ac\3\2\2\2\u00be\u04ae\3\2\2\2")
        buf.write("\u00c0\u04b8\3\2\2\2\u00c2\u04c3\3\2\2\2\u00c4\u00e6\7")
        buf.write("n\2\2\u00c5\u00e6\7o\2\2\u00c6\u00c8\7q\2\2\u00c7\u00c6")
        buf.write("\3\2\2\2\u00c8\u00c9\3\2\2\2\u00c9\u00c7\3\2\2\2\u00c9")
        buf.write("\u00ca\3\2\2\2\u00ca\u00e6\3\2\2\2\u00cb\u00cc\7@\2\2")
        buf.write("\u00cc\u00cd\5\60\31\2\u00cd\u00ce\7A\2\2\u00ce\u00e6")
        buf.write("\3\2\2\2\u00cf\u00e6\5\4\3\2\u00d0\u00d2\7\3\2\2\u00d1")
        buf.write("\u00d0\3\2\2\2\u00d1\u00d2\3\2\2\2\u00d2\u00d3\3\2\2\2")
        buf.write("\u00d3\u00d4\7@\2\2\u00d4\u00d5\5\u009cO\2\u00d5\u00d6")
        buf.write("\7A\2\2\u00d6\u00e6\3\2\2\2\u00d7\u00d8\7\4\2\2\u00d8")
        buf.write("\u00d9\7@\2\2\u00d9\u00da\5\20\t\2\u00da\u00db\7]\2\2")
        buf.write("\u00db\u00dc\5\u0084C\2\u00dc\u00dd\7A\2\2\u00dd\u00e6")
        buf.write("\3\2\2\2\u00de\u00df\7\5\2\2\u00df\u00e0\7@\2\2\u00e0")
        buf.write("\u00e1\5\u0084C\2\u00e1\u00e2\7]\2\2\u00e2\u00e3\5\20")
        buf.write("\t\2\u00e3\u00e4\7A\2\2\u00e4\u00e6\3\2\2\2\u00e5\u00c4")
        buf.write("\3\2\2\2\u00e5\u00c5\3\2\2\2\u00e5\u00c7\3\2\2\2\u00e5")
        buf.write("\u00cb\3\2\2\2\u00e5\u00cf\3\2\2\2\u00e5\u00d1\3\2\2\2")
        buf.write("\u00e5\u00d7\3\2\2\2\u00e5\u00de\3\2\2\2\u00e6\3\3\2\2")
        buf.write("\2\u00e7\u00e8\7;\2\2\u00e8\u00e9\7@\2\2\u00e9\u00ea\5")
        buf.write(",\27\2\u00ea\u00eb\7]\2\2\u00eb\u00ec\5\6\4\2\u00ec\u00ed")
        buf.write("\7A\2\2\u00ed\5\3\2\2\2\u00ee\u00f3\5\b\5\2\u00ef\u00f0")
        buf.write("\7]\2\2\u00f0\u00f2\5\b\5\2\u00f1\u00ef\3\2\2\2\u00f2")
        buf.write("\u00f5\3\2\2\2\u00f3\u00f1\3\2\2\2\u00f3\u00f4\3\2\2\2")
        buf.write("\u00f4\7\3\2\2\2\u00f5\u00f3\3\2\2\2\u00f6\u00f9\5\u0084")
        buf.write("C\2\u00f7\u00f9\7\32\2\2\u00f8\u00f6\3\2\2\2\u00f8\u00f7")
        buf.write("\3\2\2\2\u00f9\u00fa\3\2\2\2\u00fa\u00fb\7[\2\2\u00fb")
        buf.write("\u00fc\5,\27\2\u00fc\t\3\2\2\2\u00fd\u010c\5\2\2\2\u00fe")
        buf.write("\u0100\7\3\2\2\u00ff\u00fe\3\2\2\2\u00ff\u0100\3\2\2\2")
        buf.write("\u0100\u0101\3\2\2\2\u0101\u0102\7@\2\2\u0102\u0103\5")
        buf.write("\u0084C\2\u0103\u0104\7A\2\2\u0104\u0105\7D\2\2\u0105")
        buf.write("\u0107\5\u008eH\2\u0106\u0108\7]\2\2\u0107\u0106\3\2\2")
        buf.write("\2\u0107\u0108\3\2\2\2\u0108\u0109\3\2\2\2\u0109\u010a")
        buf.write("\7E\2\2\u010a\u010c\3\2\2\2\u010b\u00fd\3\2\2\2\u010b")
        buf.write("\u00ff\3\2\2\2\u010c\u011b\3\2\2\2\u010d\u010e\7B\2\2")
        buf.write("\u010e\u010f\5\60\31\2\u010f\u0110\7C\2\2\u0110\u011a")
        buf.write("\3\2\2\2\u0111\u0113\7@\2\2\u0112\u0114\5\16\b\2\u0113")
        buf.write("\u0112\3\2\2\2\u0113\u0114\3\2\2\2\u0114\u0115\3\2\2\2")
        buf.write("\u0115\u011a\7A\2\2\u0116\u0117\t\2\2\2\u0117\u011a\7")
        buf.write("n\2\2\u0118\u011a\t\3\2\2\u0119\u010d\3\2\2\2\u0119\u0111")
        buf.write("\3\2\2\2\u0119\u0116\3\2\2\2\u0119\u0118\3\2\2\2\u011a")
        buf.write("\u011d\3\2\2\2\u011b\u0119\3\2\2\2\u011b\u011c\3\2\2\2")
        buf.write("\u011c\13\3\2\2\2\u011d\u011b\3\2\2\2\u011e\u0121\5P)")
        buf.write("\2\u011f\u0121\5,\27\2\u0120\u011e\3\2\2\2\u0120\u011f")
        buf.write("\3\2\2\2\u0121\r\3\2\2\2\u0122\u0127\5\f\7\2\u0123\u0124")
        buf.write("\7]\2\2\u0124\u0126\5\f\7\2\u0125\u0123\3\2\2\2\u0126")
        buf.write("\u0129\3\2\2\2\u0127\u0125\3\2\2\2\u0127\u0128\3\2\2\2")
        buf.write("\u0128\17\3\2\2\2\u0129\u0127\3\2\2\2\u012a\u012c\t\4")
        buf.write("\2\2\u012b\u012a\3\2\2\2\u012c\u012f\3\2\2\2\u012d\u012b")
        buf.write("\3\2\2\2\u012d\u012e\3\2\2\2\u012e\u013b\3\2\2\2\u012f")
        buf.write("\u012d\3\2\2\2\u0130\u013c\5\n\6\2\u0131\u0132\5\22\n")
        buf.write("\2\u0132\u0133\5\24\13\2\u0133\u013c\3\2\2\2\u0134\u0135")
        buf.write("\t\5\2\2\u0135\u0136\7@\2\2\u0136\u0137\5\u0084C\2\u0137")
        buf.write("\u0138\7A\2\2\u0138\u013c\3\2\2\2\u0139\u013a\7U\2\2\u013a")
        buf.write("\u013c\7n\2\2\u013b\u0130\3\2\2\2\u013b\u0131\3\2\2\2")
        buf.write("\u013b\u0134\3\2\2\2\u013b\u0139\3\2\2\2\u013c\21\3\2")
        buf.write("\2\2\u013d\u013e\t\6\2\2\u013e\23\3\2\2\2\u013f\u0141")
        buf.write("\7\3\2\2\u0140\u013f\3\2\2\2\u0140\u0141\3\2\2\2\u0141")
        buf.write("\u0142\3\2\2\2\u0142\u0143\7@\2\2\u0143\u0144\5\u0084")
        buf.write("C\2\u0144\u0145\7A\2\2\u0145\u0146\5\24\13\2\u0146\u014a")
        buf.write("\3\2\2\2\u0147\u014a\5\20\t\2\u0148\u014a\7p\2\2\u0149")
        buf.write("\u0140\3\2\2\2\u0149\u0147\3\2\2\2\u0149\u0148\3\2\2\2")
        buf.write("\u014a\25\3\2\2\2\u014b\u0150\5\24\13\2\u014c\u014d\t")
        buf.write("\7\2\2\u014d\u014f\5\24\13\2\u014e\u014c\3\2\2\2\u014f")
        buf.write("\u0152\3\2\2\2\u0150\u014e\3\2\2\2\u0150\u0151\3\2\2\2")
        buf.write("\u0151\27\3\2\2\2\u0152\u0150\3\2\2\2\u0153\u0158\5\26")
        buf.write("\f\2\u0154\u0155\t\b\2\2\u0155\u0157\5\26\f\2\u0156\u0154")
        buf.write("\3\2\2\2\u0157\u015a\3\2\2\2\u0158\u0156\3\2\2\2\u0158")
        buf.write("\u0159\3\2\2\2\u0159\31\3\2\2\2\u015a\u0158\3\2\2\2\u015b")
        buf.write("\u0160\5\30\r\2\u015c\u015d\t\t\2\2\u015d\u015f\5\30\r")
        buf.write("\2\u015e\u015c\3\2\2\2\u015f\u0162\3\2\2\2\u0160\u015e")
        buf.write("\3\2\2\2\u0160\u0161\3\2\2\2\u0161\33\3\2\2\2\u0162\u0160")
        buf.write("\3\2\2\2\u0163\u0168\5\32\16\2\u0164\u0165\t\n\2\2\u0165")
        buf.write("\u0167\5\32\16\2\u0166\u0164\3\2\2\2\u0167\u016a\3\2\2")
        buf.write("\2\u0168\u0166\3\2\2\2\u0168\u0169\3\2\2\2\u0169\35\3")
        buf.write("\2\2\2\u016a\u0168\3\2\2\2\u016b\u0170\5\34\17\2\u016c")
        buf.write("\u016d\t\13\2\2\u016d\u016f\5\34\17\2\u016e\u016c\3\2")
        buf.write("\2\2\u016f\u0172\3\2\2\2\u0170\u016e\3\2\2\2\u0170\u0171")
        buf.write("\3\2\2\2\u0171\37\3\2\2\2\u0172\u0170\3\2\2\2\u0173\u0178")
        buf.write("\5\36\20\2\u0174\u0175\7S\2\2\u0175\u0177\5\36\20\2\u0176")
        buf.write("\u0174\3\2\2\2\u0177\u017a\3\2\2\2\u0178\u0176\3\2\2\2")
        buf.write("\u0178\u0179\3\2\2\2\u0179!\3\2\2\2\u017a\u0178\3\2\2")
        buf.write("\2\u017b\u0180\5 \21\2\u017c\u017d\7W\2\2\u017d\u017f")
        buf.write("\5 \21\2\u017e\u017c\3\2\2\2\u017f\u0182\3\2\2\2\u0180")
        buf.write("\u017e\3\2\2\2\u0180\u0181\3\2\2\2\u0181#\3\2\2\2\u0182")
        buf.write("\u0180\3\2\2\2\u0183\u0188\5\"\22\2\u0184\u0185\7T\2\2")
        buf.write("\u0185\u0187\5\"\22\2\u0186\u0184\3\2\2\2\u0187\u018a")
        buf.write("\3\2\2\2\u0188\u0186\3\2\2\2\u0188\u0189\3\2\2\2\u0189")
        buf.write("%\3\2\2\2\u018a\u0188\3\2\2\2\u018b\u0190\5$\23\2\u018c")
        buf.write("\u018d\7U\2\2\u018d\u018f\5$\23\2\u018e\u018c\3\2\2\2")
        buf.write("\u018f\u0192\3\2\2\2\u0190\u018e\3\2\2\2\u0190\u0191\3")
        buf.write("\2\2\2\u0191\'\3\2\2\2\u0192\u0190\3\2\2\2\u0193\u0198")
        buf.write("\5&\24\2\u0194\u0195\7V\2\2\u0195\u0197\5&\24\2\u0196")
        buf.write("\u0194\3\2\2\2\u0197\u019a\3\2\2\2\u0198\u0196\3\2\2\2")
        buf.write("\u0198\u0199\3\2\2\2\u0199)\3\2\2\2\u019a\u0198\3\2\2")
        buf.write("\2\u019b\u01a1\5(\25\2\u019c\u019d\7Z\2\2\u019d\u019e")
        buf.write("\5\60\31\2\u019e\u019f\7[\2\2\u019f\u01a0\5*\26\2\u01a0")
        buf.write("\u01a2\3\2\2\2\u01a1\u019c\3\2\2\2\u01a1\u01a2\3\2\2\2")
        buf.write("\u01a2+\3\2\2\2\u01a3\u01aa\5*\26\2\u01a4\u01a5\5\20\t")
        buf.write("\2\u01a5\u01a6\5.\30\2\u01a6\u01a7\5,\27\2\u01a7\u01aa")
        buf.write("\3\2\2\2\u01a8\u01aa\7p\2\2\u01a9\u01a3\3\2\2\2\u01a9")
        buf.write("\u01a4\3\2\2\2\u01a9\u01a8\3\2\2\2\u01aa-\3\2\2\2\u01ab")
        buf.write("\u01ac\t\f\2\2\u01ac/\3\2\2\2\u01ad\u01b2\5,\27\2\u01ae")
        buf.write("\u01af\7]\2\2\u01af\u01b1\5,\27\2\u01b0\u01ae\3\2\2\2")
        buf.write("\u01b1\u01b4\3\2\2\2\u01b2\u01b0\3\2\2\2\u01b2\u01b3\3")
        buf.write("\2\2\2\u01b3\61\3\2\2\2\u01b4\u01b2\3\2\2\2\u01b5\u01b6")
        buf.write("\5*\26\2\u01b6\63\3\2\2\2\u01b7\u01b9\5\66\34\2\u01b8")
        buf.write("\u01ba\5@!\2\u01b9\u01b8\3\2\2\2\u01b9\u01ba\3\2\2\2\u01ba")
        buf.write("\u01bb\3\2\2\2\u01bb\u01bc\7\\\2\2\u01bc\u01bf\3\2\2\2")
        buf.write("\u01bd\u01bf\5\u0096L\2\u01be\u01b7\3\2\2\2\u01be\u01bd")
        buf.write("\3\2\2\2\u01bf\65\3\2\2\2\u01c0\u01c2\5> \2\u01c1\u01c0")
        buf.write("\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c1\3\2\2\2\u01c3")
        buf.write("\u01c4\3\2\2\2\u01c4\67\3\2\2\2\u01c5\u01c7\5<\37\2\u01c6")
        buf.write("\u01c5\3\2\2\2\u01c7\u01ca\3\2\2\2\u01c8\u01c6\3\2\2\2")
        buf.write("\u01c8\u01c9\3\2\2\2\u01c9\u01cb\3\2\2\2\u01ca\u01c8\3")
        buf.write("\2\2\2\u01cb\u01cf\5> \2\u01cc\u01ce\5<\37\2\u01cd\u01cc")
        buf.write("\3\2\2\2\u01ce\u01d1\3\2\2\2\u01cf\u01cd\3\2\2\2\u01cf")
        buf.write("\u01d0\3\2\2\2\u01d09\3\2\2\2\u01d1\u01cf\3\2\2\2\u01d2")
        buf.write("\u01d4\5> \2\u01d3\u01d2\3\2\2\2\u01d4\u01d5\3\2\2\2\u01d5")
        buf.write("\u01d3\3\2\2\2\u01d5\u01d6\3\2\2\2\u01d6;\3\2\2\2\u01d7")
        buf.write("\u01dc\5D#\2\u01d8\u01dc\5`\61\2\u01d9\u01dc\5b\62\2\u01da")
        buf.write("\u01dc\5d\63\2\u01db\u01d7\3\2\2\2\u01db\u01d8\3\2\2\2")
        buf.write("\u01db\u01d9\3\2\2\2\u01db\u01da\3\2\2\2\u01dc=\3\2\2")
        buf.write("\2\u01dd\u01e3\5D#\2\u01de\u01e3\5F$\2\u01df\u01e3\5`")
        buf.write("\61\2\u01e0\u01e3\5b\62\2\u01e1\u01e3\5d\63\2\u01e2\u01dd")
        buf.write("\3\2\2\2\u01e2\u01de\3\2\2\2\u01e2\u01df\3\2\2\2\u01e2")
        buf.write("\u01e0\3\2\2\2\u01e2\u01e1\3\2\2\2\u01e3?\3\2\2\2\u01e4")
        buf.write("\u01e9\5B\"\2\u01e5\u01e6\7]\2\2\u01e6\u01e8\5B\"\2\u01e7")
        buf.write("\u01e5\3\2\2\2\u01e8\u01eb\3\2\2\2\u01e9\u01e7\3\2\2\2")
        buf.write("\u01e9\u01ea\3\2\2\2\u01eaA\3\2\2\2\u01eb\u01e9\3\2\2")
        buf.write("\2\u01ec\u01ef\5f\64\2\u01ed\u01ee\7^\2\2\u01ee\u01f0")
        buf.write("\5\u008cG\2\u01ef\u01ed\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0")
        buf.write("C\3\2\2\2\u01f1\u01f2\t\r\2\2\u01f2E\3\2\2\2\u01f3\u01f5")
        buf.write("\b$\1\2\u01f4\u01f6\t\16\2\2\u01f5\u01f4\3\2\2\2\u01f6")
        buf.write("\u01f7\3\2\2\2\u01f7\u01f5\3\2\2\2\u01f7\u01f8\3\2\2\2")
        buf.write("\u01f8\u0207\3\2\2\2\u01f9\u01fa\7\3\2\2\u01fa\u01fb\7")
        buf.write("@\2\2\u01fb\u01fc\t\17\2\2\u01fc\u0207\7A\2\2\u01fd\u0207")
        buf.write("\5^\60\2\u01fe\u0207\5H%\2\u01ff\u0207\5V,\2\u0200\u0201")
        buf.write("\7\t\2\2\u0201\u0202\7@\2\2\u0202\u0203\5\62\32\2\u0203")
        buf.write("\u0204\7A\2\2\u0204\u0207\3\2\2\2\u0205\u0207\5\u008a")
        buf.write("F\2\u0206\u01f3\3\2\2\2\u0206\u01f9\3\2\2\2\u0206\u01fd")
        buf.write("\3\2\2\2\u0206\u01fe\3\2\2\2\u0206\u01ff\3\2\2\2\u0206")
        buf.write("\u0200\3\2\2\2\u0206\u0205\3\2\2\2\u0207\u020c\3\2\2\2")
        buf.write("\u0208\u0209\f\4\2\2\u0209\u020b\5x=\2\u020a\u0208\3\2")
        buf.write("\2\2\u020b\u020e\3\2\2\2\u020c\u020a\3\2\2\2\u020c\u020d")
        buf.write("\3\2\2\2\u020dG\3\2\2\2\u020e\u020c\3\2\2\2\u020f\u0211")
        buf.write("\5J&\2\u0210\u0212\7n\2\2\u0211\u0210\3\2\2\2\u0211\u0212")
        buf.write("\3\2\2\2\u0212\u0213\3\2\2\2\u0213\u0214\7D\2\2\u0214")
        buf.write("\u0215\5L\'\2\u0215\u0216\7E\2\2\u0216\u021b\3\2\2\2\u0217")
        buf.write("\u0218\5J&\2\u0218\u0219\7n\2\2\u0219\u021b\3\2\2\2\u021a")
        buf.write("\u020f\3\2\2\2\u021a\u0217\3\2\2\2\u021bI\3\2\2\2\u021c")
        buf.write("\u021d\t\20\2\2\u021dK\3\2\2\2\u021e\u0220\5N(\2\u021f")
        buf.write("\u021e\3\2\2\2\u0220\u0221\3\2\2\2\u0221\u021f\3\2\2\2")
        buf.write("\u0221\u0222\3\2\2\2\u0222M\3\2\2\2\u0223\u0225\5P)\2")
        buf.write("\u0224\u0226\5R*\2\u0225\u0224\3\2\2\2\u0225\u0226\3\2")
        buf.write("\2\2\u0226\u0227\3\2\2\2\u0227\u0228\7\\\2\2\u0228\u022b")
        buf.write("\3\2\2\2\u0229\u022b\5\u0096L\2\u022a\u0223\3\2\2\2\u022a")
        buf.write("\u0229\3\2\2\2\u022bO\3\2\2\2\u022c\u022f\5F$\2\u022d")
        buf.write("\u022f\5`\61\2\u022e\u022c\3\2\2\2\u022e\u022d\3\2\2\2")
        buf.write("\u022f\u0231\3\2\2\2\u0230\u0232\5P)\2\u0231\u0230\3\2")
        buf.write("\2\2\u0231\u0232\3\2\2\2\u0232Q\3\2\2\2\u0233\u0238\5")
        buf.write("T+\2\u0234\u0235\7]\2\2\u0235\u0237\5T+\2\u0236\u0234")
        buf.write("\3\2\2\2\u0237\u023a\3\2\2\2\u0238\u0236\3\2\2\2\u0238")
        buf.write("\u0239\3\2\2\2\u0239S\3\2\2\2\u023a\u0238\3\2\2\2\u023b")
        buf.write("\u0242\5f\64\2\u023c\u023e\5f\64\2\u023d\u023c\3\2\2\2")
        buf.write("\u023d\u023e\3\2\2\2\u023e\u023f\3\2\2\2\u023f\u0240\7")
        buf.write("[\2\2\u0240\u0242\5\62\32\2\u0241\u023b\3\2\2\2\u0241")
        buf.write("\u023d\3\2\2\2\u0242U\3\2\2\2\u0243\u0245\7\36\2\2\u0244")
        buf.write("\u0246\7n\2\2\u0245\u0244\3\2\2\2\u0245\u0246\3\2\2\2")
        buf.write("\u0246\u0247\3\2\2\2\u0247\u0248\7D\2\2\u0248\u024a\5")
        buf.write("X-\2\u0249\u024b\7]\2\2\u024a\u0249\3\2\2\2\u024a\u024b")
        buf.write("\3\2\2\2\u024b\u024c\3\2\2\2\u024c\u024d\7E\2\2\u024d")
        buf.write("\u0251\3\2\2\2\u024e\u024f\7\36\2\2\u024f\u0251\7n\2\2")
        buf.write("\u0250\u0243\3\2\2\2\u0250\u024e\3\2\2\2\u0251W\3\2\2")
        buf.write("\2\u0252\u0257\5Z.\2\u0253\u0254\7]\2\2\u0254\u0256\5")
        buf.write("Z.\2\u0255\u0253\3\2\2\2\u0256\u0259\3\2\2\2\u0257\u0255")
        buf.write("\3\2\2\2\u0257\u0258\3\2\2\2\u0258Y\3\2\2\2\u0259\u0257")
        buf.write("\3\2\2\2\u025a\u025d\5\\/\2\u025b\u025c\7^\2\2\u025c\u025e")
        buf.write("\5\62\32\2\u025d\u025b\3\2\2\2\u025d\u025e\3\2\2\2\u025e")
        buf.write("[\3\2\2\2\u025f\u0260\7n\2\2\u0260]\3\2\2\2\u0261\u0262")
        buf.write("\78\2\2\u0262\u0263\7@\2\2\u0263\u0264\5\u0084C\2\u0264")
        buf.write("\u0265\7A\2\2\u0265_\3\2\2\2\u0266\u0267\t\21\2\2\u0267")
        buf.write("a\3\2\2\2\u0268\u026f\t\22\2\2\u0269\u026f\5p9\2\u026a")
        buf.write("\u026b\7\f\2\2\u026b\u026c\7@\2\2\u026c\u026d\7n\2\2\u026d")
        buf.write("\u026f\7A\2\2\u026e\u0268\3\2\2\2\u026e\u0269\3\2\2\2")
        buf.write("\u026e\u026a\3\2\2\2\u026fc\3\2\2\2\u0270\u0271\7\66\2")
        buf.write("\2\u0271\u0274\7@\2\2\u0272\u0275\5\u0084C\2\u0273\u0275")
        buf.write("\5\62\32\2\u0274\u0272\3\2\2\2\u0274\u0273\3\2\2\2\u0275")
        buf.write("\u0276\3\2\2\2\u0276\u0277\7A\2\2\u0277e\3\2\2\2\u0278")
        buf.write("\u027a\5x=\2\u0279\u0278\3\2\2\2\u0279\u027a\3\2\2\2\u027a")
        buf.write("\u027b\3\2\2\2\u027b\u027f\5l\67\2\u027c\u027e\5n8\2\u027d")
        buf.write("\u027c\3\2\2\2\u027e\u0281\3\2\2\2\u027f\u027d\3\2\2\2")
        buf.write("\u027f\u0280\3\2\2\2\u0280g\3\2\2\2\u0281\u027f\3\2\2")
        buf.write("\2\u0282\u0284\5x=\2\u0283\u0282\3\2\2\2\u0283\u0284\3")
        buf.write("\2\2\2\u0284\u0285\3\2\2\2\u0285\u0289\5j\66\2\u0286\u0288")
        buf.write("\5n8\2\u0287\u0286\3\2\2\2\u0288\u028b\3\2\2\2\u0289\u0287")
        buf.write("\3\2\2\2\u0289\u028a\3\2\2\2\u028ai\3\2\2\2\u028b\u0289")
        buf.write("\3\2\2\2\u028c\u028d\5l\67\2\u028d\u028f\7@\2\2\u028e")
        buf.write("\u0290\5|?\2\u028f\u028e\3\2\2\2\u028f\u0290\3\2\2\2\u0290")
        buf.write("\u0291\3\2\2\2\u0291\u0292\7A\2\2\u0292\u029b\3\2\2\2")
        buf.write("\u0293\u0294\5l\67\2\u0294\u0296\7@\2\2\u0295\u0297\5")
        buf.write("\u0082B\2\u0296\u0295\3\2\2\2\u0296\u0297\3\2\2\2\u0297")
        buf.write("\u0298\3\2\2\2\u0298\u0299\7A\2\2\u0299\u029b\3\2\2\2")
        buf.write("\u029a\u028c\3\2\2\2\u029a\u0293\3\2\2\2\u029bk\3\2\2")
        buf.write("\2\u029c\u029d\b\67\1\2\u029d\u02ae\7n\2\2\u029e\u029f")
        buf.write("\7@\2\2\u029f\u02a0\5f\64\2\u02a0\u02a1\7A\2\2\u02a1\u02ae")
        buf.write("\3\2\2\2\u02a2\u02a3\7n\2\2\u02a3\u02a4\7[\2\2\u02a4\u02ae")
        buf.write("\7p\2\2\u02a5\u02a7\7@\2\2\u02a6\u02a8\5F$\2\u02a7\u02a6")
        buf.write("\3\2\2\2\u02a7\u02a8\3\2\2\2\u02a8\u02a9\3\2\2\2\u02a9")
        buf.write("\u02aa\5x=\2\u02aa\u02ab\5l\67\2\u02ab\u02ac\7A\2\2\u02ac")
        buf.write("\u02ae\3\2\2\2\u02ad\u029c\3\2\2\2\u02ad\u029e\3\2\2\2")
        buf.write("\u02ad\u02a2\3\2\2\2\u02ad\u02a5\3\2\2\2\u02ae\u02dc\3")
        buf.write("\2\2\2\u02af\u02b0\f\n\2\2\u02b0\u02b2\7B\2\2\u02b1\u02b3")
        buf.write("\5z>\2\u02b2\u02b1\3\2\2\2\u02b2\u02b3\3\2\2\2\u02b3\u02b5")
        buf.write("\3\2\2\2\u02b4\u02b6\5,\27\2\u02b5\u02b4\3\2\2\2\u02b5")
        buf.write("\u02b6\3\2\2\2\u02b6\u02b7\3\2\2\2\u02b7\u02db\7C\2\2")
        buf.write("\u02b8\u02b9\f\t\2\2\u02b9\u02ba\7B\2\2\u02ba\u02bc\7")
        buf.write("-\2\2\u02bb\u02bd\5z>\2\u02bc\u02bb\3\2\2\2\u02bc\u02bd")
        buf.write("\3\2\2\2\u02bd\u02be\3\2\2\2\u02be\u02bf\5,\27\2\u02bf")
        buf.write("\u02c0\7C\2\2\u02c0\u02db\3\2\2\2\u02c1\u02c2\f\b\2\2")
        buf.write("\u02c2\u02c3\7B\2\2\u02c3\u02c4\5z>\2\u02c4\u02c5\7-\2")
        buf.write("\2\u02c5\u02c6\5,\27\2\u02c6\u02c7\7C\2\2\u02c7\u02db")
        buf.write("\3\2\2\2\u02c8\u02c9\f\7\2\2\u02c9\u02cb\7B\2\2\u02ca")
        buf.write("\u02cc\5z>\2\u02cb\u02ca\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc")
        buf.write("\u02cd\3\2\2\2\u02cd\u02ce\7P\2\2\u02ce\u02db\7C\2\2\u02cf")
        buf.write("\u02d0\f\6\2\2\u02d0\u02d1\7@\2\2\u02d1\u02d2\5|?\2\u02d2")
        buf.write("\u02d3\7A\2\2\u02d3\u02db\3\2\2\2\u02d4\u02d5\f\5\2\2")
        buf.write("\u02d5\u02d7\7@\2\2\u02d6\u02d8\5\u0082B\2\u02d7\u02d6")
        buf.write("\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8\u02d9\3\2\2\2\u02d9")
        buf.write("\u02db\7A\2\2\u02da\u02af\3\2\2\2\u02da\u02b8\3\2\2\2")
        buf.write("\u02da\u02c1\3\2\2\2\u02da\u02c8\3\2\2\2\u02da\u02cf\3")
        buf.write("\2\2\2\u02da\u02d4\3\2\2\2\u02db\u02de\3\2\2\2\u02dc\u02da")
        buf.write("\3\2\2\2\u02dc\u02dd\3\2\2\2\u02ddm\3\2\2\2\u02de\u02dc")
        buf.write("\3\2\2\2\u02df\u02e0\7\r\2\2\u02e0\u02e2\7@\2\2\u02e1")
        buf.write("\u02e3\7q\2\2\u02e2\u02e1\3\2\2\2\u02e3\u02e4\3\2\2\2")
        buf.write("\u02e4\u02e2\3\2\2\2\u02e4\u02e5\3\2\2\2\u02e5\u02e6\3")
        buf.write("\2\2\2\u02e6\u02e9\7A\2\2\u02e7\u02e9\5p9\2\u02e8\u02df")
        buf.write("\3\2\2\2\u02e8\u02e7\3\2\2\2\u02e9o\3\2\2\2\u02ea\u02eb")
        buf.write("\7\16\2\2\u02eb\u02ec\7@\2\2\u02ec\u02ed\7@\2\2\u02ed")
        buf.write("\u02ee\5r:\2\u02ee\u02ef\7A\2\2\u02ef\u02f0\7A\2\2\u02f0")
        buf.write("q\3\2\2\2\u02f1\u02f3\5t;\2\u02f2\u02f1\3\2\2\2\u02f2")
        buf.write("\u02f3\3\2\2\2\u02f3\u02fa\3\2\2\2\u02f4\u02f6\7]\2\2")
        buf.write("\u02f5\u02f7\5t;\2\u02f6\u02f5\3\2\2\2\u02f6\u02f7\3\2")
        buf.write("\2\2\u02f7\u02f9\3\2\2\2\u02f8\u02f4\3\2\2\2\u02f9\u02fc")
        buf.write("\3\2\2\2\u02fa\u02f8\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb")
        buf.write("s\3\2\2\2\u02fc\u02fa\3\2\2\2\u02fd\u0303\n\23\2\2\u02fe")
        buf.write("\u0300\7@\2\2\u02ff\u0301\5\16\b\2\u0300\u02ff\3\2\2\2")
        buf.write("\u0300\u0301\3\2\2\2\u0301\u0302\3\2\2\2\u0302\u0304\7")
        buf.write("A\2\2\u0303\u02fe\3\2\2\2\u0303\u0304\3\2\2\2\u0304u\3")
        buf.write("\2\2\2\u0305\u030b\n\24\2\2\u0306\u0307\7@\2\2\u0307\u0308")
        buf.write("\5v<\2\u0308\u0309\7A\2\2\u0309\u030b\3\2\2\2\u030a\u0305")
        buf.write("\3\2\2\2\u030a\u0306\3\2\2\2\u030b\u030e\3\2\2\2\u030c")
        buf.write("\u030a\3\2\2\2\u030c\u030d\3\2\2\2\u030dw\3\2\2\2\u030e")
        buf.write("\u030c\3\2\2\2\u030f\u0311\t\25\2\2\u0310\u0312\5z>\2")
        buf.write("\u0311\u0310\3\2\2\2\u0311\u0312\3\2\2\2\u0312\u0314\3")
        buf.write("\2\2\2\u0313\u030f\3\2\2\2\u0314\u0315\3\2\2\2\u0315\u0313")
        buf.write("\3\2\2\2\u0315\u0316\3\2\2\2\u0316y\3\2\2\2\u0317\u0319")
        buf.write("\5`\61\2\u0318\u0317\3\2\2\2\u0319\u031a\3\2\2\2\u031a")
        buf.write("\u0318\3\2\2\2\u031a\u031b\3\2\2\2\u031b{\3\2\2\2\u031c")
        buf.write("\u031f\5~@\2\u031d\u031e\7]\2\2\u031e\u0320\7m\2\2\u031f")
        buf.write("\u031d\3\2\2\2\u031f\u0320\3\2\2\2\u0320}\3\2\2\2\u0321")
        buf.write("\u0326\5\u0080A\2\u0322\u0323\7]\2\2\u0323\u0325\5\u0080")
        buf.write("A\2\u0324\u0322\3\2\2\2\u0325\u0328\3\2\2\2\u0326\u0324")
        buf.write("\3\2\2\2\u0326\u0327\3\2\2\2\u0327\177\3\2\2\2\u0328\u0326")
        buf.write("\3\2\2\2\u0329\u032a\5\66\34\2\u032a\u032b\5f\64\2\u032b")
        buf.write("\u0331\3\2\2\2\u032c\u032e\5:\36\2\u032d\u032f\5\u0086")
        buf.write("D\2\u032e\u032d\3\2\2\2\u032e\u032f\3\2\2\2\u032f\u0331")
        buf.write("\3\2\2\2\u0330\u0329\3\2\2\2\u0330\u032c\3\2\2\2\u0331")
        buf.write("\u0081\3\2\2\2\u0332\u0337\7n\2\2\u0333\u0334\7]\2\2\u0334")
        buf.write("\u0336\7n\2\2\u0335\u0333\3\2\2\2\u0336\u0339\3\2\2\2")
        buf.write("\u0337\u0335\3\2\2\2\u0337\u0338\3\2\2\2\u0338\u0083\3")
        buf.write("\2\2\2\u0339\u0337\3\2\2\2\u033a\u033c\5P)\2\u033b\u033d")
        buf.write("\5\u0086D\2\u033c\u033b\3\2\2\2\u033c\u033d\3\2\2\2\u033d")
        buf.write("\u0085\3\2\2\2\u033e\u034a\5x=\2\u033f\u0341\5x=\2\u0340")
        buf.write("\u033f\3\2\2\2\u0340\u0341\3\2\2\2\u0341\u0342\3\2\2\2")
        buf.write("\u0342\u0346\5\u0088E\2\u0343\u0345\5n8\2\u0344\u0343")
        buf.write("\3\2\2\2\u0345\u0348\3\2\2\2\u0346\u0344\3\2\2\2\u0346")
        buf.write("\u0347\3\2\2\2\u0347\u034a\3\2\2\2\u0348\u0346\3\2\2\2")
        buf.write("\u0349\u033e\3\2\2\2\u0349\u0340\3\2\2\2\u034a\u0087\3")
        buf.write("\2\2\2\u034b\u034c\bE\1\2\u034c\u034d\7@\2\2\u034d\u034e")
        buf.write("\5\u0086D\2\u034e\u0352\7A\2\2\u034f\u0351\5n8\2\u0350")
        buf.write("\u034f\3\2\2\2\u0351\u0354\3\2\2\2\u0352\u0350\3\2\2\2")
        buf.write("\u0352\u0353\3\2\2\2\u0353\u037a\3\2\2\2\u0354\u0352\3")
        buf.write("\2\2\2\u0355\u0357\7B\2\2\u0356\u0358\5z>\2\u0357\u0356")
        buf.write("\3\2\2\2\u0357\u0358\3\2\2\2\u0358\u035a\3\2\2\2\u0359")
        buf.write("\u035b\5,\27\2\u035a\u0359\3\2\2\2\u035a\u035b\3\2\2\2")
        buf.write("\u035b\u035c\3\2\2\2\u035c\u037a\7C\2\2\u035d\u035e\7")
        buf.write("B\2\2\u035e\u0360\7-\2\2\u035f\u0361\5z>\2\u0360\u035f")
        buf.write("\3\2\2\2\u0360\u0361\3\2\2\2\u0361\u0362\3\2\2\2\u0362")
        buf.write("\u0363\5,\27\2\u0363\u0364\7C\2\2\u0364\u037a\3\2\2\2")
        buf.write("\u0365\u0366\7B\2\2\u0366\u0367\5z>\2\u0367\u0368\7-\2")
        buf.write("\2\u0368\u0369\5,\27\2\u0369\u036a\7C\2\2\u036a\u037a")
        buf.write("\3\2\2\2\u036b\u036c\7B\2\2\u036c\u036d\7P\2\2\u036d\u037a")
        buf.write("\7C\2\2\u036e\u0370\7@\2\2\u036f\u0371\5|?\2\u0370\u036f")
        buf.write("\3\2\2\2\u0370\u0371\3\2\2\2\u0371\u0372\3\2\2\2\u0372")
        buf.write("\u0376\7A\2\2\u0373\u0375\5n8\2\u0374\u0373\3\2\2\2\u0375")
        buf.write("\u0378\3\2\2\2\u0376\u0374\3\2\2\2\u0376\u0377\3\2\2\2")
        buf.write("\u0377\u037a\3\2\2\2\u0378\u0376\3\2\2\2\u0379\u034b\3")
        buf.write("\2\2\2\u0379\u0355\3\2\2\2\u0379\u035d\3\2\2\2\u0379\u0365")
        buf.write("\3\2\2\2\u0379\u036b\3\2\2\2\u0379\u036e\3\2\2\2\u037a")
        buf.write("\u03a6\3\2\2\2\u037b\u037c\f\7\2\2\u037c\u037e\7B\2\2")
        buf.write("\u037d\u037f\5z>\2\u037e\u037d\3\2\2\2\u037e\u037f\3\2")
        buf.write("\2\2\u037f\u0381\3\2\2\2\u0380\u0382\5,\27\2\u0381\u0380")
        buf.write("\3\2\2\2\u0381\u0382\3\2\2\2\u0382\u0383\3\2\2\2\u0383")
        buf.write("\u03a5\7C\2\2\u0384\u0385\f\6\2\2\u0385\u0386\7B\2\2\u0386")
        buf.write("\u0388\7-\2\2\u0387\u0389\5z>\2\u0388\u0387\3\2\2\2\u0388")
        buf.write("\u0389\3\2\2\2\u0389\u038a\3\2\2\2\u038a\u038b\5,\27\2")
        buf.write("\u038b\u038c\7C\2\2\u038c\u03a5\3\2\2\2\u038d\u038e\f")
        buf.write("\5\2\2\u038e\u038f\7B\2\2\u038f\u0390\5z>\2\u0390\u0391")
        buf.write("\7-\2\2\u0391\u0392\5,\27\2\u0392\u0393\7C\2\2\u0393\u03a5")
        buf.write("\3\2\2\2\u0394\u0395\f\4\2\2\u0395\u0396\7B\2\2\u0396")
        buf.write("\u0397\7P\2\2\u0397\u03a5\7C\2\2\u0398\u0399\f\3\2\2\u0399")
        buf.write("\u039b\7@\2\2\u039a\u039c\5|?\2\u039b\u039a\3\2\2\2\u039b")
        buf.write("\u039c\3\2\2\2\u039c\u039d\3\2\2\2\u039d\u03a1\7A\2\2")
        buf.write("\u039e\u03a0\5n8\2\u039f\u039e\3\2\2\2\u03a0\u03a3\3\2")
        buf.write("\2\2\u03a1\u039f\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2\u03a5")
        buf.write("\3\2\2\2\u03a3\u03a1\3\2\2\2\u03a4\u037b\3\2\2\2\u03a4")
        buf.write("\u0384\3\2\2\2\u03a4\u038d\3\2\2\2\u03a4\u0394\3\2\2\2")
        buf.write("\u03a4\u0398\3\2\2\2\u03a5\u03a8\3\2\2\2\u03a6\u03a4\3")
        buf.write("\2\2\2\u03a6\u03a7\3\2\2\2\u03a7\u0089\3\2\2\2\u03a8\u03a6")
        buf.write("\3\2\2\2\u03a9\u03aa\7n\2\2\u03aa\u008b\3\2\2\2\u03ab")
        buf.write("\u03b6\5,\27\2\u03ac\u03ad\7D\2\2\u03ad\u03af\5\u008e")
        buf.write("H\2\u03ae\u03b0\7]\2\2\u03af\u03ae\3\2\2\2\u03af\u03b0")
        buf.write("\3\2\2\2\u03b0\u03b1\3\2\2\2\u03b1\u03b2\7E\2\2\u03b2")
        buf.write("\u03b6\3\2\2\2\u03b3\u03b4\7D\2\2\u03b4\u03b6\7E\2\2\u03b5")
        buf.write("\u03ab\3\2\2\2\u03b5\u03ac\3\2\2\2\u03b5\u03b3\3\2\2\2")
        buf.write("\u03b6\u008d\3\2\2\2\u03b7\u03b9\5\u0090I\2\u03b8\u03b7")
        buf.write("\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9\u03ba\3\2\2\2\u03ba")
        buf.write("\u03c2\5\u008cG\2\u03bb\u03bd\7]\2\2\u03bc\u03be\5\u0090")
        buf.write("I\2\u03bd\u03bc\3\2\2\2\u03bd\u03be\3\2\2\2\u03be\u03bf")
        buf.write("\3\2\2\2\u03bf\u03c1\5\u008cG\2\u03c0\u03bb\3\2\2\2\u03c1")
        buf.write("\u03c4\3\2\2\2\u03c2\u03c0\3\2\2\2\u03c2\u03c3\3\2\2\2")
        buf.write("\u03c3\u008f\3\2\2\2\u03c4\u03c2\3\2\2\2\u03c5\u03c6\5")
        buf.write("\u0092J\2\u03c6\u03c7\7^\2\2\u03c7\u0091\3\2\2\2\u03c8")
        buf.write("\u03ca\5\u0094K\2\u03c9\u03c8\3\2\2\2\u03ca\u03cb\3\2")
        buf.write("\2\2\u03cb\u03c9\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u0093")
        buf.write("\3\2\2\2\u03cd\u03ce\7B\2\2\u03ce\u03cf\5\62\32\2\u03cf")
        buf.write("\u03d0\7C\2\2\u03d0\u03d4\3\2\2\2\u03d1\u03d2\7l\2\2\u03d2")
        buf.write("\u03d4\7n\2\2\u03d3\u03cd\3\2\2\2\u03d3\u03d1\3\2\2\2")
        buf.write("\u03d4\u0095\3\2\2\2\u03d5\u03d6\7>\2\2\u03d6\u03d7\7")
        buf.write("@\2\2\u03d7\u03d8\5\62\32\2\u03d8\u03da\7]\2\2\u03d9\u03db")
        buf.write("\7q\2\2\u03da\u03d9\3\2\2\2\u03db\u03dc\3\2\2\2\u03dc")
        buf.write("\u03da\3\2\2\2\u03dc\u03dd\3\2\2\2\u03dd\u03de\3\2\2\2")
        buf.write("\u03de\u03df\7A\2\2\u03df\u03e0\7\\\2\2\u03e0\u0097\3")
        buf.write("\2\2\2\u03e1\u0408\5\u009aN\2\u03e2\u0408\5\u009cO\2\u03e3")
        buf.write("\u0408\5\u00a2R\2\u03e4\u0408\5\u00a4S\2\u03e5\u0408\5")
        buf.write("\u00a8U\2\u03e6\u0408\5\u00b0Y\2\u03e7\u0408\5\u00a6T")
        buf.write("\2\u03e8\u03e9\t\26\2\2\u03e9\u03ea\t\27\2\2\u03ea\u03f3")
        buf.write("\7@\2\2\u03eb\u03f0\5(\25\2\u03ec\u03ed\7]\2\2\u03ed\u03ef")
        buf.write("\5(\25\2\u03ee\u03ec\3\2\2\2\u03ef\u03f2\3\2\2\2\u03f0")
        buf.write("\u03ee\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1\u03f4\3\2\2\2")
        buf.write("\u03f2\u03f0\3\2\2\2\u03f3\u03eb\3\2\2\2\u03f3\u03f4\3")
        buf.write("\2\2\2\u03f4\u0402\3\2\2\2\u03f5\u03fe\7[\2\2\u03f6\u03fb")
        buf.write("\5(\25\2\u03f7\u03f8\7]\2\2\u03f8\u03fa\5(\25\2\u03f9")
        buf.write("\u03f7\3\2\2\2\u03fa\u03fd\3\2\2\2\u03fb\u03f9\3\2\2\2")
        buf.write("\u03fb\u03fc\3\2\2\2\u03fc\u03ff\3\2\2\2\u03fd\u03fb\3")
        buf.write("\2\2\2\u03fe\u03f6\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u0401")
        buf.write("\3\2\2\2\u0400\u03f5\3\2\2\2\u0401\u0404\3\2\2\2\u0402")
        buf.write("\u0400\3\2\2\2\u0402\u0403\3\2\2\2\u0403\u0405\3\2\2\2")
        buf.write("\u0404\u0402\3\2\2\2\u0405\u0406\7A\2\2\u0406\u0408\7")
        buf.write("\\\2\2\u0407\u03e1\3\2\2\2\u0407\u03e2\3\2\2\2\u0407\u03e3")
        buf.write("\3\2\2\2\u0407\u03e4\3\2\2\2\u0407\u03e5\3\2\2\2\u0407")
        buf.write("\u03e6\3\2\2\2\u0407\u03e7\3\2\2\2\u0407\u03e8\3\2\2\2")
        buf.write("\u0408\u0099\3\2\2\2\u0409\u040a\7n\2\2\u040a\u040b\7")
        buf.write("[\2\2\u040b\u0415\5\u009eP\2\u040c\u040d\7\26\2\2\u040d")
        buf.write("\u040e\5\62\32\2\u040e\u040f\7[\2\2\u040f\u0410\5\u009e")
        buf.write("P\2\u0410\u0415\3\2\2\2\u0411\u0412\7\32\2\2\u0412\u0413")
        buf.write("\7[\2\2\u0413\u0415\5\u009eP\2\u0414\u0409\3\2\2\2\u0414")
        buf.write("\u040c\3\2\2\2\u0414\u0411\3\2\2\2\u0415\u009b\3\2\2\2")
        buf.write("\u0416\u0418\7D\2\2\u0417\u0419\5\u009eP\2\u0418\u0417")
        buf.write("\3\2\2\2\u0418\u0419\3\2\2\2\u0419\u041a\3\2\2\2\u041a")
        buf.write("\u041b\7E\2\2\u041b\u009d\3\2\2\2\u041c\u041e\5\u00a0")
        buf.write("Q\2\u041d\u041c\3\2\2\2\u041e\u041f\3\2\2\2\u041f\u041d")
        buf.write("\3\2\2\2\u041f\u0420\3\2\2\2\u0420\u009f\3\2\2\2\u0421")
        buf.write("\u0424\5\64\33\2\u0422\u0424\5\u0098M\2\u0423\u0421\3")
        buf.write("\2\2\2\u0423\u0422\3\2\2\2\u0424\u00a1\3\2\2\2\u0425\u0427")
        buf.write("\5\60\31\2\u0426\u0425\3\2\2\2\u0426\u0427\3\2\2\2\u0427")
        buf.write("\u0428\3\2\2\2\u0428\u0429\7\\\2\2\u0429\u00a3\3\2\2\2")
        buf.write("\u042a\u042b\7#\2\2\u042b\u042c\7@\2\2\u042c\u042d\5\60")
        buf.write("\31\2\u042d\u042e\7A\2\2\u042e\u0431\5\u0098M\2\u042f")
        buf.write("\u0430\7\35\2\2\u0430\u0432\5\u0098M\2\u0431\u042f\3\2")
        buf.write("\2\2\u0431\u0432\3\2\2\2\u0432\u043a\3\2\2\2\u0433\u0434")
        buf.write("\7/\2\2\u0434\u0435\7@\2\2\u0435\u0436\5\60\31\2\u0436")
        buf.write("\u0437\7A\2\2\u0437\u0438\5\u0098M\2\u0438\u043a\3\2\2")
        buf.write("\2\u0439\u042a\3\2\2\2\u0439\u0433\3\2\2\2\u043a\u00a5")
        buf.write("\3\2\2\2\u043b\u043c\7\21\2\2\u043c\u043d\7n\2\2\u043d")
        buf.write("\u0440\5\u009eP\2\u043e\u043f\7\22\2\2\u043f\u0441\5\u009e")
        buf.write("P\2\u0440\u043e\3\2\2\2\u0440\u0441\3\2\2\2\u0441\u0442")
        buf.write("\3\2\2\2\u0442\u0443\7\23\2\2\u0443\u00a7\3\2\2\2\u0444")
        buf.write("\u0445\7\65\2\2\u0445\u0446\7@\2\2\u0446\u0447\5\60\31")
        buf.write("\2\u0447\u0448\7A\2\2\u0448\u0449\5\u0098M\2\u0449\u0459")
        buf.write("\3\2\2\2\u044a\u044b\7\33\2\2\u044b\u044c\5\u0098M\2\u044c")
        buf.write("\u044d\7\65\2\2\u044d\u044e\7@\2\2\u044e\u044f\5\60\31")
        buf.write("\2\u044f\u0450\7A\2\2\u0450\u0451\7\\\2\2\u0451\u0459")
        buf.write("\3\2\2\2\u0452\u0453\7!\2\2\u0453\u0454\7@\2\2\u0454\u0455")
        buf.write("\5\u00aaV\2\u0455\u0456\7A\2\2\u0456\u0457\5\u0098M\2")
        buf.write("\u0457\u0459\3\2\2\2\u0458\u0444\3\2\2\2\u0458\u044a\3")
        buf.write("\2\2\2\u0458\u0452\3\2\2\2\u0459\u00a9\3\2\2\2\u045a\u045f")
        buf.write("\5\u00acW\2\u045b\u045d\5\60\31\2\u045c\u045b\3\2\2\2")
        buf.write("\u045c\u045d\3\2\2\2\u045d\u045f\3\2\2\2\u045e\u045a\3")
        buf.write("\2\2\2\u045e\u045c\3\2\2\2\u045f\u0460\3\2\2\2\u0460\u0462")
        buf.write("\7\\\2\2\u0461\u0463\5\u00aeX\2\u0462\u0461\3\2\2\2\u0462")
        buf.write("\u0463\3\2\2\2\u0463\u0464\3\2\2\2\u0464\u0466\7\\\2\2")
        buf.write("\u0465\u0467\5\u00aeX\2\u0466\u0465\3\2\2\2\u0466\u0467")
        buf.write("\3\2\2\2\u0467\u00ab\3\2\2\2\u0468\u046a\5\66\34\2\u0469")
        buf.write("\u046b\5@!\2\u046a\u0469\3\2\2\2\u046a\u046b\3\2\2\2\u046b")
        buf.write("\u00ad\3\2\2\2\u046c\u0471\5,\27\2\u046d\u046e\7]\2\2")
        buf.write("\u046e\u0470\5,\27\2\u046f\u046d\3\2\2\2\u0470\u0473\3")
        buf.write("\2\2\2\u0471\u046f\3\2\2\2\u0471\u0472\3\2\2\2\u0472\u00af")
        buf.write("\3\2\2\2\u0473\u0471\3\2\2\2\u0474\u0475\7\"\2\2\u0475")
        buf.write("\u047e\7n\2\2\u0476\u047e\t\30\2\2\u0477\u0479\7)\2\2")
        buf.write("\u0478\u047a\5\60\31\2\u0479\u0478\3\2\2\2\u0479\u047a")
        buf.write("\3\2\2\2\u047a\u047e\3\2\2\2\u047b\u047c\7\"\2\2\u047c")
        buf.write("\u047e\5\20\t\2\u047d\u0474\3\2\2\2\u047d\u0476\3\2\2")
        buf.write("\2\u047d\u0477\3\2\2\2\u047d\u047b\3\2\2\2\u047e\u047f")
        buf.write("\3\2\2\2\u047f\u0480\7\\\2\2\u0480\u00b1\3\2\2\2\u0481")
        buf.write("\u0483\5\u00b4[\2\u0482\u0481\3\2\2\2\u0482\u0483\3\2")
        buf.write("\2\2\u0483\u0484\3\2\2\2\u0484\u0485\7\2\2\3\u0485\u00b3")
        buf.write("\3\2\2\2\u0486\u0488\5\u00b6\\\2\u0487\u0486\3\2\2\2\u0488")
        buf.write("\u0489\3\2\2\2\u0489\u0487\3\2\2\2\u0489\u048a\3\2\2\2")
        buf.write("\u048a\u00b5\3\2\2\2\u048b\u0491\5\u00b8]\2\u048c\u0491")
        buf.write("\5\u00ba^\2\u048d\u0491\5\64\33\2\u048e\u0491\5\u00c0")
        buf.write("a\2\u048f\u0491\7\\\2\2\u0490\u048b\3\2\2\2\u0490\u048c")
        buf.write("\3\2\2\2\u0490\u048d\3\2\2\2\u0490\u048e\3\2\2\2\u0490")
        buf.write("\u048f\3\2\2\2\u0491\u00b7\3\2\2\2\u0492\u0494\n\31\2")
        buf.write("\2\u0493\u0495\58\35\2\u0494\u0493\3\2\2\2\u0494\u0495")
        buf.write("\3\2\2\2\u0495\u0496\3\2\2\2\u0496\u0498\5h\65\2\u0497")
        buf.write("\u0499\5\u00c2b\2\u0498\u0497\3\2\2\2\u0498\u0499\3\2")
        buf.write("\2\2\u0499\u049a\3\2\2\2\u049a\u049b\7\\\2\2\u049b\u00b9")
        buf.write("\3\2\2\2\u049c\u049e\58\35\2\u049d\u049c\3\2\2\2\u049d")
        buf.write("\u049e\3\2\2\2\u049e\u049f\3\2\2\2\u049f\u04a1\5f\64\2")
        buf.write("\u04a0\u04a2\5\u00c2b\2\u04a1\u04a0\3\2\2\2\u04a1\u04a2")
        buf.write("\3\2\2\2\u04a2\u04a3\3\2\2\2\u04a3\u04a4\5\u009cO\2\u04a4")
        buf.write("\u00bb\3\2\2\2\u04a5\u04a7\7n\2\2\u04a6\u04a5\3\2\2\2")
        buf.write("\u04a7\u04a8\3\2\2\2\u04a8\u04a6\3\2\2\2\u04a8\u04a9\3")
        buf.write("\2\2\2\u04a9\u04ad\3\2\2\2\u04aa\u04ad\7q\2\2\u04ab\u04ad")
        buf.write("\7o\2\2\u04ac\u04a6\3\2\2\2\u04ac\u04aa\3\2\2\2\u04ac")
        buf.write("\u04ab\3\2\2\2\u04ad\u00bd\3\2\2\2\u04ae\u04b3\5\u00bc")
        buf.write("_\2\u04af\u04b0\7]\2\2\u04b0\u04b2\5\u00bc_\2\u04b1\u04af")
        buf.write("\3\2\2\2\u04b2\u04b5\3\2\2\2\u04b3\u04b1\3\2\2\2\u04b3")
        buf.write("\u04b4\3\2\2\2\u04b4\u00bf\3\2\2\2\u04b5\u04b3\3\2\2\2")
        buf.write("\u04b6\u04b9\5l\67\2\u04b7\u04b9\7n\2\2\u04b8\u04b6\3")
        buf.write("\2\2\2\u04b8\u04b7\3\2\2\2\u04b9\u04ba\3\2\2\2\u04ba\u04bc")
        buf.write("\7@\2\2\u04bb\u04bd\5\u00be`\2\u04bc\u04bb\3\2\2\2\u04bc")
        buf.write("\u04bd\3\2\2\2\u04bd\u04be\3\2\2\2\u04be\u04c0\7A\2\2")
        buf.write("\u04bf\u04c1\7\\\2\2\u04c0\u04bf\3\2\2\2\u04c0\u04c1\3")
        buf.write("\2\2\2\u04c1\u00c1\3\2\2\2\u04c2\u04c4\5\64\33\2\u04c3")
        buf.write("\u04c2\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5\u04c3\3\2\2\2")
        buf.write("\u04c5\u04c6\3\2\2\2\u04c6\u00c3\3\2\2\2\u009e\u00c9\u00d1")
        buf.write("\u00e5\u00f3\u00f8\u00ff\u0107\u010b\u0113\u0119\u011b")
        buf.write("\u0120\u0127\u012d\u013b\u0140\u0149\u0150\u0158\u0160")
        buf.write("\u0168\u0170\u0178\u0180\u0188\u0190\u0198\u01a1\u01a9")
        buf.write("\u01b2\u01b9\u01be\u01c3\u01c8\u01cf\u01d5\u01db\u01e2")
        buf.write("\u01e9\u01ef\u01f7\u0206\u020c\u0211\u021a\u0221\u0225")
        buf.write("\u022a\u022e\u0231\u0238\u023d\u0241\u0245\u024a\u0250")
        buf.write("\u0257\u025d\u026e\u0274\u0279\u027f\u0283\u0289\u028f")
        buf.write("\u0296\u029a\u02a7\u02ad\u02b2\u02b5\u02bc\u02cb\u02d7")
        buf.write("\u02da\u02dc\u02e4\u02e8\u02f2\u02f6\u02fa\u0300\u0303")
        buf.write("\u030a\u030c\u0311\u0315\u031a\u031f\u0326\u032e\u0330")
        buf.write("\u0337\u033c\u0340\u0346\u0349\u0352\u0357\u035a\u0360")
        buf.write("\u0370\u0376\u0379\u037e\u0381\u0388\u039b\u03a1\u03a4")
        buf.write("\u03a6\u03af\u03b5\u03b8\u03bd\u03c2\u03cb\u03d3\u03dc")
        buf.write("\u03f0\u03f3\u03fb\u03fe\u0402\u0407\u0414\u0418\u041f")
        buf.write("\u0423\u0426\u0431\u0439\u0440\u0458\u045c\u045e\u0462")
        buf.write("\u0466\u046a\u0471\u0479\u047d\u0482\u0489\u0490\u0494")
        buf.write("\u0498\u049d\u04a1\u04a8\u04ac\u04b3\u04b8\u04bc\u04c0")
        buf.write("\u04c5")
        return buf.getvalue()


class CParser ( Parser ):

    grammarFileName = "C.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'__extension__'", "'__builtin_va_arg'", 
                     "'__builtin_offsetof'", "'__m128'", "'__m128d'", "'__m128i'", 
                     "'__typeof__'", "'__inline__'", "'__stdcall'", "'__declspec'", 
                     "'__asm'", "'__attribute__'", "'__asm__'", "'__volatile__'", 
                     "'#ifdef'", "'#else'", "'#endif'", "'auto'", "'break'", 
                     "'case'", "'char'", "'const'", "'continue'", "'default'", 
                     "'do'", "'double'", "'else'", "'enum'", "'extern'", 
                     "'float'", "'for'", "'goto'", "'if'", "'inline'", "'int'", 
                     "'long'", "'register'", "'restrict'", "'return'", "'short'", 
                     "'signed'", "'sizeof'", "'static'", "'struct'", "'switch'", 
                     "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", 
                     "'while'", "'_Alignas'", "'_Alignof'", "'_Atomic'", 
                     "'_Bool'", "'_Complex'", "'_Generic'", "'_Imaginary'", 
                     "'_Noreturn'", "'_Static_assert'", "'_Thread_local'", 
                     "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'<='", 
                     "'>'", "'>='", "'<<'", "'>>'", "'+'", "'++'", "'-'", 
                     "'--'", "'*'", "'/'", "'%'", "'&'", "'|'", "'&&'", 
                     "'||'", "'^'", "'!'", "'~'", "'?'", "':'", "';'", "','", 
                     "'='", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", 
                     "'>>='", "'&='", "'^='", "'|='", "'=='", "'!='", "'->'", 
                     "'.'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "Auto", "Break", "Case", 
                      "Char", "Const", "Continue", "Default", "Do", "Double", 
                      "Else", "Enum", "Extern", "Float", "For", "Goto", 
                      "If", "Inline", "Int", "Long", "Register", "Restrict", 
                      "Return", "Short", "Signed", "Sizeof", "Static", "Struct", 
                      "Switch", "Typedef", "Union", "Unsigned", "Void", 
                      "Volatile", "While", "Alignas", "Alignof", "Atomic", 
                      "Bool", "Complex", "Generic", "Imaginary", "Noreturn", 
                      "StaticAssert", "ThreadLocal", "LeftParen", "RightParen", 
                      "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", 
                      "Less", "LessEqual", "Greater", "GreaterEqual", "LeftShift", 
                      "RightShift", "Plus", "PlusPlus", "Minus", "MinusMinus", 
                      "Star", "Div", "Mod", "And", "Or", "AndAnd", "OrOr", 
                      "Caret", "Not", "Tilde", "Question", "Colon", "Semi", 
                      "Comma", "Assign", "StarAssign", "DivAssign", "ModAssign", 
                      "PlusAssign", "MinusAssign", "LeftShiftAssign", "RightShiftAssign", 
                      "AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual", 
                      "Arrow", "Dot", "Ellipsis", "Identifier", "Constant", 
                      "DigitSequence", "StringLiteral", "ComplexDefine", 
                      "Macroifdef", "Macroifndef", "Macroelse", "Macroendif", 
                      "IncludeDirective", "AsmBlock", "LineAfterPreprocessing", 
                      "LineDirective", "PragmaDirective", "Whitespace", 
                      "Newline", "BlockComment", "LineComment" ]

    RULE_primaryExpression = 0
    RULE_genericSelection = 1
    RULE_genericAssocList = 2
    RULE_genericAssociation = 3
    RULE_postfixExpression = 4
    RULE_passignmentExpression = 5
    RULE_argumentExpressionList = 6
    RULE_unaryExpression = 7
    RULE_unaryOperator = 8
    RULE_castExpression = 9
    RULE_multiplicativeExpression = 10
    RULE_additiveExpression = 11
    RULE_shiftExpression = 12
    RULE_relationalExpression = 13
    RULE_equalityExpression = 14
    RULE_andExpression = 15
    RULE_exclusiveOrExpression = 16
    RULE_inclusiveOrExpression = 17
    RULE_logicalAndExpression = 18
    RULE_logicalOrExpression = 19
    RULE_conditionalExpression = 20
    RULE_assignmentExpression = 21
    RULE_assignmentOperator = 22
    RULE_expression = 23
    RULE_constantExpression = 24
    RULE_declaration = 25
    RULE_declarationSpecifiers = 26
    RULE_funcDeclarationSpecifiers = 27
    RULE_declarationSpecifiers2 = 28
    RULE_funcDeclarationSpecifier = 29
    RULE_declarationSpecifier = 30
    RULE_initDeclaratorList = 31
    RULE_initDeclarator = 32
    RULE_storageClassSpecifier = 33
    RULE_typeSpecifier = 34
    RULE_structOrUnionSpecifier = 35
    RULE_structOrUnion = 36
    RULE_structDeclarationList = 37
    RULE_structDeclaration = 38
    RULE_specifierQualifierList = 39
    RULE_structDeclaratorList = 40
    RULE_structDeclarator = 41
    RULE_enumSpecifier = 42
    RULE_enumeratorList = 43
    RULE_enumerator = 44
    RULE_enumerationConstant = 45
    RULE_atomicTypeSpecifier = 46
    RULE_typeQualifier = 47
    RULE_functionSpecifier = 48
    RULE_alignmentSpecifier = 49
    RULE_declarator = 50
    RULE_funcDeclarator = 51
    RULE_directFunctionDeclarator = 52
    RULE_directDeclarator = 53
    RULE_gccDeclaratorExtension = 54
    RULE_gccAttributeSpecifier = 55
    RULE_gccAttributeList = 56
    RULE_gccAttribute = 57
    RULE_nestedParenthesesBlock = 58
    RULE_pointer = 59
    RULE_typeQualifierList = 60
    RULE_parameterTypeList = 61
    RULE_parameterList = 62
    RULE_parameterDeclaration = 63
    RULE_identifierList = 64
    RULE_typeName = 65
    RULE_abstractDeclarator = 66
    RULE_directAbstractDeclarator = 67
    RULE_typedefName = 68
    RULE_initializer = 69
    RULE_initializerList = 70
    RULE_designation = 71
    RULE_designatorList = 72
    RULE_designator = 73
    RULE_staticAssertDeclaration = 74
    RULE_statement = 75
    RULE_labeledStatement = 76
    RULE_compoundStatement = 77
    RULE_blockItemList = 78
    RULE_blockItem = 79
    RULE_expressionStatement = 80
    RULE_selectionStatement = 81
    RULE_macroSelectionStatement = 82
    RULE_iterationStatement = 83
    RULE_forCondition = 84
    RULE_forDeclaration = 85
    RULE_forExpression = 86
    RULE_jumpStatement = 87
    RULE_compilationUnit = 88
    RULE_translationUnit = 89
    RULE_externalDeclaration = 90
    RULE_functionDeclaration = 91
    RULE_functionDefinition = 92
    RULE_stringIdentifier = 93
    RULE_stringIdentifierList = 94
    RULE_macroDefinition = 95
    RULE_declarationList = 96

    ruleNames =  [ "primaryExpression", "genericSelection", "genericAssocList", 
                   "genericAssociation", "postfixExpression", "passignmentExpression", 
                   "argumentExpressionList", "unaryExpression", "unaryOperator", 
                   "castExpression", "multiplicativeExpression", "additiveExpression", 
                   "shiftExpression", "relationalExpression", "equalityExpression", 
                   "andExpression", "exclusiveOrExpression", "inclusiveOrExpression", 
                   "logicalAndExpression", "logicalOrExpression", "conditionalExpression", 
                   "assignmentExpression", "assignmentOperator", "expression", 
                   "constantExpression", "declaration", "declarationSpecifiers", 
                   "funcDeclarationSpecifiers", "declarationSpecifiers2", 
                   "funcDeclarationSpecifier", "declarationSpecifier", "initDeclaratorList", 
                   "initDeclarator", "storageClassSpecifier", "typeSpecifier", 
                   "structOrUnionSpecifier", "structOrUnion", "structDeclarationList", 
                   "structDeclaration", "specifierQualifierList", "structDeclaratorList", 
                   "structDeclarator", "enumSpecifier", "enumeratorList", 
                   "enumerator", "enumerationConstant", "atomicTypeSpecifier", 
                   "typeQualifier", "functionSpecifier", "alignmentSpecifier", 
                   "declarator", "funcDeclarator", "directFunctionDeclarator", 
                   "directDeclarator", "gccDeclaratorExtension", "gccAttributeSpecifier", 
                   "gccAttributeList", "gccAttribute", "nestedParenthesesBlock", 
                   "pointer", "typeQualifierList", "parameterTypeList", 
                   "parameterList", "parameterDeclaration", "identifierList", 
                   "typeName", "abstractDeclarator", "directAbstractDeclarator", 
                   "typedefName", "initializer", "initializerList", "designation", 
                   "designatorList", "designator", "staticAssertDeclaration", 
                   "statement", "labeledStatement", "compoundStatement", 
                   "blockItemList", "blockItem", "expressionStatement", 
                   "selectionStatement", "macroSelectionStatement", "iterationStatement", 
                   "forCondition", "forDeclaration", "forExpression", "jumpStatement", 
                   "compilationUnit", "translationUnit", "externalDeclaration", 
                   "functionDeclaration", "functionDefinition", "stringIdentifier", 
                   "stringIdentifierList", "macroDefinition", "declarationList" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    Auto=18
    Break=19
    Case=20
    Char=21
    Const=22
    Continue=23
    Default=24
    Do=25
    Double=26
    Else=27
    Enum=28
    Extern=29
    Float=30
    For=31
    Goto=32
    If=33
    Inline=34
    Int=35
    Long=36
    Register=37
    Restrict=38
    Return=39
    Short=40
    Signed=41
    Sizeof=42
    Static=43
    Struct=44
    Switch=45
    Typedef=46
    Union=47
    Unsigned=48
    Void=49
    Volatile=50
    While=51
    Alignas=52
    Alignof=53
    Atomic=54
    Bool=55
    Complex=56
    Generic=57
    Imaginary=58
    Noreturn=59
    StaticAssert=60
    ThreadLocal=61
    LeftParen=62
    RightParen=63
    LeftBracket=64
    RightBracket=65
    LeftBrace=66
    RightBrace=67
    Less=68
    LessEqual=69
    Greater=70
    GreaterEqual=71
    LeftShift=72
    RightShift=73
    Plus=74
    PlusPlus=75
    Minus=76
    MinusMinus=77
    Star=78
    Div=79
    Mod=80
    And=81
    Or=82
    AndAnd=83
    OrOr=84
    Caret=85
    Not=86
    Tilde=87
    Question=88
    Colon=89
    Semi=90
    Comma=91
    Assign=92
    StarAssign=93
    DivAssign=94
    ModAssign=95
    PlusAssign=96
    MinusAssign=97
    LeftShiftAssign=98
    RightShiftAssign=99
    AndAssign=100
    XorAssign=101
    OrAssign=102
    Equal=103
    NotEqual=104
    Arrow=105
    Dot=106
    Ellipsis=107
    Identifier=108
    Constant=109
    DigitSequence=110
    StringLiteral=111
    ComplexDefine=112
    Macroifdef=113
    Macroifndef=114
    Macroelse=115
    Macroendif=116
    IncludeDirective=117
    AsmBlock=118
    LineAfterPreprocessing=119
    LineDirective=120
    PragmaDirective=121
    Whitespace=122
    Newline=123
    BlockComment=124
    LineComment=125

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Constant(self):
            return self.getToken(CParser.Constant, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.StringLiteral)
            else:
                return self.getToken(CParser.StringLiteral, i)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def genericSelection(self):
            return self.getTypedRuleContext(CParser.GenericSelectionContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(CParser.CompoundStatementContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def getRuleIndex(self):
            return CParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = CParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 227
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 194
                self.match(CParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 195
                self.match(CParser.Constant)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 197 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 196
                    self.match(CParser.StringLiteral)
                    self.state = 199 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==CParser.StringLiteral):
                        break

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 201
                self.match(CParser.LeftParen)
                self.state = 202
                self.expression()
                self.state = 203
                self.match(CParser.RightParen)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 205
                self.genericSelection()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.T__0:
                    self.state = 206
                    self.match(CParser.T__0)


                self.state = 209
                self.match(CParser.LeftParen)
                self.state = 210
                self.compoundStatement()
                self.state = 211
                self.match(CParser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 213
                self.match(CParser.T__1)
                self.state = 214
                self.match(CParser.LeftParen)
                self.state = 215
                self.unaryExpression()
                self.state = 216
                self.match(CParser.Comma)
                self.state = 217
                self.typeName()
                self.state = 218
                self.match(CParser.RightParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 220
                self.match(CParser.T__2)
                self.state = 221
                self.match(CParser.LeftParen)
                self.state = 222
                self.typeName()
                self.state = 223
                self.match(CParser.Comma)
                self.state = 224
                self.unaryExpression()
                self.state = 225
                self.match(CParser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericSelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Generic(self):
            return self.getToken(CParser.Generic, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def genericAssocList(self):
            return self.getTypedRuleContext(CParser.GenericAssocListContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def getRuleIndex(self):
            return CParser.RULE_genericSelection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericSelection" ):
                listener.enterGenericSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericSelection" ):
                listener.exitGenericSelection(self)




    def genericSelection(self):

        localctx = CParser.GenericSelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_genericSelection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            self.match(CParser.Generic)
            self.state = 230
            self.match(CParser.LeftParen)
            self.state = 231
            self.assignmentExpression()
            self.state = 232
            self.match(CParser.Comma)
            self.state = 233
            self.genericAssocList()
            self.state = 234
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericAssocListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericAssociation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GenericAssociationContext)
            else:
                return self.getTypedRuleContext(CParser.GenericAssociationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_genericAssocList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericAssocList" ):
                listener.enterGenericAssocList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericAssocList" ):
                listener.exitGenericAssocList(self)




    def genericAssocList(self):

        localctx = CParser.GenericAssocListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_genericAssocList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self.genericAssociation()
            self.state = 241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Comma:
                self.state = 237
                self.match(CParser.Comma)
                self.state = 238
                self.genericAssociation()
                self.state = 243
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericAssociationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(CParser.Colon, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def Default(self):
            return self.getToken(CParser.Default, 0)

        def getRuleIndex(self):
            return CParser.RULE_genericAssociation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericAssociation" ):
                listener.enterGenericAssociation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericAssociation" ):
                listener.exitGenericAssociation(self)




    def genericAssociation(self):

        localctx = CParser.GenericAssociationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_genericAssociation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__0, CParser.T__3, CParser.T__4, CParser.T__5, CParser.T__6, CParser.Char, CParser.Const, CParser.Double, CParser.Enum, CParser.Float, CParser.Int, CParser.Long, CParser.Restrict, CParser.Short, CParser.Signed, CParser.Struct, CParser.Union, CParser.Unsigned, CParser.Void, CParser.Volatile, CParser.Atomic, CParser.Bool, CParser.Complex, CParser.Identifier]:
                self.state = 244
                self.typeName()
                pass
            elif token in [CParser.Default]:
                self.state = 245
                self.match(CParser.Default)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 248
            self.match(CParser.Colon)
            self.state = 249
            self.assignmentExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(CParser.PrimaryExpressionContext,0)


        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftParen)
            else:
                return self.getToken(CParser.LeftParen, i)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightParen)
            else:
                return self.getToken(CParser.RightParen, i)

        def LeftBrace(self):
            return self.getToken(CParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(CParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(CParser.RightBrace, 0)

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftBracket)
            else:
                return self.getToken(CParser.LeftBracket, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.ExpressionContext,i)


        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightBracket)
            else:
                return self.getToken(CParser.RightBracket, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Identifier)
            else:
                return self.getToken(CParser.Identifier, i)

        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Dot)
            else:
                return self.getToken(CParser.Dot, i)

        def Arrow(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Arrow)
            else:
                return self.getToken(CParser.Arrow, i)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.PlusPlus)
            else:
                return self.getToken(CParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.MinusMinus)
            else:
                return self.getToken(CParser.MinusMinus, i)

        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def argumentExpressionList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ArgumentExpressionListContext)
            else:
                return self.getTypedRuleContext(CParser.ArgumentExpressionListContext,i)


        def getRuleIndex(self):
            return CParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)




    def postfixExpression(self):

        localctx = CParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_postfixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 251
                self.primaryExpression()
                pass

            elif la_ == 2:
                self.state = 253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.T__0:
                    self.state = 252
                    self.match(CParser.T__0)


                self.state = 255
                self.match(CParser.LeftParen)
                self.state = 256
                self.typeName()
                self.state = 257
                self.match(CParser.RightParen)
                self.state = 258
                self.match(CParser.LeftBrace)
                self.state = 259
                self.initializerList()
                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.Comma:
                    self.state = 260
                    self.match(CParser.Comma)


                self.state = 263
                self.match(CParser.RightBrace)
                pass


            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & ((1 << (CParser.LeftParen - 62)) | (1 << (CParser.LeftBracket - 62)) | (1 << (CParser.PlusPlus - 62)) | (1 << (CParser.MinusMinus - 62)) | (1 << (CParser.Arrow - 62)) | (1 << (CParser.Dot - 62)))) != 0):
                self.state = 279
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CParser.LeftBracket]:
                    self.state = 267
                    self.match(CParser.LeftBracket)
                    self.state = 268
                    self.expression()
                    self.state = 269
                    self.match(CParser.RightBracket)
                    pass
                elif token in [CParser.LeftParen]:
                    self.state = 271
                    self.match(CParser.LeftParen)
                    self.state = 273
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Float) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Sizeof) | (1 << CParser.Struct) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (1 << (CParser.Minus - 74)) | (1 << (CParser.MinusMinus - 74)) | (1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (1 << (CParser.AndAnd - 74)) | (1 << (CParser.Not - 74)) | (1 << (CParser.Tilde - 74)) | (1 << (CParser.Identifier - 74)) | (1 << (CParser.Constant - 74)) | (1 << (CParser.DigitSequence - 74)) | (1 << (CParser.StringLiteral - 74)))) != 0):
                        self.state = 272
                        self.argumentExpressionList()


                    self.state = 275
                    self.match(CParser.RightParen)
                    pass
                elif token in [CParser.Arrow, CParser.Dot]:
                    self.state = 276
                    _la = self._input.LA(1)
                    if not(_la==CParser.Arrow or _la==CParser.Dot):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 277
                    self.match(CParser.Identifier)
                    pass
                elif token in [CParser.PlusPlus, CParser.MinusMinus]:
                    self.state = 278
                    _la = self._input.LA(1)
                    if not(_la==CParser.PlusPlus or _la==CParser.MinusMinus):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 283
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PassignmentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(CParser.SpecifierQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_passignmentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPassignmentExpression" ):
                listener.enterPassignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPassignmentExpression" ):
                listener.exitPassignmentExpression(self)




    def passignmentExpression(self):

        localctx = CParser.PassignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_passignmentExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 284
                self.specifierQualifierList()
                pass

            elif la_ == 2:
                self.state = 285
                self.assignmentExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def passignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.PassignmentExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.PassignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_argumentExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExpressionList" ):
                listener.enterArgumentExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExpressionList" ):
                listener.exitArgumentExpressionList(self)




    def argumentExpressionList(self):

        localctx = CParser.ArgumentExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_argumentExpressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            self.passignmentExpression()
            self.state = 293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Comma:
                self.state = 289
                self.match(CParser.Comma)
                self.state = 290
                self.passignmentExpression()
                self.state = 295
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(CParser.PostfixExpressionContext,0)


        def unaryOperator(self):
            return self.getTypedRuleContext(CParser.UnaryOperatorContext,0)


        def castExpression(self):
            return self.getTypedRuleContext(CParser.CastExpressionContext,0)


        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def AndAnd(self):
            return self.getToken(CParser.AndAnd, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Sizeof(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Sizeof)
            else:
                return self.getToken(CParser.Sizeof, i)

        def Alignof(self):
            return self.getToken(CParser.Alignof, 0)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.PlusPlus)
            else:
                return self.getToken(CParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.MinusMinus)
            else:
                return self.getToken(CParser.MinusMinus, i)

        def getRuleIndex(self):
            return CParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = CParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_unaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 296
                    _la = self._input.LA(1)
                    if not(((((_la - 42)) & ~0x3f) == 0 and ((1 << (_la - 42)) & ((1 << (CParser.Sizeof - 42)) | (1 << (CParser.PlusPlus - 42)) | (1 << (CParser.MinusMinus - 42)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 301
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

            self.state = 313
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__0, CParser.T__1, CParser.T__2, CParser.Generic, CParser.LeftParen, CParser.Identifier, CParser.Constant, CParser.StringLiteral]:
                self.state = 302
                self.postfixExpression()
                pass
            elif token in [CParser.Plus, CParser.Minus, CParser.Star, CParser.And, CParser.Not, CParser.Tilde]:
                self.state = 303
                self.unaryOperator()
                self.state = 304
                self.castExpression()
                pass
            elif token in [CParser.Sizeof, CParser.Alignof]:
                self.state = 306
                _la = self._input.LA(1)
                if not(_la==CParser.Sizeof or _la==CParser.Alignof):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 307
                self.match(CParser.LeftParen)
                self.state = 308
                self.typeName()
                self.state = 309
                self.match(CParser.RightParen)
                pass
            elif token in [CParser.AndAnd]:
                self.state = 311
                self.match(CParser.AndAnd)
                self.state = 312
                self.match(CParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(CParser.And, 0)

        def Star(self):
            return self.getToken(CParser.Star, 0)

        def Plus(self):
            return self.getToken(CParser.Plus, 0)

        def Minus(self):
            return self.getToken(CParser.Minus, 0)

        def Tilde(self):
            return self.getToken(CParser.Tilde, 0)

        def Not(self):
            return self.getToken(CParser.Not, 0)

        def getRuleIndex(self):
            return CParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)




    def unaryOperator(self):

        localctx = CParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            _la = self._input.LA(1)
            if not(((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (CParser.Plus - 74)) | (1 << (CParser.Minus - 74)) | (1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (1 << (CParser.Not - 74)) | (1 << (CParser.Tilde - 74)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def castExpression(self):
            return self.getTypedRuleContext(CParser.CastExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(CParser.DigitSequence, 0)

        def getRuleIndex(self):
            return CParser.RULE_castExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)




    def castExpression(self):

        localctx = CParser.CastExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_castExpression)
        self._la = 0 # Token type
        try:
            self.state = 327
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.T__0:
                    self.state = 317
                    self.match(CParser.T__0)


                self.state = 320
                self.match(CParser.LeftParen)
                self.state = 321
                self.typeName()
                self.state = 322
                self.match(CParser.RightParen)
                self.state = 323
                self.castExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 325
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 326
                self.match(CParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.CastExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.CastExpressionContext,i)


        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Star)
            else:
                return self.getToken(CParser.Star, i)

        def Div(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Div)
            else:
                return self.getToken(CParser.Div, i)

        def Mod(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Mod)
            else:
                return self.getToken(CParser.Mod, i)

        def getRuleIndex(self):
            return CParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)




    def multiplicativeExpression(self):

        localctx = CParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_multiplicativeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 329
            self.castExpression()
            self.state = 334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (CParser.Star - 78)) | (1 << (CParser.Div - 78)) | (1 << (CParser.Mod - 78)))) != 0):
                self.state = 330
                _la = self._input.LA(1)
                if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (CParser.Star - 78)) | (1 << (CParser.Div - 78)) | (1 << (CParser.Mod - 78)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 331
                self.castExpression()
                self.state = 336
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.MultiplicativeExpressionContext,i)


        def Plus(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Plus)
            else:
                return self.getToken(CParser.Plus, i)

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Minus)
            else:
                return self.getToken(CParser.Minus, i)

        def getRuleIndex(self):
            return CParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)




    def additiveExpression(self):

        localctx = CParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_additiveExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.multiplicativeExpression()
            self.state = 342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Plus or _la==CParser.Minus:
                self.state = 338
                _la = self._input.LA(1)
                if not(_la==CParser.Plus or _la==CParser.Minus):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 339
                self.multiplicativeExpression()
                self.state = 344
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShiftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.AdditiveExpressionContext,i)


        def LeftShift(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftShift)
            else:
                return self.getToken(CParser.LeftShift, i)

        def RightShift(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightShift)
            else:
                return self.getToken(CParser.RightShift, i)

        def getRuleIndex(self):
            return CParser.RULE_shiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftExpression" ):
                listener.enterShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftExpression" ):
                listener.exitShiftExpression(self)




    def shiftExpression(self):

        localctx = CParser.ShiftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_shiftExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.additiveExpression()
            self.state = 350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.LeftShift or _la==CParser.RightShift:
                self.state = 346
                _la = self._input.LA(1)
                if not(_la==CParser.LeftShift or _la==CParser.RightShift):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 347
                self.additiveExpression()
                self.state = 352
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ShiftExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.ShiftExpressionContext,i)


        def Less(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Less)
            else:
                return self.getToken(CParser.Less, i)

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Greater)
            else:
                return self.getToken(CParser.Greater, i)

        def LessEqual(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LessEqual)
            else:
                return self.getToken(CParser.LessEqual, i)

        def GreaterEqual(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.GreaterEqual)
            else:
                return self.getToken(CParser.GreaterEqual, i)

        def getRuleIndex(self):
            return CParser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)




    def relationalExpression(self):

        localctx = CParser.RelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_relationalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self.shiftExpression()
            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (CParser.Less - 68)) | (1 << (CParser.LessEqual - 68)) | (1 << (CParser.Greater - 68)) | (1 << (CParser.GreaterEqual - 68)))) != 0):
                self.state = 354
                _la = self._input.LA(1)
                if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (CParser.Less - 68)) | (1 << (CParser.LessEqual - 68)) | (1 << (CParser.Greater - 68)) | (1 << (CParser.GreaterEqual - 68)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 355
                self.shiftExpression()
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.RelationalExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.RelationalExpressionContext,i)


        def Equal(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Equal)
            else:
                return self.getToken(CParser.Equal, i)

        def NotEqual(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.NotEqual)
            else:
                return self.getToken(CParser.NotEqual, i)

        def getRuleIndex(self):
            return CParser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)




    def equalityExpression(self):

        localctx = CParser.EqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_equalityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361
            self.relationalExpression()
            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Equal or _la==CParser.NotEqual:
                self.state = 362
                _la = self._input.LA(1)
                if not(_la==CParser.Equal or _la==CParser.NotEqual):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 363
                self.relationalExpression()
                self.state = 368
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.EqualityExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.EqualityExpressionContext,i)


        def And(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.And)
            else:
                return self.getToken(CParser.And, i)

        def getRuleIndex(self):
            return CParser.RULE_andExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpression" ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpression" ):
                listener.exitAndExpression(self)




    def andExpression(self):

        localctx = CParser.AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_andExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.equalityExpression()
            self.state = 374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.And:
                self.state = 370
                self.match(CParser.And)
                self.state = 371
                self.equalityExpression()
                self.state = 376
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.AndExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.AndExpressionContext,i)


        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Caret)
            else:
                return self.getToken(CParser.Caret, i)

        def getRuleIndex(self):
            return CParser.RULE_exclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveOrExpression" ):
                listener.enterExclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveOrExpression" ):
                listener.exitExclusiveOrExpression(self)




    def exclusiveOrExpression(self):

        localctx = CParser.ExclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_exclusiveOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 377
            self.andExpression()
            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Caret:
                self.state = 378
                self.match(CParser.Caret)
                self.state = 379
                self.andExpression()
                self.state = 384
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ExclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.ExclusiveOrExpressionContext,i)


        def Or(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Or)
            else:
                return self.getToken(CParser.Or, i)

        def getRuleIndex(self):
            return CParser.RULE_inclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveOrExpression" ):
                listener.enterInclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveOrExpression" ):
                listener.exitInclusiveOrExpression(self)




    def inclusiveOrExpression(self):

        localctx = CParser.InclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_inclusiveOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 385
            self.exclusiveOrExpression()
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Or:
                self.state = 386
                self.match(CParser.Or)
                self.state = 387
                self.exclusiveOrExpression()
                self.state = 392
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.InclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.InclusiveOrExpressionContext,i)


        def AndAnd(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.AndAnd)
            else:
                return self.getToken(CParser.AndAnd, i)

        def getRuleIndex(self):
            return CParser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)




    def logicalAndExpression(self):

        localctx = CParser.LogicalAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_logicalAndExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.inclusiveOrExpression()
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.AndAnd:
                self.state = 394
                self.match(CParser.AndAnd)
                self.state = 395
                self.inclusiveOrExpression()
                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.LogicalAndExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.LogicalAndExpressionContext,i)


        def OrOr(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.OrOr)
            else:
                return self.getToken(CParser.OrOr, i)

        def getRuleIndex(self):
            return CParser.RULE_logicalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)




    def logicalOrExpression(self):

        localctx = CParser.LogicalOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_logicalOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.logicalAndExpression()
            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.OrOr:
                self.state = 402
                self.match(CParser.OrOr)
                self.state = 403
                self.logicalAndExpression()
                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(CParser.LogicalOrExpressionContext,0)


        def Question(self):
            return self.getToken(CParser.Question, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(CParser.Colon, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)




    def conditionalExpression(self):

        localctx = CParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_conditionalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.logicalOrExpression()
            self.state = 415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CParser.Question:
                self.state = 410
                self.match(CParser.Question)
                self.state = 411
                self.expression()
                self.state = 412
                self.match(CParser.Colon)
                self.state = 413
                self.conditionalExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(CParser.AssignmentOperatorContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(CParser.DigitSequence, 0)

        def getRuleIndex(self):
            return CParser.RULE_assignmentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)




    def assignmentExpression(self):

        localctx = CParser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_assignmentExpression)
        try:
            self.state = 423
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 417
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 418
                self.unaryExpression()
                self.state = 419
                self.assignmentOperator()
                self.state = 420
                self.assignmentExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 422
                self.match(CParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CParser.Assign, 0)

        def StarAssign(self):
            return self.getToken(CParser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(CParser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(CParser.ModAssign, 0)

        def PlusAssign(self):
            return self.getToken(CParser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(CParser.MinusAssign, 0)

        def LeftShiftAssign(self):
            return self.getToken(CParser.LeftShiftAssign, 0)

        def RightShiftAssign(self):
            return self.getToken(CParser.RightShiftAssign, 0)

        def AndAssign(self):
            return self.getToken(CParser.AndAssign, 0)

        def XorAssign(self):
            return self.getToken(CParser.XorAssign, 0)

        def OrAssign(self):
            return self.getToken(CParser.OrAssign, 0)

        def getRuleIndex(self):
            return CParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = CParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            _la = self._input.LA(1)
            if not(((((_la - 92)) & ~0x3f) == 0 and ((1 << (_la - 92)) & ((1 << (CParser.Assign - 92)) | (1 << (CParser.StarAssign - 92)) | (1 << (CParser.DivAssign - 92)) | (1 << (CParser.ModAssign - 92)) | (1 << (CParser.PlusAssign - 92)) | (1 << (CParser.MinusAssign - 92)) | (1 << (CParser.LeftShiftAssign - 92)) | (1 << (CParser.RightShiftAssign - 92)) | (1 << (CParser.AndAssign - 92)) | (1 << (CParser.XorAssign - 92)) | (1 << (CParser.OrAssign - 92)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = CParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 427
            self.assignmentExpression()
            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Comma:
                self.state = 428
                self.match(CParser.Comma)
                self.state = 429
                self.assignmentExpression()
                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)




    def constantExpression(self):

        localctx = CParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.conditionalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiersContext,0)


        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def initDeclaratorList(self):
            return self.getTypedRuleContext(CParser.InitDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(CParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return CParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = CParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.state = 444
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__0, CParser.T__3, CParser.T__4, CParser.T__5, CParser.T__6, CParser.T__7, CParser.T__8, CParser.T__9, CParser.T__11, CParser.Auto, CParser.Char, CParser.Const, CParser.Double, CParser.Enum, CParser.Extern, CParser.Float, CParser.Inline, CParser.Int, CParser.Long, CParser.Register, CParser.Restrict, CParser.Short, CParser.Signed, CParser.Static, CParser.Struct, CParser.Typedef, CParser.Union, CParser.Unsigned, CParser.Void, CParser.Volatile, CParser.Alignas, CParser.Atomic, CParser.Bool, CParser.Complex, CParser.Noreturn, CParser.ThreadLocal, CParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 437
                self.declarationSpecifiers()
                self.state = 439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & ((1 << (CParser.LeftParen - 62)) | (1 << (CParser.Star - 62)) | (1 << (CParser.Caret - 62)) | (1 << (CParser.Identifier - 62)))) != 0):
                    self.state = 438
                    self.initDeclaratorList()


                self.state = 441
                self.match(CParser.Semi)
                pass
            elif token in [CParser.StaticAssert]:
                self.enterOuterAlt(localctx, 2)
                self.state = 443
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(CParser.DeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return CParser.RULE_declarationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers" ):
                listener.enterDeclarationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers" ):
                listener.exitDeclarationSpecifiers(self)




    def declarationSpecifiers(self):

        localctx = CParser.DeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_declarationSpecifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 446
                    self.declarationSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 449 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncDeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifierContext,0)


        def funcDeclarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.FuncDeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(CParser.FuncDeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return CParser.RULE_funcDeclarationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncDeclarationSpecifiers" ):
                listener.enterFuncDeclarationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncDeclarationSpecifiers" ):
                listener.exitFuncDeclarationSpecifiers(self)




    def funcDeclarationSpecifiers(self):

        localctx = CParser.FuncDeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_funcDeclarationSpecifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 451
                    self.funcDeclarationSpecifier() 
                self.state = 456
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

            self.state = 457
            self.declarationSpecifier()
            self.state = 461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Const) | (1 << CParser.Extern) | (1 << CParser.Inline) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Static) | (1 << CParser.Typedef) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Noreturn) | (1 << CParser.ThreadLocal))) != 0):
                self.state = 458
                self.funcDeclarationSpecifier()
                self.state = 463
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiers2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(CParser.DeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return CParser.RULE_declarationSpecifiers2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers2" ):
                listener.enterDeclarationSpecifiers2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers2" ):
                listener.exitDeclarationSpecifiers2(self)




    def declarationSpecifiers2(self):

        localctx = CParser.DeclarationSpecifiers2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_declarationSpecifiers2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 464
                self.declarationSpecifier()
                self.state = 467 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn) | (1 << CParser.ThreadLocal))) != 0) or _la==CParser.Identifier):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncDeclarationSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageClassSpecifier(self):
            return self.getTypedRuleContext(CParser.StorageClassSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(CParser.TypeQualifierContext,0)


        def functionSpecifier(self):
            return self.getTypedRuleContext(CParser.FunctionSpecifierContext,0)


        def alignmentSpecifier(self):
            return self.getTypedRuleContext(CParser.AlignmentSpecifierContext,0)


        def getRuleIndex(self):
            return CParser.RULE_funcDeclarationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncDeclarationSpecifier" ):
                listener.enterFuncDeclarationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncDeclarationSpecifier" ):
                listener.exitFuncDeclarationSpecifier(self)




    def funcDeclarationSpecifier(self):

        localctx = CParser.FuncDeclarationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_funcDeclarationSpecifier)
        try:
            self.state = 473
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.Auto, CParser.Extern, CParser.Register, CParser.Static, CParser.Typedef, CParser.ThreadLocal]:
                self.enterOuterAlt(localctx, 1)
                self.state = 469
                self.storageClassSpecifier()
                pass
            elif token in [CParser.Const, CParser.Restrict, CParser.Volatile, CParser.Atomic]:
                self.enterOuterAlt(localctx, 2)
                self.state = 470
                self.typeQualifier()
                pass
            elif token in [CParser.T__7, CParser.T__8, CParser.T__9, CParser.T__11, CParser.Inline, CParser.Noreturn]:
                self.enterOuterAlt(localctx, 3)
                self.state = 471
                self.functionSpecifier()
                pass
            elif token in [CParser.Alignas]:
                self.enterOuterAlt(localctx, 4)
                self.state = 472
                self.alignmentSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageClassSpecifier(self):
            return self.getTypedRuleContext(CParser.StorageClassSpecifierContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(CParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(CParser.TypeQualifierContext,0)


        def functionSpecifier(self):
            return self.getTypedRuleContext(CParser.FunctionSpecifierContext,0)


        def alignmentSpecifier(self):
            return self.getTypedRuleContext(CParser.AlignmentSpecifierContext,0)


        def getRuleIndex(self):
            return CParser.RULE_declarationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifier" ):
                listener.enterDeclarationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifier" ):
                listener.exitDeclarationSpecifier(self)




    def declarationSpecifier(self):

        localctx = CParser.DeclarationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_declarationSpecifier)
        try:
            self.state = 480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 475
                self.storageClassSpecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 476
                self.typeSpecifier(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 477
                self.typeQualifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 478
                self.functionSpecifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 479
                self.alignmentSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.InitDeclaratorContext)
            else:
                return self.getTypedRuleContext(CParser.InitDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_initDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclaratorList" ):
                listener.enterInitDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclaratorList" ):
                listener.exitInitDeclaratorList(self)




    def initDeclaratorList(self):

        localctx = CParser.InitDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_initDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 482
            self.initDeclarator()
            self.state = 487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Comma:
                self.state = 483
                self.match(CParser.Comma)
                self.state = 484
                self.initDeclarator()
                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def Assign(self):
            return self.getToken(CParser.Assign, 0)

        def initializer(self):
            return self.getTypedRuleContext(CParser.InitializerContext,0)


        def getRuleIndex(self):
            return CParser.RULE_initDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclarator" ):
                listener.enterInitDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclarator" ):
                listener.exitInitDeclarator(self)




    def initDeclarator(self):

        localctx = CParser.InitDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_initDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.declarator()
            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CParser.Assign:
                self.state = 491
                self.match(CParser.Assign)
                self.state = 492
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageClassSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typedef(self):
            return self.getToken(CParser.Typedef, 0)

        def Extern(self):
            return self.getToken(CParser.Extern, 0)

        def Static(self):
            return self.getToken(CParser.Static, 0)

        def ThreadLocal(self):
            return self.getToken(CParser.ThreadLocal, 0)

        def Auto(self):
            return self.getToken(CParser.Auto, 0)

        def Register(self):
            return self.getToken(CParser.Register, 0)

        def getRuleIndex(self):
            return CParser.RULE_storageClassSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageClassSpecifier" ):
                listener.enterStorageClassSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageClassSpecifier" ):
                listener.exitStorageClassSpecifier(self)




    def storageClassSpecifier(self):

        localctx = CParser.StorageClassSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_storageClassSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Auto) | (1 << CParser.Extern) | (1 << CParser.Register) | (1 << CParser.Static) | (1 << CParser.Typedef) | (1 << CParser.ThreadLocal))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Void(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Void)
            else:
                return self.getToken(CParser.Void, i)

        def Char(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Char)
            else:
                return self.getToken(CParser.Char, i)

        def Short(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Short)
            else:
                return self.getToken(CParser.Short, i)

        def Int(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Int)
            else:
                return self.getToken(CParser.Int, i)

        def Long(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Long)
            else:
                return self.getToken(CParser.Long, i)

        def Float(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Float)
            else:
                return self.getToken(CParser.Float, i)

        def Double(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Double)
            else:
                return self.getToken(CParser.Double, i)

        def Signed(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Signed)
            else:
                return self.getToken(CParser.Signed, i)

        def Unsigned(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Unsigned)
            else:
                return self.getToken(CParser.Unsigned, i)

        def Bool(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Bool)
            else:
                return self.getToken(CParser.Bool, i)

        def Complex(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Complex)
            else:
                return self.getToken(CParser.Complex, i)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def atomicTypeSpecifier(self):
            return self.getTypedRuleContext(CParser.AtomicTypeSpecifierContext,0)


        def structOrUnionSpecifier(self):
            return self.getTypedRuleContext(CParser.StructOrUnionSpecifierContext,0)


        def enumSpecifier(self):
            return self.getTypedRuleContext(CParser.EnumSpecifierContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def typedefName(self):
            return self.getTypedRuleContext(CParser.TypedefNameContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(CParser.TypeSpecifierContext,0)


        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext,0)


        def getRuleIndex(self):
            return CParser.RULE_typeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpecifier" ):
                listener.enterTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpecifier" ):
                listener.exitTypeSpecifier(self)



    def typeSpecifier(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.TypeSpecifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_typeSpecifier, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__3, CParser.T__4, CParser.T__5, CParser.Char, CParser.Double, CParser.Float, CParser.Int, CParser.Long, CParser.Short, CParser.Signed, CParser.Unsigned, CParser.Void, CParser.Bool, CParser.Complex]:
                self.state = 499 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 498
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.Char) | (1 << CParser.Double) | (1 << CParser.Float) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Bool) | (1 << CParser.Complex))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 501 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

                pass
            elif token in [CParser.T__0]:
                self.state = 503
                self.match(CParser.T__0)
                self.state = 504
                self.match(CParser.LeftParen)
                self.state = 505
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 506
                self.match(CParser.RightParen)
                pass
            elif token in [CParser.Atomic]:
                self.state = 507
                self.atomicTypeSpecifier()
                pass
            elif token in [CParser.Struct, CParser.Union]:
                self.state = 508
                self.structOrUnionSpecifier()
                pass
            elif token in [CParser.Enum]:
                self.state = 509
                self.enumSpecifier()
                pass
            elif token in [CParser.T__6]:
                self.state = 510
                self.match(CParser.T__6)
                self.state = 511
                self.match(CParser.LeftParen)
                self.state = 512
                self.constantExpression()
                self.state = 513
                self.match(CParser.RightParen)
                pass
            elif token in [CParser.Identifier]:
                self.state = 515
                self.typedefName()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 522
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.TypeSpecifierContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeSpecifier)
                    self.state = 518
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 519
                    self.pointer() 
                self.state = 524
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class StructOrUnionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structOrUnion(self):
            return self.getTypedRuleContext(CParser.StructOrUnionContext,0)


        def LeftBrace(self):
            return self.getToken(CParser.LeftBrace, 0)

        def structDeclarationList(self):
            return self.getTypedRuleContext(CParser.StructDeclarationListContext,0)


        def RightBrace(self):
            return self.getToken(CParser.RightBrace, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_structOrUnionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnionSpecifier" ):
                listener.enterStructOrUnionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnionSpecifier" ):
                listener.exitStructOrUnionSpecifier(self)




    def structOrUnionSpecifier(self):

        localctx = CParser.StructOrUnionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_structOrUnionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 536
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 525
                self.structOrUnion()
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.Identifier:
                    self.state = 526
                    self.match(CParser.Identifier)


                self.state = 529
                self.match(CParser.LeftBrace)
                self.state = 530
                self.structDeclarationList()
                self.state = 531
                self.match(CParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 533
                self.structOrUnion()
                self.state = 534
                self.match(CParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructOrUnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Struct(self):
            return self.getToken(CParser.Struct, 0)

        def Union(self):
            return self.getToken(CParser.Union, 0)

        def getRuleIndex(self):
            return CParser.RULE_structOrUnion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnion" ):
                listener.enterStructOrUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnion" ):
                listener.exitStructOrUnion(self)




    def structOrUnion(self):

        localctx = CParser.StructOrUnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_structOrUnion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            _la = self._input.LA(1)
            if not(_la==CParser.Struct or _la==CParser.Union):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.StructDeclarationContext)
            else:
                return self.getTypedRuleContext(CParser.StructDeclarationContext,i)


        def getRuleIndex(self):
            return CParser.RULE_structDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarationList" ):
                listener.enterStructDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarationList" ):
                listener.exitStructDeclarationList(self)




    def structDeclarationList(self):

        localctx = CParser.StructDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_structDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 540
                self.structDeclaration()
                self.state = 543 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Float) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Struct) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.StaticAssert))) != 0) or _la==CParser.Identifier):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(CParser.SpecifierQualifierListContext,0)


        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def structDeclaratorList(self):
            return self.getTypedRuleContext(CParser.StructDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(CParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return CParser.RULE_structDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaration" ):
                listener.enterStructDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaration" ):
                listener.exitStructDeclaration(self)




    def structDeclaration(self):

        localctx = CParser.StructDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_structDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 552
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__0, CParser.T__3, CParser.T__4, CParser.T__5, CParser.T__6, CParser.Char, CParser.Const, CParser.Double, CParser.Enum, CParser.Float, CParser.Int, CParser.Long, CParser.Restrict, CParser.Short, CParser.Signed, CParser.Struct, CParser.Union, CParser.Unsigned, CParser.Void, CParser.Volatile, CParser.Atomic, CParser.Bool, CParser.Complex, CParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 545
                self.specifierQualifierList()
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & ((1 << (CParser.LeftParen - 62)) | (1 << (CParser.Star - 62)) | (1 << (CParser.Caret - 62)) | (1 << (CParser.Colon - 62)) | (1 << (CParser.Identifier - 62)))) != 0):
                    self.state = 546
                    self.structDeclaratorList()


                self.state = 549
                self.match(CParser.Semi)
                pass
            elif token in [CParser.StaticAssert]:
                self.enterOuterAlt(localctx, 2)
                self.state = 551
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecifierQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self):
            return self.getTypedRuleContext(CParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(CParser.TypeQualifierContext,0)


        def specifierQualifierList(self):
            return self.getTypedRuleContext(CParser.SpecifierQualifierListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_specifierQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecifierQualifierList" ):
                listener.enterSpecifierQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecifierQualifierList" ):
                listener.exitSpecifierQualifierList(self)




    def specifierQualifierList(self):

        localctx = CParser.SpecifierQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_specifierQualifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 554
                self.typeSpecifier(0)
                pass

            elif la_ == 2:
                self.state = 555
                self.typeQualifier()
                pass


            self.state = 559
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 558
                self.specifierQualifierList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.StructDeclaratorContext)
            else:
                return self.getTypedRuleContext(CParser.StructDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_structDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaratorList" ):
                listener.enterStructDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaratorList" ):
                listener.exitStructDeclaratorList(self)




    def structDeclaratorList(self):

        localctx = CParser.StructDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_structDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self.structDeclarator()
            self.state = 566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Comma:
                self.state = 562
                self.match(CParser.Comma)
                self.state = 563
                self.structDeclarator()
                self.state = 568
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def Colon(self):
            return self.getToken(CParser.Colon, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_structDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarator" ):
                listener.enterStructDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarator" ):
                listener.exitStructDeclarator(self)




    def structDeclarator(self):

        localctx = CParser.StructDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_structDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 575
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 569
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & ((1 << (CParser.LeftParen - 62)) | (1 << (CParser.Star - 62)) | (1 << (CParser.Caret - 62)) | (1 << (CParser.Identifier - 62)))) != 0):
                    self.state = 570
                    self.declarator()


                self.state = 573
                self.match(CParser.Colon)
                self.state = 574
                self.constantExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(CParser.Enum, 0)

        def LeftBrace(self):
            return self.getToken(CParser.LeftBrace, 0)

        def enumeratorList(self):
            return self.getTypedRuleContext(CParser.EnumeratorListContext,0)


        def RightBrace(self):
            return self.getToken(CParser.RightBrace, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def getRuleIndex(self):
            return CParser.RULE_enumSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumSpecifier" ):
                listener.enterEnumSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumSpecifier" ):
                listener.exitEnumSpecifier(self)




    def enumSpecifier(self):

        localctx = CParser.EnumSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_enumSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 590
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 577
                self.match(CParser.Enum)
                self.state = 579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.Identifier:
                    self.state = 578
                    self.match(CParser.Identifier)


                self.state = 581
                self.match(CParser.LeftBrace)
                self.state = 582
                self.enumeratorList()
                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.Comma:
                    self.state = 583
                    self.match(CParser.Comma)


                self.state = 586
                self.match(CParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 588
                self.match(CParser.Enum)
                self.state = 589
                self.match(CParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.EnumeratorContext)
            else:
                return self.getTypedRuleContext(CParser.EnumeratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_enumeratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorList" ):
                listener.enterEnumeratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorList" ):
                listener.exitEnumeratorList(self)




    def enumeratorList(self):

        localctx = CParser.EnumeratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_enumeratorList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.enumerator()
            self.state = 597
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 593
                    self.match(CParser.Comma)
                    self.state = 594
                    self.enumerator() 
                self.state = 599
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerationConstant(self):
            return self.getTypedRuleContext(CParser.EnumerationConstantContext,0)


        def Assign(self):
            return self.getToken(CParser.Assign, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)




    def enumerator(self):

        localctx = CParser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_enumerator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 600
            self.enumerationConstant()
            self.state = 603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CParser.Assign:
                self.state = 601
                self.match(CParser.Assign)
                self.state = 602
                self.constantExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerationConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_enumerationConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerationConstant" ):
                listener.enterEnumerationConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerationConstant" ):
                listener.exitEnumerationConstant(self)




    def enumerationConstant(self):

        localctx = CParser.EnumerationConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_enumerationConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(CParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicTypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atomic(self):
            return self.getToken(CParser.Atomic, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def getRuleIndex(self):
            return CParser.RULE_atomicTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicTypeSpecifier" ):
                listener.enterAtomicTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicTypeSpecifier" ):
                listener.exitAtomicTypeSpecifier(self)




    def atomicTypeSpecifier(self):

        localctx = CParser.AtomicTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_atomicTypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607
            self.match(CParser.Atomic)
            self.state = 608
            self.match(CParser.LeftParen)
            self.state = 609
            self.typeName()
            self.state = 610
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(CParser.Const, 0)

        def Restrict(self):
            return self.getToken(CParser.Restrict, 0)

        def Volatile(self):
            return self.getToken(CParser.Volatile, 0)

        def Atomic(self):
            return self.getToken(CParser.Atomic, 0)

        def getRuleIndex(self):
            return CParser.RULE_typeQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifier" ):
                listener.enterTypeQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifier" ):
                listener.exitTypeQualifier(self)




    def typeQualifier(self):

        localctx = CParser.TypeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_typeQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Inline(self):
            return self.getToken(CParser.Inline, 0)

        def Noreturn(self):
            return self.getToken(CParser.Noreturn, 0)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(CParser.GccAttributeSpecifierContext,0)


        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def getRuleIndex(self):
            return CParser.RULE_functionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSpecifier" ):
                listener.enterFunctionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSpecifier" ):
                listener.exitFunctionSpecifier(self)




    def functionSpecifier(self):

        localctx = CParser.FunctionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_functionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 620
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__7, CParser.T__8, CParser.Inline, CParser.Noreturn]:
                self.enterOuterAlt(localctx, 1)
                self.state = 614
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.Inline) | (1 << CParser.Noreturn))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [CParser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 615
                self.gccAttributeSpecifier()
                pass
            elif token in [CParser.T__9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 616
                self.match(CParser.T__9)
                self.state = 617
                self.match(CParser.LeftParen)
                self.state = 618
                self.match(CParser.Identifier)
                self.state = 619
                self.match(CParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignmentSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Alignas(self):
            return self.getToken(CParser.Alignas, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_alignmentSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentSpecifier" ):
                listener.enterAlignmentSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentSpecifier" ):
                listener.exitAlignmentSpecifier(self)




    def alignmentSpecifier(self):

        localctx = CParser.AlignmentSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_alignmentSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 622
            self.match(CParser.Alignas)
            self.state = 623
            self.match(CParser.LeftParen)
            self.state = 626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 624
                self.typeName()
                pass

            elif la_ == 2:
                self.state = 625
                self.constantExpression()
                pass


            self.state = 628
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectDeclaratorContext,0)


        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(CParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return CParser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)




    def declarator(self):

        localctx = CParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CParser.Star or _la==CParser.Caret:
                self.state = 630
                self.pointer()


            self.state = 633
            self.directDeclarator(0)
            self.state = 637
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 634
                    self.gccDeclaratorExtension() 
                self.state = 639
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directFunctionDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectFunctionDeclaratorContext,0)


        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(CParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return CParser.RULE_funcDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncDeclarator" ):
                listener.enterFuncDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncDeclarator" ):
                listener.exitFuncDeclarator(self)




    def funcDeclarator(self):

        localctx = CParser.FuncDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_funcDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CParser.Star or _la==CParser.Caret:
                self.state = 640
                self.pointer()


            self.state = 643
            self.directFunctionDeclarator()
            self.state = 647
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 644
                    self.gccDeclaratorExtension() 
                self.state = 649
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectFunctionDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectDeclaratorContext,0)


        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(CParser.ParameterTypeListContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(CParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_directFunctionDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectFunctionDeclarator" ):
                listener.enterDirectFunctionDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectFunctionDeclarator" ):
                listener.exitDirectFunctionDeclarator(self)




    def directFunctionDeclarator(self):

        localctx = CParser.DirectFunctionDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_directFunctionDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 650
                self.directDeclarator(0)
                self.state = 651
                self.match(CParser.LeftParen)
                self.state = 653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn) | (1 << CParser.ThreadLocal))) != 0) or _la==CParser.Identifier:
                    self.state = 652
                    self.parameterTypeList()


                self.state = 655
                self.match(CParser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 657
                self.directDeclarator(0)
                self.state = 658
                self.match(CParser.LeftParen)
                self.state = 660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.Identifier:
                    self.state = 659
                    self.identifierList()


                self.state = 662
                self.match(CParser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def Colon(self):
            return self.getToken(CParser.Colon, 0)

        def DigitSequence(self):
            return self.getToken(CParser.DigitSequence, 0)

        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext,0)


        def directDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectDeclaratorContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(CParser.TypeSpecifierContext,0)


        def LeftBracket(self):
            return self.getToken(CParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(CParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(CParser.Static, 0)

        def Star(self):
            return self.getToken(CParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(CParser.ParameterTypeListContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(CParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_directDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectDeclarator" ):
                listener.enterDirectDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectDeclarator" ):
                listener.exitDirectDeclarator(self)



    def directDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.DirectDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 106
        self.enterRecursionRule(localctx, 106, self.RULE_directDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 667
                self.match(CParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 668
                self.match(CParser.LeftParen)
                self.state = 669
                self.declarator()
                self.state = 670
                self.match(CParser.RightParen)
                pass

            elif la_ == 3:
                self.state = 672
                self.match(CParser.Identifier)
                self.state = 673
                self.match(CParser.Colon)
                self.state = 674
                self.match(CParser.DigitSequence)
                pass

            elif la_ == 4:
                self.state = 675
                self.match(CParser.LeftParen)
                self.state = 677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.Char) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Float) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Struct) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex))) != 0) or _la==CParser.Identifier:
                    self.state = 676
                    self.typeSpecifier(0)


                self.state = 679
                self.pointer()
                self.state = 680
                self.directDeclarator(0)
                self.state = 681
                self.match(CParser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 730
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 728
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                    if la_ == 1:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 685
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 686
                        self.match(CParser.LeftBracket)
                        self.state = 688
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                            self.state = 687
                            self.typeQualifierList()


                        self.state = 691
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (1 << (CParser.Minus - 74)) | (1 << (CParser.MinusMinus - 74)) | (1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (1 << (CParser.AndAnd - 74)) | (1 << (CParser.Not - 74)) | (1 << (CParser.Tilde - 74)) | (1 << (CParser.Identifier - 74)) | (1 << (CParser.Constant - 74)) | (1 << (CParser.DigitSequence - 74)) | (1 << (CParser.StringLiteral - 74)))) != 0):
                            self.state = 690
                            self.assignmentExpression()


                        self.state = 693
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 694
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 695
                        self.match(CParser.LeftBracket)
                        self.state = 696
                        self.match(CParser.Static)
                        self.state = 698
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                            self.state = 697
                            self.typeQualifierList()


                        self.state = 700
                        self.assignmentExpression()
                        self.state = 701
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 703
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 704
                        self.match(CParser.LeftBracket)
                        self.state = 705
                        self.typeQualifierList()
                        self.state = 706
                        self.match(CParser.Static)
                        self.state = 707
                        self.assignmentExpression()
                        self.state = 708
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 710
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 711
                        self.match(CParser.LeftBracket)
                        self.state = 713
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                            self.state = 712
                            self.typeQualifierList()


                        self.state = 715
                        self.match(CParser.Star)
                        self.state = 716
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 717
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 718
                        self.match(CParser.LeftParen)
                        self.state = 719
                        self.parameterTypeList()
                        self.state = 720
                        self.match(CParser.RightParen)
                        pass

                    elif la_ == 6:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 722
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 723
                        self.match(CParser.LeftParen)
                        self.state = 725
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CParser.Identifier:
                            self.state = 724
                            self.identifierList()


                        self.state = 727
                        self.match(CParser.RightParen)
                        pass

             
                self.state = 732
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class GccDeclaratorExtensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.StringLiteral)
            else:
                return self.getToken(CParser.StringLiteral, i)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(CParser.GccAttributeSpecifierContext,0)


        def getRuleIndex(self):
            return CParser.RULE_gccDeclaratorExtension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccDeclaratorExtension" ):
                listener.enterGccDeclaratorExtension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccDeclaratorExtension" ):
                listener.exitGccDeclaratorExtension(self)




    def gccDeclaratorExtension(self):

        localctx = CParser.GccDeclaratorExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_gccDeclaratorExtension)
        self._la = 0 # Token type
        try:
            self.state = 742
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 733
                self.match(CParser.T__10)
                self.state = 734
                self.match(CParser.LeftParen)
                self.state = 736 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 735
                    self.match(CParser.StringLiteral)
                    self.state = 738 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==CParser.StringLiteral):
                        break

                self.state = 740
                self.match(CParser.RightParen)
                pass
            elif token in [CParser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 741
                self.gccAttributeSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftParen)
            else:
                return self.getToken(CParser.LeftParen, i)

        def gccAttributeList(self):
            return self.getTypedRuleContext(CParser.GccAttributeListContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightParen)
            else:
                return self.getToken(CParser.RightParen, i)

        def getRuleIndex(self):
            return CParser.RULE_gccAttributeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeSpecifier" ):
                listener.enterGccAttributeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeSpecifier" ):
                listener.exitGccAttributeSpecifier(self)




    def gccAttributeSpecifier(self):

        localctx = CParser.GccAttributeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_gccAttributeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self.match(CParser.T__11)
            self.state = 745
            self.match(CParser.LeftParen)
            self.state = 746
            self.match(CParser.LeftParen)
            self.state = 747
            self.gccAttributeList()
            self.state = 748
            self.match(CParser.RightParen)
            self.state = 749
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gccAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccAttributeContext)
            else:
                return self.getTypedRuleContext(CParser.GccAttributeContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_gccAttributeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeList" ):
                listener.enterGccAttributeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeList" ):
                listener.exitGccAttributeList(self)




    def gccAttributeList(self):

        localctx = CParser.GccAttributeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_gccAttributeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__13) | (1 << CParser.T__14) | (1 << CParser.T__15) | (1 << CParser.T__16) | (1 << CParser.Auto) | (1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (1 << CParser.Else) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (1 << CParser.If) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Return) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Sizeof) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Switch) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.While) | (1 << CParser.Alignas) | (1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Generic) | (1 << CParser.Imaginary) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert) | (1 << CParser.ThreadLocal))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CParser.LeftBracket - 64)) | (1 << (CParser.RightBracket - 64)) | (1 << (CParser.LeftBrace - 64)) | (1 << (CParser.RightBrace - 64)) | (1 << (CParser.Less - 64)) | (1 << (CParser.LessEqual - 64)) | (1 << (CParser.Greater - 64)) | (1 << (CParser.GreaterEqual - 64)) | (1 << (CParser.LeftShift - 64)) | (1 << (CParser.RightShift - 64)) | (1 << (CParser.Plus - 64)) | (1 << (CParser.PlusPlus - 64)) | (1 << (CParser.Minus - 64)) | (1 << (CParser.MinusMinus - 64)) | (1 << (CParser.Star - 64)) | (1 << (CParser.Div - 64)) | (1 << (CParser.Mod - 64)) | (1 << (CParser.And - 64)) | (1 << (CParser.Or - 64)) | (1 << (CParser.AndAnd - 64)) | (1 << (CParser.OrOr - 64)) | (1 << (CParser.Caret - 64)) | (1 << (CParser.Not - 64)) | (1 << (CParser.Tilde - 64)) | (1 << (CParser.Question - 64)) | (1 << (CParser.Colon - 64)) | (1 << (CParser.Semi - 64)) | (1 << (CParser.Assign - 64)) | (1 << (CParser.StarAssign - 64)) | (1 << (CParser.DivAssign - 64)) | (1 << (CParser.ModAssign - 64)) | (1 << (CParser.PlusAssign - 64)) | (1 << (CParser.MinusAssign - 64)) | (1 << (CParser.LeftShiftAssign - 64)) | (1 << (CParser.RightShiftAssign - 64)) | (1 << (CParser.AndAssign - 64)) | (1 << (CParser.XorAssign - 64)) | (1 << (CParser.OrAssign - 64)) | (1 << (CParser.Equal - 64)) | (1 << (CParser.NotEqual - 64)) | (1 << (CParser.Arrow - 64)) | (1 << (CParser.Dot - 64)) | (1 << (CParser.Ellipsis - 64)) | (1 << (CParser.Identifier - 64)) | (1 << (CParser.Constant - 64)) | (1 << (CParser.DigitSequence - 64)) | (1 << (CParser.StringLiteral - 64)) | (1 << (CParser.ComplexDefine - 64)) | (1 << (CParser.Macroifdef - 64)) | (1 << (CParser.Macroifndef - 64)) | (1 << (CParser.Macroelse - 64)) | (1 << (CParser.Macroendif - 64)) | (1 << (CParser.IncludeDirective - 64)) | (1 << (CParser.AsmBlock - 64)) | (1 << (CParser.LineAfterPreprocessing - 64)) | (1 << (CParser.LineDirective - 64)) | (1 << (CParser.PragmaDirective - 64)) | (1 << (CParser.Whitespace - 64)) | (1 << (CParser.Newline - 64)) | (1 << (CParser.BlockComment - 64)) | (1 << (CParser.LineComment - 64)))) != 0):
                self.state = 751
                self.gccAttribute()


            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Comma:
                self.state = 754
                self.match(CParser.Comma)
                self.state = 756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__13) | (1 << CParser.T__14) | (1 << CParser.T__15) | (1 << CParser.T__16) | (1 << CParser.Auto) | (1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (1 << CParser.Else) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (1 << CParser.If) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Return) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Sizeof) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Switch) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.While) | (1 << CParser.Alignas) | (1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Generic) | (1 << CParser.Imaginary) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert) | (1 << CParser.ThreadLocal))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CParser.LeftBracket - 64)) | (1 << (CParser.RightBracket - 64)) | (1 << (CParser.LeftBrace - 64)) | (1 << (CParser.RightBrace - 64)) | (1 << (CParser.Less - 64)) | (1 << (CParser.LessEqual - 64)) | (1 << (CParser.Greater - 64)) | (1 << (CParser.GreaterEqual - 64)) | (1 << (CParser.LeftShift - 64)) | (1 << (CParser.RightShift - 64)) | (1 << (CParser.Plus - 64)) | (1 << (CParser.PlusPlus - 64)) | (1 << (CParser.Minus - 64)) | (1 << (CParser.MinusMinus - 64)) | (1 << (CParser.Star - 64)) | (1 << (CParser.Div - 64)) | (1 << (CParser.Mod - 64)) | (1 << (CParser.And - 64)) | (1 << (CParser.Or - 64)) | (1 << (CParser.AndAnd - 64)) | (1 << (CParser.OrOr - 64)) | (1 << (CParser.Caret - 64)) | (1 << (CParser.Not - 64)) | (1 << (CParser.Tilde - 64)) | (1 << (CParser.Question - 64)) | (1 << (CParser.Colon - 64)) | (1 << (CParser.Semi - 64)) | (1 << (CParser.Assign - 64)) | (1 << (CParser.StarAssign - 64)) | (1 << (CParser.DivAssign - 64)) | (1 << (CParser.ModAssign - 64)) | (1 << (CParser.PlusAssign - 64)) | (1 << (CParser.MinusAssign - 64)) | (1 << (CParser.LeftShiftAssign - 64)) | (1 << (CParser.RightShiftAssign - 64)) | (1 << (CParser.AndAssign - 64)) | (1 << (CParser.XorAssign - 64)) | (1 << (CParser.OrAssign - 64)) | (1 << (CParser.Equal - 64)) | (1 << (CParser.NotEqual - 64)) | (1 << (CParser.Arrow - 64)) | (1 << (CParser.Dot - 64)) | (1 << (CParser.Ellipsis - 64)) | (1 << (CParser.Identifier - 64)) | (1 << (CParser.Constant - 64)) | (1 << (CParser.DigitSequence - 64)) | (1 << (CParser.StringLiteral - 64)) | (1 << (CParser.ComplexDefine - 64)) | (1 << (CParser.Macroifdef - 64)) | (1 << (CParser.Macroifndef - 64)) | (1 << (CParser.Macroelse - 64)) | (1 << (CParser.Macroendif - 64)) | (1 << (CParser.IncludeDirective - 64)) | (1 << (CParser.AsmBlock - 64)) | (1 << (CParser.LineAfterPreprocessing - 64)) | (1 << (CParser.LineDirective - 64)) | (1 << (CParser.PragmaDirective - 64)) | (1 << (CParser.Whitespace - 64)) | (1 << (CParser.Newline - 64)) | (1 << (CParser.BlockComment - 64)) | (1 << (CParser.LineComment - 64)))) != 0):
                    self.state = 755
                    self.gccAttribute()


                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftParen)
            else:
                return self.getToken(CParser.LeftParen, i)

        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightParen)
            else:
                return self.getToken(CParser.RightParen, i)

        def argumentExpressionList(self):
            return self.getTypedRuleContext(CParser.ArgumentExpressionListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_gccAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttribute" ):
                listener.enterGccAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttribute" ):
                listener.exitGccAttribute(self)




    def gccAttribute(self):

        localctx = CParser.GccAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_gccAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            _la = self._input.LA(1)
            if _la <= 0 or ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & ((1 << (CParser.LeftParen - 62)) | (1 << (CParser.RightParen - 62)) | (1 << (CParser.Comma - 62)))) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CParser.LeftParen:
                self.state = 764
                self.match(CParser.LeftParen)
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Float) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Sizeof) | (1 << CParser.Struct) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (1 << (CParser.Minus - 74)) | (1 << (CParser.MinusMinus - 74)) | (1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (1 << (CParser.AndAnd - 74)) | (1 << (CParser.Not - 74)) | (1 << (CParser.Tilde - 74)) | (1 << (CParser.Identifier - 74)) | (1 << (CParser.Constant - 74)) | (1 << (CParser.DigitSequence - 74)) | (1 << (CParser.StringLiteral - 74)))) != 0):
                    self.state = 765
                    self.argumentExpressionList()


                self.state = 768
                self.match(CParser.RightParen)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedParenthesesBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftParen)
            else:
                return self.getToken(CParser.LeftParen, i)

        def nestedParenthesesBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.NestedParenthesesBlockContext)
            else:
                return self.getTypedRuleContext(CParser.NestedParenthesesBlockContext,i)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightParen)
            else:
                return self.getToken(CParser.RightParen, i)

        def getRuleIndex(self):
            return CParser.RULE_nestedParenthesesBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedParenthesesBlock" ):
                listener.enterNestedParenthesesBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedParenthesesBlock" ):
                listener.exitNestedParenthesesBlock(self)




    def nestedParenthesesBlock(self):

        localctx = CParser.NestedParenthesesBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_nestedParenthesesBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__13) | (1 << CParser.T__14) | (1 << CParser.T__15) | (1 << CParser.T__16) | (1 << CParser.Auto) | (1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (1 << CParser.Else) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (1 << CParser.If) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Return) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Sizeof) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Switch) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.While) | (1 << CParser.Alignas) | (1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Generic) | (1 << CParser.Imaginary) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert) | (1 << CParser.ThreadLocal) | (1 << CParser.LeftParen))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CParser.LeftBracket - 64)) | (1 << (CParser.RightBracket - 64)) | (1 << (CParser.LeftBrace - 64)) | (1 << (CParser.RightBrace - 64)) | (1 << (CParser.Less - 64)) | (1 << (CParser.LessEqual - 64)) | (1 << (CParser.Greater - 64)) | (1 << (CParser.GreaterEqual - 64)) | (1 << (CParser.LeftShift - 64)) | (1 << (CParser.RightShift - 64)) | (1 << (CParser.Plus - 64)) | (1 << (CParser.PlusPlus - 64)) | (1 << (CParser.Minus - 64)) | (1 << (CParser.MinusMinus - 64)) | (1 << (CParser.Star - 64)) | (1 << (CParser.Div - 64)) | (1 << (CParser.Mod - 64)) | (1 << (CParser.And - 64)) | (1 << (CParser.Or - 64)) | (1 << (CParser.AndAnd - 64)) | (1 << (CParser.OrOr - 64)) | (1 << (CParser.Caret - 64)) | (1 << (CParser.Not - 64)) | (1 << (CParser.Tilde - 64)) | (1 << (CParser.Question - 64)) | (1 << (CParser.Colon - 64)) | (1 << (CParser.Semi - 64)) | (1 << (CParser.Comma - 64)) | (1 << (CParser.Assign - 64)) | (1 << (CParser.StarAssign - 64)) | (1 << (CParser.DivAssign - 64)) | (1 << (CParser.ModAssign - 64)) | (1 << (CParser.PlusAssign - 64)) | (1 << (CParser.MinusAssign - 64)) | (1 << (CParser.LeftShiftAssign - 64)) | (1 << (CParser.RightShiftAssign - 64)) | (1 << (CParser.AndAssign - 64)) | (1 << (CParser.XorAssign - 64)) | (1 << (CParser.OrAssign - 64)) | (1 << (CParser.Equal - 64)) | (1 << (CParser.NotEqual - 64)) | (1 << (CParser.Arrow - 64)) | (1 << (CParser.Dot - 64)) | (1 << (CParser.Ellipsis - 64)) | (1 << (CParser.Identifier - 64)) | (1 << (CParser.Constant - 64)) | (1 << (CParser.DigitSequence - 64)) | (1 << (CParser.StringLiteral - 64)) | (1 << (CParser.ComplexDefine - 64)) | (1 << (CParser.Macroifdef - 64)) | (1 << (CParser.Macroifndef - 64)) | (1 << (CParser.Macroelse - 64)) | (1 << (CParser.Macroendif - 64)) | (1 << (CParser.IncludeDirective - 64)) | (1 << (CParser.AsmBlock - 64)) | (1 << (CParser.LineAfterPreprocessing - 64)) | (1 << (CParser.LineDirective - 64)) | (1 << (CParser.PragmaDirective - 64)) | (1 << (CParser.Whitespace - 64)) | (1 << (CParser.Newline - 64)) | (1 << (CParser.BlockComment - 64)) | (1 << (CParser.LineComment - 64)))) != 0):
                self.state = 776
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CParser.T__0, CParser.T__1, CParser.T__2, CParser.T__3, CParser.T__4, CParser.T__5, CParser.T__6, CParser.T__7, CParser.T__8, CParser.T__9, CParser.T__10, CParser.T__11, CParser.T__12, CParser.T__13, CParser.T__14, CParser.T__15, CParser.T__16, CParser.Auto, CParser.Break, CParser.Case, CParser.Char, CParser.Const, CParser.Continue, CParser.Default, CParser.Do, CParser.Double, CParser.Else, CParser.Enum, CParser.Extern, CParser.Float, CParser.For, CParser.Goto, CParser.If, CParser.Inline, CParser.Int, CParser.Long, CParser.Register, CParser.Restrict, CParser.Return, CParser.Short, CParser.Signed, CParser.Sizeof, CParser.Static, CParser.Struct, CParser.Switch, CParser.Typedef, CParser.Union, CParser.Unsigned, CParser.Void, CParser.Volatile, CParser.While, CParser.Alignas, CParser.Alignof, CParser.Atomic, CParser.Bool, CParser.Complex, CParser.Generic, CParser.Imaginary, CParser.Noreturn, CParser.StaticAssert, CParser.ThreadLocal, CParser.LeftBracket, CParser.RightBracket, CParser.LeftBrace, CParser.RightBrace, CParser.Less, CParser.LessEqual, CParser.Greater, CParser.GreaterEqual, CParser.LeftShift, CParser.RightShift, CParser.Plus, CParser.PlusPlus, CParser.Minus, CParser.MinusMinus, CParser.Star, CParser.Div, CParser.Mod, CParser.And, CParser.Or, CParser.AndAnd, CParser.OrOr, CParser.Caret, CParser.Not, CParser.Tilde, CParser.Question, CParser.Colon, CParser.Semi, CParser.Comma, CParser.Assign, CParser.StarAssign, CParser.DivAssign, CParser.ModAssign, CParser.PlusAssign, CParser.MinusAssign, CParser.LeftShiftAssign, CParser.RightShiftAssign, CParser.AndAssign, CParser.XorAssign, CParser.OrAssign, CParser.Equal, CParser.NotEqual, CParser.Arrow, CParser.Dot, CParser.Ellipsis, CParser.Identifier, CParser.Constant, CParser.DigitSequence, CParser.StringLiteral, CParser.ComplexDefine, CParser.Macroifdef, CParser.Macroifndef, CParser.Macroelse, CParser.Macroendif, CParser.IncludeDirective, CParser.AsmBlock, CParser.LineAfterPreprocessing, CParser.LineDirective, CParser.PragmaDirective, CParser.Whitespace, CParser.Newline, CParser.BlockComment, CParser.LineComment]:
                    self.state = 771
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==CParser.LeftParen or _la==CParser.RightParen:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [CParser.LeftParen]:
                    self.state = 772
                    self.match(CParser.LeftParen)
                    self.state = 773
                    self.nestedParenthesesBlock()
                    self.state = 774
                    self.match(CParser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Star)
            else:
                return self.getToken(CParser.Star, i)

        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Caret)
            else:
                return self.getToken(CParser.Caret, i)

        def typeQualifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.TypeQualifierListContext)
            else:
                return self.getTypedRuleContext(CParser.TypeQualifierListContext,i)


        def getRuleIndex(self):
            return CParser.RULE_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer" ):
                listener.enterPointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer" ):
                listener.exitPointer(self)




    def pointer(self):

        localctx = CParser.PointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_pointer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 781
                    _la = self._input.LA(1)
                    if not(_la==CParser.Star or _la==CParser.Caret):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 783
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                    if la_ == 1:
                        self.state = 782
                        self.typeQualifierList()



                else:
                    raise NoViableAltException(self)
                self.state = 787 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeQualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.TypeQualifierContext)
            else:
                return self.getTypedRuleContext(CParser.TypeQualifierContext,i)


        def getRuleIndex(self):
            return CParser.RULE_typeQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifierList" ):
                listener.enterTypeQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifierList" ):
                listener.exitTypeQualifierList(self)




    def typeQualifierList(self):

        localctx = CParser.TypeQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_typeQualifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 790 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 789
                    self.typeQualifier()

                else:
                    raise NoViableAltException(self)
                self.state = 792 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,87,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(CParser.ParameterListContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def Ellipsis(self):
            return self.getToken(CParser.Ellipsis, 0)

        def getRuleIndex(self):
            return CParser.RULE_parameterTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterTypeList" ):
                listener.enterParameterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterTypeList" ):
                listener.exitParameterTypeList(self)




    def parameterTypeList(self):

        localctx = CParser.ParameterTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_parameterTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self.parameterList()
            self.state = 797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CParser.Comma:
                self.state = 795
                self.match(CParser.Comma)
                self.state = 796
                self.match(CParser.Ellipsis)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(CParser.ParameterDeclarationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)




    def parameterList(self):

        localctx = CParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_parameterList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.parameterDeclaration()
            self.state = 804
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 800
                    self.match(CParser.Comma)
                    self.state = 801
                    self.parameterDeclaration() 
                self.state = 806
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiersContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def declarationSpecifiers2(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiers2Context,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(CParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return CParser.RULE_parameterDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDeclaration" ):
                listener.enterParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDeclaration" ):
                listener.exitParameterDeclaration(self)




    def parameterDeclaration(self):

        localctx = CParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_parameterDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 814
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 807
                self.declarationSpecifiers()
                self.state = 808
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 810
                self.declarationSpecifiers2()
                self.state = 812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & ((1 << (CParser.LeftParen - 62)) | (1 << (CParser.LeftBracket - 62)) | (1 << (CParser.Star - 62)) | (1 << (CParser.Caret - 62)))) != 0):
                    self.state = 811
                    self.abstractDeclarator()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Identifier)
            else:
                return self.getToken(CParser.Identifier, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = CParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.match(CParser.Identifier)
            self.state = 821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Comma:
                self.state = 817
                self.match(CParser.Comma)
                self.state = 818
                self.match(CParser.Identifier)
                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(CParser.SpecifierQualifierListContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(CParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return CParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)




    def typeName(self):

        localctx = CParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_typeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.specifierQualifierList()
            self.state = 826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & ((1 << (CParser.LeftParen - 62)) | (1 << (CParser.LeftBracket - 62)) | (1 << (CParser.Star - 62)) | (1 << (CParser.Caret - 62)))) != 0):
                self.state = 825
                self.abstractDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectAbstractDeclaratorContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(CParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return CParser.RULE_abstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractDeclarator" ):
                listener.enterAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractDeclarator" ):
                listener.exitAbstractDeclarator(self)




    def abstractDeclarator(self):

        localctx = CParser.AbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_abstractDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 839
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 828
                self.pointer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.Star or _la==CParser.Caret:
                    self.state = 829
                    self.pointer()


                self.state = 832
                self.directAbstractDeclarator(0)
                self.state = 836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CParser.T__10 or _la==CParser.T__11:
                    self.state = 833
                    self.gccDeclaratorExtension()
                    self.state = 838
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectAbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def abstractDeclarator(self):
            return self.getTypedRuleContext(CParser.AbstractDeclaratorContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(CParser.GccDeclaratorExtensionContext,i)


        def LeftBracket(self):
            return self.getToken(CParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(CParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(CParser.Static, 0)

        def Star(self):
            return self.getToken(CParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(CParser.ParameterTypeListContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectAbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return CParser.RULE_directAbstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectAbstractDeclarator" ):
                listener.enterDirectAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectAbstractDeclarator" ):
                listener.exitDirectAbstractDeclarator(self)



    def directAbstractDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.DirectAbstractDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 134
        self.enterRecursionRule(localctx, 134, self.RULE_directAbstractDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 842
                self.match(CParser.LeftParen)
                self.state = 843
                self.abstractDeclarator()
                self.state = 844
                self.match(CParser.RightParen)
                self.state = 848
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 845
                        self.gccDeclaratorExtension() 
                    self.state = 850
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

                pass

            elif la_ == 2:
                self.state = 851
                self.match(CParser.LeftBracket)
                self.state = 853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                    self.state = 852
                    self.typeQualifierList()


                self.state = 856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (1 << (CParser.Minus - 74)) | (1 << (CParser.MinusMinus - 74)) | (1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (1 << (CParser.AndAnd - 74)) | (1 << (CParser.Not - 74)) | (1 << (CParser.Tilde - 74)) | (1 << (CParser.Identifier - 74)) | (1 << (CParser.Constant - 74)) | (1 << (CParser.DigitSequence - 74)) | (1 << (CParser.StringLiteral - 74)))) != 0):
                    self.state = 855
                    self.assignmentExpression()


                self.state = 858
                self.match(CParser.RightBracket)
                pass

            elif la_ == 3:
                self.state = 859
                self.match(CParser.LeftBracket)
                self.state = 860
                self.match(CParser.Static)
                self.state = 862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                    self.state = 861
                    self.typeQualifierList()


                self.state = 864
                self.assignmentExpression()
                self.state = 865
                self.match(CParser.RightBracket)
                pass

            elif la_ == 4:
                self.state = 867
                self.match(CParser.LeftBracket)
                self.state = 868
                self.typeQualifierList()
                self.state = 869
                self.match(CParser.Static)
                self.state = 870
                self.assignmentExpression()
                self.state = 871
                self.match(CParser.RightBracket)
                pass

            elif la_ == 5:
                self.state = 873
                self.match(CParser.LeftBracket)
                self.state = 874
                self.match(CParser.Star)
                self.state = 875
                self.match(CParser.RightBracket)
                pass

            elif la_ == 6:
                self.state = 876
                self.match(CParser.LeftParen)
                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn) | (1 << CParser.ThreadLocal))) != 0) or _la==CParser.Identifier:
                    self.state = 877
                    self.parameterTypeList()


                self.state = 880
                self.match(CParser.RightParen)
                self.state = 884
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 881
                        self.gccDeclaratorExtension() 
                    self.state = 886
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 932
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 930
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                    if la_ == 1:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 889
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 890
                        self.match(CParser.LeftBracket)
                        self.state = 892
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                            self.state = 891
                            self.typeQualifierList()


                        self.state = 895
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (1 << (CParser.Minus - 74)) | (1 << (CParser.MinusMinus - 74)) | (1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (1 << (CParser.AndAnd - 74)) | (1 << (CParser.Not - 74)) | (1 << (CParser.Tilde - 74)) | (1 << (CParser.Identifier - 74)) | (1 << (CParser.Constant - 74)) | (1 << (CParser.DigitSequence - 74)) | (1 << (CParser.StringLiteral - 74)))) != 0):
                            self.state = 894
                            self.assignmentExpression()


                        self.state = 897
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 898
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 899
                        self.match(CParser.LeftBracket)
                        self.state = 900
                        self.match(CParser.Static)
                        self.state = 902
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                            self.state = 901
                            self.typeQualifierList()


                        self.state = 904
                        self.assignmentExpression()
                        self.state = 905
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 907
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 908
                        self.match(CParser.LeftBracket)
                        self.state = 909
                        self.typeQualifierList()
                        self.state = 910
                        self.match(CParser.Static)
                        self.state = 911
                        self.assignmentExpression()
                        self.state = 912
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 914
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 915
                        self.match(CParser.LeftBracket)
                        self.state = 916
                        self.match(CParser.Star)
                        self.state = 917
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 918
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 919
                        self.match(CParser.LeftParen)
                        self.state = 921
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn) | (1 << CParser.ThreadLocal))) != 0) or _la==CParser.Identifier:
                            self.state = 920
                            self.parameterTypeList()


                        self.state = 923
                        self.match(CParser.RightParen)
                        self.state = 927
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 924
                                self.gccDeclaratorExtension() 
                            self.state = 929
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

                        pass

             
                self.state = 934
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypedefNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_typedefName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefName" ):
                listener.enterTypedefName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefName" ):
                listener.exitTypedefName(self)




    def typedefName(self):

        localctx = CParser.TypedefNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_typedefName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            self.match(CParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def LeftBrace(self):
            return self.getToken(CParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(CParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(CParser.RightBrace, 0)

        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def getRuleIndex(self):
            return CParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)




    def initializer(self):

        localctx = CParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_initializer)
        self._la = 0 # Token type
        try:
            self.state = 947
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 937
                self.assignmentExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 938
                self.match(CParser.LeftBrace)
                self.state = 939
                self.initializerList()
                self.state = 941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.Comma:
                    self.state = 940
                    self.match(CParser.Comma)


                self.state = 943
                self.match(CParser.RightBrace)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 945
                self.match(CParser.LeftBrace)
                self.state = 946
                self.match(CParser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.InitializerContext)
            else:
                return self.getTypedRuleContext(CParser.InitializerContext,i)


        def designation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DesignationContext)
            else:
                return self.getTypedRuleContext(CParser.DesignationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_initializerList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerList" ):
                listener.enterInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerList" ):
                listener.exitInitializerList(self)




    def initializerList(self):

        localctx = CParser.InitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_initializerList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CParser.LeftBracket or _la==CParser.Dot:
                self.state = 949
                self.designation()


            self.state = 952
            self.initializer()
            self.state = 960
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 953
                    self.match(CParser.Comma)
                    self.state = 955
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CParser.LeftBracket or _la==CParser.Dot:
                        self.state = 954
                        self.designation()


                    self.state = 957
                    self.initializer() 
                self.state = 962
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designatorList(self):
            return self.getTypedRuleContext(CParser.DesignatorListContext,0)


        def Assign(self):
            return self.getToken(CParser.Assign, 0)

        def getRuleIndex(self):
            return CParser.RULE_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignation" ):
                listener.enterDesignation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignation" ):
                listener.exitDesignation(self)




    def designation(self):

        localctx = CParser.DesignationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self.designatorList()
            self.state = 964
            self.match(CParser.Assign)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DesignatorContext)
            else:
                return self.getTypedRuleContext(CParser.DesignatorContext,i)


        def getRuleIndex(self):
            return CParser.RULE_designatorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignatorList" ):
                listener.enterDesignatorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignatorList" ):
                listener.exitDesignatorList(self)




    def designatorList(self):

        localctx = CParser.DesignatorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_designatorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 966
                self.designator()
                self.state = 969 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==CParser.LeftBracket or _la==CParser.Dot):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(CParser.LeftBracket, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def RightBracket(self):
            return self.getToken(CParser.RightBracket, 0)

        def Dot(self):
            return self.getToken(CParser.Dot, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_designator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignator" ):
                listener.enterDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignator" ):
                listener.exitDesignator(self)




    def designator(self):

        localctx = CParser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_designator)
        try:
            self.state = 977
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 971
                self.match(CParser.LeftBracket)
                self.state = 972
                self.constantExpression()
                self.state = 973
                self.match(CParser.RightBracket)
                pass
            elif token in [CParser.Dot]:
                self.enterOuterAlt(localctx, 2)
                self.state = 975
                self.match(CParser.Dot)
                self.state = 976
                self.match(CParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticAssertDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StaticAssert(self):
            return self.getToken(CParser.StaticAssert, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.StringLiteral)
            else:
                return self.getToken(CParser.StringLiteral, i)

        def getRuleIndex(self):
            return CParser.RULE_staticAssertDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticAssertDeclaration" ):
                listener.enterStaticAssertDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticAssertDeclaration" ):
                listener.exitStaticAssertDeclaration(self)




    def staticAssertDeclaration(self):

        localctx = CParser.StaticAssertDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_staticAssertDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.match(CParser.StaticAssert)
            self.state = 980
            self.match(CParser.LeftParen)
            self.state = 981
            self.constantExpression()
            self.state = 982
            self.match(CParser.Comma)
            self.state = 984 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 983
                self.match(CParser.StringLiteral)
                self.state = 986 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==CParser.StringLiteral):
                    break

            self.state = 988
            self.match(CParser.RightParen)
            self.state = 989
            self.match(CParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledStatement(self):
            return self.getTypedRuleContext(CParser.LabeledStatementContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(CParser.CompoundStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(CParser.ExpressionStatementContext,0)


        def selectionStatement(self):
            return self.getTypedRuleContext(CParser.SelectionStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(CParser.IterationStatementContext,0)


        def jumpStatement(self):
            return self.getTypedRuleContext(CParser.JumpStatementContext,0)


        def macroSelectionStatement(self):
            return self.getTypedRuleContext(CParser.MacroSelectionStatementContext,0)


        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def Volatile(self):
            return self.getToken(CParser.Volatile, 0)

        def logicalOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.LogicalOrExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.LogicalOrExpressionContext,i)


        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Colon)
            else:
                return self.getToken(CParser.Colon, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = CParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1029
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 991
                self.labeledStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 992
                self.compoundStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 993
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 994
                self.selectionStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 995
                self.iterationStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 996
                self.jumpStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 997
                self.macroSelectionStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 998
                _la = self._input.LA(1)
                if not(_la==CParser.T__10 or _la==CParser.T__12):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 999
                _la = self._input.LA(1)
                if not(_la==CParser.T__13 or _la==CParser.Volatile):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1000
                self.match(CParser.LeftParen)
                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (1 << (CParser.Minus - 74)) | (1 << (CParser.MinusMinus - 74)) | (1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (1 << (CParser.AndAnd - 74)) | (1 << (CParser.Not - 74)) | (1 << (CParser.Tilde - 74)) | (1 << (CParser.Identifier - 74)) | (1 << (CParser.Constant - 74)) | (1 << (CParser.DigitSequence - 74)) | (1 << (CParser.StringLiteral - 74)))) != 0):
                    self.state = 1001
                    self.logicalOrExpression()
                    self.state = 1006
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==CParser.Comma:
                        self.state = 1002
                        self.match(CParser.Comma)
                        self.state = 1003
                        self.logicalOrExpression()
                        self.state = 1008
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CParser.Colon:
                    self.state = 1011
                    self.match(CParser.Colon)
                    self.state = 1020
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (1 << (CParser.Minus - 74)) | (1 << (CParser.MinusMinus - 74)) | (1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (1 << (CParser.AndAnd - 74)) | (1 << (CParser.Not - 74)) | (1 << (CParser.Tilde - 74)) | (1 << (CParser.Identifier - 74)) | (1 << (CParser.Constant - 74)) | (1 << (CParser.DigitSequence - 74)) | (1 << (CParser.StringLiteral - 74)))) != 0):
                        self.state = 1012
                        self.logicalOrExpression()
                        self.state = 1017
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==CParser.Comma:
                            self.state = 1013
                            self.match(CParser.Comma)
                            self.state = 1014
                            self.logicalOrExpression()
                            self.state = 1019
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 1026
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1027
                self.match(CParser.RightParen)
                self.state = 1028
                self.match(CParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Colon(self):
            return self.getToken(CParser.Colon, 0)

        def blockItemList(self):
            return self.getTypedRuleContext(CParser.BlockItemListContext,0)


        def Case(self):
            return self.getToken(CParser.Case, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def Default(self):
            return self.getToken(CParser.Default, 0)

        def getRuleIndex(self):
            return CParser.RULE_labeledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStatement" ):
                listener.enterLabeledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStatement" ):
                listener.exitLabeledStatement(self)




    def labeledStatement(self):

        localctx = CParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_labeledStatement)
        try:
            self.state = 1042
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1031
                self.match(CParser.Identifier)
                self.state = 1032
                self.match(CParser.Colon)
                self.state = 1033
                self.blockItemList()
                pass
            elif token in [CParser.Case]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1034
                self.match(CParser.Case)
                self.state = 1035
                self.constantExpression()
                self.state = 1036
                self.match(CParser.Colon)
                self.state = 1037
                self.blockItemList()
                pass
            elif token in [CParser.Default]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1039
                self.match(CParser.Default)
                self.state = 1040
                self.match(CParser.Colon)
                self.state = 1041
                self.blockItemList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(CParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CParser.RightBrace, 0)

        def blockItemList(self):
            return self.getTypedRuleContext(CParser.BlockItemListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)




    def compoundStatement(self):

        localctx = CParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_compoundStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self.match(CParser.LeftBrace)
            self.state = 1046
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__14) | (1 << CParser.Auto) | (1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (1 << CParser.If) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Return) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Sizeof) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Switch) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.While) | (1 << CParser.Alignas) | (1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Generic) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert) | (1 << CParser.ThreadLocal) | (1 << CParser.LeftParen))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CParser.LeftBrace - 66)) | (1 << (CParser.Plus - 66)) | (1 << (CParser.PlusPlus - 66)) | (1 << (CParser.Minus - 66)) | (1 << (CParser.MinusMinus - 66)) | (1 << (CParser.Star - 66)) | (1 << (CParser.And - 66)) | (1 << (CParser.AndAnd - 66)) | (1 << (CParser.Not - 66)) | (1 << (CParser.Tilde - 66)) | (1 << (CParser.Semi - 66)) | (1 << (CParser.Identifier - 66)) | (1 << (CParser.Constant - 66)) | (1 << (CParser.DigitSequence - 66)) | (1 << (CParser.StringLiteral - 66)))) != 0):
                self.state = 1045
                self.blockItemList()


            self.state = 1048
            self.match(CParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.BlockItemContext)
            else:
                return self.getTypedRuleContext(CParser.BlockItemContext,i)


        def getRuleIndex(self):
            return CParser.RULE_blockItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItemList" ):
                listener.enterBlockItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItemList" ):
                listener.exitBlockItemList(self)




    def blockItemList(self):

        localctx = CParser.BlockItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_blockItemList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1050
                    self.blockItem()

                else:
                    raise NoViableAltException(self)
                self.state = 1053 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(CParser.DeclarationContext,0)


        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext,0)


        def getRuleIndex(self):
            return CParser.RULE_blockItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItem" ):
                listener.enterBlockItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItem" ):
                listener.exitBlockItem(self)




    def blockItem(self):

        localctx = CParser.BlockItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_blockItem)
        try:
            self.state = 1057
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1055
                self.declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1056
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = CParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_expressionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (1 << (CParser.Minus - 74)) | (1 << (CParser.MinusMinus - 74)) | (1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (1 << (CParser.AndAnd - 74)) | (1 << (CParser.Not - 74)) | (1 << (CParser.Tilde - 74)) | (1 << (CParser.Identifier - 74)) | (1 << (CParser.Constant - 74)) | (1 << (CParser.DigitSequence - 74)) | (1 << (CParser.StringLiteral - 74)))) != 0):
                self.state = 1059
                self.expression()


            self.state = 1062
            self.match(CParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(CParser.If, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.StatementContext)
            else:
                return self.getTypedRuleContext(CParser.StatementContext,i)


        def Else(self):
            return self.getToken(CParser.Else, 0)

        def Switch(self):
            return self.getToken(CParser.Switch, 0)

        def getRuleIndex(self):
            return CParser.RULE_selectionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionStatement" ):
                listener.enterSelectionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionStatement" ):
                listener.exitSelectionStatement(self)




    def selectionStatement(self):

        localctx = CParser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_selectionStatement)
        try:
            self.state = 1079
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.If]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1064
                self.match(CParser.If)
                self.state = 1065
                self.match(CParser.LeftParen)
                self.state = 1066
                self.expression()
                self.state = 1067
                self.match(CParser.RightParen)
                self.state = 1068
                self.statement()
                self.state = 1071
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 1069
                    self.match(CParser.Else)
                    self.state = 1070
                    self.statement()


                pass
            elif token in [CParser.Switch]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1073
                self.match(CParser.Switch)
                self.state = 1074
                self.match(CParser.LeftParen)
                self.state = 1075
                self.expression()
                self.state = 1076
                self.match(CParser.RightParen)
                self.state = 1077
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroSelectionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def blockItemList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.BlockItemListContext)
            else:
                return self.getTypedRuleContext(CParser.BlockItemListContext,i)


        def getRuleIndex(self):
            return CParser.RULE_macroSelectionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroSelectionStatement" ):
                listener.enterMacroSelectionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroSelectionStatement" ):
                listener.exitMacroSelectionStatement(self)




    def macroSelectionStatement(self):

        localctx = CParser.MacroSelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_macroSelectionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1081
            self.match(CParser.T__14)
            self.state = 1082
            self.match(CParser.Identifier)
            self.state = 1083
            self.blockItemList()
            self.state = 1086
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CParser.T__15:
                self.state = 1084
                self.match(CParser.T__15)
                self.state = 1085
                self.blockItemList()


            self.state = 1088
            self.match(CParser.T__16)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(CParser.While, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext,0)


        def Do(self):
            return self.getToken(CParser.Do, 0)

        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def For(self):
            return self.getToken(CParser.For, 0)

        def forCondition(self):
            return self.getTypedRuleContext(CParser.ForConditionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_iterationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationStatement" ):
                listener.enterIterationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationStatement" ):
                listener.exitIterationStatement(self)




    def iterationStatement(self):

        localctx = CParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_iterationStatement)
        try:
            self.state = 1110
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.While]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1090
                self.match(CParser.While)
                self.state = 1091
                self.match(CParser.LeftParen)
                self.state = 1092
                self.expression()
                self.state = 1093
                self.match(CParser.RightParen)
                self.state = 1094
                self.statement()
                pass
            elif token in [CParser.Do]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1096
                self.match(CParser.Do)
                self.state = 1097
                self.statement()
                self.state = 1098
                self.match(CParser.While)
                self.state = 1099
                self.match(CParser.LeftParen)
                self.state = 1100
                self.expression()
                self.state = 1101
                self.match(CParser.RightParen)
                self.state = 1102
                self.match(CParser.Semi)
                pass
            elif token in [CParser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1104
                self.match(CParser.For)
                self.state = 1105
                self.match(CParser.LeftParen)
                self.state = 1106
                self.forCondition()
                self.state = 1107
                self.match(CParser.RightParen)
                self.state = 1108
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Semi)
            else:
                return self.getToken(CParser.Semi, i)

        def forDeclaration(self):
            return self.getTypedRuleContext(CParser.ForDeclarationContext,0)


        def forExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ForExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.ForExpressionContext,i)


        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_forCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForCondition" ):
                listener.enterForCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForCondition" ):
                listener.exitForCondition(self)




    def forCondition(self):

        localctx = CParser.ForConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_forCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1116
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 1112
                self.forDeclaration()
                pass

            elif la_ == 2:
                self.state = 1114
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (1 << (CParser.Minus - 74)) | (1 << (CParser.MinusMinus - 74)) | (1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (1 << (CParser.AndAnd - 74)) | (1 << (CParser.Not - 74)) | (1 << (CParser.Tilde - 74)) | (1 << (CParser.Identifier - 74)) | (1 << (CParser.Constant - 74)) | (1 << (CParser.DigitSequence - 74)) | (1 << (CParser.StringLiteral - 74)))) != 0):
                    self.state = 1113
                    self.expression()


                pass


            self.state = 1118
            self.match(CParser.Semi)
            self.state = 1120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (1 << (CParser.Minus - 74)) | (1 << (CParser.MinusMinus - 74)) | (1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (1 << (CParser.AndAnd - 74)) | (1 << (CParser.Not - 74)) | (1 << (CParser.Tilde - 74)) | (1 << (CParser.Identifier - 74)) | (1 << (CParser.Constant - 74)) | (1 << (CParser.DigitSequence - 74)) | (1 << (CParser.StringLiteral - 74)))) != 0):
                self.state = 1119
                self.forExpression()


            self.state = 1122
            self.match(CParser.Semi)
            self.state = 1124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (1 << (CParser.Minus - 74)) | (1 << (CParser.MinusMinus - 74)) | (1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (1 << (CParser.AndAnd - 74)) | (1 << (CParser.Not - 74)) | (1 << (CParser.Tilde - 74)) | (1 << (CParser.Identifier - 74)) | (1 << (CParser.Constant - 74)) | (1 << (CParser.DigitSequence - 74)) | (1 << (CParser.StringLiteral - 74)))) != 0):
                self.state = 1123
                self.forExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiersContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(CParser.InitDeclaratorListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_forDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForDeclaration" ):
                listener.enterForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForDeclaration" ):
                listener.exitForDeclaration(self)




    def forDeclaration(self):

        localctx = CParser.ForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_forDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1126
            self.declarationSpecifiers()
            self.state = 1128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & ((1 << (CParser.LeftParen - 62)) | (1 << (CParser.Star - 62)) | (1 << (CParser.Caret - 62)) | (1 << (CParser.Identifier - 62)))) != 0):
                self.state = 1127
                self.initDeclaratorList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_forExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpression" ):
                listener.enterForExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpression" ):
                listener.exitForExpression(self)




    def forExpression(self):

        localctx = CParser.ForExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_forExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self.assignmentExpression()
            self.state = 1135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Comma:
                self.state = 1131
                self.match(CParser.Comma)
                self.state = 1132
                self.assignmentExpression()
                self.state = 1137
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def Goto(self):
            return self.getToken(CParser.Goto, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Return(self):
            return self.getToken(CParser.Return, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext,0)


        def Continue(self):
            return self.getToken(CParser.Continue, 0)

        def Break(self):
            return self.getToken(CParser.Break, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_jumpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpStatement" ):
                listener.enterJumpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpStatement" ):
                listener.exitJumpStatement(self)




    def jumpStatement(self):

        localctx = CParser.JumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_jumpStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1147
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1138
                self.match(CParser.Goto)
                self.state = 1139
                self.match(CParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 1140
                _la = self._input.LA(1)
                if not(_la==CParser.Break or _la==CParser.Continue):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.state = 1141
                self.match(CParser.Return)
                self.state = 1143
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (CParser.Plus - 74)) | (1 << (CParser.PlusPlus - 74)) | (1 << (CParser.Minus - 74)) | (1 << (CParser.MinusMinus - 74)) | (1 << (CParser.Star - 74)) | (1 << (CParser.And - 74)) | (1 << (CParser.AndAnd - 74)) | (1 << (CParser.Not - 74)) | (1 << (CParser.Tilde - 74)) | (1 << (CParser.Identifier - 74)) | (1 << (CParser.Constant - 74)) | (1 << (CParser.DigitSequence - 74)) | (1 << (CParser.StringLiteral - 74)))) != 0):
                    self.state = 1142
                    self.expression()


                pass

            elif la_ == 4:
                self.state = 1145
                self.match(CParser.Goto)
                self.state = 1146
                self.unaryExpression()
                pass


            self.state = 1149
            self.match(CParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CParser.EOF, 0)

        def translationUnit(self):
            return self.getTypedRuleContext(CParser.TranslationUnitContext,0)


        def getRuleIndex(self):
            return CParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)




    def compilationUnit(self):

        localctx = CParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__13) | (1 << CParser.T__14) | (1 << CParser.T__15) | (1 << CParser.T__16) | (1 << CParser.Auto) | (1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (1 << CParser.Else) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (1 << CParser.If) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Return) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Sizeof) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Switch) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.While) | (1 << CParser.Alignas) | (1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Generic) | (1 << CParser.Imaginary) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert) | (1 << CParser.ThreadLocal) | (1 << CParser.LeftParen) | (1 << CParser.RightParen))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CParser.LeftBracket - 64)) | (1 << (CParser.RightBracket - 64)) | (1 << (CParser.LeftBrace - 64)) | (1 << (CParser.RightBrace - 64)) | (1 << (CParser.Less - 64)) | (1 << (CParser.LessEqual - 64)) | (1 << (CParser.Greater - 64)) | (1 << (CParser.GreaterEqual - 64)) | (1 << (CParser.LeftShift - 64)) | (1 << (CParser.RightShift - 64)) | (1 << (CParser.Plus - 64)) | (1 << (CParser.PlusPlus - 64)) | (1 << (CParser.Minus - 64)) | (1 << (CParser.MinusMinus - 64)) | (1 << (CParser.Star - 64)) | (1 << (CParser.Div - 64)) | (1 << (CParser.Mod - 64)) | (1 << (CParser.And - 64)) | (1 << (CParser.Or - 64)) | (1 << (CParser.AndAnd - 64)) | (1 << (CParser.OrOr - 64)) | (1 << (CParser.Caret - 64)) | (1 << (CParser.Not - 64)) | (1 << (CParser.Tilde - 64)) | (1 << (CParser.Question - 64)) | (1 << (CParser.Colon - 64)) | (1 << (CParser.Semi - 64)) | (1 << (CParser.Comma - 64)) | (1 << (CParser.Assign - 64)) | (1 << (CParser.StarAssign - 64)) | (1 << (CParser.DivAssign - 64)) | (1 << (CParser.ModAssign - 64)) | (1 << (CParser.PlusAssign - 64)) | (1 << (CParser.MinusAssign - 64)) | (1 << (CParser.LeftShiftAssign - 64)) | (1 << (CParser.RightShiftAssign - 64)) | (1 << (CParser.AndAssign - 64)) | (1 << (CParser.XorAssign - 64)) | (1 << (CParser.OrAssign - 64)) | (1 << (CParser.Equal - 64)) | (1 << (CParser.NotEqual - 64)) | (1 << (CParser.Arrow - 64)) | (1 << (CParser.Dot - 64)) | (1 << (CParser.Ellipsis - 64)) | (1 << (CParser.Identifier - 64)) | (1 << (CParser.Constant - 64)) | (1 << (CParser.DigitSequence - 64)) | (1 << (CParser.StringLiteral - 64)) | (1 << (CParser.ComplexDefine - 64)) | (1 << (CParser.Macroifdef - 64)) | (1 << (CParser.Macroifndef - 64)) | (1 << (CParser.Macroelse - 64)) | (1 << (CParser.Macroendif - 64)) | (1 << (CParser.IncludeDirective - 64)) | (1 << (CParser.AsmBlock - 64)) | (1 << (CParser.LineAfterPreprocessing - 64)) | (1 << (CParser.LineDirective - 64)) | (1 << (CParser.PragmaDirective - 64)) | (1 << (CParser.Whitespace - 64)) | (1 << (CParser.Newline - 64)) | (1 << (CParser.BlockComment - 64)) | (1 << (CParser.LineComment - 64)))) != 0):
                self.state = 1151
                self.translationUnit()


            self.state = 1154
            self.match(CParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TranslationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externalDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ExternalDeclarationContext)
            else:
                return self.getTypedRuleContext(CParser.ExternalDeclarationContext,i)


        def getRuleIndex(self):
            return CParser.RULE_translationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationUnit" ):
                listener.enterTranslationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationUnit" ):
                listener.exitTranslationUnit(self)




    def translationUnit(self):

        localctx = CParser.TranslationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_translationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1157 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1156
                self.externalDeclaration()
                self.state = 1159 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__13) | (1 << CParser.T__14) | (1 << CParser.T__15) | (1 << CParser.T__16) | (1 << CParser.Auto) | (1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (1 << CParser.Else) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (1 << CParser.If) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Return) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Sizeof) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Switch) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.While) | (1 << CParser.Alignas) | (1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Generic) | (1 << CParser.Imaginary) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert) | (1 << CParser.ThreadLocal) | (1 << CParser.LeftParen) | (1 << CParser.RightParen))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CParser.LeftBracket - 64)) | (1 << (CParser.RightBracket - 64)) | (1 << (CParser.LeftBrace - 64)) | (1 << (CParser.RightBrace - 64)) | (1 << (CParser.Less - 64)) | (1 << (CParser.LessEqual - 64)) | (1 << (CParser.Greater - 64)) | (1 << (CParser.GreaterEqual - 64)) | (1 << (CParser.LeftShift - 64)) | (1 << (CParser.RightShift - 64)) | (1 << (CParser.Plus - 64)) | (1 << (CParser.PlusPlus - 64)) | (1 << (CParser.Minus - 64)) | (1 << (CParser.MinusMinus - 64)) | (1 << (CParser.Star - 64)) | (1 << (CParser.Div - 64)) | (1 << (CParser.Mod - 64)) | (1 << (CParser.And - 64)) | (1 << (CParser.Or - 64)) | (1 << (CParser.AndAnd - 64)) | (1 << (CParser.OrOr - 64)) | (1 << (CParser.Caret - 64)) | (1 << (CParser.Not - 64)) | (1 << (CParser.Tilde - 64)) | (1 << (CParser.Question - 64)) | (1 << (CParser.Colon - 64)) | (1 << (CParser.Semi - 64)) | (1 << (CParser.Comma - 64)) | (1 << (CParser.Assign - 64)) | (1 << (CParser.StarAssign - 64)) | (1 << (CParser.DivAssign - 64)) | (1 << (CParser.ModAssign - 64)) | (1 << (CParser.PlusAssign - 64)) | (1 << (CParser.MinusAssign - 64)) | (1 << (CParser.LeftShiftAssign - 64)) | (1 << (CParser.RightShiftAssign - 64)) | (1 << (CParser.AndAssign - 64)) | (1 << (CParser.XorAssign - 64)) | (1 << (CParser.OrAssign - 64)) | (1 << (CParser.Equal - 64)) | (1 << (CParser.NotEqual - 64)) | (1 << (CParser.Arrow - 64)) | (1 << (CParser.Dot - 64)) | (1 << (CParser.Ellipsis - 64)) | (1 << (CParser.Identifier - 64)) | (1 << (CParser.Constant - 64)) | (1 << (CParser.DigitSequence - 64)) | (1 << (CParser.StringLiteral - 64)) | (1 << (CParser.ComplexDefine - 64)) | (1 << (CParser.Macroifdef - 64)) | (1 << (CParser.Macroifndef - 64)) | (1 << (CParser.Macroelse - 64)) | (1 << (CParser.Macroendif - 64)) | (1 << (CParser.IncludeDirective - 64)) | (1 << (CParser.AsmBlock - 64)) | (1 << (CParser.LineAfterPreprocessing - 64)) | (1 << (CParser.LineDirective - 64)) | (1 << (CParser.PragmaDirective - 64)) | (1 << (CParser.Whitespace - 64)) | (1 << (CParser.Newline - 64)) | (1 << (CParser.BlockComment - 64)) | (1 << (CParser.LineComment - 64)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDeclaration(self):
            return self.getTypedRuleContext(CParser.FunctionDeclarationContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(CParser.FunctionDefinitionContext,0)


        def declaration(self):
            return self.getTypedRuleContext(CParser.DeclarationContext,0)


        def macroDefinition(self):
            return self.getTypedRuleContext(CParser.MacroDefinitionContext,0)


        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def getRuleIndex(self):
            return CParser.RULE_externalDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalDeclaration" ):
                listener.enterExternalDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalDeclaration" ):
                listener.exitExternalDeclaration(self)




    def externalDeclaration(self):

        localctx = CParser.ExternalDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_externalDeclaration)
        try:
            self.state = 1166
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1161
                self.functionDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1162
                self.functionDefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1163
                self.declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1164
                self.macroDefinition()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1165
                self.match(CParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def funcDeclarator(self):
            return self.getTypedRuleContext(CParser.FuncDeclaratorContext,0)


        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def Typedef(self):
            return self.getToken(CParser.Typedef, 0)

        def funcDeclarationSpecifiers(self):
            return self.getTypedRuleContext(CParser.FuncDeclarationSpecifiersContext,0)


        def declarationList(self):
            return self.getTypedRuleContext(CParser.DeclarationListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_functionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclaration" ):
                listener.enterFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclaration" ):
                listener.exitFunctionDeclaration(self)




    def functionDeclaration(self):

        localctx = CParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_functionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1168
            _la = self._input.LA(1)
            if _la <= 0 or _la==CParser.Typedef:
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.state = 1169
                self.funcDeclarationSpecifiers()


            self.state = 1172
            self.funcDeclarator()
            self.state = 1174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert) | (1 << CParser.ThreadLocal))) != 0) or _la==CParser.Identifier:
                self.state = 1173
                self.declarationList()


            self.state = 1176
            self.match(CParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(CParser.CompoundStatementContext,0)


        def funcDeclarationSpecifiers(self):
            return self.getTypedRuleContext(CParser.FuncDeclarationSpecifiersContext,0)


        def declarationList(self):
            return self.getTypedRuleContext(CParser.DeclarationListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)




    def functionDefinition(self):

        localctx = CParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.state = 1178
                self.funcDeclarationSpecifiers()


            self.state = 1181
            self.declarator()
            self.state = 1183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert) | (1 << CParser.ThreadLocal))) != 0) or _la==CParser.Identifier:
                self.state = 1182
                self.declarationList()


            self.state = 1185
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(CParser.StringLiteral, 0)

        def Constant(self):
            return self.getToken(CParser.Constant, 0)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Identifier)
            else:
                return self.getToken(CParser.Identifier, i)

        def getRuleIndex(self):
            return CParser.RULE_stringIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringIdentifier" ):
                listener.enterStringIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringIdentifier" ):
                listener.exitStringIdentifier(self)




    def stringIdentifier(self):

        localctx = CParser.StringIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_stringIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1194
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.Identifier]:
                self.state = 1188 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1187
                    self.match(CParser.Identifier)
                    self.state = 1190 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==CParser.Identifier):
                        break

                pass
            elif token in [CParser.StringLiteral]:
                self.state = 1192
                self.match(CParser.StringLiteral)
                pass
            elif token in [CParser.Constant]:
                self.state = 1193
                self.match(CParser.Constant)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.StringIdentifierContext)
            else:
                return self.getTypedRuleContext(CParser.StringIdentifierContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_stringIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringIdentifierList" ):
                listener.enterStringIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringIdentifierList" ):
                listener.exitStringIdentifierList(self)




    def stringIdentifierList(self):

        localctx = CParser.StringIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_stringIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            self.stringIdentifier()
            self.state = 1201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Comma:
                self.state = 1197
                self.match(CParser.Comma)
                self.state = 1198
                self.stringIdentifier()
                self.state = 1203
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def directDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectDeclaratorContext,0)


        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def stringIdentifierList(self):
            return self.getTypedRuleContext(CParser.StringIdentifierListContext,0)


        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def getRuleIndex(self):
            return CParser.RULE_macroDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroDefinition" ):
                listener.enterMacroDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroDefinition" ):
                listener.exitMacroDefinition(self)




    def macroDefinition(self):

        localctx = CParser.MacroDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_macroDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.state = 1204
                self.directDeclarator(0)
                pass

            elif la_ == 2:
                self.state = 1205
                self.match(CParser.Identifier)
                pass


            self.state = 1208
            self.match(CParser.LeftParen)
            self.state = 1210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (CParser.Identifier - 108)) | (1 << (CParser.Constant - 108)) | (1 << (CParser.StringLiteral - 108)))) != 0):
                self.state = 1209
                self.stringIdentifierList()


            self.state = 1212
            self.match(CParser.RightParen)
            self.state = 1214
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 1213
                self.match(CParser.Semi)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(CParser.DeclarationContext,i)


        def getRuleIndex(self):
            return CParser.RULE_declarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationList" ):
                listener.enterDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationList" ):
                listener.exitDeclarationList(self)




    def declarationList(self):

        localctx = CParser.DeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_declarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1217 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1216
                self.declaration()
                self.state = 1219 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert) | (1 << CParser.ThreadLocal))) != 0) or _la==CParser.Identifier):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[34] = self.typeSpecifier_sempred
        self._predicates[53] = self.directDeclarator_sempred
        self._predicates[67] = self.directAbstractDeclarator_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeSpecifier_sempred(self, localctx:TypeSpecifierContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def directDeclarator_sempred(self, localctx:DirectDeclaratorContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 3)
         

    def directAbstractDeclarator_sempred(self, localctx:DirectAbstractDeclaratorContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 1)
         




