# Generated from C.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0083")
        buf.write("\u0517\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\3\2\3\2\3\2\6\2\u00cc")
        buf.write("\n\2\r\2\16\2\u00cd\3\2\5\2\u00d1\n\2\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\5\2\u00d9\n\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\5\2\u00ed\n\2")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\7\4\u00f9\n\4")
        buf.write("\f\4\16\4\u00fc\13\4\3\5\3\5\5\5\u0100\n\5\3\5\3\5\3\5")
        buf.write("\3\6\3\6\5\6\u0107\n\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u010f")
        buf.write("\n\6\3\6\3\6\5\6\u0113\n\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6")
        buf.write("\u011b\n\6\3\6\3\6\3\6\3\6\7\6\u0121\n\6\f\6\16\6\u0124")
        buf.write("\13\6\3\7\3\7\5\7\u0128\n\7\3\b\3\b\3\b\7\b\u012d\n\b")
        buf.write("\f\b\16\b\u0130\13\b\3\t\7\t\u0133\n\t\f\t\16\t\u0136")
        buf.write("\13\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t")
        buf.write("\u0143\n\t\3\n\3\n\3\13\5\13\u0148\n\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\5\13\u0151\n\13\3\f\3\f\3\f\7\f\u0156")
        buf.write("\n\f\f\f\16\f\u0159\13\f\3\r\3\r\3\r\7\r\u015e\n\r\f\r")
        buf.write("\16\r\u0161\13\r\3\16\3\16\3\16\7\16\u0166\n\16\f\16\16")
        buf.write("\16\u0169\13\16\3\17\3\17\3\17\7\17\u016e\n\17\f\17\16")
        buf.write("\17\u0171\13\17\3\20\3\20\3\20\7\20\u0176\n\20\f\20\16")
        buf.write("\20\u0179\13\20\3\21\3\21\3\21\7\21\u017e\n\21\f\21\16")
        buf.write("\21\u0181\13\21\3\22\3\22\3\22\7\22\u0186\n\22\f\22\16")
        buf.write("\22\u0189\13\22\3\23\3\23\3\23\7\23\u018e\n\23\f\23\16")
        buf.write("\23\u0191\13\23\3\24\3\24\3\24\7\24\u0196\n\24\f\24\16")
        buf.write("\24\u0199\13\24\3\25\3\25\3\25\7\25\u019e\n\25\f\25\16")
        buf.write("\25\u01a1\13\25\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u01a9")
        buf.write("\n\26\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u01b1\n\27\3")
        buf.write("\30\3\30\3\31\3\31\3\31\7\31\u01b8\n\31\f\31\16\31\u01bb")
        buf.write("\13\31\3\32\3\32\3\33\3\33\3\33\5\33\u01c2\n\33\3\33\3")
        buf.write("\33\3\33\5\33\u01c7\n\33\3\34\6\34\u01ca\n\34\r\34\16")
        buf.write("\34\u01cb\3\35\7\35\u01cf\n\35\f\35\16\35\u01d2\13\35")
        buf.write("\3\35\3\35\7\35\u01d6\n\35\f\35\16\35\u01d9\13\35\3\36")
        buf.write("\6\36\u01dc\n\36\r\36\16\36\u01dd\3\37\3\37\3\37\3\37")
        buf.write("\5\37\u01e4\n\37\3 \3 \3 \3 \3 \5 \u01eb\n \3!\3!\3!\7")
        buf.write("!\u01f0\n!\f!\16!\u01f3\13!\3\"\3\"\3\"\5\"\u01f8\n\"")
        buf.write("\3#\3#\3$\3$\3$\3%\3%\6%\u0201\n%\r%\16%\u0202\3%\3%\5")
        buf.write("%\u0207\n%\3%\6%\u020a\n%\r%\16%\u020b\3%\3%\3%\3%\3%")
        buf.write("\3%\5%\u0214\n%\3%\3%\3%\3%\3%\3%\3%\3%\3%\5%\u021f\n")
        buf.write("%\3%\3%\7%\u0223\n%\f%\16%\u0226\13%\3&\3&\5&\u022a\n")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\5&\u0233\n&\3\'\3\'\3(\6(\u0238")
        buf.write("\n(\r(\16(\u0239\3)\3)\5)\u023e\n)\3)\3)\3)\5)\u0243\n")
        buf.write(")\3*\3*\3*\5*\u0248\n*\3*\5*\u024b\n*\3+\3+\3+\7+\u0250")
        buf.write("\n+\f+\16+\u0253\13+\3,\3,\5,\u0257\n,\3,\3,\5,\u025b")
        buf.write("\n,\3-\3-\5-\u025f\n-\3-\3-\3-\5-\u0264\n-\3-\3-\3-\3")
        buf.write("-\5-\u026a\n-\3.\3.\3.\7.\u026f\n.\f.\16.\u0272\13.\3")
        buf.write("/\3/\3/\5/\u0277\n/\3\60\3\60\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\62\3\62\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0288\n")
        buf.write("\63\3\64\3\64\3\64\3\64\5\64\u028e\n\64\3\64\3\64\3\65")
        buf.write("\5\65\u0293\n\65\3\65\3\65\7\65\u0297\n\65\f\65\16\65")
        buf.write("\u029a\13\65\3\66\5\66\u029d\n\66\3\66\3\66\7\66\u02a1")
        buf.write("\n\66\f\66\16\66\u02a4\13\66\3\67\3\67\3\67\5\67\u02a9")
        buf.write("\n\67\3\67\3\67\3\67\3\67\3\67\5\67\u02b0\n\67\3\67\3")
        buf.write("\67\5\67\u02b4\n\67\38\38\38\38\38\38\38\38\38\38\38\5")
        buf.write("8\u02c1\n8\38\38\38\38\58\u02c7\n8\38\38\38\58\u02cc\n")
        buf.write("8\38\58\u02cf\n8\38\38\38\38\38\58\u02d6\n8\38\38\38\3")
        buf.write("8\38\38\38\38\38\38\38\38\38\58\u02e5\n8\38\38\38\38\3")
        buf.write("8\38\38\38\38\38\58\u02f1\n8\38\78\u02f4\n8\f8\168\u02f7")
        buf.write("\138\39\39\39\69\u02fc\n9\r9\169\u02fd\39\39\39\39\69")
        buf.write("\u0304\n9\r9\169\u0305\39\39\59\u030a\n9\3:\3:\3:\3:\3")
        buf.write(":\3:\3:\3;\5;\u0314\n;\3;\3;\5;\u0318\n;\7;\u031a\n;\f")
        buf.write(";\16;\u031d\13;\3<\3<\3<\5<\u0322\n<\3<\5<\u0325\n<\3")
        buf.write("=\3=\3=\3=\3=\7=\u032c\n=\f=\16=\u032f\13=\3>\3>\5>\u0333")
        buf.write("\n>\6>\u0335\n>\r>\16>\u0336\3?\6?\u033a\n?\r?\16?\u033b")
        buf.write("\3@\3@\3@\5@\u0341\n@\3A\3A\3A\7A\u0346\nA\fA\16A\u0349")
        buf.write("\13A\3B\3B\3B\3B\3B\5B\u0350\nB\5B\u0352\nB\3C\3C\3C\7")
        buf.write("C\u0357\nC\fC\16C\u035a\13C\3D\3D\5D\u035e\nD\3E\3E\5")
        buf.write("E\u0362\nE\3E\3E\7E\u0366\nE\fE\16E\u0369\13E\5E\u036b")
        buf.write("\nE\3F\3F\3F\3F\3F\7F\u0372\nF\fF\16F\u0375\13F\3F\3F")
        buf.write("\5F\u0379\nF\3F\5F\u037c\nF\3F\3F\3F\3F\5F\u0382\nF\3")
        buf.write("F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\5F\u0392\nF\3")
        buf.write("F\3F\7F\u0396\nF\fF\16F\u0399\13F\5F\u039b\nF\3F\3F\3")
        buf.write("F\5F\u03a0\nF\3F\5F\u03a3\nF\3F\3F\3F\3F\3F\5F\u03aa\n")
        buf.write("F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\5")
        buf.write("F\u03bd\nF\3F\3F\7F\u03c1\nF\fF\16F\u03c4\13F\7F\u03c6")
        buf.write("\nF\fF\16F\u03c9\13F\3G\3G\3H\3H\3H\3H\5H\u03d1\nH\3H")
        buf.write("\3H\3H\3H\5H\u03d7\nH\3I\5I\u03da\nI\3I\3I\3I\5I\u03df")
        buf.write("\nI\3I\7I\u03e2\nI\fI\16I\u03e5\13I\3J\3J\3J\3K\6K\u03eb")
        buf.write("\nK\rK\16K\u03ec\3L\3L\3L\3L\3L\3L\5L\u03f5\nL\3M\3M\3")
        buf.write("M\3M\3M\6M\u03fc\nM\rM\16M\u03fd\3M\3M\3M\3N\3N\3N\3N")
        buf.write("\3N\3N\3N\3N\3N\3N\3N\3N\3N\7N\u0410\nN\fN\16N\u0413\13")
        buf.write("N\5N\u0415\nN\3N\3N\3N\3N\7N\u041b\nN\fN\16N\u041e\13")
        buf.write("N\5N\u0420\nN\7N\u0422\nN\fN\16N\u0425\13N\3N\3N\5N\u0429")
        buf.write("\nN\3O\3O\3O\3O\3O\3O\3O\3O\5O\u0433\nO\3O\3O\3O\3O\5")
        buf.write("O\u0439\nO\5O\u043b\nO\3P\3P\5P\u043f\nP\3P\3P\3Q\6Q\u0444")
        buf.write("\nQ\rQ\16Q\u0445\3R\3R\5R\u044a\nR\3S\5S\u044d\nS\3S\3")
        buf.write("S\3T\3T\3T\3T\3T\3T\3T\5T\u0458\nT\3T\3T\3T\3T\3T\3T\5")
        buf.write("T\u0460\nT\3U\3U\3U\3U\3U\5U\u0467\nU\3U\3U\3V\3V\3V\3")
        buf.write("V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\5V\u047f")
        buf.write("\nV\3W\3W\5W\u0483\nW\5W\u0485\nW\3W\3W\5W\u0489\nW\3")
        buf.write("W\3W\5W\u048d\nW\3X\3X\5X\u0491\nX\3Y\3Y\3Y\7Y\u0496\n")
        buf.write("Y\fY\16Y\u0499\13Y\3Z\3Z\3Z\3Z\3Z\5Z\u04a0\nZ\3Z\3Z\5")
        buf.write("Z\u04a4\nZ\3Z\3Z\3[\5[\u04a9\n[\3[\3[\3\\\6\\\u04ae\n")
        buf.write("\\\r\\\16\\\u04af\3]\3]\3]\3]\3]\3]\5]\u04b8\n]\3^\6^")
        buf.write("\u04bb\n^\r^\16^\u04bc\3^\5^\u04c0\n^\3^\3^\3^\3^\3^\3")
        buf.write("^\5^\u04c8\n^\3^\3^\3^\6^\u04cd\n^\r^\16^\u04ce\3^\3^")
        buf.write("\5^\u04d3\n^\3^\3^\3^\3^\3^\3^\3^\5^\u04dc\n^\3^\3^\5")
        buf.write("^\u04e0\n^\3_\3_\5_\u04e4\n_\3_\3_\5_\u04e8\n_\3_\3_\3")
        buf.write("`\5`\u04ed\n`\3`\3`\5`\u04f1\n`\3`\3`\3a\6a\u04f6\na\r")
        buf.write("a\16a\u04f7\3a\3a\5a\u04fc\na\3b\3b\3b\7b\u0501\nb\fb")
        buf.write("\16b\u0504\13b\3c\3c\5c\u0508\nc\3c\3c\5c\u050c\nc\3c")
        buf.write("\3c\5c\u0510\nc\3d\6d\u0513\nd\rd\16d\u0514\3d\2\5Hn\u008a")
        buf.write("e\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write("\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write("\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write("\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write("\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write("\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\2\32\3\2no")
        buf.write("\4\2PPRR\5\2//PPRR\4\2//::\7\2OOQQSSVV[\\\3\2SU\4\2OO")
        buf.write("QQ\3\2MN\3\2IL\3\2lm\3\2ak\b\2\27\27\"\"**\60\60\63\63")
        buf.write("BB\n\2\6\b\32\32\37\37##()-.\65\66<=\3\2\6\b\4\2\61\61")
        buf.write("\64\64\7\2\n\13\33\33*+\67\67;;\6\2\3\3\f\16\'\'@@\4\2")
        buf.write("CD``\3\2CD\4\2SSZZ\3\2\20\21\4\2\23\23\67\67\4\2\30\30")
        buf.write("\34\34\3\2\63\63\2\u0596\2\u00ec\3\2\2\2\4\u00ee\3\2\2")
        buf.write("\2\6\u00f5\3\2\2\2\b\u00ff\3\2\2\2\n\u0112\3\2\2\2\f\u0127")
        buf.write("\3\2\2\2\16\u0129\3\2\2\2\20\u0134\3\2\2\2\22\u0144\3")
        buf.write("\2\2\2\24\u0150\3\2\2\2\26\u0152\3\2\2\2\30\u015a\3\2")
        buf.write("\2\2\32\u0162\3\2\2\2\34\u016a\3\2\2\2\36\u0172\3\2\2")
        buf.write("\2 \u017a\3\2\2\2\"\u0182\3\2\2\2$\u018a\3\2\2\2&\u0192")
        buf.write("\3\2\2\2(\u019a\3\2\2\2*\u01a2\3\2\2\2,\u01b0\3\2\2\2")
        buf.write(".\u01b2\3\2\2\2\60\u01b4\3\2\2\2\62\u01bc\3\2\2\2\64\u01c6")
        buf.write("\3\2\2\2\66\u01c9\3\2\2\28\u01d0\3\2\2\2:\u01db\3\2\2")
        buf.write("\2<\u01e3\3\2\2\2>\u01ea\3\2\2\2@\u01ec\3\2\2\2B\u01f4")
        buf.write("\3\2\2\2D\u01f9\3\2\2\2F\u01fb\3\2\2\2H\u021e\3\2\2\2")
        buf.write("J\u0232\3\2\2\2L\u0234\3\2\2\2N\u0237\3\2\2\2P\u0242\3")
        buf.write("\2\2\2R\u0247\3\2\2\2T\u024c\3\2\2\2V\u025a\3\2\2\2X\u0269")
        buf.write("\3\2\2\2Z\u026b\3\2\2\2\\\u0273\3\2\2\2^\u0278\3\2\2\2")
        buf.write("`\u027a\3\2\2\2b\u027f\3\2\2\2d\u0287\3\2\2\2f\u0289\3")
        buf.write("\2\2\2h\u0292\3\2\2\2j\u029c\3\2\2\2l\u02b3\3\2\2\2n\u02c6")
        buf.write("\3\2\2\2p\u0309\3\2\2\2r\u030b\3\2\2\2t\u0313\3\2\2\2")
        buf.write("v\u031e\3\2\2\2x\u032d\3\2\2\2z\u0334\3\2\2\2|\u0339\3")
        buf.write("\2\2\2~\u033d\3\2\2\2\u0080\u0342\3\2\2\2\u0082\u0351")
        buf.write("\3\2\2\2\u0084\u0353\3\2\2\2\u0086\u035b\3\2\2\2\u0088")
        buf.write("\u036a\3\2\2\2\u008a\u039a\3\2\2\2\u008c\u03ca\3\2\2\2")
        buf.write("\u008e\u03d6\3\2\2\2\u0090\u03d9\3\2\2\2\u0092\u03e6\3")
        buf.write("\2\2\2\u0094\u03ea\3\2\2\2\u0096\u03f4\3\2\2\2\u0098\u03f6")
        buf.write("\3\2\2\2\u009a\u0428\3\2\2\2\u009c\u043a\3\2\2\2\u009e")
        buf.write("\u043c\3\2\2\2\u00a0\u0443\3\2\2\2\u00a2\u0449\3\2\2\2")
        buf.write("\u00a4\u044c\3\2\2\2\u00a6\u045f\3\2\2\2\u00a8\u0461\3")
        buf.write("\2\2\2\u00aa\u047e\3\2\2\2\u00ac\u0484\3\2\2\2\u00ae\u048e")
        buf.write("\3\2\2\2\u00b0\u0492\3\2\2\2\u00b2\u04a3\3\2\2\2\u00b4")
        buf.write("\u04a8\3\2\2\2\u00b6\u04ad\3\2\2\2\u00b8\u04b7\3\2\2\2")
        buf.write("\u00ba\u04df\3\2\2\2\u00bc\u04e1\3\2\2\2\u00be\u04ec\3")
        buf.write("\2\2\2\u00c0\u04fb\3\2\2\2\u00c2\u04fd\3\2\2\2\u00c4\u0507")
        buf.write("\3\2\2\2\u00c6\u0512\3\2\2\2\u00c8\u00ed\7q\2\2\u00c9")
        buf.write("\u00ed\7r\2\2\u00ca\u00cc\7t\2\2\u00cb\u00ca\3\2\2\2\u00cc")
        buf.write("\u00cd\3\2\2\2\u00cd\u00cb\3\2\2\2\u00cd\u00ce\3\2\2\2")
        buf.write("\u00ce\u00ed\3\2\2\2\u00cf\u00d1\7\3\2\2\u00d0\u00cf\3")
        buf.write("\2\2\2\u00d0\u00d1\3\2\2\2\u00d1\u00d2\3\2\2\2\u00d2\u00d3")
        buf.write("\7C\2\2\u00d3\u00d4\5\60\31\2\u00d4\u00d5\7D\2\2\u00d5")
        buf.write("\u00ed\3\2\2\2\u00d6\u00ed\5\4\3\2\u00d7\u00d9\7\3\2\2")
        buf.write("\u00d8\u00d7\3\2\2\2\u00d8\u00d9\3\2\2\2\u00d9\u00da\3")
        buf.write("\2\2\2\u00da\u00db\7C\2\2\u00db\u00dc\5\u009eP\2\u00dc")
        buf.write("\u00dd\7D\2\2\u00dd\u00ed\3\2\2\2\u00de\u00df\7\4\2\2")
        buf.write("\u00df\u00e0\7C\2\2\u00e0\u00e1\5\20\t\2\u00e1\u00e2\7")
        buf.write("`\2\2\u00e2\u00e3\5\u0086D\2\u00e3\u00e4\7D\2\2\u00e4")
        buf.write("\u00ed\3\2\2\2\u00e5\u00e6\7\5\2\2\u00e6\u00e7\7C\2\2")
        buf.write("\u00e7\u00e8\5\u0086D\2\u00e8\u00e9\7`\2\2\u00e9\u00ea")
        buf.write("\5\20\t\2\u00ea\u00eb\7D\2\2\u00eb\u00ed\3\2\2\2\u00ec")
        buf.write("\u00c8\3\2\2\2\u00ec\u00c9\3\2\2\2\u00ec\u00cb\3\2\2\2")
        buf.write("\u00ec\u00d0\3\2\2\2\u00ec\u00d6\3\2\2\2\u00ec\u00d8\3")
        buf.write("\2\2\2\u00ec\u00de\3\2\2\2\u00ec\u00e5\3\2\2\2\u00ed\3")
        buf.write("\3\2\2\2\u00ee\u00ef\7>\2\2\u00ef\u00f0\7C\2\2\u00f0\u00f1")
        buf.write("\5,\27\2\u00f1\u00f2\7`\2\2\u00f2\u00f3\5\6\4\2\u00f3")
        buf.write("\u00f4\7D\2\2\u00f4\5\3\2\2\2\u00f5\u00fa\5\b\5\2\u00f6")
        buf.write("\u00f7\7`\2\2\u00f7\u00f9\5\b\5\2\u00f8\u00f6\3\2\2\2")
        buf.write("\u00f9\u00fc\3\2\2\2\u00fa\u00f8\3\2\2\2\u00fa\u00fb\3")
        buf.write("\2\2\2\u00fb\7\3\2\2\2\u00fc\u00fa\3\2\2\2\u00fd\u0100")
        buf.write("\5\u0086D\2\u00fe\u0100\7\35\2\2\u00ff\u00fd\3\2\2\2\u00ff")
        buf.write("\u00fe\3\2\2\2\u0100\u0101\3\2\2\2\u0101\u0102\7^\2\2")
        buf.write("\u0102\u0103\5,\27\2\u0103\t\3\2\2\2\u0104\u0113\5\2\2")
        buf.write("\2\u0105\u0107\7\3\2\2\u0106\u0105\3\2\2\2\u0106\u0107")
        buf.write("\3\2\2\2\u0107\u0108\3\2\2\2\u0108\u0109\7C\2\2\u0109")
        buf.write("\u010a\5\u0086D\2\u010a\u010b\7D\2\2\u010b\u010c\7G\2")
        buf.write("\2\u010c\u010e\5\u0090I\2\u010d\u010f\7`\2\2\u010e\u010d")
        buf.write("\3\2\2\2\u010e\u010f\3\2\2\2\u010f\u0110\3\2\2\2\u0110")
        buf.write("\u0111\7H\2\2\u0111\u0113\3\2\2\2\u0112\u0104\3\2\2\2")
        buf.write("\u0112\u0106\3\2\2\2\u0113\u0122\3\2\2\2\u0114\u0115\7")
        buf.write("E\2\2\u0115\u0116\5\60\31\2\u0116\u0117\7F\2\2\u0117\u0121")
        buf.write("\3\2\2\2\u0118\u011a\7C\2\2\u0119\u011b\5\16\b\2\u011a")
        buf.write("\u0119\3\2\2\2\u011a\u011b\3\2\2\2\u011b\u011c\3\2\2\2")
        buf.write("\u011c\u0121\7D\2\2\u011d\u011e\t\2\2\2\u011e\u0121\7")
        buf.write("q\2\2\u011f\u0121\t\3\2\2\u0120\u0114\3\2\2\2\u0120\u0118")
        buf.write("\3\2\2\2\u0120\u011d\3\2\2\2\u0120\u011f\3\2\2\2\u0121")
        buf.write("\u0124\3\2\2\2\u0122\u0120\3\2\2\2\u0122\u0123\3\2\2\2")
        buf.write("\u0123\13\3\2\2\2\u0124\u0122\3\2\2\2\u0125\u0128\5R*")
        buf.write("\2\u0126\u0128\5,\27\2\u0127\u0125\3\2\2\2\u0127\u0126")
        buf.write("\3\2\2\2\u0128\r\3\2\2\2\u0129\u012e\5\f\7\2\u012a\u012b")
        buf.write("\7`\2\2\u012b\u012d\5\f\7\2\u012c\u012a\3\2\2\2\u012d")
        buf.write("\u0130\3\2\2\2\u012e\u012c\3\2\2\2\u012e\u012f\3\2\2\2")
        buf.write("\u012f\17\3\2\2\2\u0130\u012e\3\2\2\2\u0131\u0133\t\4")
        buf.write("\2\2\u0132\u0131\3\2\2\2\u0133\u0136\3\2\2\2\u0134\u0132")
        buf.write("\3\2\2\2\u0134\u0135\3\2\2\2\u0135\u0142\3\2\2\2\u0136")
        buf.write("\u0134\3\2\2\2\u0137\u0143\5\n\6\2\u0138\u0139\5\22\n")
        buf.write("\2\u0139\u013a\5\24\13\2\u013a\u0143\3\2\2\2\u013b\u013c")
        buf.write("\t\5\2\2\u013c\u013d\7C\2\2\u013d\u013e\5\u0086D\2\u013e")
        buf.write("\u013f\7D\2\2\u013f\u0143\3\2\2\2\u0140\u0141\7X\2\2\u0141")
        buf.write("\u0143\7q\2\2\u0142\u0137\3\2\2\2\u0142\u0138\3\2\2\2")
        buf.write("\u0142\u013b\3\2\2\2\u0142\u0140\3\2\2\2\u0143\21\3\2")
        buf.write("\2\2\u0144\u0145\t\6\2\2\u0145\23\3\2\2\2\u0146\u0148")
        buf.write("\7\3\2\2\u0147\u0146\3\2\2\2\u0147\u0148\3\2\2\2\u0148")
        buf.write("\u0149\3\2\2\2\u0149\u014a\7C\2\2\u014a\u014b\5\u0086")
        buf.write("D\2\u014b\u014c\7D\2\2\u014c\u014d\5\24\13\2\u014d\u0151")
        buf.write("\3\2\2\2\u014e\u0151\5\20\t\2\u014f\u0151\7s\2\2\u0150")
        buf.write("\u0147\3\2\2\2\u0150\u014e\3\2\2\2\u0150\u014f\3\2\2\2")
        buf.write("\u0151\25\3\2\2\2\u0152\u0157\5\24\13\2\u0153\u0154\t")
        buf.write("\7\2\2\u0154\u0156\5\24\13\2\u0155\u0153\3\2\2\2\u0156")
        buf.write("\u0159\3\2\2\2\u0157\u0155\3\2\2\2\u0157\u0158\3\2\2\2")
        buf.write("\u0158\27\3\2\2\2\u0159\u0157\3\2\2\2\u015a\u015f\5\26")
        buf.write("\f\2\u015b\u015c\t\b\2\2\u015c\u015e\5\26\f\2\u015d\u015b")
        buf.write("\3\2\2\2\u015e\u0161\3\2\2\2\u015f\u015d\3\2\2\2\u015f")
        buf.write("\u0160\3\2\2\2\u0160\31\3\2\2\2\u0161\u015f\3\2\2\2\u0162")
        buf.write("\u0167\5\30\r\2\u0163\u0164\t\t\2\2\u0164\u0166\5\30\r")
        buf.write("\2\u0165\u0163\3\2\2\2\u0166\u0169\3\2\2\2\u0167\u0165")
        buf.write("\3\2\2\2\u0167\u0168\3\2\2\2\u0168\33\3\2\2\2\u0169\u0167")
        buf.write("\3\2\2\2\u016a\u016f\5\32\16\2\u016b\u016c\t\n\2\2\u016c")
        buf.write("\u016e\5\32\16\2\u016d\u016b\3\2\2\2\u016e\u0171\3\2\2")
        buf.write("\2\u016f\u016d\3\2\2\2\u016f\u0170\3\2\2\2\u0170\35\3")
        buf.write("\2\2\2\u0171\u016f\3\2\2\2\u0172\u0177\5\34\17\2\u0173")
        buf.write("\u0174\t\13\2\2\u0174\u0176\5\34\17\2\u0175\u0173\3\2")
        buf.write("\2\2\u0176\u0179\3\2\2\2\u0177\u0175\3\2\2\2\u0177\u0178")
        buf.write("\3\2\2\2\u0178\37\3\2\2\2\u0179\u0177\3\2\2\2\u017a\u017f")
        buf.write("\5\36\20\2\u017b\u017c\7V\2\2\u017c\u017e\5\36\20\2\u017d")
        buf.write("\u017b\3\2\2\2\u017e\u0181\3\2\2\2\u017f\u017d\3\2\2\2")
        buf.write("\u017f\u0180\3\2\2\2\u0180!\3\2\2\2\u0181\u017f\3\2\2")
        buf.write("\2\u0182\u0187\5 \21\2\u0183\u0184\7Z\2\2\u0184\u0186")
        buf.write("\5 \21\2\u0185\u0183\3\2\2\2\u0186\u0189\3\2\2\2\u0187")
        buf.write("\u0185\3\2\2\2\u0187\u0188\3\2\2\2\u0188#\3\2\2\2\u0189")
        buf.write("\u0187\3\2\2\2\u018a\u018f\5\"\22\2\u018b\u018c\7W\2\2")
        buf.write("\u018c\u018e\5\"\22\2\u018d\u018b\3\2\2\2\u018e\u0191")
        buf.write("\3\2\2\2\u018f\u018d\3\2\2\2\u018f\u0190\3\2\2\2\u0190")
        buf.write("%\3\2\2\2\u0191\u018f\3\2\2\2\u0192\u0197\5$\23\2\u0193")
        buf.write("\u0194\7X\2\2\u0194\u0196\5$\23\2\u0195\u0193\3\2\2\2")
        buf.write("\u0196\u0199\3\2\2\2\u0197\u0195\3\2\2\2\u0197\u0198\3")
        buf.write("\2\2\2\u0198\'\3\2\2\2\u0199\u0197\3\2\2\2\u019a\u019f")
        buf.write("\5&\24\2\u019b\u019c\7Y\2\2\u019c\u019e\5&\24\2\u019d")
        buf.write("\u019b\3\2\2\2\u019e\u01a1\3\2\2\2\u019f\u019d\3\2\2\2")
        buf.write("\u019f\u01a0\3\2\2\2\u01a0)\3\2\2\2\u01a1\u019f\3\2\2")
        buf.write("\2\u01a2\u01a8\5(\25\2\u01a3\u01a4\7]\2\2\u01a4\u01a5")
        buf.write("\5\60\31\2\u01a5\u01a6\7^\2\2\u01a6\u01a7\5*\26\2\u01a7")
        buf.write("\u01a9\3\2\2\2\u01a8\u01a3\3\2\2\2\u01a8\u01a9\3\2\2\2")
        buf.write("\u01a9+\3\2\2\2\u01aa\u01b1\5*\26\2\u01ab\u01ac\5\20\t")
        buf.write("\2\u01ac\u01ad\5.\30\2\u01ad\u01ae\5,\27\2\u01ae\u01b1")
        buf.write("\3\2\2\2\u01af\u01b1\7s\2\2\u01b0\u01aa\3\2\2\2\u01b0")
        buf.write("\u01ab\3\2\2\2\u01b0\u01af\3\2\2\2\u01b1-\3\2\2\2\u01b2")
        buf.write("\u01b3\t\f\2\2\u01b3/\3\2\2\2\u01b4\u01b9\5,\27\2\u01b5")
        buf.write("\u01b6\7`\2\2\u01b6\u01b8\5,\27\2\u01b7\u01b5\3\2\2\2")
        buf.write("\u01b8\u01bb\3\2\2\2\u01b9\u01b7\3\2\2\2\u01b9\u01ba\3")
        buf.write("\2\2\2\u01ba\61\3\2\2\2\u01bb\u01b9\3\2\2\2\u01bc\u01bd")
        buf.write("\5*\26\2\u01bd\63\3\2\2\2\u01be\u01c7\5F$\2\u01bf\u01c1")
        buf.write("\5\66\34\2\u01c0\u01c2\5@!\2\u01c1\u01c0\3\2\2\2\u01c1")
        buf.write("\u01c2\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c4\7_\2\2")
        buf.write("\u01c4\u01c7\3\2\2\2\u01c5\u01c7\5\u0098M\2\u01c6\u01be")
        buf.write("\3\2\2\2\u01c6\u01bf\3\2\2\2\u01c6\u01c5\3\2\2\2\u01c7")
        buf.write("\65\3\2\2\2\u01c8\u01ca\5> \2\u01c9\u01c8\3\2\2\2\u01ca")
        buf.write("\u01cb\3\2\2\2\u01cb\u01c9\3\2\2\2\u01cb\u01cc\3\2\2\2")
        buf.write("\u01cc\67\3\2\2\2\u01cd\u01cf\5<\37\2\u01ce\u01cd\3\2")
        buf.write("\2\2\u01cf\u01d2\3\2\2\2\u01d0\u01ce\3\2\2\2\u01d0\u01d1")
        buf.write("\3\2\2\2\u01d1\u01d3\3\2\2\2\u01d2\u01d0\3\2\2\2\u01d3")
        buf.write("\u01d7\5> \2\u01d4\u01d6\5<\37\2\u01d5\u01d4\3\2\2\2\u01d6")
        buf.write("\u01d9\3\2\2\2\u01d7\u01d5\3\2\2\2\u01d7\u01d8\3\2\2\2")
        buf.write("\u01d89\3\2\2\2\u01d9\u01d7\3\2\2\2\u01da\u01dc\5> \2")
        buf.write("\u01db\u01da\3\2\2\2\u01dc\u01dd\3\2\2\2\u01dd\u01db\3")
        buf.write("\2\2\2\u01dd\u01de\3\2\2\2\u01de;\3\2\2\2\u01df\u01e4")
        buf.write("\5D#\2\u01e0\u01e4\5b\62\2\u01e1\u01e4\5d\63\2\u01e2\u01e4")
        buf.write("\5f\64\2\u01e3\u01df\3\2\2\2\u01e3\u01e0\3\2\2\2\u01e3")
        buf.write("\u01e1\3\2\2\2\u01e3\u01e2\3\2\2\2\u01e4=\3\2\2\2\u01e5")
        buf.write("\u01eb\5D#\2\u01e6\u01eb\5H%\2\u01e7\u01eb\5b\62\2\u01e8")
        buf.write("\u01eb\5d\63\2\u01e9\u01eb\5f\64\2\u01ea\u01e5\3\2\2\2")
        buf.write("\u01ea\u01e6\3\2\2\2\u01ea\u01e7\3\2\2\2\u01ea\u01e8\3")
        buf.write("\2\2\2\u01ea\u01e9\3\2\2\2\u01eb?\3\2\2\2\u01ec\u01f1")
        buf.write("\5B\"\2\u01ed\u01ee\7`\2\2\u01ee\u01f0\5B\"\2\u01ef\u01ed")
        buf.write("\3\2\2\2\u01f0\u01f3\3\2\2\2\u01f1\u01ef\3\2\2\2\u01f1")
        buf.write("\u01f2\3\2\2\2\u01f2A\3\2\2\2\u01f3\u01f1\3\2\2\2\u01f4")
        buf.write("\u01f7\5h\65\2\u01f5\u01f6\7a\2\2\u01f6\u01f8\5\u008e")
        buf.write("H\2\u01f7\u01f5\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8C\3\2")
        buf.write("\2\2\u01f9\u01fa\t\r\2\2\u01faE\3\2\2\2\u01fb\u01fc\7")
        buf.write("\63\2\2\u01fc\u01fd\5\u00ba^\2\u01fdG\3\2\2\2\u01fe\u0200")
        buf.write("\b%\1\2\u01ff\u0201\t\16\2\2\u0200\u01ff\3\2\2\2\u0201")
        buf.write("\u0202\3\2\2\2\u0202\u0200\3\2\2\2\u0202\u0203\3\2\2\2")
        buf.write("\u0203\u021f\3\2\2\2\u0204\u0206\7\3\2\2\u0205\u0207\7")
        buf.write("\63\2\2\u0206\u0205\3\2\2\2\u0206\u0207\3\2\2\2\u0207")
        buf.write("\u0209\3\2\2\2\u0208\u020a\5H%\2\u0209\u0208\3\2\2\2\u020a")
        buf.write("\u020b\3\2\2\2\u020b\u0209\3\2\2\2\u020b\u020c\3\2\2\2")
        buf.write("\u020c\u021f\3\2\2\2\u020d\u020e\7\3\2\2\u020e\u020f\7")
        buf.write("C\2\2\u020f\u0210\t\17\2\2\u0210\u021f\7D\2\2\u0211\u021f")
        buf.write("\5`\61\2\u0212\u0214\7\3\2\2\u0213\u0212\3\2\2\2\u0213")
        buf.write("\u0214\3\2\2\2\u0214\u0215\3\2\2\2\u0215\u021f\5J&\2\u0216")
        buf.write("\u021f\5X-\2\u0217\u0218\7\t\2\2\u0218\u0219\7C\2\2\u0219")
        buf.write("\u021a\5\62\32\2\u021a\u021b\7D\2\2\u021b\u021f\3\2\2")
        buf.write("\2\u021c\u021f\5\u008cG\2\u021d\u021f\5r:\2\u021e\u01fe")
        buf.write("\3\2\2\2\u021e\u0204\3\2\2\2\u021e\u020d\3\2\2\2\u021e")
        buf.write("\u0211\3\2\2\2\u021e\u0213\3\2\2\2\u021e\u0216\3\2\2\2")
        buf.write("\u021e\u0217\3\2\2\2\u021e\u021c\3\2\2\2\u021e\u021d\3")
        buf.write("\2\2\2\u021f\u0224\3\2\2\2\u0220\u0221\f\5\2\2\u0221\u0223")
        buf.write("\5z>\2\u0222\u0220\3\2\2\2\u0223\u0226\3\2\2\2\u0224\u0222")
        buf.write("\3\2\2\2\u0224\u0225\3\2\2\2\u0225I\3\2\2\2\u0226\u0224")
        buf.write("\3\2\2\2\u0227\u0229\5L\'\2\u0228\u022a\7q\2\2\u0229\u0228")
        buf.write("\3\2\2\2\u0229\u022a\3\2\2\2\u022a\u022b\3\2\2\2\u022b")
        buf.write("\u022c\7G\2\2\u022c\u022d\5N(\2\u022d\u022e\7H\2\2\u022e")
        buf.write("\u0233\3\2\2\2\u022f\u0230\5L\'\2\u0230\u0231\7q\2\2\u0231")
        buf.write("\u0233\3\2\2\2\u0232\u0227\3\2\2\2\u0232\u022f\3\2\2\2")
        buf.write("\u0233K\3\2\2\2\u0234\u0235\t\20\2\2\u0235M\3\2\2\2\u0236")
        buf.write("\u0238\5P)\2\u0237\u0236\3\2\2\2\u0238\u0239\3\2\2\2\u0239")
        buf.write("\u0237\3\2\2\2\u0239\u023a\3\2\2\2\u023aO\3\2\2\2\u023b")
        buf.write("\u023d\5R*\2\u023c\u023e\5T+\2\u023d\u023c\3\2\2\2\u023d")
        buf.write("\u023e\3\2\2\2\u023e\u023f\3\2\2\2\u023f\u0240\7_\2\2")
        buf.write("\u0240\u0243\3\2\2\2\u0241\u0243\5\u0098M\2\u0242\u023b")
        buf.write("\3\2\2\2\u0242\u0241\3\2\2\2\u0243Q\3\2\2\2\u0244\u0248")
        buf.write("\5\u00ba^\2\u0245\u0248\5H%\2\u0246\u0248\5b\62\2\u0247")
        buf.write("\u0244\3\2\2\2\u0247\u0245\3\2\2\2\u0247\u0246\3\2\2\2")
        buf.write("\u0248\u024a\3\2\2\2\u0249\u024b\5R*\2\u024a\u0249\3\2")
        buf.write("\2\2\u024a\u024b\3\2\2\2\u024bS\3\2\2\2\u024c\u0251\5")
        buf.write("V,\2\u024d\u024e\7`\2\2\u024e\u0250\5V,\2\u024f\u024d")
        buf.write("\3\2\2\2\u0250\u0253\3\2\2\2\u0251\u024f\3\2\2\2\u0251")
        buf.write("\u0252\3\2\2\2\u0252U\3\2\2\2\u0253\u0251\3\2\2\2\u0254")
        buf.write("\u025b\5h\65\2\u0255\u0257\5h\65\2\u0256\u0255\3\2\2\2")
        buf.write("\u0256\u0257\3\2\2\2\u0257\u0258\3\2\2\2\u0258\u0259\7")
        buf.write("^\2\2\u0259\u025b\5\62\32\2\u025a\u0254\3\2\2\2\u025a")
        buf.write("\u0256\3\2\2\2\u025bW\3\2\2\2\u025c\u025e\7!\2\2\u025d")
        buf.write("\u025f\7q\2\2\u025e\u025d\3\2\2\2\u025e\u025f\3\2\2\2")
        buf.write("\u025f\u0260\3\2\2\2\u0260\u0261\7G\2\2\u0261\u0263\5")
        buf.write("Z.\2\u0262\u0264\7`\2\2\u0263\u0262\3\2\2\2\u0263\u0264")
        buf.write("\3\2\2\2\u0264\u0265\3\2\2\2\u0265\u0266\7H\2\2\u0266")
        buf.write("\u026a\3\2\2\2\u0267\u0268\7!\2\2\u0268\u026a\7q\2\2\u0269")
        buf.write("\u025c\3\2\2\2\u0269\u0267\3\2\2\2\u026aY\3\2\2\2\u026b")
        buf.write("\u0270\5\\/\2\u026c\u026d\7`\2\2\u026d\u026f\5\\/\2\u026e")
        buf.write("\u026c\3\2\2\2\u026f\u0272\3\2\2\2\u0270\u026e\3\2\2\2")
        buf.write("\u0270\u0271\3\2\2\2\u0271[\3\2\2\2\u0272\u0270\3\2\2")
        buf.write("\2\u0273\u0276\5^\60\2\u0274\u0275\7a\2\2\u0275\u0277")
        buf.write("\5\62\32\2\u0276\u0274\3\2\2\2\u0276\u0277\3\2\2\2\u0277")
        buf.write("]\3\2\2\2\u0278\u0279\7q\2\2\u0279_\3\2\2\2\u027a\u027b")
        buf.write("\7;\2\2\u027b\u027c\7C\2\2\u027c\u027d\5\u0086D\2\u027d")
        buf.write("\u027e\7D\2\2\u027ea\3\2\2\2\u027f\u0280\t\21\2\2\u0280")
        buf.write("c\3\2\2\2\u0281\u0288\t\22\2\2\u0282\u0288\5r:\2\u0283")
        buf.write("\u0284\7\17\2\2\u0284\u0285\7C\2\2\u0285\u0286\7q\2\2")
        buf.write("\u0286\u0288\7D\2\2\u0287\u0281\3\2\2\2\u0287\u0282\3")
        buf.write("\2\2\2\u0287\u0283\3\2\2\2\u0288e\3\2\2\2\u0289\u028a")
        buf.write("\79\2\2\u028a\u028d\7C\2\2\u028b\u028e\5\u0086D\2\u028c")
        buf.write("\u028e\5\62\32\2\u028d\u028b\3\2\2\2\u028d\u028c\3\2\2")
        buf.write("\2\u028e\u028f\3\2\2\2\u028f\u0290\7D\2\2\u0290g\3\2\2")
        buf.write("\2\u0291\u0293\5z>\2\u0292\u0291\3\2\2\2\u0292\u0293\3")
        buf.write("\2\2\2\u0293\u0294\3\2\2\2\u0294\u0298\5n8\2\u0295\u0297")
        buf.write("\5p9\2\u0296\u0295\3\2\2\2\u0297\u029a\3\2\2\2\u0298\u0296")
        buf.write("\3\2\2\2\u0298\u0299\3\2\2\2\u0299i\3\2\2\2\u029a\u0298")
        buf.write("\3\2\2\2\u029b\u029d\5z>\2\u029c\u029b\3\2\2\2\u029c\u029d")
        buf.write("\3\2\2\2\u029d\u029e\3\2\2\2\u029e\u02a2\5l\67\2\u029f")
        buf.write("\u02a1\5p9\2\u02a0\u029f\3\2\2\2\u02a1\u02a4\3\2\2\2\u02a2")
        buf.write("\u02a0\3\2\2\2\u02a2\u02a3\3\2\2\2\u02a3k\3\2\2\2\u02a4")
        buf.write("\u02a2\3\2\2\2\u02a5\u02a6\5n8\2\u02a6\u02a8\7C\2\2\u02a7")
        buf.write("\u02a9\5~@\2\u02a8\u02a7\3\2\2\2\u02a8\u02a9\3\2\2\2\u02a9")
        buf.write("\u02aa\3\2\2\2\u02aa\u02ab\7D\2\2\u02ab\u02b4\3\2\2\2")
        buf.write("\u02ac\u02ad\5n8\2\u02ad\u02af\7C\2\2\u02ae\u02b0\5\u0084")
        buf.write("C\2\u02af\u02ae\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b1")
        buf.write("\3\2\2\2\u02b1\u02b2\7D\2\2\u02b2\u02b4\3\2\2\2\u02b3")
        buf.write("\u02a5\3\2\2\2\u02b3\u02ac\3\2\2\2\u02b4m\3\2\2\2\u02b5")
        buf.write("\u02b6\b8\1\2\u02b6\u02c7\7q\2\2\u02b7\u02b8\7C\2\2\u02b8")
        buf.write("\u02b9\5h\65\2\u02b9\u02ba\7D\2\2\u02ba\u02c7\3\2\2\2")
        buf.write("\u02bb\u02bc\7q\2\2\u02bc\u02bd\7^\2\2\u02bd\u02c7\7s")
        buf.write("\2\2\u02be\u02c0\7C\2\2\u02bf\u02c1\5H%\2\u02c0\u02bf")
        buf.write("\3\2\2\2\u02c0\u02c1\3\2\2\2\u02c1\u02c2\3\2\2\2\u02c2")
        buf.write("\u02c3\5z>\2\u02c3\u02c4\5n8\2\u02c4\u02c5\7D\2\2\u02c5")
        buf.write("\u02c7\3\2\2\2\u02c6\u02b5\3\2\2\2\u02c6\u02b7\3\2\2\2")
        buf.write("\u02c6\u02bb\3\2\2\2\u02c6\u02be\3\2\2\2\u02c7\u02f5\3")
        buf.write("\2\2\2\u02c8\u02c9\f\n\2\2\u02c9\u02cb\7E\2\2\u02ca\u02cc")
        buf.write("\5|?\2\u02cb\u02ca\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02ce")
        buf.write("\3\2\2\2\u02cd\u02cf\5,\27\2\u02ce\u02cd\3\2\2\2\u02ce")
        buf.write("\u02cf\3\2\2\2\u02cf\u02d0\3\2\2\2\u02d0\u02f4\7F\2\2")
        buf.write("\u02d1\u02d2\f\t\2\2\u02d2\u02d3\7E\2\2\u02d3\u02d5\7")
        buf.write("\60\2\2\u02d4\u02d6\5|?\2\u02d5\u02d4\3\2\2\2\u02d5\u02d6")
        buf.write("\3\2\2\2\u02d6\u02d7\3\2\2\2\u02d7\u02d8\5,\27\2\u02d8")
        buf.write("\u02d9\7F\2\2\u02d9\u02f4\3\2\2\2\u02da\u02db\f\b\2\2")
        buf.write("\u02db\u02dc\7E\2\2\u02dc\u02dd\5|?\2\u02dd\u02de\7\60")
        buf.write("\2\2\u02de\u02df\5,\27\2\u02df\u02e0\7F\2\2\u02e0\u02f4")
        buf.write("\3\2\2\2\u02e1\u02e2\f\7\2\2\u02e2\u02e4\7E\2\2\u02e3")
        buf.write("\u02e5\5|?\2\u02e4\u02e3\3\2\2\2\u02e4\u02e5\3\2\2\2\u02e5")
        buf.write("\u02e6\3\2\2\2\u02e6\u02e7\7S\2\2\u02e7\u02f4\7F\2\2\u02e8")
        buf.write("\u02e9\f\6\2\2\u02e9\u02ea\7C\2\2\u02ea\u02eb\5~@\2\u02eb")
        buf.write("\u02ec\7D\2\2\u02ec\u02f4\3\2\2\2\u02ed\u02ee\f\5\2\2")
        buf.write("\u02ee\u02f0\7C\2\2\u02ef\u02f1\5\u0084C\2\u02f0\u02ef")
        buf.write("\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2")
        buf.write("\u02f4\7D\2\2\u02f3\u02c8\3\2\2\2\u02f3\u02d1\3\2\2\2")
        buf.write("\u02f3\u02da\3\2\2\2\u02f3\u02e1\3\2\2\2\u02f3\u02e8\3")
        buf.write("\2\2\2\u02f3\u02ed\3\2\2\2\u02f4\u02f7\3\2\2\2\u02f5\u02f3")
        buf.write("\3\2\2\2\u02f5\u02f6\3\2\2\2\u02f6o\3\2\2\2\u02f7\u02f5")
        buf.write("\3\2\2\2\u02f8\u02f9\7\20\2\2\u02f9\u02fb\7C\2\2\u02fa")
        buf.write("\u02fc\7t\2\2\u02fb\u02fa\3\2\2\2\u02fc\u02fd\3\2\2\2")
        buf.write("\u02fd\u02fb\3\2\2\2\u02fd\u02fe\3\2\2\2\u02fe\u02ff\3")
        buf.write("\2\2\2\u02ff\u030a\7D\2\2\u0300\u0301\7\21\2\2\u0301\u0303")
        buf.write("\7C\2\2\u0302\u0304\7t\2\2\u0303\u0302\3\2\2\2\u0304\u0305")
        buf.write("\3\2\2\2\u0305\u0303\3\2\2\2\u0305\u0306\3\2\2\2\u0306")
        buf.write("\u0307\3\2\2\2\u0307\u030a\7D\2\2\u0308\u030a\5r:\2\u0309")
        buf.write("\u02f8\3\2\2\2\u0309\u0300\3\2\2\2\u0309\u0308\3\2\2\2")
        buf.write("\u030aq\3\2\2\2\u030b\u030c\7\22\2\2\u030c\u030d\7C\2")
        buf.write("\2\u030d\u030e\7C\2\2\u030e\u030f\5t;\2\u030f\u0310\7")
        buf.write("D\2\2\u0310\u0311\7D\2\2\u0311s\3\2\2\2\u0312\u0314\5")
        buf.write("v<\2\u0313\u0312\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u031b")
        buf.write("\3\2\2\2\u0315\u0317\7`\2\2\u0316\u0318\5v<\2\u0317\u0316")
        buf.write("\3\2\2\2\u0317\u0318\3\2\2\2\u0318\u031a\3\2\2\2\u0319")
        buf.write("\u0315\3\2\2\2\u031a\u031d\3\2\2\2\u031b\u0319\3\2\2\2")
        buf.write("\u031b\u031c\3\2\2\2\u031cu\3\2\2\2\u031d\u031b\3\2\2")
        buf.write("\2\u031e\u0324\n\23\2\2\u031f\u0321\7C\2\2\u0320\u0322")
        buf.write("\5\16\b\2\u0321\u0320\3\2\2\2\u0321\u0322\3\2\2\2\u0322")
        buf.write("\u0323\3\2\2\2\u0323\u0325\7D\2\2\u0324\u031f\3\2\2\2")
        buf.write("\u0324\u0325\3\2\2\2\u0325w\3\2\2\2\u0326\u032c\n\24\2")
        buf.write("\2\u0327\u0328\7C\2\2\u0328\u0329\5x=\2\u0329\u032a\7")
        buf.write("D\2\2\u032a\u032c\3\2\2\2\u032b\u0326\3\2\2\2\u032b\u0327")
        buf.write("\3\2\2\2\u032c\u032f\3\2\2\2\u032d\u032b\3\2\2\2\u032d")
        buf.write("\u032e\3\2\2\2\u032ey\3\2\2\2\u032f\u032d\3\2\2\2\u0330")
        buf.write("\u0332\t\25\2\2\u0331\u0333\5|?\2\u0332\u0331\3\2\2\2")
        buf.write("\u0332\u0333\3\2\2\2\u0333\u0335\3\2\2\2\u0334\u0330\3")
        buf.write("\2\2\2\u0335\u0336\3\2\2\2\u0336\u0334\3\2\2\2\u0336\u0337")
        buf.write("\3\2\2\2\u0337{\3\2\2\2\u0338\u033a\5b\62\2\u0339\u0338")
        buf.write("\3\2\2\2\u033a\u033b\3\2\2\2\u033b\u0339\3\2\2\2\u033b")
        buf.write("\u033c\3\2\2\2\u033c}\3\2\2\2\u033d\u0340\5\u0080A\2\u033e")
        buf.write("\u033f\7`\2\2\u033f\u0341\7p\2\2\u0340\u033e\3\2\2\2\u0340")
        buf.write("\u0341\3\2\2\2\u0341\177\3\2\2\2\u0342\u0347\5\u0082B")
        buf.write("\2\u0343\u0344\7`\2\2\u0344\u0346\5\u0082B\2\u0345\u0343")
        buf.write("\3\2\2\2\u0346\u0349\3\2\2\2\u0347\u0345\3\2\2\2\u0347")
        buf.write("\u0348\3\2\2\2\u0348\u0081\3\2\2\2\u0349\u0347\3\2\2\2")
        buf.write("\u034a\u034b\5\66\34\2\u034b\u034c\5h\65\2\u034c\u0352")
        buf.write("\3\2\2\2\u034d\u034f\5:\36\2\u034e\u0350\5\u0088E\2\u034f")
        buf.write("\u034e\3\2\2\2\u034f\u0350\3\2\2\2\u0350\u0352\3\2\2\2")
        buf.write("\u0351\u034a\3\2\2\2\u0351\u034d\3\2\2\2\u0352\u0083\3")
        buf.write("\2\2\2\u0353\u0358\7q\2\2\u0354\u0355\7`\2\2\u0355\u0357")
        buf.write("\7q\2\2\u0356\u0354\3\2\2\2\u0357\u035a\3\2\2\2\u0358")
        buf.write("\u0356\3\2\2\2\u0358\u0359\3\2\2\2\u0359\u0085\3\2\2\2")
        buf.write("\u035a\u0358\3\2\2\2\u035b\u035d\5R*\2\u035c\u035e\5\u0088")
        buf.write("E\2\u035d\u035c\3\2\2\2\u035d\u035e\3\2\2\2\u035e\u0087")
        buf.write("\3\2\2\2\u035f\u036b\5z>\2\u0360\u0362\5z>\2\u0361\u0360")
        buf.write("\3\2\2\2\u0361\u0362\3\2\2\2\u0362\u0363\3\2\2\2\u0363")
        buf.write("\u0367\5\u008aF\2\u0364\u0366\5p9\2\u0365\u0364\3\2\2")
        buf.write("\2\u0366\u0369\3\2\2\2\u0367\u0365\3\2\2\2\u0367\u0368")
        buf.write("\3\2\2\2\u0368\u036b\3\2\2\2\u0369\u0367\3\2\2\2\u036a")
        buf.write("\u035f\3\2\2\2\u036a\u0361\3\2\2\2\u036b\u0089\3\2\2\2")
        buf.write("\u036c\u036d\bF\1\2\u036d\u036e\7C\2\2\u036e\u036f\5\u0088")
        buf.write("E\2\u036f\u0373\7D\2\2\u0370\u0372\5p9\2\u0371\u0370\3")
        buf.write("\2\2\2\u0372\u0375\3\2\2\2\u0373\u0371\3\2\2\2\u0373\u0374")
        buf.write("\3\2\2\2\u0374\u039b\3\2\2\2\u0375\u0373\3\2\2\2\u0376")
        buf.write("\u0378\7E\2\2\u0377\u0379\5|?\2\u0378\u0377\3\2\2\2\u0378")
        buf.write("\u0379\3\2\2\2\u0379\u037b\3\2\2\2\u037a\u037c\5,\27\2")
        buf.write("\u037b\u037a\3\2\2\2\u037b\u037c\3\2\2\2\u037c\u037d\3")
        buf.write("\2\2\2\u037d\u039b\7F\2\2\u037e\u037f\7E\2\2\u037f\u0381")
        buf.write("\7\60\2\2\u0380\u0382\5|?\2\u0381\u0380\3\2\2\2\u0381")
        buf.write("\u0382\3\2\2\2\u0382\u0383\3\2\2\2\u0383\u0384\5,\27\2")
        buf.write("\u0384\u0385\7F\2\2\u0385\u039b\3\2\2\2\u0386\u0387\7")
        buf.write("E\2\2\u0387\u0388\5|?\2\u0388\u0389\7\60\2\2\u0389\u038a")
        buf.write("\5,\27\2\u038a\u038b\7F\2\2\u038b\u039b\3\2\2\2\u038c")
        buf.write("\u038d\7E\2\2\u038d\u038e\7S\2\2\u038e\u039b\7F\2\2\u038f")
        buf.write("\u0391\7C\2\2\u0390\u0392\5~@\2\u0391\u0390\3\2\2\2\u0391")
        buf.write("\u0392\3\2\2\2\u0392\u0393\3\2\2\2\u0393\u0397\7D\2\2")
        buf.write("\u0394\u0396\5p9\2\u0395\u0394\3\2\2\2\u0396\u0399\3\2")
        buf.write("\2\2\u0397\u0395\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u039b")
        buf.write("\3\2\2\2\u0399\u0397\3\2\2\2\u039a\u036c\3\2\2\2\u039a")
        buf.write("\u0376\3\2\2\2\u039a\u037e\3\2\2\2\u039a\u0386\3\2\2\2")
        buf.write("\u039a\u038c\3\2\2\2\u039a\u038f\3\2\2\2\u039b\u03c7\3")
        buf.write("\2\2\2\u039c\u039d\f\7\2\2\u039d\u039f\7E\2\2\u039e\u03a0")
        buf.write("\5|?\2\u039f\u039e\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0\u03a2")
        buf.write("\3\2\2\2\u03a1\u03a3\5,\27\2\u03a2\u03a1\3\2\2\2\u03a2")
        buf.write("\u03a3\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4\u03c6\7F\2\2")
        buf.write("\u03a5\u03a6\f\6\2\2\u03a6\u03a7\7E\2\2\u03a7\u03a9\7")
        buf.write("\60\2\2\u03a8\u03aa\5|?\2\u03a9\u03a8\3\2\2\2\u03a9\u03aa")
        buf.write("\3\2\2\2\u03aa\u03ab\3\2\2\2\u03ab\u03ac\5,\27\2\u03ac")
        buf.write("\u03ad\7F\2\2\u03ad\u03c6\3\2\2\2\u03ae\u03af\f\5\2\2")
        buf.write("\u03af\u03b0\7E\2\2\u03b0\u03b1\5|?\2\u03b1\u03b2\7\60")
        buf.write("\2\2\u03b2\u03b3\5,\27\2\u03b3\u03b4\7F\2\2\u03b4\u03c6")
        buf.write("\3\2\2\2\u03b5\u03b6\f\4\2\2\u03b6\u03b7\7E\2\2\u03b7")
        buf.write("\u03b8\7S\2\2\u03b8\u03c6\7F\2\2\u03b9\u03ba\f\3\2\2\u03ba")
        buf.write("\u03bc\7C\2\2\u03bb\u03bd\5~@\2\u03bc\u03bb\3\2\2\2\u03bc")
        buf.write("\u03bd\3\2\2\2\u03bd\u03be\3\2\2\2\u03be\u03c2\7D\2\2")
        buf.write("\u03bf\u03c1\5p9\2\u03c0\u03bf\3\2\2\2\u03c1\u03c4\3\2")
        buf.write("\2\2\u03c2\u03c0\3\2\2\2\u03c2\u03c3\3\2\2\2\u03c3\u03c6")
        buf.write("\3\2\2\2\u03c4\u03c2\3\2\2\2\u03c5\u039c\3\2\2\2\u03c5")
        buf.write("\u03a5\3\2\2\2\u03c5\u03ae\3\2\2\2\u03c5\u03b5\3\2\2\2")
        buf.write("\u03c5\u03b9\3\2\2\2\u03c6\u03c9\3\2\2\2\u03c7\u03c5\3")
        buf.write("\2\2\2\u03c7\u03c8\3\2\2\2\u03c8\u008b\3\2\2\2\u03c9\u03c7")
        buf.write("\3\2\2\2\u03ca\u03cb\7q\2\2\u03cb\u008d\3\2\2\2\u03cc")
        buf.write("\u03d7\5,\27\2\u03cd\u03ce\7G\2\2\u03ce\u03d0\5\u0090")
        buf.write("I\2\u03cf\u03d1\7`\2\2\u03d0\u03cf\3\2\2\2\u03d0\u03d1")
        buf.write("\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2\u03d3\7H\2\2\u03d3")
        buf.write("\u03d7\3\2\2\2\u03d4\u03d5\7G\2\2\u03d5\u03d7\7H\2\2\u03d6")
        buf.write("\u03cc\3\2\2\2\u03d6\u03cd\3\2\2\2\u03d6\u03d4\3\2\2\2")
        buf.write("\u03d7\u008f\3\2\2\2\u03d8\u03da\5\u0092J\2\u03d9\u03d8")
        buf.write("\3\2\2\2\u03d9\u03da\3\2\2\2\u03da\u03db\3\2\2\2\u03db")
        buf.write("\u03e3\5\u008eH\2\u03dc\u03de\7`\2\2\u03dd\u03df\5\u0092")
        buf.write("J\2\u03de\u03dd\3\2\2\2\u03de\u03df\3\2\2\2\u03df\u03e0")
        buf.write("\3\2\2\2\u03e0\u03e2\5\u008eH\2\u03e1\u03dc\3\2\2\2\u03e2")
        buf.write("\u03e5\3\2\2\2\u03e3\u03e1\3\2\2\2\u03e3\u03e4\3\2\2\2")
        buf.write("\u03e4\u0091\3\2\2\2\u03e5\u03e3\3\2\2\2\u03e6\u03e7\5")
        buf.write("\u0094K\2\u03e7\u03e8\7a\2\2\u03e8\u0093\3\2\2\2\u03e9")
        buf.write("\u03eb\5\u0096L\2\u03ea\u03e9\3\2\2\2\u03eb\u03ec\3\2")
        buf.write("\2\2\u03ec\u03ea\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed\u0095")
        buf.write("\3\2\2\2\u03ee\u03ef\7E\2\2\u03ef\u03f0\5\62\32\2\u03f0")
        buf.write("\u03f1\7F\2\2\u03f1\u03f5\3\2\2\2\u03f2\u03f3\7o\2\2\u03f3")
        buf.write("\u03f5\7q\2\2\u03f4\u03ee\3\2\2\2\u03f4\u03f2\3\2\2\2")
        buf.write("\u03f5\u0097\3\2\2\2\u03f6\u03f7\7A\2\2\u03f7\u03f8\7")
        buf.write("C\2\2\u03f8\u03f9\5\62\32\2\u03f9\u03fb\7`\2\2\u03fa\u03fc")
        buf.write("\7t\2\2\u03fb\u03fa\3\2\2\2\u03fc\u03fd\3\2\2\2\u03fd")
        buf.write("\u03fb\3\2\2\2\u03fd\u03fe\3\2\2\2\u03fe\u03ff\3\2\2\2")
        buf.write("\u03ff\u0400\7D\2\2\u0400\u0401\7_\2\2\u0401\u0099\3\2")
        buf.write("\2\2\u0402\u0429\5\u009cO\2\u0403\u0429\5\u009eP\2\u0404")
        buf.write("\u0429\5\u00a4S\2\u0405\u0429\5\u00a6T\2\u0406\u0429\5")
        buf.write("\u00aaV\2\u0407\u0429\5\u00b2Z\2\u0408\u0429\5\u00a8U")
        buf.write("\2\u0409\u040a\t\26\2\2\u040a\u040b\t\27\2\2\u040b\u0414")
        buf.write("\7C\2\2\u040c\u0411\5(\25\2\u040d\u040e\7`\2\2\u040e\u0410")
        buf.write("\5(\25\2\u040f\u040d\3\2\2\2\u0410\u0413\3\2\2\2\u0411")
        buf.write("\u040f\3\2\2\2\u0411\u0412\3\2\2\2\u0412\u0415\3\2\2\2")
        buf.write("\u0413\u0411\3\2\2\2\u0414\u040c\3\2\2\2\u0414\u0415\3")
        buf.write("\2\2\2\u0415\u0423\3\2\2\2\u0416\u041f\7^\2\2\u0417\u041c")
        buf.write("\5(\25\2\u0418\u0419\7`\2\2\u0419\u041b\5(\25\2\u041a")
        buf.write("\u0418\3\2\2\2\u041b\u041e\3\2\2\2\u041c\u041a\3\2\2\2")
        buf.write("\u041c\u041d\3\2\2\2\u041d\u0420\3\2\2\2\u041e\u041c\3")
        buf.write("\2\2\2\u041f\u0417\3\2\2\2\u041f\u0420\3\2\2\2\u0420\u0422")
        buf.write("\3\2\2\2\u0421\u0416\3\2\2\2\u0422\u0425\3\2\2\2\u0423")
        buf.write("\u0421\3\2\2\2\u0423\u0424\3\2\2\2\u0424\u0426\3\2\2\2")
        buf.write("\u0425\u0423\3\2\2\2\u0426\u0427\7D\2\2\u0427\u0429\7")
        buf.write("_\2\2\u0428\u0402\3\2\2\2\u0428\u0403\3\2\2\2\u0428\u0404")
        buf.write("\3\2\2\2\u0428\u0405\3\2\2\2\u0428\u0406\3\2\2\2\u0428")
        buf.write("\u0407\3\2\2\2\u0428\u0408\3\2\2\2\u0428\u0409\3\2\2\2")
        buf.write("\u0429\u009b\3\2\2\2\u042a\u042b\7q\2\2\u042b\u042c\7")
        buf.write("^\2\2\u042c\u043b\5\u009aN\2\u042d\u042e\7\31\2\2\u042e")
        buf.write("\u042f\5\62\32\2\u042f\u0432\7^\2\2\u0430\u0433\5\64\33")
        buf.write("\2\u0431\u0433\5\u009aN\2\u0432\u0430\3\2\2\2\u0432\u0431")
        buf.write("\3\2\2\2\u0433\u043b\3\2\2\2\u0434\u0435\7\35\2\2\u0435")
        buf.write("\u0438\7^\2\2\u0436\u0439\5\64\33\2\u0437\u0439\5\u009a")
        buf.write("N\2\u0438\u0436\3\2\2\2\u0438\u0437\3\2\2\2\u0439\u043b")
        buf.write("\3\2\2\2\u043a\u042a\3\2\2\2\u043a\u042d\3\2\2\2\u043a")
        buf.write("\u0434\3\2\2\2\u043b\u009d\3\2\2\2\u043c\u043e\7G\2\2")
        buf.write("\u043d\u043f\5\u00a0Q\2\u043e\u043d\3\2\2\2\u043e\u043f")
        buf.write("\3\2\2\2\u043f\u0440\3\2\2\2\u0440\u0441\7H\2\2\u0441")
        buf.write("\u009f\3\2\2\2\u0442\u0444\5\u00a2R\2\u0443\u0442\3\2")
        buf.write("\2\2\u0444\u0445\3\2\2\2\u0445\u0443\3\2\2\2\u0445\u0446")
        buf.write("\3\2\2\2\u0446\u00a1\3\2\2\2\u0447\u044a\5\64\33\2\u0448")
        buf.write("\u044a\5\u009aN\2\u0449\u0447\3\2\2\2\u0449\u0448\3\2")
        buf.write("\2\2\u044a\u00a3\3\2\2\2\u044b\u044d\5\60\31\2\u044c\u044b")
        buf.write("\3\2\2\2\u044c\u044d\3\2\2\2\u044d\u044e\3\2\2\2\u044e")
        buf.write("\u044f\7_\2\2\u044f\u00a5\3\2\2\2\u0450\u0451\7&\2\2\u0451")
        buf.write("\u0452\7C\2\2\u0452\u0453\5\60\31\2\u0453\u0454\7D\2\2")
        buf.write("\u0454\u0457\5\u009aN\2\u0455\u0456\7 \2\2\u0456\u0458")
        buf.write("\5\u009aN\2\u0457\u0455\3\2\2\2\u0457\u0458\3\2\2\2\u0458")
        buf.write("\u0460\3\2\2\2\u0459\u045a\7\62\2\2\u045a\u045b\7C\2\2")
        buf.write("\u045b\u045c\5\60\31\2\u045c\u045d\7D\2\2\u045d\u045e")
        buf.write("\5\u009aN\2\u045e\u0460\3\2\2\2\u045f\u0450\3\2\2\2\u045f")
        buf.write("\u0459\3\2\2\2\u0460\u00a7\3\2\2\2\u0461\u0462\7\24\2")
        buf.write("\2\u0462\u0463\7q\2\2\u0463\u0466\5\u00a0Q\2\u0464\u0465")
        buf.write("\7\25\2\2\u0465\u0467\5\u00a0Q\2\u0466\u0464\3\2\2\2\u0466")
        buf.write("\u0467\3\2\2\2\u0467\u0468\3\2\2\2\u0468\u0469\7\26\2")
        buf.write("\2\u0469\u00a9\3\2\2\2\u046a\u046b\78\2\2\u046b\u046c")
        buf.write("\7C\2\2\u046c\u046d\5\60\31\2\u046d\u046e\7D\2\2\u046e")
        buf.write("\u046f\5\u009aN\2\u046f\u047f\3\2\2\2\u0470\u0471\7\36")
        buf.write("\2\2\u0471\u0472\5\u009aN\2\u0472\u0473\78\2\2\u0473\u0474")
        buf.write("\7C\2\2\u0474\u0475\5\60\31\2\u0475\u0476\7D\2\2\u0476")
        buf.write("\u0477\7_\2\2\u0477\u047f\3\2\2\2\u0478\u0479\7$\2\2\u0479")
        buf.write("\u047a\7C\2\2\u047a\u047b\5\u00acW\2\u047b\u047c\7D\2")
        buf.write("\2\u047c\u047d\5\u009aN\2\u047d\u047f\3\2\2\2\u047e\u046a")
        buf.write("\3\2\2\2\u047e\u0470\3\2\2\2\u047e\u0478\3\2\2\2\u047f")
        buf.write("\u00ab\3\2\2\2\u0480\u0485\5\u00aeX\2\u0481\u0483\5\60")
        buf.write("\31\2\u0482\u0481\3\2\2\2\u0482\u0483\3\2\2\2\u0483\u0485")
        buf.write("\3\2\2\2\u0484\u0480\3\2\2\2\u0484\u0482\3\2\2\2\u0485")
        buf.write("\u0486\3\2\2\2\u0486\u0488\7_\2\2\u0487\u0489\5\u00b0")
        buf.write("Y\2\u0488\u0487\3\2\2\2\u0488\u0489\3\2\2\2\u0489\u048a")
        buf.write("\3\2\2\2\u048a\u048c\7_\2\2\u048b\u048d\5\u00b0Y\2\u048c")
        buf.write("\u048b\3\2\2\2\u048c\u048d\3\2\2\2\u048d\u00ad\3\2\2\2")
        buf.write("\u048e\u0490\5\66\34\2\u048f\u0491\5@!\2\u0490\u048f\3")
        buf.write("\2\2\2\u0490\u0491\3\2\2\2\u0491\u00af\3\2\2\2\u0492\u0497")
        buf.write("\5,\27\2\u0493\u0494\7`\2\2\u0494\u0496\5,\27\2\u0495")
        buf.write("\u0493\3\2\2\2\u0496\u0499\3\2\2\2\u0497\u0495\3\2\2\2")
        buf.write("\u0497\u0498\3\2\2\2\u0498\u00b1\3\2\2\2\u0499\u0497\3")
        buf.write("\2\2\2\u049a\u049b\7%\2\2\u049b\u04a4\7q\2\2\u049c\u04a4")
        buf.write("\t\30\2\2\u049d\u049f\7,\2\2\u049e\u04a0\5\60\31\2\u049f")
        buf.write("\u049e\3\2\2\2\u049f\u04a0\3\2\2\2\u04a0\u04a4\3\2\2\2")
        buf.write("\u04a1\u04a2\7%\2\2\u04a2\u04a4\5\20\t\2\u04a3\u049a\3")
        buf.write("\2\2\2\u04a3\u049c\3\2\2\2\u04a3\u049d\3\2\2\2\u04a3\u04a1")
        buf.write("\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5\u04a6\7_\2\2\u04a6")
        buf.write("\u00b3\3\2\2\2\u04a7\u04a9\5\u00b6\\\2\u04a8\u04a7\3\2")
        buf.write("\2\2\u04a8\u04a9\3\2\2\2\u04a9\u04aa\3\2\2\2\u04aa\u04ab")
        buf.write("\7\2\2\3\u04ab\u00b5\3\2\2\2\u04ac\u04ae\5\u00b8]\2\u04ad")
        buf.write("\u04ac\3\2\2\2\u04ae\u04af\3\2\2\2\u04af\u04ad\3\2\2\2")
        buf.write("\u04af\u04b0\3\2\2\2\u04b0\u00b7\3\2\2\2\u04b1\u04b8\5")
        buf.write("F$\2\u04b2\u04b8\5\u00bc_\2\u04b3\u04b8\5\u00be`\2\u04b4")
        buf.write("\u04b8\5\64\33\2\u04b5\u04b8\5\u00c4c\2\u04b6\u04b8\7")
        buf.write("_\2\2\u04b7\u04b1\3\2\2\2\u04b7\u04b2\3\2\2\2\u04b7\u04b3")
        buf.write("\3\2\2\2\u04b7\u04b4\3\2\2\2\u04b7\u04b5\3\2\2\2\u04b7")
        buf.write("\u04b6\3\2\2\2\u04b8\u00b9\3\2\2\2\u04b9\u04bb\5H%\2\u04ba")
        buf.write("\u04b9\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc\u04ba\3\2\2\2")
        buf.write("\u04bc\u04bd\3\2\2\2\u04bd\u04bf\3\2\2\2\u04be\u04c0\5")
        buf.write("r:\2\u04bf\u04be\3\2\2\2\u04bf\u04c0\3\2\2\2\u04c0\u04c1")
        buf.write("\3\2\2\2\u04c1\u04c2\7C\2\2\u04c2\u04c3\5z>\2\u04c3\u04c4")
        buf.write("\7q\2\2\u04c4\u04c5\7D\2\2\u04c5\u04c7\7C\2\2\u04c6\u04c8")
        buf.write("\5~@\2\u04c7\u04c6\3\2\2\2\u04c7\u04c8\3\2\2\2\u04c8\u04c9")
        buf.write("\3\2\2\2\u04c9\u04ca\7D\2\2\u04ca\u04e0\3\2\2\2\u04cb")
        buf.write("\u04cd\5H%\2\u04cc\u04cb\3\2\2\2\u04cd\u04ce\3\2\2\2\u04ce")
        buf.write("\u04cc\3\2\2\2\u04ce\u04cf\3\2\2\2\u04cf\u04d0\3\2\2\2")
        buf.write("\u04d0\u04d2\7C\2\2\u04d1\u04d3\5r:\2\u04d2\u04d1\3\2")
        buf.write("\2\2\u04d2\u04d3\3\2\2\2\u04d3\u04d4\3\2\2\2\u04d4\u04d5")
        buf.write("\7C\2\2\u04d5\u04d6\5z>\2\u04d6\u04d7\7q\2\2\u04d7\u04d8")
        buf.write("\7D\2\2\u04d8\u04d9\7D\2\2\u04d9\u04db\7C\2\2\u04da\u04dc")
        buf.write("\5~@\2\u04db\u04da\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc\u04dd")
        buf.write("\3\2\2\2\u04dd\u04de\7D\2\2\u04de\u04e0\3\2\2\2\u04df")
        buf.write("\u04ba\3\2\2\2\u04df\u04cc\3\2\2\2\u04e0\u00bb\3\2\2\2")
        buf.write("\u04e1\u04e3\n\31\2\2\u04e2\u04e4\58\35\2\u04e3\u04e2")
        buf.write("\3\2\2\2\u04e3\u04e4\3\2\2\2\u04e4\u04e5\3\2\2\2\u04e5")
        buf.write("\u04e7\5j\66\2\u04e6\u04e8\5\u00c6d\2\u04e7\u04e6\3\2")
        buf.write("\2\2\u04e7\u04e8\3\2\2\2\u04e8\u04e9\3\2\2\2\u04e9\u04ea")
        buf.write("\7_\2\2\u04ea\u00bd\3\2\2\2\u04eb\u04ed\58\35\2\u04ec")
        buf.write("\u04eb\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed\u04ee\3\2\2\2")
        buf.write("\u04ee\u04f0\5h\65\2\u04ef\u04f1\5\u00c6d\2\u04f0\u04ef")
        buf.write("\3\2\2\2\u04f0\u04f1\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2")
        buf.write("\u04f3\5\u009eP\2\u04f3\u00bf\3\2\2\2\u04f4\u04f6\7q\2")
        buf.write("\2\u04f5\u04f4\3\2\2\2\u04f6\u04f7\3\2\2\2\u04f7\u04f5")
        buf.write("\3\2\2\2\u04f7\u04f8\3\2\2\2\u04f8\u04fc\3\2\2\2\u04f9")
        buf.write("\u04fc\7t\2\2\u04fa\u04fc\7r\2\2\u04fb\u04f5\3\2\2\2\u04fb")
        buf.write("\u04f9\3\2\2\2\u04fb\u04fa\3\2\2\2\u04fc\u00c1\3\2\2\2")
        buf.write("\u04fd\u0502\5\u00c0a\2\u04fe\u04ff\7`\2\2\u04ff\u0501")
        buf.write("\5\u00c0a\2\u0500\u04fe\3\2\2\2\u0501\u0504\3\2\2\2\u0502")
        buf.write("\u0500\3\2\2\2\u0502\u0503\3\2\2\2\u0503\u00c3\3\2\2\2")
        buf.write("\u0504\u0502\3\2\2\2\u0505\u0508\5n8\2\u0506\u0508\7q")
        buf.write("\2\2\u0507\u0505\3\2\2\2\u0507\u0506\3\2\2\2\u0508\u0509")
        buf.write("\3\2\2\2\u0509\u050b\7C\2\2\u050a\u050c\5\u00c2b\2\u050b")
        buf.write("\u050a\3\2\2\2\u050b\u050c\3\2\2\2\u050c\u050d\3\2\2\2")
        buf.write("\u050d\u050f\7D\2\2\u050e\u0510\7_\2\2\u050f\u050e\3\2")
        buf.write("\2\2\u050f\u0510\3\2\2\2\u0510\u00c5\3\2\2\2\u0511\u0513")
        buf.write("\5\64\33\2\u0512\u0511\3\2\2\2\u0513\u0514\3\2\2\2\u0514")
        buf.write("\u0512\3\2\2\2\u0514\u0515\3\2\2\2\u0515\u00c7\3\2\2\2")
        buf.write("\u00ac\u00cd\u00d0\u00d8\u00ec\u00fa\u00ff\u0106\u010e")
        buf.write("\u0112\u011a\u0120\u0122\u0127\u012e\u0134\u0142\u0147")
        buf.write("\u0150\u0157\u015f\u0167\u016f\u0177\u017f\u0187\u018f")
        buf.write("\u0197\u019f\u01a8\u01b0\u01b9\u01c1\u01c6\u01cb\u01d0")
        buf.write("\u01d7\u01dd\u01e3\u01ea\u01f1\u01f7\u0202\u0206\u020b")
        buf.write("\u0213\u021e\u0224\u0229\u0232\u0239\u023d\u0242\u0247")
        buf.write("\u024a\u0251\u0256\u025a\u025e\u0263\u0269\u0270\u0276")
        buf.write("\u0287\u028d\u0292\u0298\u029c\u02a2\u02a8\u02af\u02b3")
        buf.write("\u02c0\u02c6\u02cb\u02ce\u02d5\u02e4\u02f0\u02f3\u02f5")
        buf.write("\u02fd\u0305\u0309\u0313\u0317\u031b\u0321\u0324\u032b")
        buf.write("\u032d\u0332\u0336\u033b\u0340\u0347\u034f\u0351\u0358")
        buf.write("\u035d\u0361\u0367\u036a\u0373\u0378\u037b\u0381\u0391")
        buf.write("\u0397\u039a\u039f\u03a2\u03a9\u03bc\u03c2\u03c5\u03c7")
        buf.write("\u03d0\u03d6\u03d9\u03de\u03e3\u03ec\u03f4\u03fd\u0411")
        buf.write("\u0414\u041c\u041f\u0423\u0428\u0432\u0438\u043a\u043e")
        buf.write("\u0445\u0449\u044c\u0457\u045f\u0466\u047e\u0482\u0484")
        buf.write("\u0488\u048c\u0490\u0497\u049f\u04a3\u04a8\u04af\u04b7")
        buf.write("\u04bc\u04bf\u04c7\u04ce\u04d2\u04db\u04df\u04e3\u04e7")
        buf.write("\u04ec\u04f0\u04f7\u04fb\u0502\u0507\u050b\u050f\u0514")
        return buf.getvalue()


class CParser ( Parser ):

    grammarFileName = "C.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'__extension__'", "'__builtin_va_arg'", 
                     "'__builtin_offsetof'", "'__m128'", "'__m128d'", "'__m128i'", 
                     "'__typeof__'", "'__restrict'", "'__restrict__'", "'__inline'", 
                     "'__inline__'", "'__stdcall'", "'__declspec'", "'__asm'", 
                     "'__asm__'", "'__attribute__'", "'__volatile__'", "'#ifdef'", 
                     "'#else'", "'#endif'", "'auto'", "'break'", "'case'", 
                     "'char'", "'const'", "'continue'", "'default'", "'do'", 
                     "'double'", "'else'", "'enum'", "'extern'", "'float'", 
                     "'for'", "'goto'", "'if'", "'inline'", "'int'", "'long'", 
                     "'register'", "'restrict'", "'return'", "'short'", 
                     "'signed'", "'sizeof'", "'static'", "'struct'", "'switch'", 
                     "'typedef'", "'union'", "'unsigned'", "'void'", "'volatile'", 
                     "'while'", "'_Alignas'", "'_Alignof'", "'_Atomic'", 
                     "'_Bool'", "'_Complex'", "'_Generic'", "'_Imaginary'", 
                     "'_Noreturn'", "'_Static_assert'", "'_Thread_local'", 
                     "'('", "')'", "'['", "']'", "'{'", "'}'", "'<'", "'<='", 
                     "'>'", "'>='", "'<<'", "'>>'", "'+'", "'++'", "'-'", 
                     "'--'", "'*'", "'/'", "'%'", "'&'", "'|'", "'&&'", 
                     "'||'", "'^'", "'!'", "'~'", "'?'", "':'", "';'", "','", 
                     "'='", "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", 
                     "'>>='", "'&='", "'^='", "'|='", "'=='", "'!='", "'->'", 
                     "'.'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "Auto", "Break", "Case", "Char", "Const", 
                      "Continue", "Default", "Do", "Double", "Else", "Enum", 
                      "Extern", "Float", "For", "Goto", "If", "Inline", 
                      "Int", "Long", "Register", "Restrict", "Return", "Short", 
                      "Signed", "Sizeof", "Static", "Struct", "Switch", 
                      "Typedef", "Union", "Unsigned", "Void", "Volatile", 
                      "While", "Alignas", "Alignof", "Atomic", "Bool", "Complex", 
                      "Generic", "Imaginary", "Noreturn", "StaticAssert", 
                      "ThreadLocal", "LeftParen", "RightParen", "LeftBracket", 
                      "RightBracket", "LeftBrace", "RightBrace", "Less", 
                      "LessEqual", "Greater", "GreaterEqual", "LeftShift", 
                      "RightShift", "Plus", "PlusPlus", "Minus", "MinusMinus", 
                      "Star", "Div", "Mod", "And", "Or", "AndAnd", "OrOr", 
                      "Caret", "Not", "Tilde", "Question", "Colon", "Semi", 
                      "Comma", "Assign", "StarAssign", "DivAssign", "ModAssign", 
                      "PlusAssign", "MinusAssign", "LeftShiftAssign", "RightShiftAssign", 
                      "AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual", 
                      "Arrow", "Dot", "Ellipsis", "Identifier", "Constant", 
                      "DigitSequence", "StringLiteral", "ComplexDefine", 
                      "Macroundef", "Macroifdef", "Macroifndef", "Macroelse", 
                      "Macroendif", "IncludeDirective", "AsmBlock", "LineAfterPreprocessing", 
                      "LineDirective", "PragmaDirective", "Whitespace", 
                      "Newline", "BlockComment", "LineComment" ]

    RULE_primaryExpression = 0
    RULE_genericSelection = 1
    RULE_genericAssocList = 2
    RULE_genericAssociation = 3
    RULE_postfixExpression = 4
    RULE_passignmentExpression = 5
    RULE_argumentExpressionList = 6
    RULE_unaryExpression = 7
    RULE_unaryOperator = 8
    RULE_castExpression = 9
    RULE_multiplicativeExpression = 10
    RULE_additiveExpression = 11
    RULE_shiftExpression = 12
    RULE_relationalExpression = 13
    RULE_equalityExpression = 14
    RULE_andExpression = 15
    RULE_exclusiveOrExpression = 16
    RULE_inclusiveOrExpression = 17
    RULE_logicalAndExpression = 18
    RULE_logicalOrExpression = 19
    RULE_conditionalExpression = 20
    RULE_assignmentExpression = 21
    RULE_assignmentOperator = 22
    RULE_expression = 23
    RULE_constantExpression = 24
    RULE_declaration = 25
    RULE_declarationSpecifiers = 26
    RULE_funcDeclarationSpecifiers = 27
    RULE_declarationSpecifiers2 = 28
    RULE_funcDeclarationSpecifier = 29
    RULE_declarationSpecifier = 30
    RULE_initDeclaratorList = 31
    RULE_initDeclarator = 32
    RULE_storageClassSpecifier = 33
    RULE_fptypeSpecifier = 34
    RULE_typeSpecifier = 35
    RULE_structOrUnionSpecifier = 36
    RULE_structOrUnion = 37
    RULE_structDeclarationList = 38
    RULE_structDeclaration = 39
    RULE_specifierQualifierList = 40
    RULE_structDeclaratorList = 41
    RULE_structDeclarator = 42
    RULE_enumSpecifier = 43
    RULE_enumeratorList = 44
    RULE_enumerator = 45
    RULE_enumerationConstant = 46
    RULE_atomicTypeSpecifier = 47
    RULE_typeQualifier = 48
    RULE_functionSpecifier = 49
    RULE_alignmentSpecifier = 50
    RULE_declarator = 51
    RULE_funcDeclarator = 52
    RULE_directFunctionDeclarator = 53
    RULE_directDeclarator = 54
    RULE_gccDeclaratorExtension = 55
    RULE_gccAttributeSpecifier = 56
    RULE_gccAttributeList = 57
    RULE_gccAttribute = 58
    RULE_nestedParenthesesBlock = 59
    RULE_pointer = 60
    RULE_typeQualifierList = 61
    RULE_parameterTypeList = 62
    RULE_parameterList = 63
    RULE_parameterDeclaration = 64
    RULE_identifierList = 65
    RULE_typeName = 66
    RULE_abstractDeclarator = 67
    RULE_directAbstractDeclarator = 68
    RULE_typedefName = 69
    RULE_initializer = 70
    RULE_initializerList = 71
    RULE_designation = 72
    RULE_designatorList = 73
    RULE_designator = 74
    RULE_staticAssertDeclaration = 75
    RULE_statement = 76
    RULE_labeledStatement = 77
    RULE_compoundStatement = 78
    RULE_blockItemList = 79
    RULE_blockItem = 80
    RULE_expressionStatement = 81
    RULE_selectionStatement = 82
    RULE_macroSelectionStatement = 83
    RULE_iterationStatement = 84
    RULE_forCondition = 85
    RULE_forDeclaration = 86
    RULE_forExpression = 87
    RULE_jumpStatement = 88
    RULE_compilationUnit = 89
    RULE_translationUnit = 90
    RULE_externalDeclaration = 91
    RULE_functionPtrDeclaration = 92
    RULE_functionDeclaration = 93
    RULE_functionDefinition = 94
    RULE_stringIdentifier = 95
    RULE_stringIdentifierList = 96
    RULE_macroDefinition = 97
    RULE_declarationList = 98

    ruleNames =  [ "primaryExpression", "genericSelection", "genericAssocList", 
                   "genericAssociation", "postfixExpression", "passignmentExpression", 
                   "argumentExpressionList", "unaryExpression", "unaryOperator", 
                   "castExpression", "multiplicativeExpression", "additiveExpression", 
                   "shiftExpression", "relationalExpression", "equalityExpression", 
                   "andExpression", "exclusiveOrExpression", "inclusiveOrExpression", 
                   "logicalAndExpression", "logicalOrExpression", "conditionalExpression", 
                   "assignmentExpression", "assignmentOperator", "expression", 
                   "constantExpression", "declaration", "declarationSpecifiers", 
                   "funcDeclarationSpecifiers", "declarationSpecifiers2", 
                   "funcDeclarationSpecifier", "declarationSpecifier", "initDeclaratorList", 
                   "initDeclarator", "storageClassSpecifier", "fptypeSpecifier", 
                   "typeSpecifier", "structOrUnionSpecifier", "structOrUnion", 
                   "structDeclarationList", "structDeclaration", "specifierQualifierList", 
                   "structDeclaratorList", "structDeclarator", "enumSpecifier", 
                   "enumeratorList", "enumerator", "enumerationConstant", 
                   "atomicTypeSpecifier", "typeQualifier", "functionSpecifier", 
                   "alignmentSpecifier", "declarator", "funcDeclarator", 
                   "directFunctionDeclarator", "directDeclarator", "gccDeclaratorExtension", 
                   "gccAttributeSpecifier", "gccAttributeList", "gccAttribute", 
                   "nestedParenthesesBlock", "pointer", "typeQualifierList", 
                   "parameterTypeList", "parameterList", "parameterDeclaration", 
                   "identifierList", "typeName", "abstractDeclarator", "directAbstractDeclarator", 
                   "typedefName", "initializer", "initializerList", "designation", 
                   "designatorList", "designator", "staticAssertDeclaration", 
                   "statement", "labeledStatement", "compoundStatement", 
                   "blockItemList", "blockItem", "expressionStatement", 
                   "selectionStatement", "macroSelectionStatement", "iterationStatement", 
                   "forCondition", "forDeclaration", "forExpression", "jumpStatement", 
                   "compilationUnit", "translationUnit", "externalDeclaration", 
                   "functionPtrDeclaration", "functionDeclaration", "functionDefinition", 
                   "stringIdentifier", "stringIdentifierList", "macroDefinition", 
                   "declarationList" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    Auto=21
    Break=22
    Case=23
    Char=24
    Const=25
    Continue=26
    Default=27
    Do=28
    Double=29
    Else=30
    Enum=31
    Extern=32
    Float=33
    For=34
    Goto=35
    If=36
    Inline=37
    Int=38
    Long=39
    Register=40
    Restrict=41
    Return=42
    Short=43
    Signed=44
    Sizeof=45
    Static=46
    Struct=47
    Switch=48
    Typedef=49
    Union=50
    Unsigned=51
    Void=52
    Volatile=53
    While=54
    Alignas=55
    Alignof=56
    Atomic=57
    Bool=58
    Complex=59
    Generic=60
    Imaginary=61
    Noreturn=62
    StaticAssert=63
    ThreadLocal=64
    LeftParen=65
    RightParen=66
    LeftBracket=67
    RightBracket=68
    LeftBrace=69
    RightBrace=70
    Less=71
    LessEqual=72
    Greater=73
    GreaterEqual=74
    LeftShift=75
    RightShift=76
    Plus=77
    PlusPlus=78
    Minus=79
    MinusMinus=80
    Star=81
    Div=82
    Mod=83
    And=84
    Or=85
    AndAnd=86
    OrOr=87
    Caret=88
    Not=89
    Tilde=90
    Question=91
    Colon=92
    Semi=93
    Comma=94
    Assign=95
    StarAssign=96
    DivAssign=97
    ModAssign=98
    PlusAssign=99
    MinusAssign=100
    LeftShiftAssign=101
    RightShiftAssign=102
    AndAssign=103
    XorAssign=104
    OrAssign=105
    Equal=106
    NotEqual=107
    Arrow=108
    Dot=109
    Ellipsis=110
    Identifier=111
    Constant=112
    DigitSequence=113
    StringLiteral=114
    ComplexDefine=115
    Macroundef=116
    Macroifdef=117
    Macroifndef=118
    Macroelse=119
    Macroendif=120
    IncludeDirective=121
    AsmBlock=122
    LineAfterPreprocessing=123
    LineDirective=124
    PragmaDirective=125
    Whitespace=126
    Newline=127
    BlockComment=128
    LineComment=129

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Constant(self):
            return self.getToken(CParser.Constant, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.StringLiteral)
            else:
                return self.getToken(CParser.StringLiteral, i)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def genericSelection(self):
            return self.getTypedRuleContext(CParser.GenericSelectionContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(CParser.CompoundStatementContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def getRuleIndex(self):
            return CParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = CParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 234
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 198
                self.match(CParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 199
                self.match(CParser.Constant)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 201 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 200
                    self.match(CParser.StringLiteral)
                    self.state = 203 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==CParser.StringLiteral):
                        break

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 206
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.T__0:
                    self.state = 205
                    self.match(CParser.T__0)


                self.state = 208
                self.match(CParser.LeftParen)
                self.state = 209
                self.expression()
                self.state = 210
                self.match(CParser.RightParen)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 212
                self.genericSelection()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.T__0:
                    self.state = 213
                    self.match(CParser.T__0)


                self.state = 216
                self.match(CParser.LeftParen)
                self.state = 217
                self.compoundStatement()
                self.state = 218
                self.match(CParser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 220
                self.match(CParser.T__1)
                self.state = 221
                self.match(CParser.LeftParen)
                self.state = 222
                self.unaryExpression()
                self.state = 223
                self.match(CParser.Comma)
                self.state = 224
                self.typeName()
                self.state = 225
                self.match(CParser.RightParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 227
                self.match(CParser.T__2)
                self.state = 228
                self.match(CParser.LeftParen)
                self.state = 229
                self.typeName()
                self.state = 230
                self.match(CParser.Comma)
                self.state = 231
                self.unaryExpression()
                self.state = 232
                self.match(CParser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericSelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Generic(self):
            return self.getToken(CParser.Generic, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def genericAssocList(self):
            return self.getTypedRuleContext(CParser.GenericAssocListContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def getRuleIndex(self):
            return CParser.RULE_genericSelection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericSelection" ):
                listener.enterGenericSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericSelection" ):
                listener.exitGenericSelection(self)




    def genericSelection(self):

        localctx = CParser.GenericSelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_genericSelection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self.match(CParser.Generic)
            self.state = 237
            self.match(CParser.LeftParen)
            self.state = 238
            self.assignmentExpression()
            self.state = 239
            self.match(CParser.Comma)
            self.state = 240
            self.genericAssocList()
            self.state = 241
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericAssocListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericAssociation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GenericAssociationContext)
            else:
                return self.getTypedRuleContext(CParser.GenericAssociationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_genericAssocList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericAssocList" ):
                listener.enterGenericAssocList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericAssocList" ):
                listener.exitGenericAssocList(self)




    def genericAssocList(self):

        localctx = CParser.GenericAssocListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_genericAssocList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            self.genericAssociation()
            self.state = 248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Comma:
                self.state = 244
                self.match(CParser.Comma)
                self.state = 245
                self.genericAssociation()
                self.state = 250
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericAssociationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(CParser.Colon, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def Default(self):
            return self.getToken(CParser.Default, 0)

        def getRuleIndex(self):
            return CParser.RULE_genericAssociation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericAssociation" ):
                listener.enterGenericAssociation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericAssociation" ):
                listener.exitGenericAssociation(self)




    def genericAssociation(self):

        localctx = CParser.GenericAssociationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_genericAssociation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__0, CParser.T__3, CParser.T__4, CParser.T__5, CParser.T__6, CParser.T__7, CParser.T__8, CParser.T__15, CParser.Char, CParser.Const, CParser.Double, CParser.Enum, CParser.Float, CParser.Int, CParser.Long, CParser.Register, CParser.Restrict, CParser.Short, CParser.Signed, CParser.Struct, CParser.Union, CParser.Unsigned, CParser.Void, CParser.Volatile, CParser.Atomic, CParser.Bool, CParser.Complex, CParser.Identifier]:
                self.state = 251
                self.typeName()
                pass
            elif token in [CParser.Default]:
                self.state = 252
                self.match(CParser.Default)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 255
            self.match(CParser.Colon)
            self.state = 256
            self.assignmentExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(CParser.PrimaryExpressionContext,0)


        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftParen)
            else:
                return self.getToken(CParser.LeftParen, i)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightParen)
            else:
                return self.getToken(CParser.RightParen, i)

        def LeftBrace(self):
            return self.getToken(CParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(CParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(CParser.RightBrace, 0)

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftBracket)
            else:
                return self.getToken(CParser.LeftBracket, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.ExpressionContext,i)


        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightBracket)
            else:
                return self.getToken(CParser.RightBracket, i)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Identifier)
            else:
                return self.getToken(CParser.Identifier, i)

        def Dot(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Dot)
            else:
                return self.getToken(CParser.Dot, i)

        def Arrow(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Arrow)
            else:
                return self.getToken(CParser.Arrow, i)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.PlusPlus)
            else:
                return self.getToken(CParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.MinusMinus)
            else:
                return self.getToken(CParser.MinusMinus, i)

        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def argumentExpressionList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ArgumentExpressionListContext)
            else:
                return self.getTypedRuleContext(CParser.ArgumentExpressionListContext,i)


        def getRuleIndex(self):
            return CParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)




    def postfixExpression(self):

        localctx = CParser.PostfixExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_postfixExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 258
                self.primaryExpression()
                pass

            elif la_ == 2:
                self.state = 260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.T__0:
                    self.state = 259
                    self.match(CParser.T__0)


                self.state = 262
                self.match(CParser.LeftParen)
                self.state = 263
                self.typeName()
                self.state = 264
                self.match(CParser.RightParen)
                self.state = 265
                self.match(CParser.LeftBrace)
                self.state = 266
                self.initializerList()
                self.state = 268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.Comma:
                    self.state = 267
                    self.match(CParser.Comma)


                self.state = 270
                self.match(CParser.RightBrace)
                pass


            self.state = 288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CParser.LeftParen - 65)) | (1 << (CParser.LeftBracket - 65)) | (1 << (CParser.PlusPlus - 65)) | (1 << (CParser.MinusMinus - 65)) | (1 << (CParser.Arrow - 65)) | (1 << (CParser.Dot - 65)))) != 0):
                self.state = 286
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CParser.LeftBracket]:
                    self.state = 274
                    self.match(CParser.LeftBracket)
                    self.state = 275
                    self.expression()
                    self.state = 276
                    self.match(CParser.RightBracket)
                    pass
                elif token in [CParser.LeftParen]:
                    self.state = 278
                    self.match(CParser.LeftParen)
                    self.state = 280
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__15) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Float) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Sizeof) | (1 << CParser.Struct) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Generic))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CParser.LeftParen - 65)) | (1 << (CParser.Plus - 65)) | (1 << (CParser.PlusPlus - 65)) | (1 << (CParser.Minus - 65)) | (1 << (CParser.MinusMinus - 65)) | (1 << (CParser.Star - 65)) | (1 << (CParser.And - 65)) | (1 << (CParser.AndAnd - 65)) | (1 << (CParser.Not - 65)) | (1 << (CParser.Tilde - 65)) | (1 << (CParser.Identifier - 65)) | (1 << (CParser.Constant - 65)) | (1 << (CParser.DigitSequence - 65)) | (1 << (CParser.StringLiteral - 65)))) != 0):
                        self.state = 279
                        self.argumentExpressionList()


                    self.state = 282
                    self.match(CParser.RightParen)
                    pass
                elif token in [CParser.Arrow, CParser.Dot]:
                    self.state = 283
                    _la = self._input.LA(1)
                    if not(_la==CParser.Arrow or _la==CParser.Dot):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 284
                    self.match(CParser.Identifier)
                    pass
                elif token in [CParser.PlusPlus, CParser.MinusMinus]:
                    self.state = 285
                    _la = self._input.LA(1)
                    if not(_la==CParser.PlusPlus or _la==CParser.MinusMinus):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 290
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PassignmentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(CParser.SpecifierQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_passignmentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPassignmentExpression" ):
                listener.enterPassignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPassignmentExpression" ):
                listener.exitPassignmentExpression(self)




    def passignmentExpression(self):

        localctx = CParser.PassignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_passignmentExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 291
                self.specifierQualifierList()
                pass

            elif la_ == 2:
                self.state = 292
                self.assignmentExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def passignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.PassignmentExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.PassignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_argumentExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExpressionList" ):
                listener.enterArgumentExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExpressionList" ):
                listener.exitArgumentExpressionList(self)




    def argumentExpressionList(self):

        localctx = CParser.ArgumentExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_argumentExpressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 295
            self.passignmentExpression()
            self.state = 300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Comma:
                self.state = 296
                self.match(CParser.Comma)
                self.state = 297
                self.passignmentExpression()
                self.state = 302
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(CParser.PostfixExpressionContext,0)


        def unaryOperator(self):
            return self.getTypedRuleContext(CParser.UnaryOperatorContext,0)


        def castExpression(self):
            return self.getTypedRuleContext(CParser.CastExpressionContext,0)


        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def AndAnd(self):
            return self.getToken(CParser.AndAnd, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Sizeof(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Sizeof)
            else:
                return self.getToken(CParser.Sizeof, i)

        def Alignof(self):
            return self.getToken(CParser.Alignof, 0)

        def PlusPlus(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.PlusPlus)
            else:
                return self.getToken(CParser.PlusPlus, i)

        def MinusMinus(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.MinusMinus)
            else:
                return self.getToken(CParser.MinusMinus, i)

        def getRuleIndex(self):
            return CParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = CParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_unaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 303
                    _la = self._input.LA(1)
                    if not(((((_la - 45)) & ~0x3f) == 0 and ((1 << (_la - 45)) & ((1 << (CParser.Sizeof - 45)) | (1 << (CParser.PlusPlus - 45)) | (1 << (CParser.MinusMinus - 45)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume() 
                self.state = 308
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

            self.state = 320
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__0, CParser.T__1, CParser.T__2, CParser.Generic, CParser.LeftParen, CParser.Identifier, CParser.Constant, CParser.StringLiteral]:
                self.state = 309
                self.postfixExpression()
                pass
            elif token in [CParser.Plus, CParser.Minus, CParser.Star, CParser.And, CParser.Not, CParser.Tilde]:
                self.state = 310
                self.unaryOperator()
                self.state = 311
                self.castExpression()
                pass
            elif token in [CParser.Sizeof, CParser.Alignof]:
                self.state = 313
                _la = self._input.LA(1)
                if not(_la==CParser.Sizeof or _la==CParser.Alignof):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 314
                self.match(CParser.LeftParen)
                self.state = 315
                self.typeName()
                self.state = 316
                self.match(CParser.RightParen)
                pass
            elif token in [CParser.AndAnd]:
                self.state = 318
                self.match(CParser.AndAnd)
                self.state = 319
                self.match(CParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(CParser.And, 0)

        def Star(self):
            return self.getToken(CParser.Star, 0)

        def Plus(self):
            return self.getToken(CParser.Plus, 0)

        def Minus(self):
            return self.getToken(CParser.Minus, 0)

        def Tilde(self):
            return self.getToken(CParser.Tilde, 0)

        def Not(self):
            return self.getToken(CParser.Not, 0)

        def getRuleIndex(self):
            return CParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)




    def unaryOperator(self):

        localctx = CParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            _la = self._input.LA(1)
            if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (CParser.Plus - 77)) | (1 << (CParser.Minus - 77)) | (1 << (CParser.Star - 77)) | (1 << (CParser.And - 77)) | (1 << (CParser.Not - 77)) | (1 << (CParser.Tilde - 77)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def castExpression(self):
            return self.getTypedRuleContext(CParser.CastExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(CParser.DigitSequence, 0)

        def getRuleIndex(self):
            return CParser.RULE_castExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)




    def castExpression(self):

        localctx = CParser.CastExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_castExpression)
        self._la = 0 # Token type
        try:
            self.state = 334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.T__0:
                    self.state = 324
                    self.match(CParser.T__0)


                self.state = 327
                self.match(CParser.LeftParen)
                self.state = 328
                self.typeName()
                self.state = 329
                self.match(CParser.RightParen)
                self.state = 330
                self.castExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 332
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 333
                self.match(CParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.CastExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.CastExpressionContext,i)


        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Star)
            else:
                return self.getToken(CParser.Star, i)

        def Div(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Div)
            else:
                return self.getToken(CParser.Div, i)

        def Mod(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Mod)
            else:
                return self.getToken(CParser.Mod, i)

        def getRuleIndex(self):
            return CParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)




    def multiplicativeExpression(self):

        localctx = CParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_multiplicativeExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.castExpression()
            self.state = 341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (CParser.Star - 81)) | (1 << (CParser.Div - 81)) | (1 << (CParser.Mod - 81)))) != 0):
                self.state = 337
                _la = self._input.LA(1)
                if not(((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (CParser.Star - 81)) | (1 << (CParser.Div - 81)) | (1 << (CParser.Mod - 81)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 338
                self.castExpression()
                self.state = 343
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.MultiplicativeExpressionContext,i)


        def Plus(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Plus)
            else:
                return self.getToken(CParser.Plus, i)

        def Minus(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Minus)
            else:
                return self.getToken(CParser.Minus, i)

        def getRuleIndex(self):
            return CParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)




    def additiveExpression(self):

        localctx = CParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_additiveExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self.multiplicativeExpression()
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Plus or _la==CParser.Minus:
                self.state = 345
                _la = self._input.LA(1)
                if not(_la==CParser.Plus or _la==CParser.Minus):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 346
                self.multiplicativeExpression()
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShiftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.AdditiveExpressionContext,i)


        def LeftShift(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftShift)
            else:
                return self.getToken(CParser.LeftShift, i)

        def RightShift(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightShift)
            else:
                return self.getToken(CParser.RightShift, i)

        def getRuleIndex(self):
            return CParser.RULE_shiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftExpression" ):
                listener.enterShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftExpression" ):
                listener.exitShiftExpression(self)




    def shiftExpression(self):

        localctx = CParser.ShiftExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_shiftExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.additiveExpression()
            self.state = 357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.LeftShift or _la==CParser.RightShift:
                self.state = 353
                _la = self._input.LA(1)
                if not(_la==CParser.LeftShift or _la==CParser.RightShift):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 354
                self.additiveExpression()
                self.state = 359
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ShiftExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.ShiftExpressionContext,i)


        def Less(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Less)
            else:
                return self.getToken(CParser.Less, i)

        def Greater(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Greater)
            else:
                return self.getToken(CParser.Greater, i)

        def LessEqual(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LessEqual)
            else:
                return self.getToken(CParser.LessEqual, i)

        def GreaterEqual(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.GreaterEqual)
            else:
                return self.getToken(CParser.GreaterEqual, i)

        def getRuleIndex(self):
            return CParser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)




    def relationalExpression(self):

        localctx = CParser.RelationalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_relationalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.shiftExpression()
            self.state = 365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Less - 71)) | (1 << (CParser.LessEqual - 71)) | (1 << (CParser.Greater - 71)) | (1 << (CParser.GreaterEqual - 71)))) != 0):
                self.state = 361
                _la = self._input.LA(1)
                if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Less - 71)) | (1 << (CParser.LessEqual - 71)) | (1 << (CParser.Greater - 71)) | (1 << (CParser.GreaterEqual - 71)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 362
                self.shiftExpression()
                self.state = 367
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.RelationalExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.RelationalExpressionContext,i)


        def Equal(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Equal)
            else:
                return self.getToken(CParser.Equal, i)

        def NotEqual(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.NotEqual)
            else:
                return self.getToken(CParser.NotEqual, i)

        def getRuleIndex(self):
            return CParser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)




    def equalityExpression(self):

        localctx = CParser.EqualityExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_equalityExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self.relationalExpression()
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Equal or _la==CParser.NotEqual:
                self.state = 369
                _la = self._input.LA(1)
                if not(_la==CParser.Equal or _la==CParser.NotEqual):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 370
                self.relationalExpression()
                self.state = 375
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.EqualityExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.EqualityExpressionContext,i)


        def And(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.And)
            else:
                return self.getToken(CParser.And, i)

        def getRuleIndex(self):
            return CParser.RULE_andExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpression" ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpression" ):
                listener.exitAndExpression(self)




    def andExpression(self):

        localctx = CParser.AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_andExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self.equalityExpression()
            self.state = 381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.And:
                self.state = 377
                self.match(CParser.And)
                self.state = 378
                self.equalityExpression()
                self.state = 383
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.AndExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.AndExpressionContext,i)


        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Caret)
            else:
                return self.getToken(CParser.Caret, i)

        def getRuleIndex(self):
            return CParser.RULE_exclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveOrExpression" ):
                listener.enterExclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveOrExpression" ):
                listener.exitExclusiveOrExpression(self)




    def exclusiveOrExpression(self):

        localctx = CParser.ExclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_exclusiveOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.andExpression()
            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Caret:
                self.state = 385
                self.match(CParser.Caret)
                self.state = 386
                self.andExpression()
                self.state = 391
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ExclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.ExclusiveOrExpressionContext,i)


        def Or(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Or)
            else:
                return self.getToken(CParser.Or, i)

        def getRuleIndex(self):
            return CParser.RULE_inclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveOrExpression" ):
                listener.enterInclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveOrExpression" ):
                listener.exitInclusiveOrExpression(self)




    def inclusiveOrExpression(self):

        localctx = CParser.InclusiveOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_inclusiveOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 392
            self.exclusiveOrExpression()
            self.state = 397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Or:
                self.state = 393
                self.match(CParser.Or)
                self.state = 394
                self.exclusiveOrExpression()
                self.state = 399
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.InclusiveOrExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.InclusiveOrExpressionContext,i)


        def AndAnd(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.AndAnd)
            else:
                return self.getToken(CParser.AndAnd, i)

        def getRuleIndex(self):
            return CParser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)




    def logicalAndExpression(self):

        localctx = CParser.LogicalAndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_logicalAndExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.inclusiveOrExpression()
            self.state = 405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.AndAnd:
                self.state = 401
                self.match(CParser.AndAnd)
                self.state = 402
                self.inclusiveOrExpression()
                self.state = 407
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.LogicalAndExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.LogicalAndExpressionContext,i)


        def OrOr(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.OrOr)
            else:
                return self.getToken(CParser.OrOr, i)

        def getRuleIndex(self):
            return CParser.RULE_logicalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)




    def logicalOrExpression(self):

        localctx = CParser.LogicalOrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_logicalOrExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.logicalAndExpression()
            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.OrOr:
                self.state = 409
                self.match(CParser.OrOr)
                self.state = 410
                self.logicalAndExpression()
                self.state = 415
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(CParser.LogicalOrExpressionContext,0)


        def Question(self):
            return self.getToken(CParser.Question, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(CParser.Colon, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)




    def conditionalExpression(self):

        localctx = CParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_conditionalExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.logicalOrExpression()
            self.state = 422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CParser.Question:
                self.state = 417
                self.match(CParser.Question)
                self.state = 418
                self.expression()
                self.state = 419
                self.match(CParser.Colon)
                self.state = 420
                self.conditionalExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(CParser.AssignmentOperatorContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(CParser.DigitSequence, 0)

        def getRuleIndex(self):
            return CParser.RULE_assignmentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)




    def assignmentExpression(self):

        localctx = CParser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_assignmentExpression)
        try:
            self.state = 430
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 424
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 425
                self.unaryExpression()
                self.state = 426
                self.assignmentOperator()
                self.state = 427
                self.assignmentExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 429
                self.match(CParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CParser.Assign, 0)

        def StarAssign(self):
            return self.getToken(CParser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(CParser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(CParser.ModAssign, 0)

        def PlusAssign(self):
            return self.getToken(CParser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(CParser.MinusAssign, 0)

        def LeftShiftAssign(self):
            return self.getToken(CParser.LeftShiftAssign, 0)

        def RightShiftAssign(self):
            return self.getToken(CParser.RightShiftAssign, 0)

        def AndAssign(self):
            return self.getToken(CParser.AndAssign, 0)

        def XorAssign(self):
            return self.getToken(CParser.XorAssign, 0)

        def OrAssign(self):
            return self.getToken(CParser.OrAssign, 0)

        def getRuleIndex(self):
            return CParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = CParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            _la = self._input.LA(1)
            if not(((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (CParser.Assign - 95)) | (1 << (CParser.StarAssign - 95)) | (1 << (CParser.DivAssign - 95)) | (1 << (CParser.ModAssign - 95)) | (1 << (CParser.PlusAssign - 95)) | (1 << (CParser.MinusAssign - 95)) | (1 << (CParser.LeftShiftAssign - 95)) | (1 << (CParser.RightShiftAssign - 95)) | (1 << (CParser.AndAssign - 95)) | (1 << (CParser.XorAssign - 95)) | (1 << (CParser.OrAssign - 95)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = CParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            self.assignmentExpression()
            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Comma:
                self.state = 435
                self.match(CParser.Comma)
                self.state = 436
                self.assignmentExpression()
                self.state = 441
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)




    def constantExpression(self):

        localctx = CParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.conditionalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fptypeSpecifier(self):
            return self.getTypedRuleContext(CParser.FptypeSpecifierContext,0)


        def declarationSpecifiers(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiersContext,0)


        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def initDeclaratorList(self):
            return self.getTypedRuleContext(CParser.InitDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(CParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return CParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = CParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.state = 452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 444
                self.fptypeSpecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 445
                self.declarationSpecifiers()
                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CParser.LeftParen - 65)) | (1 << (CParser.Star - 65)) | (1 << (CParser.Caret - 65)) | (1 << (CParser.Identifier - 65)))) != 0):
                    self.state = 446
                    self.initDeclaratorList()


                self.state = 449
                self.match(CParser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 451
                self.staticAssertDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(CParser.DeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return CParser.RULE_declarationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers" ):
                listener.enterDeclarationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers" ):
                listener.exitDeclarationSpecifiers(self)




    def declarationSpecifiers(self):

        localctx = CParser.DeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_declarationSpecifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 454
                    self.declarationSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 457 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncDeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifierContext,0)


        def funcDeclarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.FuncDeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(CParser.FuncDeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return CParser.RULE_funcDeclarationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncDeclarationSpecifiers" ):
                listener.enterFuncDeclarationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncDeclarationSpecifiers" ):
                listener.exitFuncDeclarationSpecifiers(self)




    def funcDeclarationSpecifiers(self):

        localctx = CParser.FuncDeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_funcDeclarationSpecifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 459
                    self.funcDeclarationSpecifier() 
                self.state = 464
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

            self.state = 465
            self.declarationSpecifier()
            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & ((1 << (CParser.T__0 - 1)) | (1 << (CParser.T__7 - 1)) | (1 << (CParser.T__8 - 1)) | (1 << (CParser.T__9 - 1)) | (1 << (CParser.T__10 - 1)) | (1 << (CParser.T__11 - 1)) | (1 << (CParser.T__12 - 1)) | (1 << (CParser.T__15 - 1)) | (1 << (CParser.Auto - 1)) | (1 << (CParser.Const - 1)) | (1 << (CParser.Extern - 1)) | (1 << (CParser.Inline - 1)) | (1 << (CParser.Register - 1)) | (1 << (CParser.Restrict - 1)) | (1 << (CParser.Static - 1)) | (1 << (CParser.Typedef - 1)) | (1 << (CParser.Volatile - 1)) | (1 << (CParser.Alignas - 1)) | (1 << (CParser.Atomic - 1)) | (1 << (CParser.Noreturn - 1)) | (1 << (CParser.ThreadLocal - 1)))) != 0):
                self.state = 466
                self.funcDeclarationSpecifier()
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiers2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(CParser.DeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return CParser.RULE_declarationSpecifiers2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers2" ):
                listener.enterDeclarationSpecifiers2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers2" ):
                listener.exitDeclarationSpecifiers2(self)




    def declarationSpecifiers2(self):

        localctx = CParser.DeclarationSpecifiers2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_declarationSpecifiers2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 472
                self.declarationSpecifier()
                self.state = 475 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__15) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn))) != 0) or _la==CParser.ThreadLocal or _la==CParser.Identifier):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncDeclarationSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageClassSpecifier(self):
            return self.getTypedRuleContext(CParser.StorageClassSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(CParser.TypeQualifierContext,0)


        def functionSpecifier(self):
            return self.getTypedRuleContext(CParser.FunctionSpecifierContext,0)


        def alignmentSpecifier(self):
            return self.getTypedRuleContext(CParser.AlignmentSpecifierContext,0)


        def getRuleIndex(self):
            return CParser.RULE_funcDeclarationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncDeclarationSpecifier" ):
                listener.enterFuncDeclarationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncDeclarationSpecifier" ):
                listener.exitFuncDeclarationSpecifier(self)




    def funcDeclarationSpecifier(self):

        localctx = CParser.FuncDeclarationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_funcDeclarationSpecifier)
        try:
            self.state = 481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 477
                self.storageClassSpecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 478
                self.typeQualifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 479
                self.functionSpecifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 480
                self.alignmentSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageClassSpecifier(self):
            return self.getTypedRuleContext(CParser.StorageClassSpecifierContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(CParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(CParser.TypeQualifierContext,0)


        def functionSpecifier(self):
            return self.getTypedRuleContext(CParser.FunctionSpecifierContext,0)


        def alignmentSpecifier(self):
            return self.getTypedRuleContext(CParser.AlignmentSpecifierContext,0)


        def getRuleIndex(self):
            return CParser.RULE_declarationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifier" ):
                listener.enterDeclarationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifier" ):
                listener.exitDeclarationSpecifier(self)




    def declarationSpecifier(self):

        localctx = CParser.DeclarationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_declarationSpecifier)
        try:
            self.state = 488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 483
                self.storageClassSpecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 484
                self.typeSpecifier(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 485
                self.typeQualifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 486
                self.functionSpecifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 487
                self.alignmentSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.InitDeclaratorContext)
            else:
                return self.getTypedRuleContext(CParser.InitDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_initDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclaratorList" ):
                listener.enterInitDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclaratorList" ):
                listener.exitInitDeclaratorList(self)




    def initDeclaratorList(self):

        localctx = CParser.InitDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_initDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.initDeclarator()
            self.state = 495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Comma:
                self.state = 491
                self.match(CParser.Comma)
                self.state = 492
                self.initDeclarator()
                self.state = 497
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def Assign(self):
            return self.getToken(CParser.Assign, 0)

        def initializer(self):
            return self.getTypedRuleContext(CParser.InitializerContext,0)


        def getRuleIndex(self):
            return CParser.RULE_initDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclarator" ):
                listener.enterInitDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclarator" ):
                listener.exitInitDeclarator(self)




    def initDeclarator(self):

        localctx = CParser.InitDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_initDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self.declarator()
            self.state = 501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CParser.Assign:
                self.state = 499
                self.match(CParser.Assign)
                self.state = 500
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageClassSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typedef(self):
            return self.getToken(CParser.Typedef, 0)

        def Extern(self):
            return self.getToken(CParser.Extern, 0)

        def Static(self):
            return self.getToken(CParser.Static, 0)

        def ThreadLocal(self):
            return self.getToken(CParser.ThreadLocal, 0)

        def Auto(self):
            return self.getToken(CParser.Auto, 0)

        def Register(self):
            return self.getToken(CParser.Register, 0)

        def getRuleIndex(self):
            return CParser.RULE_storageClassSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageClassSpecifier" ):
                listener.enterStorageClassSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageClassSpecifier" ):
                listener.exitStorageClassSpecifier(self)




    def storageClassSpecifier(self):

        localctx = CParser.StorageClassSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_storageClassSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            _la = self._input.LA(1)
            if not(((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & ((1 << (CParser.Auto - 21)) | (1 << (CParser.Extern - 21)) | (1 << (CParser.Register - 21)) | (1 << (CParser.Static - 21)) | (1 << (CParser.Typedef - 21)) | (1 << (CParser.ThreadLocal - 21)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FptypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typedef(self):
            return self.getToken(CParser.Typedef, 0)

        def functionPtrDeclaration(self):
            return self.getTypedRuleContext(CParser.FunctionPtrDeclarationContext,0)


        def getRuleIndex(self):
            return CParser.RULE_fptypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFptypeSpecifier" ):
                listener.enterFptypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFptypeSpecifier" ):
                listener.exitFptypeSpecifier(self)




    def fptypeSpecifier(self):

        localctx = CParser.FptypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_fptypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.match(CParser.Typedef)
            self.state = 506
            self.functionPtrDeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Void(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Void)
            else:
                return self.getToken(CParser.Void, i)

        def Char(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Char)
            else:
                return self.getToken(CParser.Char, i)

        def Short(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Short)
            else:
                return self.getToken(CParser.Short, i)

        def Int(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Int)
            else:
                return self.getToken(CParser.Int, i)

        def Long(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Long)
            else:
                return self.getToken(CParser.Long, i)

        def Float(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Float)
            else:
                return self.getToken(CParser.Float, i)

        def Double(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Double)
            else:
                return self.getToken(CParser.Double, i)

        def Signed(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Signed)
            else:
                return self.getToken(CParser.Signed, i)

        def Unsigned(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Unsigned)
            else:
                return self.getToken(CParser.Unsigned, i)

        def Bool(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Bool)
            else:
                return self.getToken(CParser.Bool, i)

        def Complex(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Complex)
            else:
                return self.getToken(CParser.Complex, i)

        def Typedef(self):
            return self.getToken(CParser.Typedef, 0)

        def typeSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.TypeSpecifierContext)
            else:
                return self.getTypedRuleContext(CParser.TypeSpecifierContext,i)


        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def atomicTypeSpecifier(self):
            return self.getTypedRuleContext(CParser.AtomicTypeSpecifierContext,0)


        def structOrUnionSpecifier(self):
            return self.getTypedRuleContext(CParser.StructOrUnionSpecifierContext,0)


        def enumSpecifier(self):
            return self.getTypedRuleContext(CParser.EnumSpecifierContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def typedefName(self):
            return self.getTypedRuleContext(CParser.TypedefNameContext,0)


        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(CParser.GccAttributeSpecifierContext,0)


        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext,0)


        def getRuleIndex(self):
            return CParser.RULE_typeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpecifier" ):
                listener.enterTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpecifier" ):
                listener.exitTypeSpecifier(self)



    def typeSpecifier(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.TypeSpecifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 70
        self.enterRecursionRule(localctx, 70, self.RULE_typeSpecifier, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 510 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 509
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.Char) | (1 << CParser.Double) | (1 << CParser.Float) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Bool) | (1 << CParser.Complex))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 512 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

                pass

            elif la_ == 2:
                self.state = 514
                self.match(CParser.T__0)
                self.state = 516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.Typedef:
                    self.state = 515
                    self.match(CParser.Typedef)


                self.state = 519 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 518
                        self.typeSpecifier(0)

                    else:
                        raise NoViableAltException(self)
                    self.state = 521 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

                pass

            elif la_ == 3:
                self.state = 523
                self.match(CParser.T__0)
                self.state = 524
                self.match(CParser.LeftParen)
                self.state = 525
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 526
                self.match(CParser.RightParen)
                pass

            elif la_ == 4:
                self.state = 527
                self.atomicTypeSpecifier()
                pass

            elif la_ == 5:
                self.state = 529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.T__0:
                    self.state = 528
                    self.match(CParser.T__0)


                self.state = 531
                self.structOrUnionSpecifier()
                pass

            elif la_ == 6:
                self.state = 532
                self.enumSpecifier()
                pass

            elif la_ == 7:
                self.state = 533
                self.match(CParser.T__6)
                self.state = 534
                self.match(CParser.LeftParen)
                self.state = 535
                self.constantExpression()
                self.state = 536
                self.match(CParser.RightParen)
                pass

            elif la_ == 8:
                self.state = 538
                self.typedefName()
                pass

            elif la_ == 9:
                self.state = 539
                self.gccAttributeSpecifier()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 546
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.TypeSpecifierContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeSpecifier)
                    self.state = 542
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 543
                    self.pointer() 
                self.state = 548
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class StructOrUnionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structOrUnion(self):
            return self.getTypedRuleContext(CParser.StructOrUnionContext,0)


        def LeftBrace(self):
            return self.getToken(CParser.LeftBrace, 0)

        def structDeclarationList(self):
            return self.getTypedRuleContext(CParser.StructDeclarationListContext,0)


        def RightBrace(self):
            return self.getToken(CParser.RightBrace, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_structOrUnionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnionSpecifier" ):
                listener.enterStructOrUnionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnionSpecifier" ):
                listener.exitStructOrUnionSpecifier(self)




    def structOrUnionSpecifier(self):

        localctx = CParser.StructOrUnionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_structOrUnionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 560
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 549
                self.structOrUnion()
                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.Identifier:
                    self.state = 550
                    self.match(CParser.Identifier)


                self.state = 553
                self.match(CParser.LeftBrace)
                self.state = 554
                self.structDeclarationList()
                self.state = 555
                self.match(CParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 557
                self.structOrUnion()
                self.state = 558
                self.match(CParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructOrUnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Struct(self):
            return self.getToken(CParser.Struct, 0)

        def Union(self):
            return self.getToken(CParser.Union, 0)

        def getRuleIndex(self):
            return CParser.RULE_structOrUnion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnion" ):
                listener.enterStructOrUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnion" ):
                listener.exitStructOrUnion(self)




    def structOrUnion(self):

        localctx = CParser.StructOrUnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_structOrUnion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            _la = self._input.LA(1)
            if not(_la==CParser.Struct or _la==CParser.Union):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.StructDeclarationContext)
            else:
                return self.getTypedRuleContext(CParser.StructDeclarationContext,i)


        def getRuleIndex(self):
            return CParser.RULE_structDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarationList" ):
                listener.enterStructDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarationList" ):
                listener.exitStructDeclarationList(self)




    def structDeclarationList(self):

        localctx = CParser.StructDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_structDeclarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 564
                self.structDeclaration()
                self.state = 567 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__15) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Float) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Struct) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.StaticAssert))) != 0) or _la==CParser.Identifier):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(CParser.SpecifierQualifierListContext,0)


        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def structDeclaratorList(self):
            return self.getTypedRuleContext(CParser.StructDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(CParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return CParser.RULE_structDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaration" ):
                listener.enterStructDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaration" ):
                listener.exitStructDeclaration(self)




    def structDeclaration(self):

        localctx = CParser.StructDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_structDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 576
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__0, CParser.T__3, CParser.T__4, CParser.T__5, CParser.T__6, CParser.T__7, CParser.T__8, CParser.T__15, CParser.Char, CParser.Const, CParser.Double, CParser.Enum, CParser.Float, CParser.Int, CParser.Long, CParser.Register, CParser.Restrict, CParser.Short, CParser.Signed, CParser.Struct, CParser.Union, CParser.Unsigned, CParser.Void, CParser.Volatile, CParser.Atomic, CParser.Bool, CParser.Complex, CParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 569
                self.specifierQualifierList()
                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CParser.LeftParen - 65)) | (1 << (CParser.Star - 65)) | (1 << (CParser.Caret - 65)) | (1 << (CParser.Colon - 65)) | (1 << (CParser.Identifier - 65)))) != 0):
                    self.state = 570
                    self.structDeclaratorList()


                self.state = 573
                self.match(CParser.Semi)
                pass
            elif token in [CParser.StaticAssert]:
                self.enterOuterAlt(localctx, 2)
                self.state = 575
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecifierQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionPtrDeclaration(self):
            return self.getTypedRuleContext(CParser.FunctionPtrDeclarationContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(CParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(CParser.TypeQualifierContext,0)


        def specifierQualifierList(self):
            return self.getTypedRuleContext(CParser.SpecifierQualifierListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_specifierQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecifierQualifierList" ):
                listener.enterSpecifierQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecifierQualifierList" ):
                listener.exitSpecifierQualifierList(self)




    def specifierQualifierList(self):

        localctx = CParser.SpecifierQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_specifierQualifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 578
                self.functionPtrDeclaration()
                pass

            elif la_ == 2:
                self.state = 579
                self.typeSpecifier(0)
                pass

            elif la_ == 3:
                self.state = 580
                self.typeQualifier()
                pass


            self.state = 584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 583
                self.specifierQualifierList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.StructDeclaratorContext)
            else:
                return self.getTypedRuleContext(CParser.StructDeclaratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_structDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaratorList" ):
                listener.enterStructDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaratorList" ):
                listener.exitStructDeclaratorList(self)




    def structDeclaratorList(self):

        localctx = CParser.StructDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_structDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.structDeclarator()
            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Comma:
                self.state = 587
                self.match(CParser.Comma)
                self.state = 588
                self.structDeclarator()
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def Colon(self):
            return self.getToken(CParser.Colon, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_structDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarator" ):
                listener.enterStructDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarator" ):
                listener.exitStructDeclarator(self)




    def structDeclarator(self):

        localctx = CParser.StructDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_structDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 600
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 594
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CParser.LeftParen - 65)) | (1 << (CParser.Star - 65)) | (1 << (CParser.Caret - 65)) | (1 << (CParser.Identifier - 65)))) != 0):
                    self.state = 595
                    self.declarator()


                self.state = 598
                self.match(CParser.Colon)
                self.state = 599
                self.constantExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(CParser.Enum, 0)

        def LeftBrace(self):
            return self.getToken(CParser.LeftBrace, 0)

        def enumeratorList(self):
            return self.getTypedRuleContext(CParser.EnumeratorListContext,0)


        def RightBrace(self):
            return self.getToken(CParser.RightBrace, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def getRuleIndex(self):
            return CParser.RULE_enumSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumSpecifier" ):
                listener.enterEnumSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumSpecifier" ):
                listener.exitEnumSpecifier(self)




    def enumSpecifier(self):

        localctx = CParser.EnumSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_enumSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 602
                self.match(CParser.Enum)
                self.state = 604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.Identifier:
                    self.state = 603
                    self.match(CParser.Identifier)


                self.state = 606
                self.match(CParser.LeftBrace)
                self.state = 607
                self.enumeratorList()
                self.state = 609
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.Comma:
                    self.state = 608
                    self.match(CParser.Comma)


                self.state = 611
                self.match(CParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 613
                self.match(CParser.Enum)
                self.state = 614
                self.match(CParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.EnumeratorContext)
            else:
                return self.getTypedRuleContext(CParser.EnumeratorContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_enumeratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorList" ):
                listener.enterEnumeratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorList" ):
                listener.exitEnumeratorList(self)




    def enumeratorList(self):

        localctx = CParser.EnumeratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_enumeratorList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            self.enumerator()
            self.state = 622
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 618
                    self.match(CParser.Comma)
                    self.state = 619
                    self.enumerator() 
                self.state = 624
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerationConstant(self):
            return self.getTypedRuleContext(CParser.EnumerationConstantContext,0)


        def Assign(self):
            return self.getToken(CParser.Assign, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)




    def enumerator(self):

        localctx = CParser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_enumerator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.enumerationConstant()
            self.state = 628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CParser.Assign:
                self.state = 626
                self.match(CParser.Assign)
                self.state = 627
                self.constantExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerationConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_enumerationConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerationConstant" ):
                listener.enterEnumerationConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerationConstant" ):
                listener.exitEnumerationConstant(self)




    def enumerationConstant(self):

        localctx = CParser.EnumerationConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_enumerationConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 630
            self.match(CParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicTypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atomic(self):
            return self.getToken(CParser.Atomic, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def getRuleIndex(self):
            return CParser.RULE_atomicTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicTypeSpecifier" ):
                listener.enterAtomicTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicTypeSpecifier" ):
                listener.exitAtomicTypeSpecifier(self)




    def atomicTypeSpecifier(self):

        localctx = CParser.AtomicTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_atomicTypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.match(CParser.Atomic)
            self.state = 633
            self.match(CParser.LeftParen)
            self.state = 634
            self.typeName()
            self.state = 635
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(CParser.Const, 0)

        def Restrict(self):
            return self.getToken(CParser.Restrict, 0)

        def Volatile(self):
            return self.getToken(CParser.Volatile, 0)

        def Register(self):
            return self.getToken(CParser.Register, 0)

        def Atomic(self):
            return self.getToken(CParser.Atomic, 0)

        def getRuleIndex(self):
            return CParser.RULE_typeQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifier" ):
                listener.enterTypeQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifier" ):
                listener.exitTypeQualifier(self)




    def typeQualifier(self):

        localctx = CParser.TypeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_typeQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.Const) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Inline(self):
            return self.getToken(CParser.Inline, 0)

        def Noreturn(self):
            return self.getToken(CParser.Noreturn, 0)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(CParser.GccAttributeSpecifierContext,0)


        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def getRuleIndex(self):
            return CParser.RULE_functionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSpecifier" ):
                listener.enterFunctionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSpecifier" ):
                listener.exitFunctionSpecifier(self)




    def functionSpecifier(self):

        localctx = CParser.FunctionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_functionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 645
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__0, CParser.T__9, CParser.T__10, CParser.T__11, CParser.Inline, CParser.Noreturn]:
                self.enterOuterAlt(localctx, 1)
                self.state = 639
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.Inline) | (1 << CParser.Noreturn))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [CParser.T__15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 640
                self.gccAttributeSpecifier()
                pass
            elif token in [CParser.T__12]:
                self.enterOuterAlt(localctx, 3)
                self.state = 641
                self.match(CParser.T__12)
                self.state = 642
                self.match(CParser.LeftParen)
                self.state = 643
                self.match(CParser.Identifier)
                self.state = 644
                self.match(CParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignmentSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Alignas(self):
            return self.getToken(CParser.Alignas, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_alignmentSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentSpecifier" ):
                listener.enterAlignmentSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentSpecifier" ):
                listener.exitAlignmentSpecifier(self)




    def alignmentSpecifier(self):

        localctx = CParser.AlignmentSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_alignmentSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.match(CParser.Alignas)
            self.state = 648
            self.match(CParser.LeftParen)
            self.state = 651
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.state = 649
                self.typeName()
                pass

            elif la_ == 2:
                self.state = 650
                self.constantExpression()
                pass


            self.state = 653
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectDeclaratorContext,0)


        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(CParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return CParser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)




    def declarator(self):

        localctx = CParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CParser.Star or _la==CParser.Caret:
                self.state = 655
                self.pointer()


            self.state = 658
            self.directDeclarator(0)
            self.state = 662
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 659
                    self.gccDeclaratorExtension() 
                self.state = 664
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directFunctionDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectFunctionDeclaratorContext,0)


        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(CParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return CParser.RULE_funcDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncDeclarator" ):
                listener.enterFuncDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncDeclarator" ):
                listener.exitFuncDeclarator(self)




    def funcDeclarator(self):

        localctx = CParser.FuncDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_funcDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CParser.Star or _la==CParser.Caret:
                self.state = 665
                self.pointer()


            self.state = 668
            self.directFunctionDeclarator()
            self.state = 672
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 669
                    self.gccDeclaratorExtension() 
                self.state = 674
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectFunctionDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectDeclaratorContext,0)


        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(CParser.ParameterTypeListContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(CParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_directFunctionDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectFunctionDeclarator" ):
                listener.enterDirectFunctionDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectFunctionDeclarator" ):
                listener.exitDirectFunctionDeclarator(self)




    def directFunctionDeclarator(self):

        localctx = CParser.DirectFunctionDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_directFunctionDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 689
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 675
                self.directDeclarator(0)
                self.state = 676
                self.match(CParser.LeftParen)
                self.state = 678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__15) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn))) != 0) or _la==CParser.ThreadLocal or _la==CParser.Identifier:
                    self.state = 677
                    self.parameterTypeList()


                self.state = 680
                self.match(CParser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 682
                self.directDeclarator(0)
                self.state = 683
                self.match(CParser.LeftParen)
                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.Identifier:
                    self.state = 684
                    self.identifierList()


                self.state = 687
                self.match(CParser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def Colon(self):
            return self.getToken(CParser.Colon, 0)

        def DigitSequence(self):
            return self.getToken(CParser.DigitSequence, 0)

        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext,0)


        def directDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectDeclaratorContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(CParser.TypeSpecifierContext,0)


        def LeftBracket(self):
            return self.getToken(CParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(CParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(CParser.Static, 0)

        def Star(self):
            return self.getToken(CParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(CParser.ParameterTypeListContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(CParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_directDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectDeclarator" ):
                listener.enterDirectDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectDeclarator" ):
                listener.exitDirectDeclarator(self)



    def directDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.DirectDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 108
        self.enterRecursionRule(localctx, 108, self.RULE_directDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 692
                self.match(CParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 693
                self.match(CParser.LeftParen)
                self.state = 694
                self.declarator()
                self.state = 695
                self.match(CParser.RightParen)
                pass

            elif la_ == 3:
                self.state = 697
                self.match(CParser.Identifier)
                self.state = 698
                self.match(CParser.Colon)
                self.state = 699
                self.match(CParser.DigitSequence)
                pass

            elif la_ == 4:
                self.state = 700
                self.match(CParser.LeftParen)
                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__15) | (1 << CParser.Char) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Float) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Struct) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex))) != 0) or _la==CParser.Identifier:
                    self.state = 701
                    self.typeSpecifier(0)


                self.state = 704
                self.pointer()
                self.state = 705
                self.directDeclarator(0)
                self.state = 706
                self.match(CParser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 755
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 753
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                    if la_ == 1:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 710
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 711
                        self.match(CParser.LeftBracket)
                        self.state = 713
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.Const) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                            self.state = 712
                            self.typeQualifierList()


                        self.state = 716
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CParser.LeftParen - 65)) | (1 << (CParser.Plus - 65)) | (1 << (CParser.PlusPlus - 65)) | (1 << (CParser.Minus - 65)) | (1 << (CParser.MinusMinus - 65)) | (1 << (CParser.Star - 65)) | (1 << (CParser.And - 65)) | (1 << (CParser.AndAnd - 65)) | (1 << (CParser.Not - 65)) | (1 << (CParser.Tilde - 65)) | (1 << (CParser.Identifier - 65)) | (1 << (CParser.Constant - 65)) | (1 << (CParser.DigitSequence - 65)) | (1 << (CParser.StringLiteral - 65)))) != 0):
                            self.state = 715
                            self.assignmentExpression()


                        self.state = 718
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 719
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 720
                        self.match(CParser.LeftBracket)
                        self.state = 721
                        self.match(CParser.Static)
                        self.state = 723
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.Const) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                            self.state = 722
                            self.typeQualifierList()


                        self.state = 725
                        self.assignmentExpression()
                        self.state = 726
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 728
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 729
                        self.match(CParser.LeftBracket)
                        self.state = 730
                        self.typeQualifierList()
                        self.state = 731
                        self.match(CParser.Static)
                        self.state = 732
                        self.assignmentExpression()
                        self.state = 733
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 735
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 736
                        self.match(CParser.LeftBracket)
                        self.state = 738
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.Const) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                            self.state = 737
                            self.typeQualifierList()


                        self.state = 740
                        self.match(CParser.Star)
                        self.state = 741
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 742
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 743
                        self.match(CParser.LeftParen)
                        self.state = 744
                        self.parameterTypeList()
                        self.state = 745
                        self.match(CParser.RightParen)
                        pass

                    elif la_ == 6:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 747
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 748
                        self.match(CParser.LeftParen)
                        self.state = 750
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CParser.Identifier:
                            self.state = 749
                            self.identifierList()


                        self.state = 752
                        self.match(CParser.RightParen)
                        pass

             
                self.state = 757
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class GccDeclaratorExtensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.StringLiteral)
            else:
                return self.getToken(CParser.StringLiteral, i)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(CParser.GccAttributeSpecifierContext,0)


        def getRuleIndex(self):
            return CParser.RULE_gccDeclaratorExtension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccDeclaratorExtension" ):
                listener.enterGccDeclaratorExtension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccDeclaratorExtension" ):
                listener.exitGccDeclaratorExtension(self)




    def gccDeclaratorExtension(self):

        localctx = CParser.GccDeclaratorExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_gccDeclaratorExtension)
        self._la = 0 # Token type
        try:
            self.state = 775
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.T__13]:
                self.enterOuterAlt(localctx, 1)
                self.state = 758
                self.match(CParser.T__13)
                self.state = 759
                self.match(CParser.LeftParen)
                self.state = 761 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 760
                    self.match(CParser.StringLiteral)
                    self.state = 763 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==CParser.StringLiteral):
                        break

                self.state = 765
                self.match(CParser.RightParen)
                pass
            elif token in [CParser.T__14]:
                self.enterOuterAlt(localctx, 2)
                self.state = 766
                self.match(CParser.T__14)
                self.state = 767
                self.match(CParser.LeftParen)
                self.state = 769 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 768
                    self.match(CParser.StringLiteral)
                    self.state = 771 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==CParser.StringLiteral):
                        break

                self.state = 773
                self.match(CParser.RightParen)
                pass
            elif token in [CParser.T__15]:
                self.enterOuterAlt(localctx, 3)
                self.state = 774
                self.gccAttributeSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftParen)
            else:
                return self.getToken(CParser.LeftParen, i)

        def gccAttributeList(self):
            return self.getTypedRuleContext(CParser.GccAttributeListContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightParen)
            else:
                return self.getToken(CParser.RightParen, i)

        def getRuleIndex(self):
            return CParser.RULE_gccAttributeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeSpecifier" ):
                listener.enterGccAttributeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeSpecifier" ):
                listener.exitGccAttributeSpecifier(self)




    def gccAttributeSpecifier(self):

        localctx = CParser.GccAttributeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_gccAttributeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 777
            self.match(CParser.T__15)
            self.state = 778
            self.match(CParser.LeftParen)
            self.state = 779
            self.match(CParser.LeftParen)
            self.state = 780
            self.gccAttributeList()
            self.state = 781
            self.match(CParser.RightParen)
            self.state = 782
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gccAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccAttributeContext)
            else:
                return self.getTypedRuleContext(CParser.GccAttributeContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_gccAttributeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeList" ):
                listener.enterGccAttributeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeList" ):
                listener.exitGccAttributeList(self)




    def gccAttributeList(self):

        localctx = CParser.GccAttributeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_gccAttributeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & ((1 << (CParser.T__0 - 1)) | (1 << (CParser.T__1 - 1)) | (1 << (CParser.T__2 - 1)) | (1 << (CParser.T__3 - 1)) | (1 << (CParser.T__4 - 1)) | (1 << (CParser.T__5 - 1)) | (1 << (CParser.T__6 - 1)) | (1 << (CParser.T__7 - 1)) | (1 << (CParser.T__8 - 1)) | (1 << (CParser.T__9 - 1)) | (1 << (CParser.T__10 - 1)) | (1 << (CParser.T__11 - 1)) | (1 << (CParser.T__12 - 1)) | (1 << (CParser.T__13 - 1)) | (1 << (CParser.T__14 - 1)) | (1 << (CParser.T__15 - 1)) | (1 << (CParser.T__16 - 1)) | (1 << (CParser.T__17 - 1)) | (1 << (CParser.T__18 - 1)) | (1 << (CParser.T__19 - 1)) | (1 << (CParser.Auto - 1)) | (1 << (CParser.Break - 1)) | (1 << (CParser.Case - 1)) | (1 << (CParser.Char - 1)) | (1 << (CParser.Const - 1)) | (1 << (CParser.Continue - 1)) | (1 << (CParser.Default - 1)) | (1 << (CParser.Do - 1)) | (1 << (CParser.Double - 1)) | (1 << (CParser.Else - 1)) | (1 << (CParser.Enum - 1)) | (1 << (CParser.Extern - 1)) | (1 << (CParser.Float - 1)) | (1 << (CParser.For - 1)) | (1 << (CParser.Goto - 1)) | (1 << (CParser.If - 1)) | (1 << (CParser.Inline - 1)) | (1 << (CParser.Int - 1)) | (1 << (CParser.Long - 1)) | (1 << (CParser.Register - 1)) | (1 << (CParser.Restrict - 1)) | (1 << (CParser.Return - 1)) | (1 << (CParser.Short - 1)) | (1 << (CParser.Signed - 1)) | (1 << (CParser.Sizeof - 1)) | (1 << (CParser.Static - 1)) | (1 << (CParser.Struct - 1)) | (1 << (CParser.Switch - 1)) | (1 << (CParser.Typedef - 1)) | (1 << (CParser.Union - 1)) | (1 << (CParser.Unsigned - 1)) | (1 << (CParser.Void - 1)) | (1 << (CParser.Volatile - 1)) | (1 << (CParser.While - 1)) | (1 << (CParser.Alignas - 1)) | (1 << (CParser.Alignof - 1)) | (1 << (CParser.Atomic - 1)) | (1 << (CParser.Bool - 1)) | (1 << (CParser.Complex - 1)) | (1 << (CParser.Generic - 1)) | (1 << (CParser.Imaginary - 1)) | (1 << (CParser.Noreturn - 1)) | (1 << (CParser.StaticAssert - 1)) | (1 << (CParser.ThreadLocal - 1)))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CParser.LeftBracket - 67)) | (1 << (CParser.RightBracket - 67)) | (1 << (CParser.LeftBrace - 67)) | (1 << (CParser.RightBrace - 67)) | (1 << (CParser.Less - 67)) | (1 << (CParser.LessEqual - 67)) | (1 << (CParser.Greater - 67)) | (1 << (CParser.GreaterEqual - 67)) | (1 << (CParser.LeftShift - 67)) | (1 << (CParser.RightShift - 67)) | (1 << (CParser.Plus - 67)) | (1 << (CParser.PlusPlus - 67)) | (1 << (CParser.Minus - 67)) | (1 << (CParser.MinusMinus - 67)) | (1 << (CParser.Star - 67)) | (1 << (CParser.Div - 67)) | (1 << (CParser.Mod - 67)) | (1 << (CParser.And - 67)) | (1 << (CParser.Or - 67)) | (1 << (CParser.AndAnd - 67)) | (1 << (CParser.OrOr - 67)) | (1 << (CParser.Caret - 67)) | (1 << (CParser.Not - 67)) | (1 << (CParser.Tilde - 67)) | (1 << (CParser.Question - 67)) | (1 << (CParser.Colon - 67)) | (1 << (CParser.Semi - 67)) | (1 << (CParser.Assign - 67)) | (1 << (CParser.StarAssign - 67)) | (1 << (CParser.DivAssign - 67)) | (1 << (CParser.ModAssign - 67)) | (1 << (CParser.PlusAssign - 67)) | (1 << (CParser.MinusAssign - 67)) | (1 << (CParser.LeftShiftAssign - 67)) | (1 << (CParser.RightShiftAssign - 67)) | (1 << (CParser.AndAssign - 67)) | (1 << (CParser.XorAssign - 67)) | (1 << (CParser.OrAssign - 67)) | (1 << (CParser.Equal - 67)) | (1 << (CParser.NotEqual - 67)) | (1 << (CParser.Arrow - 67)) | (1 << (CParser.Dot - 67)) | (1 << (CParser.Ellipsis - 67)) | (1 << (CParser.Identifier - 67)) | (1 << (CParser.Constant - 67)) | (1 << (CParser.DigitSequence - 67)) | (1 << (CParser.StringLiteral - 67)) | (1 << (CParser.ComplexDefine - 67)) | (1 << (CParser.Macroundef - 67)) | (1 << (CParser.Macroifdef - 67)) | (1 << (CParser.Macroifndef - 67)) | (1 << (CParser.Macroelse - 67)) | (1 << (CParser.Macroendif - 67)) | (1 << (CParser.IncludeDirective - 67)) | (1 << (CParser.AsmBlock - 67)) | (1 << (CParser.LineAfterPreprocessing - 67)) | (1 << (CParser.LineDirective - 67)) | (1 << (CParser.PragmaDirective - 67)) | (1 << (CParser.Whitespace - 67)) | (1 << (CParser.Newline - 67)) | (1 << (CParser.BlockComment - 67)) | (1 << (CParser.LineComment - 67)))) != 0):
                self.state = 784
                self.gccAttribute()


            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Comma:
                self.state = 787
                self.match(CParser.Comma)
                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & ((1 << (CParser.T__0 - 1)) | (1 << (CParser.T__1 - 1)) | (1 << (CParser.T__2 - 1)) | (1 << (CParser.T__3 - 1)) | (1 << (CParser.T__4 - 1)) | (1 << (CParser.T__5 - 1)) | (1 << (CParser.T__6 - 1)) | (1 << (CParser.T__7 - 1)) | (1 << (CParser.T__8 - 1)) | (1 << (CParser.T__9 - 1)) | (1 << (CParser.T__10 - 1)) | (1 << (CParser.T__11 - 1)) | (1 << (CParser.T__12 - 1)) | (1 << (CParser.T__13 - 1)) | (1 << (CParser.T__14 - 1)) | (1 << (CParser.T__15 - 1)) | (1 << (CParser.T__16 - 1)) | (1 << (CParser.T__17 - 1)) | (1 << (CParser.T__18 - 1)) | (1 << (CParser.T__19 - 1)) | (1 << (CParser.Auto - 1)) | (1 << (CParser.Break - 1)) | (1 << (CParser.Case - 1)) | (1 << (CParser.Char - 1)) | (1 << (CParser.Const - 1)) | (1 << (CParser.Continue - 1)) | (1 << (CParser.Default - 1)) | (1 << (CParser.Do - 1)) | (1 << (CParser.Double - 1)) | (1 << (CParser.Else - 1)) | (1 << (CParser.Enum - 1)) | (1 << (CParser.Extern - 1)) | (1 << (CParser.Float - 1)) | (1 << (CParser.For - 1)) | (1 << (CParser.Goto - 1)) | (1 << (CParser.If - 1)) | (1 << (CParser.Inline - 1)) | (1 << (CParser.Int - 1)) | (1 << (CParser.Long - 1)) | (1 << (CParser.Register - 1)) | (1 << (CParser.Restrict - 1)) | (1 << (CParser.Return - 1)) | (1 << (CParser.Short - 1)) | (1 << (CParser.Signed - 1)) | (1 << (CParser.Sizeof - 1)) | (1 << (CParser.Static - 1)) | (1 << (CParser.Struct - 1)) | (1 << (CParser.Switch - 1)) | (1 << (CParser.Typedef - 1)) | (1 << (CParser.Union - 1)) | (1 << (CParser.Unsigned - 1)) | (1 << (CParser.Void - 1)) | (1 << (CParser.Volatile - 1)) | (1 << (CParser.While - 1)) | (1 << (CParser.Alignas - 1)) | (1 << (CParser.Alignof - 1)) | (1 << (CParser.Atomic - 1)) | (1 << (CParser.Bool - 1)) | (1 << (CParser.Complex - 1)) | (1 << (CParser.Generic - 1)) | (1 << (CParser.Imaginary - 1)) | (1 << (CParser.Noreturn - 1)) | (1 << (CParser.StaticAssert - 1)) | (1 << (CParser.ThreadLocal - 1)))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CParser.LeftBracket - 67)) | (1 << (CParser.RightBracket - 67)) | (1 << (CParser.LeftBrace - 67)) | (1 << (CParser.RightBrace - 67)) | (1 << (CParser.Less - 67)) | (1 << (CParser.LessEqual - 67)) | (1 << (CParser.Greater - 67)) | (1 << (CParser.GreaterEqual - 67)) | (1 << (CParser.LeftShift - 67)) | (1 << (CParser.RightShift - 67)) | (1 << (CParser.Plus - 67)) | (1 << (CParser.PlusPlus - 67)) | (1 << (CParser.Minus - 67)) | (1 << (CParser.MinusMinus - 67)) | (1 << (CParser.Star - 67)) | (1 << (CParser.Div - 67)) | (1 << (CParser.Mod - 67)) | (1 << (CParser.And - 67)) | (1 << (CParser.Or - 67)) | (1 << (CParser.AndAnd - 67)) | (1 << (CParser.OrOr - 67)) | (1 << (CParser.Caret - 67)) | (1 << (CParser.Not - 67)) | (1 << (CParser.Tilde - 67)) | (1 << (CParser.Question - 67)) | (1 << (CParser.Colon - 67)) | (1 << (CParser.Semi - 67)) | (1 << (CParser.Assign - 67)) | (1 << (CParser.StarAssign - 67)) | (1 << (CParser.DivAssign - 67)) | (1 << (CParser.ModAssign - 67)) | (1 << (CParser.PlusAssign - 67)) | (1 << (CParser.MinusAssign - 67)) | (1 << (CParser.LeftShiftAssign - 67)) | (1 << (CParser.RightShiftAssign - 67)) | (1 << (CParser.AndAssign - 67)) | (1 << (CParser.XorAssign - 67)) | (1 << (CParser.OrAssign - 67)) | (1 << (CParser.Equal - 67)) | (1 << (CParser.NotEqual - 67)) | (1 << (CParser.Arrow - 67)) | (1 << (CParser.Dot - 67)) | (1 << (CParser.Ellipsis - 67)) | (1 << (CParser.Identifier - 67)) | (1 << (CParser.Constant - 67)) | (1 << (CParser.DigitSequence - 67)) | (1 << (CParser.StringLiteral - 67)) | (1 << (CParser.ComplexDefine - 67)) | (1 << (CParser.Macroundef - 67)) | (1 << (CParser.Macroifdef - 67)) | (1 << (CParser.Macroifndef - 67)) | (1 << (CParser.Macroelse - 67)) | (1 << (CParser.Macroendif - 67)) | (1 << (CParser.IncludeDirective - 67)) | (1 << (CParser.AsmBlock - 67)) | (1 << (CParser.LineAfterPreprocessing - 67)) | (1 << (CParser.LineDirective - 67)) | (1 << (CParser.PragmaDirective - 67)) | (1 << (CParser.Whitespace - 67)) | (1 << (CParser.Newline - 67)) | (1 << (CParser.BlockComment - 67)) | (1 << (CParser.LineComment - 67)))) != 0):
                    self.state = 788
                    self.gccAttribute()


                self.state = 795
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftParen)
            else:
                return self.getToken(CParser.LeftParen, i)

        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightParen)
            else:
                return self.getToken(CParser.RightParen, i)

        def argumentExpressionList(self):
            return self.getTypedRuleContext(CParser.ArgumentExpressionListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_gccAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttribute" ):
                listener.enterGccAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttribute" ):
                listener.exitGccAttribute(self)




    def gccAttribute(self):

        localctx = CParser.GccAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_gccAttribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            _la = self._input.LA(1)
            if _la <= 0 or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CParser.LeftParen - 65)) | (1 << (CParser.RightParen - 65)) | (1 << (CParser.Comma - 65)))) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CParser.LeftParen:
                self.state = 797
                self.match(CParser.LeftParen)
                self.state = 799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__15) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Float) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Sizeof) | (1 << CParser.Struct) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Generic))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CParser.LeftParen - 65)) | (1 << (CParser.Plus - 65)) | (1 << (CParser.PlusPlus - 65)) | (1 << (CParser.Minus - 65)) | (1 << (CParser.MinusMinus - 65)) | (1 << (CParser.Star - 65)) | (1 << (CParser.And - 65)) | (1 << (CParser.AndAnd - 65)) | (1 << (CParser.Not - 65)) | (1 << (CParser.Tilde - 65)) | (1 << (CParser.Identifier - 65)) | (1 << (CParser.Constant - 65)) | (1 << (CParser.DigitSequence - 65)) | (1 << (CParser.StringLiteral - 65)))) != 0):
                    self.state = 798
                    self.argumentExpressionList()


                self.state = 801
                self.match(CParser.RightParen)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedParenthesesBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftParen)
            else:
                return self.getToken(CParser.LeftParen, i)

        def nestedParenthesesBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.NestedParenthesesBlockContext)
            else:
                return self.getTypedRuleContext(CParser.NestedParenthesesBlockContext,i)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightParen)
            else:
                return self.getToken(CParser.RightParen, i)

        def getRuleIndex(self):
            return CParser.RULE_nestedParenthesesBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedParenthesesBlock" ):
                listener.enterNestedParenthesesBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedParenthesesBlock" ):
                listener.exitNestedParenthesesBlock(self)




    def nestedParenthesesBlock(self):

        localctx = CParser.NestedParenthesesBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_nestedParenthesesBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__13) | (1 << CParser.T__14) | (1 << CParser.T__15) | (1 << CParser.T__16) | (1 << CParser.T__17) | (1 << CParser.T__18) | (1 << CParser.T__19) | (1 << CParser.Auto) | (1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (1 << CParser.Else) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (1 << CParser.If) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Return) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Sizeof) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Switch) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.While) | (1 << CParser.Alignas) | (1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Generic) | (1 << CParser.Imaginary) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CParser.ThreadLocal - 64)) | (1 << (CParser.LeftParen - 64)) | (1 << (CParser.LeftBracket - 64)) | (1 << (CParser.RightBracket - 64)) | (1 << (CParser.LeftBrace - 64)) | (1 << (CParser.RightBrace - 64)) | (1 << (CParser.Less - 64)) | (1 << (CParser.LessEqual - 64)) | (1 << (CParser.Greater - 64)) | (1 << (CParser.GreaterEqual - 64)) | (1 << (CParser.LeftShift - 64)) | (1 << (CParser.RightShift - 64)) | (1 << (CParser.Plus - 64)) | (1 << (CParser.PlusPlus - 64)) | (1 << (CParser.Minus - 64)) | (1 << (CParser.MinusMinus - 64)) | (1 << (CParser.Star - 64)) | (1 << (CParser.Div - 64)) | (1 << (CParser.Mod - 64)) | (1 << (CParser.And - 64)) | (1 << (CParser.Or - 64)) | (1 << (CParser.AndAnd - 64)) | (1 << (CParser.OrOr - 64)) | (1 << (CParser.Caret - 64)) | (1 << (CParser.Not - 64)) | (1 << (CParser.Tilde - 64)) | (1 << (CParser.Question - 64)) | (1 << (CParser.Colon - 64)) | (1 << (CParser.Semi - 64)) | (1 << (CParser.Comma - 64)) | (1 << (CParser.Assign - 64)) | (1 << (CParser.StarAssign - 64)) | (1 << (CParser.DivAssign - 64)) | (1 << (CParser.ModAssign - 64)) | (1 << (CParser.PlusAssign - 64)) | (1 << (CParser.MinusAssign - 64)) | (1 << (CParser.LeftShiftAssign - 64)) | (1 << (CParser.RightShiftAssign - 64)) | (1 << (CParser.AndAssign - 64)) | (1 << (CParser.XorAssign - 64)) | (1 << (CParser.OrAssign - 64)) | (1 << (CParser.Equal - 64)) | (1 << (CParser.NotEqual - 64)) | (1 << (CParser.Arrow - 64)) | (1 << (CParser.Dot - 64)) | (1 << (CParser.Ellipsis - 64)) | (1 << (CParser.Identifier - 64)) | (1 << (CParser.Constant - 64)) | (1 << (CParser.DigitSequence - 64)) | (1 << (CParser.StringLiteral - 64)) | (1 << (CParser.ComplexDefine - 64)) | (1 << (CParser.Macroundef - 64)) | (1 << (CParser.Macroifdef - 64)) | (1 << (CParser.Macroifndef - 64)) | (1 << (CParser.Macroelse - 64)) | (1 << (CParser.Macroendif - 64)) | (1 << (CParser.IncludeDirective - 64)) | (1 << (CParser.AsmBlock - 64)) | (1 << (CParser.LineAfterPreprocessing - 64)) | (1 << (CParser.LineDirective - 64)) | (1 << (CParser.PragmaDirective - 64)) | (1 << (CParser.Whitespace - 64)) | (1 << (CParser.Newline - 64)))) != 0) or _la==CParser.BlockComment or _la==CParser.LineComment:
                self.state = 809
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CParser.T__0, CParser.T__1, CParser.T__2, CParser.T__3, CParser.T__4, CParser.T__5, CParser.T__6, CParser.T__7, CParser.T__8, CParser.T__9, CParser.T__10, CParser.T__11, CParser.T__12, CParser.T__13, CParser.T__14, CParser.T__15, CParser.T__16, CParser.T__17, CParser.T__18, CParser.T__19, CParser.Auto, CParser.Break, CParser.Case, CParser.Char, CParser.Const, CParser.Continue, CParser.Default, CParser.Do, CParser.Double, CParser.Else, CParser.Enum, CParser.Extern, CParser.Float, CParser.For, CParser.Goto, CParser.If, CParser.Inline, CParser.Int, CParser.Long, CParser.Register, CParser.Restrict, CParser.Return, CParser.Short, CParser.Signed, CParser.Sizeof, CParser.Static, CParser.Struct, CParser.Switch, CParser.Typedef, CParser.Union, CParser.Unsigned, CParser.Void, CParser.Volatile, CParser.While, CParser.Alignas, CParser.Alignof, CParser.Atomic, CParser.Bool, CParser.Complex, CParser.Generic, CParser.Imaginary, CParser.Noreturn, CParser.StaticAssert, CParser.ThreadLocal, CParser.LeftBracket, CParser.RightBracket, CParser.LeftBrace, CParser.RightBrace, CParser.Less, CParser.LessEqual, CParser.Greater, CParser.GreaterEqual, CParser.LeftShift, CParser.RightShift, CParser.Plus, CParser.PlusPlus, CParser.Minus, CParser.MinusMinus, CParser.Star, CParser.Div, CParser.Mod, CParser.And, CParser.Or, CParser.AndAnd, CParser.OrOr, CParser.Caret, CParser.Not, CParser.Tilde, CParser.Question, CParser.Colon, CParser.Semi, CParser.Comma, CParser.Assign, CParser.StarAssign, CParser.DivAssign, CParser.ModAssign, CParser.PlusAssign, CParser.MinusAssign, CParser.LeftShiftAssign, CParser.RightShiftAssign, CParser.AndAssign, CParser.XorAssign, CParser.OrAssign, CParser.Equal, CParser.NotEqual, CParser.Arrow, CParser.Dot, CParser.Ellipsis, CParser.Identifier, CParser.Constant, CParser.DigitSequence, CParser.StringLiteral, CParser.ComplexDefine, CParser.Macroundef, CParser.Macroifdef, CParser.Macroifndef, CParser.Macroelse, CParser.Macroendif, CParser.IncludeDirective, CParser.AsmBlock, CParser.LineAfterPreprocessing, CParser.LineDirective, CParser.PragmaDirective, CParser.Whitespace, CParser.Newline, CParser.BlockComment, CParser.LineComment]:
                    self.state = 804
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==CParser.LeftParen or _la==CParser.RightParen:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [CParser.LeftParen]:
                    self.state = 805
                    self.match(CParser.LeftParen)
                    self.state = 806
                    self.nestedParenthesesBlock()
                    self.state = 807
                    self.match(CParser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 813
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Star(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Star)
            else:
                return self.getToken(CParser.Star, i)

        def Caret(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Caret)
            else:
                return self.getToken(CParser.Caret, i)

        def typeQualifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.TypeQualifierListContext)
            else:
                return self.getTypedRuleContext(CParser.TypeQualifierListContext,i)


        def getRuleIndex(self):
            return CParser.RULE_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer" ):
                listener.enterPointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer" ):
                listener.exitPointer(self)




    def pointer(self):

        localctx = CParser.PointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_pointer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 814
                    _la = self._input.LA(1)
                    if not(_la==CParser.Star or _la==CParser.Caret):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 816
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                    if la_ == 1:
                        self.state = 815
                        self.typeQualifierList()



                else:
                    raise NoViableAltException(self)
                self.state = 820 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeQualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.TypeQualifierContext)
            else:
                return self.getTypedRuleContext(CParser.TypeQualifierContext,i)


        def getRuleIndex(self):
            return CParser.RULE_typeQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifierList" ):
                listener.enterTypeQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifierList" ):
                listener.exitTypeQualifierList(self)




    def typeQualifierList(self):

        localctx = CParser.TypeQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_typeQualifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 822
                    self.typeQualifier()

                else:
                    raise NoViableAltException(self)
                self.state = 825 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(CParser.ParameterListContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def Ellipsis(self):
            return self.getToken(CParser.Ellipsis, 0)

        def getRuleIndex(self):
            return CParser.RULE_parameterTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterTypeList" ):
                listener.enterParameterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterTypeList" ):
                listener.exitParameterTypeList(self)




    def parameterTypeList(self):

        localctx = CParser.ParameterTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_parameterTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self.parameterList()
            self.state = 830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CParser.Comma:
                self.state = 828
                self.match(CParser.Comma)
                self.state = 829
                self.match(CParser.Ellipsis)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(CParser.ParameterDeclarationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)




    def parameterList(self):

        localctx = CParser.ParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_parameterList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.parameterDeclaration()
            self.state = 837
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 833
                    self.match(CParser.Comma)
                    self.state = 834
                    self.parameterDeclaration() 
                self.state = 839
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiersContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def declarationSpecifiers2(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiers2Context,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(CParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return CParser.RULE_parameterDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDeclaration" ):
                listener.enterParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDeclaration" ):
                listener.exitParameterDeclaration(self)




    def parameterDeclaration(self):

        localctx = CParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_parameterDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 847
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 840
                self.declarationSpecifiers()
                self.state = 841
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 843
                self.declarationSpecifiers2()
                self.state = 845
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CParser.LeftParen - 65)) | (1 << (CParser.LeftBracket - 65)) | (1 << (CParser.Star - 65)) | (1 << (CParser.Caret - 65)))) != 0):
                    self.state = 844
                    self.abstractDeclarator()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Identifier)
            else:
                return self.getToken(CParser.Identifier, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)




    def identifierList(self):

        localctx = CParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            self.match(CParser.Identifier)
            self.state = 854
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Comma:
                self.state = 850
                self.match(CParser.Comma)
                self.state = 851
                self.match(CParser.Identifier)
                self.state = 856
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(CParser.SpecifierQualifierListContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(CParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return CParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)




    def typeName(self):

        localctx = CParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_typeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.specifierQualifierList()
            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CParser.LeftParen - 65)) | (1 << (CParser.LeftBracket - 65)) | (1 << (CParser.Star - 65)) | (1 << (CParser.Caret - 65)))) != 0):
                self.state = 858
                self.abstractDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectAbstractDeclaratorContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(CParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return CParser.RULE_abstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractDeclarator" ):
                listener.enterAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractDeclarator" ):
                listener.exitAbstractDeclarator(self)




    def abstractDeclarator(self):

        localctx = CParser.AbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_abstractDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 872
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 861
                self.pointer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.Star or _la==CParser.Caret:
                    self.state = 862
                    self.pointer()


                self.state = 865
                self.directAbstractDeclarator(0)
                self.state = 869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__13) | (1 << CParser.T__14) | (1 << CParser.T__15))) != 0):
                    self.state = 866
                    self.gccDeclaratorExtension()
                    self.state = 871
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectAbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def abstractDeclarator(self):
            return self.getTypedRuleContext(CParser.AbstractDeclaratorContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(CParser.GccDeclaratorExtensionContext,i)


        def LeftBracket(self):
            return self.getToken(CParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(CParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(CParser.Static, 0)

        def Star(self):
            return self.getToken(CParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(CParser.ParameterTypeListContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectAbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return CParser.RULE_directAbstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectAbstractDeclarator" ):
                listener.enterDirectAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectAbstractDeclarator" ):
                listener.exitDirectAbstractDeclarator(self)



    def directAbstractDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.DirectAbstractDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 136
        self.enterRecursionRule(localctx, 136, self.RULE_directAbstractDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 875
                self.match(CParser.LeftParen)
                self.state = 876
                self.abstractDeclarator()
                self.state = 877
                self.match(CParser.RightParen)
                self.state = 881
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 878
                        self.gccDeclaratorExtension() 
                    self.state = 883
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

                pass

            elif la_ == 2:
                self.state = 884
                self.match(CParser.LeftBracket)
                self.state = 886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.Const) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                    self.state = 885
                    self.typeQualifierList()


                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CParser.LeftParen - 65)) | (1 << (CParser.Plus - 65)) | (1 << (CParser.PlusPlus - 65)) | (1 << (CParser.Minus - 65)) | (1 << (CParser.MinusMinus - 65)) | (1 << (CParser.Star - 65)) | (1 << (CParser.And - 65)) | (1 << (CParser.AndAnd - 65)) | (1 << (CParser.Not - 65)) | (1 << (CParser.Tilde - 65)) | (1 << (CParser.Identifier - 65)) | (1 << (CParser.Constant - 65)) | (1 << (CParser.DigitSequence - 65)) | (1 << (CParser.StringLiteral - 65)))) != 0):
                    self.state = 888
                    self.assignmentExpression()


                self.state = 891
                self.match(CParser.RightBracket)
                pass

            elif la_ == 3:
                self.state = 892
                self.match(CParser.LeftBracket)
                self.state = 893
                self.match(CParser.Static)
                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.Const) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                    self.state = 894
                    self.typeQualifierList()


                self.state = 897
                self.assignmentExpression()
                self.state = 898
                self.match(CParser.RightBracket)
                pass

            elif la_ == 4:
                self.state = 900
                self.match(CParser.LeftBracket)
                self.state = 901
                self.typeQualifierList()
                self.state = 902
                self.match(CParser.Static)
                self.state = 903
                self.assignmentExpression()
                self.state = 904
                self.match(CParser.RightBracket)
                pass

            elif la_ == 5:
                self.state = 906
                self.match(CParser.LeftBracket)
                self.state = 907
                self.match(CParser.Star)
                self.state = 908
                self.match(CParser.RightBracket)
                pass

            elif la_ == 6:
                self.state = 909
                self.match(CParser.LeftParen)
                self.state = 911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__15) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn))) != 0) or _la==CParser.ThreadLocal or _la==CParser.Identifier:
                    self.state = 910
                    self.parameterTypeList()


                self.state = 913
                self.match(CParser.RightParen)
                self.state = 917
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 914
                        self.gccDeclaratorExtension() 
                    self.state = 919
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 965
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 963
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                    if la_ == 1:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 922
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 923
                        self.match(CParser.LeftBracket)
                        self.state = 925
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.Const) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                            self.state = 924
                            self.typeQualifierList()


                        self.state = 928
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CParser.LeftParen - 65)) | (1 << (CParser.Plus - 65)) | (1 << (CParser.PlusPlus - 65)) | (1 << (CParser.Minus - 65)) | (1 << (CParser.MinusMinus - 65)) | (1 << (CParser.Star - 65)) | (1 << (CParser.And - 65)) | (1 << (CParser.AndAnd - 65)) | (1 << (CParser.Not - 65)) | (1 << (CParser.Tilde - 65)) | (1 << (CParser.Identifier - 65)) | (1 << (CParser.Constant - 65)) | (1 << (CParser.DigitSequence - 65)) | (1 << (CParser.StringLiteral - 65)))) != 0):
                            self.state = 927
                            self.assignmentExpression()


                        self.state = 930
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 931
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 932
                        self.match(CParser.LeftBracket)
                        self.state = 933
                        self.match(CParser.Static)
                        self.state = 935
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.Const) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                            self.state = 934
                            self.typeQualifierList()


                        self.state = 937
                        self.assignmentExpression()
                        self.state = 938
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 940
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 941
                        self.match(CParser.LeftBracket)
                        self.state = 942
                        self.typeQualifierList()
                        self.state = 943
                        self.match(CParser.Static)
                        self.state = 944
                        self.assignmentExpression()
                        self.state = 945
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 947
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 948
                        self.match(CParser.LeftBracket)
                        self.state = 949
                        self.match(CParser.Star)
                        self.state = 950
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 951
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 952
                        self.match(CParser.LeftParen)
                        self.state = 954
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__15) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn))) != 0) or _la==CParser.ThreadLocal or _la==CParser.Identifier:
                            self.state = 953
                            self.parameterTypeList()


                        self.state = 956
                        self.match(CParser.RightParen)
                        self.state = 960
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 957
                                self.gccDeclaratorExtension() 
                            self.state = 962
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

                        pass

             
                self.state = 967
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypedefNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_typedefName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefName" ):
                listener.enterTypedefName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefName" ):
                listener.exitTypedefName(self)




    def typedefName(self):

        localctx = CParser.TypedefNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_typedefName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            self.match(CParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def LeftBrace(self):
            return self.getToken(CParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(CParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(CParser.RightBrace, 0)

        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def getRuleIndex(self):
            return CParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)




    def initializer(self):

        localctx = CParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_initializer)
        self._la = 0 # Token type
        try:
            self.state = 980
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 970
                self.assignmentExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 971
                self.match(CParser.LeftBrace)
                self.state = 972
                self.initializerList()
                self.state = 974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.Comma:
                    self.state = 973
                    self.match(CParser.Comma)


                self.state = 976
                self.match(CParser.RightBrace)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 978
                self.match(CParser.LeftBrace)
                self.state = 979
                self.match(CParser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.InitializerContext)
            else:
                return self.getTypedRuleContext(CParser.InitializerContext,i)


        def designation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DesignationContext)
            else:
                return self.getTypedRuleContext(CParser.DesignationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_initializerList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerList" ):
                listener.enterInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerList" ):
                listener.exitInitializerList(self)




    def initializerList(self):

        localctx = CParser.InitializerListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_initializerList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CParser.LeftBracket or _la==CParser.Dot:
                self.state = 982
                self.designation()


            self.state = 985
            self.initializer()
            self.state = 993
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,120,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 986
                    self.match(CParser.Comma)
                    self.state = 988
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CParser.LeftBracket or _la==CParser.Dot:
                        self.state = 987
                        self.designation()


                    self.state = 990
                    self.initializer() 
                self.state = 995
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designatorList(self):
            return self.getTypedRuleContext(CParser.DesignatorListContext,0)


        def Assign(self):
            return self.getToken(CParser.Assign, 0)

        def getRuleIndex(self):
            return CParser.RULE_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignation" ):
                listener.enterDesignation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignation" ):
                listener.exitDesignation(self)




    def designation(self):

        localctx = CParser.DesignationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 996
            self.designatorList()
            self.state = 997
            self.match(CParser.Assign)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DesignatorContext)
            else:
                return self.getTypedRuleContext(CParser.DesignatorContext,i)


        def getRuleIndex(self):
            return CParser.RULE_designatorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignatorList" ):
                listener.enterDesignatorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignatorList" ):
                listener.exitDesignatorList(self)




    def designatorList(self):

        localctx = CParser.DesignatorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_designatorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 999
                self.designator()
                self.state = 1002 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==CParser.LeftBracket or _la==CParser.Dot):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(CParser.LeftBracket, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def RightBracket(self):
            return self.getToken(CParser.RightBracket, 0)

        def Dot(self):
            return self.getToken(CParser.Dot, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_designator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignator" ):
                listener.enterDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignator" ):
                listener.exitDesignator(self)




    def designator(self):

        localctx = CParser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_designator)
        try:
            self.state = 1010
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1004
                self.match(CParser.LeftBracket)
                self.state = 1005
                self.constantExpression()
                self.state = 1006
                self.match(CParser.RightBracket)
                pass
            elif token in [CParser.Dot]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1008
                self.match(CParser.Dot)
                self.state = 1009
                self.match(CParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticAssertDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StaticAssert(self):
            return self.getToken(CParser.StaticAssert, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def Comma(self):
            return self.getToken(CParser.Comma, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.StringLiteral)
            else:
                return self.getToken(CParser.StringLiteral, i)

        def getRuleIndex(self):
            return CParser.RULE_staticAssertDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticAssertDeclaration" ):
                listener.enterStaticAssertDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticAssertDeclaration" ):
                listener.exitStaticAssertDeclaration(self)




    def staticAssertDeclaration(self):

        localctx = CParser.StaticAssertDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_staticAssertDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            self.match(CParser.StaticAssert)
            self.state = 1013
            self.match(CParser.LeftParen)
            self.state = 1014
            self.constantExpression()
            self.state = 1015
            self.match(CParser.Comma)
            self.state = 1017 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1016
                self.match(CParser.StringLiteral)
                self.state = 1019 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==CParser.StringLiteral):
                    break

            self.state = 1021
            self.match(CParser.RightParen)
            self.state = 1022
            self.match(CParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledStatement(self):
            return self.getTypedRuleContext(CParser.LabeledStatementContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(CParser.CompoundStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(CParser.ExpressionStatementContext,0)


        def selectionStatement(self):
            return self.getTypedRuleContext(CParser.SelectionStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(CParser.IterationStatementContext,0)


        def jumpStatement(self):
            return self.getTypedRuleContext(CParser.JumpStatementContext,0)


        def macroSelectionStatement(self):
            return self.getTypedRuleContext(CParser.MacroSelectionStatementContext,0)


        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def Volatile(self):
            return self.getToken(CParser.Volatile, 0)

        def logicalOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.LogicalOrExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.LogicalOrExpressionContext,i)


        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Colon)
            else:
                return self.getToken(CParser.Colon, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = CParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1062
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1024
                self.labeledStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1025
                self.compoundStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1026
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1027
                self.selectionStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1028
                self.iterationStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1029
                self.jumpStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1030
                self.macroSelectionStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1031
                _la = self._input.LA(1)
                if not(_la==CParser.T__13 or _la==CParser.T__14):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1032
                _la = self._input.LA(1)
                if not(_la==CParser.T__16 or _la==CParser.Volatile):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1033
                self.match(CParser.LeftParen)
                self.state = 1042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CParser.LeftParen - 65)) | (1 << (CParser.Plus - 65)) | (1 << (CParser.PlusPlus - 65)) | (1 << (CParser.Minus - 65)) | (1 << (CParser.MinusMinus - 65)) | (1 << (CParser.Star - 65)) | (1 << (CParser.And - 65)) | (1 << (CParser.AndAnd - 65)) | (1 << (CParser.Not - 65)) | (1 << (CParser.Tilde - 65)) | (1 << (CParser.Identifier - 65)) | (1 << (CParser.Constant - 65)) | (1 << (CParser.DigitSequence - 65)) | (1 << (CParser.StringLiteral - 65)))) != 0):
                    self.state = 1034
                    self.logicalOrExpression()
                    self.state = 1039
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==CParser.Comma:
                        self.state = 1035
                        self.match(CParser.Comma)
                        self.state = 1036
                        self.logicalOrExpression()
                        self.state = 1041
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1057
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CParser.Colon:
                    self.state = 1044
                    self.match(CParser.Colon)
                    self.state = 1053
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CParser.LeftParen - 65)) | (1 << (CParser.Plus - 65)) | (1 << (CParser.PlusPlus - 65)) | (1 << (CParser.Minus - 65)) | (1 << (CParser.MinusMinus - 65)) | (1 << (CParser.Star - 65)) | (1 << (CParser.And - 65)) | (1 << (CParser.AndAnd - 65)) | (1 << (CParser.Not - 65)) | (1 << (CParser.Tilde - 65)) | (1 << (CParser.Identifier - 65)) | (1 << (CParser.Constant - 65)) | (1 << (CParser.DigitSequence - 65)) | (1 << (CParser.StringLiteral - 65)))) != 0):
                        self.state = 1045
                        self.logicalOrExpression()
                        self.state = 1050
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==CParser.Comma:
                            self.state = 1046
                            self.match(CParser.Comma)
                            self.state = 1047
                            self.logicalOrExpression()
                            self.state = 1052
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 1059
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1060
                self.match(CParser.RightParen)
                self.state = 1061
                self.match(CParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Colon(self):
            return self.getToken(CParser.Colon, 0)

        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext,0)


        def Case(self):
            return self.getToken(CParser.Case, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def declaration(self):
            return self.getTypedRuleContext(CParser.DeclarationContext,0)


        def Default(self):
            return self.getToken(CParser.Default, 0)

        def getRuleIndex(self):
            return CParser.RULE_labeledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStatement" ):
                listener.enterLabeledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStatement" ):
                listener.exitLabeledStatement(self)




    def labeledStatement(self):

        localctx = CParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_labeledStatement)
        try:
            self.state = 1080
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1064
                self.match(CParser.Identifier)
                self.state = 1065
                self.match(CParser.Colon)
                self.state = 1066
                self.statement()
                pass
            elif token in [CParser.Case]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1067
                self.match(CParser.Case)
                self.state = 1068
                self.constantExpression()
                self.state = 1069
                self.match(CParser.Colon)
                self.state = 1072
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                if la_ == 1:
                    self.state = 1070
                    self.declaration()
                    pass

                elif la_ == 2:
                    self.state = 1071
                    self.statement()
                    pass


                pass
            elif token in [CParser.Default]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1074
                self.match(CParser.Default)
                self.state = 1075
                self.match(CParser.Colon)
                self.state = 1078
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                if la_ == 1:
                    self.state = 1076
                    self.declaration()
                    pass

                elif la_ == 2:
                    self.state = 1077
                    self.statement()
                    pass


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(CParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CParser.RightBrace, 0)

        def blockItemList(self):
            return self.getTypedRuleContext(CParser.BlockItemListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)




    def compoundStatement(self):

        localctx = CParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_compoundStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1082
            self.match(CParser.LeftBrace)
            self.state = 1084
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__13) | (1 << CParser.T__14) | (1 << CParser.T__15) | (1 << CParser.T__17) | (1 << CParser.Auto) | (1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (1 << CParser.If) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Return) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Sizeof) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Switch) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.While) | (1 << CParser.Alignas) | (1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Generic) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CParser.ThreadLocal - 64)) | (1 << (CParser.LeftParen - 64)) | (1 << (CParser.LeftBrace - 64)) | (1 << (CParser.Plus - 64)) | (1 << (CParser.PlusPlus - 64)) | (1 << (CParser.Minus - 64)) | (1 << (CParser.MinusMinus - 64)) | (1 << (CParser.Star - 64)) | (1 << (CParser.And - 64)) | (1 << (CParser.AndAnd - 64)) | (1 << (CParser.Not - 64)) | (1 << (CParser.Tilde - 64)) | (1 << (CParser.Semi - 64)) | (1 << (CParser.Identifier - 64)) | (1 << (CParser.Constant - 64)) | (1 << (CParser.DigitSequence - 64)) | (1 << (CParser.StringLiteral - 64)))) != 0):
                self.state = 1083
                self.blockItemList()


            self.state = 1086
            self.match(CParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.BlockItemContext)
            else:
                return self.getTypedRuleContext(CParser.BlockItemContext,i)


        def getRuleIndex(self):
            return CParser.RULE_blockItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItemList" ):
                listener.enterBlockItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItemList" ):
                listener.exitBlockItemList(self)




    def blockItemList(self):

        localctx = CParser.BlockItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_blockItemList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1089 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1088
                self.blockItem()
                self.state = 1091 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__13) | (1 << CParser.T__14) | (1 << CParser.T__15) | (1 << CParser.T__17) | (1 << CParser.Auto) | (1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (1 << CParser.If) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Return) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Sizeof) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Switch) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.While) | (1 << CParser.Alignas) | (1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Generic) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CParser.ThreadLocal - 64)) | (1 << (CParser.LeftParen - 64)) | (1 << (CParser.LeftBrace - 64)) | (1 << (CParser.Plus - 64)) | (1 << (CParser.PlusPlus - 64)) | (1 << (CParser.Minus - 64)) | (1 << (CParser.MinusMinus - 64)) | (1 << (CParser.Star - 64)) | (1 << (CParser.And - 64)) | (1 << (CParser.AndAnd - 64)) | (1 << (CParser.Not - 64)) | (1 << (CParser.Tilde - 64)) | (1 << (CParser.Semi - 64)) | (1 << (CParser.Identifier - 64)) | (1 << (CParser.Constant - 64)) | (1 << (CParser.DigitSequence - 64)) | (1 << (CParser.StringLiteral - 64)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(CParser.DeclarationContext,0)


        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext,0)


        def getRuleIndex(self):
            return CParser.RULE_blockItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItem" ):
                listener.enterBlockItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItem" ):
                listener.exitBlockItem(self)




    def blockItem(self):

        localctx = CParser.BlockItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_blockItem)
        try:
            self.state = 1095
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1093
                self.declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1094
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = CParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_expressionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CParser.LeftParen - 65)) | (1 << (CParser.Plus - 65)) | (1 << (CParser.PlusPlus - 65)) | (1 << (CParser.Minus - 65)) | (1 << (CParser.MinusMinus - 65)) | (1 << (CParser.Star - 65)) | (1 << (CParser.And - 65)) | (1 << (CParser.AndAnd - 65)) | (1 << (CParser.Not - 65)) | (1 << (CParser.Tilde - 65)) | (1 << (CParser.Identifier - 65)) | (1 << (CParser.Constant - 65)) | (1 << (CParser.DigitSequence - 65)) | (1 << (CParser.StringLiteral - 65)))) != 0):
                self.state = 1097
                self.expression()


            self.state = 1100
            self.match(CParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(CParser.If, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.StatementContext)
            else:
                return self.getTypedRuleContext(CParser.StatementContext,i)


        def Else(self):
            return self.getToken(CParser.Else, 0)

        def Switch(self):
            return self.getToken(CParser.Switch, 0)

        def getRuleIndex(self):
            return CParser.RULE_selectionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionStatement" ):
                listener.enterSelectionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionStatement" ):
                listener.exitSelectionStatement(self)




    def selectionStatement(self):

        localctx = CParser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_selectionStatement)
        try:
            self.state = 1117
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.If]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1102
                self.match(CParser.If)
                self.state = 1103
                self.match(CParser.LeftParen)
                self.state = 1104
                self.expression()
                self.state = 1105
                self.match(CParser.RightParen)
                self.state = 1106
                self.statement()
                self.state = 1109
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 1107
                    self.match(CParser.Else)
                    self.state = 1108
                    self.statement()


                pass
            elif token in [CParser.Switch]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1111
                self.match(CParser.Switch)
                self.state = 1112
                self.match(CParser.LeftParen)
                self.state = 1113
                self.expression()
                self.state = 1114
                self.match(CParser.RightParen)
                self.state = 1115
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroSelectionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def blockItemList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.BlockItemListContext)
            else:
                return self.getTypedRuleContext(CParser.BlockItemListContext,i)


        def getRuleIndex(self):
            return CParser.RULE_macroSelectionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroSelectionStatement" ):
                listener.enterMacroSelectionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroSelectionStatement" ):
                listener.exitMacroSelectionStatement(self)




    def macroSelectionStatement(self):

        localctx = CParser.MacroSelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_macroSelectionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            self.match(CParser.T__17)
            self.state = 1120
            self.match(CParser.Identifier)
            self.state = 1121
            self.blockItemList()
            self.state = 1124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CParser.T__18:
                self.state = 1122
                self.match(CParser.T__18)
                self.state = 1123
                self.blockItemList()


            self.state = 1126
            self.match(CParser.T__19)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(CParser.While, 0)

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext,0)


        def Do(self):
            return self.getToken(CParser.Do, 0)

        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def For(self):
            return self.getToken(CParser.For, 0)

        def forCondition(self):
            return self.getTypedRuleContext(CParser.ForConditionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_iterationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationStatement" ):
                listener.enterIterationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationStatement" ):
                listener.exitIterationStatement(self)




    def iterationStatement(self):

        localctx = CParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_iterationStatement)
        try:
            self.state = 1148
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.While]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1128
                self.match(CParser.While)
                self.state = 1129
                self.match(CParser.LeftParen)
                self.state = 1130
                self.expression()
                self.state = 1131
                self.match(CParser.RightParen)
                self.state = 1132
                self.statement()
                pass
            elif token in [CParser.Do]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1134
                self.match(CParser.Do)
                self.state = 1135
                self.statement()
                self.state = 1136
                self.match(CParser.While)
                self.state = 1137
                self.match(CParser.LeftParen)
                self.state = 1138
                self.expression()
                self.state = 1139
                self.match(CParser.RightParen)
                self.state = 1140
                self.match(CParser.Semi)
                pass
            elif token in [CParser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1142
                self.match(CParser.For)
                self.state = 1143
                self.match(CParser.LeftParen)
                self.state = 1144
                self.forCondition()
                self.state = 1145
                self.match(CParser.RightParen)
                self.state = 1146
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Semi)
            else:
                return self.getToken(CParser.Semi, i)

        def forDeclaration(self):
            return self.getTypedRuleContext(CParser.ForDeclarationContext,0)


        def forExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ForExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.ForExpressionContext,i)


        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_forCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForCondition" ):
                listener.enterForCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForCondition" ):
                listener.exitForCondition(self)




    def forCondition(self):

        localctx = CParser.ForConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_forCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 1150
                self.forDeclaration()
                pass

            elif la_ == 2:
                self.state = 1152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CParser.LeftParen - 65)) | (1 << (CParser.Plus - 65)) | (1 << (CParser.PlusPlus - 65)) | (1 << (CParser.Minus - 65)) | (1 << (CParser.MinusMinus - 65)) | (1 << (CParser.Star - 65)) | (1 << (CParser.And - 65)) | (1 << (CParser.AndAnd - 65)) | (1 << (CParser.Not - 65)) | (1 << (CParser.Tilde - 65)) | (1 << (CParser.Identifier - 65)) | (1 << (CParser.Constant - 65)) | (1 << (CParser.DigitSequence - 65)) | (1 << (CParser.StringLiteral - 65)))) != 0):
                    self.state = 1151
                    self.expression()


                pass


            self.state = 1156
            self.match(CParser.Semi)
            self.state = 1158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CParser.LeftParen - 65)) | (1 << (CParser.Plus - 65)) | (1 << (CParser.PlusPlus - 65)) | (1 << (CParser.Minus - 65)) | (1 << (CParser.MinusMinus - 65)) | (1 << (CParser.Star - 65)) | (1 << (CParser.And - 65)) | (1 << (CParser.AndAnd - 65)) | (1 << (CParser.Not - 65)) | (1 << (CParser.Tilde - 65)) | (1 << (CParser.Identifier - 65)) | (1 << (CParser.Constant - 65)) | (1 << (CParser.DigitSequence - 65)) | (1 << (CParser.StringLiteral - 65)))) != 0):
                self.state = 1157
                self.forExpression()


            self.state = 1160
            self.match(CParser.Semi)
            self.state = 1162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CParser.LeftParen - 65)) | (1 << (CParser.Plus - 65)) | (1 << (CParser.PlusPlus - 65)) | (1 << (CParser.Minus - 65)) | (1 << (CParser.MinusMinus - 65)) | (1 << (CParser.Star - 65)) | (1 << (CParser.And - 65)) | (1 << (CParser.AndAnd - 65)) | (1 << (CParser.Not - 65)) | (1 << (CParser.Tilde - 65)) | (1 << (CParser.Identifier - 65)) | (1 << (CParser.Constant - 65)) | (1 << (CParser.DigitSequence - 65)) | (1 << (CParser.StringLiteral - 65)))) != 0):
                self.state = 1161
                self.forExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(CParser.DeclarationSpecifiersContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(CParser.InitDeclaratorListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_forDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForDeclaration" ):
                listener.enterForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForDeclaration" ):
                listener.exitForDeclaration(self)




    def forDeclaration(self):

        localctx = CParser.ForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_forDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1164
            self.declarationSpecifiers()
            self.state = 1166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CParser.LeftParen - 65)) | (1 << (CParser.Star - 65)) | (1 << (CParser.Caret - 65)) | (1 << (CParser.Identifier - 65)))) != 0):
                self.state = 1165
                self.initDeclaratorList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.AssignmentExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_forExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpression" ):
                listener.enterForExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpression" ):
                listener.exitForExpression(self)




    def forExpression(self):

        localctx = CParser.ForExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_forExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1168
            self.assignmentExpression()
            self.state = 1173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Comma:
                self.state = 1169
                self.match(CParser.Comma)
                self.state = 1170
                self.assignmentExpression()
                self.state = 1175
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def Goto(self):
            return self.getToken(CParser.Goto, 0)

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Return(self):
            return self.getToken(CParser.Return, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext,0)


        def Continue(self):
            return self.getToken(CParser.Continue, 0)

        def Break(self):
            return self.getToken(CParser.Break, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_jumpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpStatement" ):
                listener.enterJumpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpStatement" ):
                listener.exitJumpStatement(self)




    def jumpStatement(self):

        localctx = CParser.JumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_jumpStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1185
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
            if la_ == 1:
                self.state = 1176
                self.match(CParser.Goto)
                self.state = 1177
                self.match(CParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 1178
                _la = self._input.LA(1)
                if not(_la==CParser.Break or _la==CParser.Continue):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.state = 1179
                self.match(CParser.Return)
                self.state = 1181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CParser.LeftParen - 65)) | (1 << (CParser.Plus - 65)) | (1 << (CParser.PlusPlus - 65)) | (1 << (CParser.Minus - 65)) | (1 << (CParser.MinusMinus - 65)) | (1 << (CParser.Star - 65)) | (1 << (CParser.And - 65)) | (1 << (CParser.AndAnd - 65)) | (1 << (CParser.Not - 65)) | (1 << (CParser.Tilde - 65)) | (1 << (CParser.Identifier - 65)) | (1 << (CParser.Constant - 65)) | (1 << (CParser.DigitSequence - 65)) | (1 << (CParser.StringLiteral - 65)))) != 0):
                    self.state = 1180
                    self.expression()


                pass

            elif la_ == 4:
                self.state = 1183
                self.match(CParser.Goto)
                self.state = 1184
                self.unaryExpression()
                pass


            self.state = 1187
            self.match(CParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CParser.EOF, 0)

        def translationUnit(self):
            return self.getTypedRuleContext(CParser.TranslationUnitContext,0)


        def getRuleIndex(self):
            return CParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)




    def compilationUnit(self):

        localctx = CParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__13) | (1 << CParser.T__14) | (1 << CParser.T__15) | (1 << CParser.T__16) | (1 << CParser.T__17) | (1 << CParser.T__18) | (1 << CParser.T__19) | (1 << CParser.Auto) | (1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (1 << CParser.Else) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (1 << CParser.If) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Return) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Sizeof) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Switch) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.While) | (1 << CParser.Alignas) | (1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Generic) | (1 << CParser.Imaginary) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CParser.ThreadLocal - 64)) | (1 << (CParser.LeftParen - 64)) | (1 << (CParser.RightParen - 64)) | (1 << (CParser.LeftBracket - 64)) | (1 << (CParser.RightBracket - 64)) | (1 << (CParser.LeftBrace - 64)) | (1 << (CParser.RightBrace - 64)) | (1 << (CParser.Less - 64)) | (1 << (CParser.LessEqual - 64)) | (1 << (CParser.Greater - 64)) | (1 << (CParser.GreaterEqual - 64)) | (1 << (CParser.LeftShift - 64)) | (1 << (CParser.RightShift - 64)) | (1 << (CParser.Plus - 64)) | (1 << (CParser.PlusPlus - 64)) | (1 << (CParser.Minus - 64)) | (1 << (CParser.MinusMinus - 64)) | (1 << (CParser.Star - 64)) | (1 << (CParser.Div - 64)) | (1 << (CParser.Mod - 64)) | (1 << (CParser.And - 64)) | (1 << (CParser.Or - 64)) | (1 << (CParser.AndAnd - 64)) | (1 << (CParser.OrOr - 64)) | (1 << (CParser.Caret - 64)) | (1 << (CParser.Not - 64)) | (1 << (CParser.Tilde - 64)) | (1 << (CParser.Question - 64)) | (1 << (CParser.Colon - 64)) | (1 << (CParser.Semi - 64)) | (1 << (CParser.Comma - 64)) | (1 << (CParser.Assign - 64)) | (1 << (CParser.StarAssign - 64)) | (1 << (CParser.DivAssign - 64)) | (1 << (CParser.ModAssign - 64)) | (1 << (CParser.PlusAssign - 64)) | (1 << (CParser.MinusAssign - 64)) | (1 << (CParser.LeftShiftAssign - 64)) | (1 << (CParser.RightShiftAssign - 64)) | (1 << (CParser.AndAssign - 64)) | (1 << (CParser.XorAssign - 64)) | (1 << (CParser.OrAssign - 64)) | (1 << (CParser.Equal - 64)) | (1 << (CParser.NotEqual - 64)) | (1 << (CParser.Arrow - 64)) | (1 << (CParser.Dot - 64)) | (1 << (CParser.Ellipsis - 64)) | (1 << (CParser.Identifier - 64)) | (1 << (CParser.Constant - 64)) | (1 << (CParser.DigitSequence - 64)) | (1 << (CParser.StringLiteral - 64)) | (1 << (CParser.ComplexDefine - 64)) | (1 << (CParser.Macroundef - 64)) | (1 << (CParser.Macroifdef - 64)) | (1 << (CParser.Macroifndef - 64)) | (1 << (CParser.Macroelse - 64)) | (1 << (CParser.Macroendif - 64)) | (1 << (CParser.IncludeDirective - 64)) | (1 << (CParser.AsmBlock - 64)) | (1 << (CParser.LineAfterPreprocessing - 64)) | (1 << (CParser.LineDirective - 64)) | (1 << (CParser.PragmaDirective - 64)) | (1 << (CParser.Whitespace - 64)) | (1 << (CParser.Newline - 64)))) != 0) or _la==CParser.BlockComment or _la==CParser.LineComment:
                self.state = 1189
                self.translationUnit()


            self.state = 1192
            self.match(CParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TranslationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externalDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ExternalDeclarationContext)
            else:
                return self.getTypedRuleContext(CParser.ExternalDeclarationContext,i)


        def getRuleIndex(self):
            return CParser.RULE_translationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationUnit" ):
                listener.enterTranslationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationUnit" ):
                listener.exitTranslationUnit(self)




    def translationUnit(self):

        localctx = CParser.TranslationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_translationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1195 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1194
                self.externalDeclaration()
                self.state = 1197 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__13) | (1 << CParser.T__14) | (1 << CParser.T__15) | (1 << CParser.T__16) | (1 << CParser.T__17) | (1 << CParser.T__18) | (1 << CParser.T__19) | (1 << CParser.Auto) | (1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (1 << CParser.Else) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (1 << CParser.If) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Return) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Sizeof) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Switch) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.While) | (1 << CParser.Alignas) | (1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Generic) | (1 << CParser.Imaginary) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CParser.ThreadLocal - 64)) | (1 << (CParser.LeftParen - 64)) | (1 << (CParser.RightParen - 64)) | (1 << (CParser.LeftBracket - 64)) | (1 << (CParser.RightBracket - 64)) | (1 << (CParser.LeftBrace - 64)) | (1 << (CParser.RightBrace - 64)) | (1 << (CParser.Less - 64)) | (1 << (CParser.LessEqual - 64)) | (1 << (CParser.Greater - 64)) | (1 << (CParser.GreaterEqual - 64)) | (1 << (CParser.LeftShift - 64)) | (1 << (CParser.RightShift - 64)) | (1 << (CParser.Plus - 64)) | (1 << (CParser.PlusPlus - 64)) | (1 << (CParser.Minus - 64)) | (1 << (CParser.MinusMinus - 64)) | (1 << (CParser.Star - 64)) | (1 << (CParser.Div - 64)) | (1 << (CParser.Mod - 64)) | (1 << (CParser.And - 64)) | (1 << (CParser.Or - 64)) | (1 << (CParser.AndAnd - 64)) | (1 << (CParser.OrOr - 64)) | (1 << (CParser.Caret - 64)) | (1 << (CParser.Not - 64)) | (1 << (CParser.Tilde - 64)) | (1 << (CParser.Question - 64)) | (1 << (CParser.Colon - 64)) | (1 << (CParser.Semi - 64)) | (1 << (CParser.Comma - 64)) | (1 << (CParser.Assign - 64)) | (1 << (CParser.StarAssign - 64)) | (1 << (CParser.DivAssign - 64)) | (1 << (CParser.ModAssign - 64)) | (1 << (CParser.PlusAssign - 64)) | (1 << (CParser.MinusAssign - 64)) | (1 << (CParser.LeftShiftAssign - 64)) | (1 << (CParser.RightShiftAssign - 64)) | (1 << (CParser.AndAssign - 64)) | (1 << (CParser.XorAssign - 64)) | (1 << (CParser.OrAssign - 64)) | (1 << (CParser.Equal - 64)) | (1 << (CParser.NotEqual - 64)) | (1 << (CParser.Arrow - 64)) | (1 << (CParser.Dot - 64)) | (1 << (CParser.Ellipsis - 64)) | (1 << (CParser.Identifier - 64)) | (1 << (CParser.Constant - 64)) | (1 << (CParser.DigitSequence - 64)) | (1 << (CParser.StringLiteral - 64)) | (1 << (CParser.ComplexDefine - 64)) | (1 << (CParser.Macroundef - 64)) | (1 << (CParser.Macroifdef - 64)) | (1 << (CParser.Macroifndef - 64)) | (1 << (CParser.Macroelse - 64)) | (1 << (CParser.Macroendif - 64)) | (1 << (CParser.IncludeDirective - 64)) | (1 << (CParser.AsmBlock - 64)) | (1 << (CParser.LineAfterPreprocessing - 64)) | (1 << (CParser.LineDirective - 64)) | (1 << (CParser.PragmaDirective - 64)) | (1 << (CParser.Whitespace - 64)) | (1 << (CParser.Newline - 64)))) != 0) or _la==CParser.BlockComment or _la==CParser.LineComment):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExternalDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fptypeSpecifier(self):
            return self.getTypedRuleContext(CParser.FptypeSpecifierContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(CParser.FunctionDeclarationContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(CParser.FunctionDefinitionContext,0)


        def declaration(self):
            return self.getTypedRuleContext(CParser.DeclarationContext,0)


        def macroDefinition(self):
            return self.getTypedRuleContext(CParser.MacroDefinitionContext,0)


        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def getRuleIndex(self):
            return CParser.RULE_externalDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalDeclaration" ):
                listener.enterExternalDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalDeclaration" ):
                listener.exitExternalDeclaration(self)




    def externalDeclaration(self):

        localctx = CParser.ExternalDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_externalDeclaration)
        try:
            self.state = 1205
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1199
                self.fptypeSpecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1200
                self.functionDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1201
                self.functionDefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1202
                self.declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1203
                self.macroDefinition()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1204
                self.match(CParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionPtrDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.LeftParen)
            else:
                return self.getToken(CParser.LeftParen, i)

        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext,0)


        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.RightParen)
            else:
                return self.getToken(CParser.RightParen, i)

        def typeSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.TypeSpecifierContext)
            else:
                return self.getTypedRuleContext(CParser.TypeSpecifierContext,i)


        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(CParser.GccAttributeSpecifierContext,0)


        def parameterTypeList(self):
            return self.getTypedRuleContext(CParser.ParameterTypeListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_functionPtrDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionPtrDeclaration" ):
                listener.enterFunctionPtrDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionPtrDeclaration" ):
                listener.exitFunctionPtrDeclaration(self)




    def functionPtrDeclaration(self):

        localctx = CParser.FunctionPtrDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_functionPtrDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1245
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1208 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1207
                        self.typeSpecifier(0)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1210 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

                self.state = 1213
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.T__15:
                    self.state = 1212
                    self.gccAttributeSpecifier()


                self.state = 1215
                self.match(CParser.LeftParen)
                self.state = 1216
                self.pointer()
                self.state = 1217
                self.match(CParser.Identifier)
                self.state = 1218
                self.match(CParser.RightParen)
                self.state = 1219
                self.match(CParser.LeftParen)
                self.state = 1221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__15) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn))) != 0) or _la==CParser.ThreadLocal or _la==CParser.Identifier:
                    self.state = 1220
                    self.parameterTypeList()


                self.state = 1223
                self.match(CParser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1226 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1225
                    self.typeSpecifier(0)
                    self.state = 1228 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__15) | (1 << CParser.Char) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Float) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Struct) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex))) != 0) or _la==CParser.Identifier):
                        break

                self.state = 1230
                self.match(CParser.LeftParen)
                self.state = 1232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CParser.T__15:
                    self.state = 1231
                    self.gccAttributeSpecifier()


                self.state = 1234
                self.match(CParser.LeftParen)
                self.state = 1235
                self.pointer()
                self.state = 1236
                self.match(CParser.Identifier)
                self.state = 1237
                self.match(CParser.RightParen)
                self.state = 1238
                self.match(CParser.RightParen)
                self.state = 1239
                self.match(CParser.LeftParen)
                self.state = 1241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__15) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn))) != 0) or _la==CParser.ThreadLocal or _la==CParser.Identifier:
                    self.state = 1240
                    self.parameterTypeList()


                self.state = 1243
                self.match(CParser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def funcDeclarator(self):
            return self.getTypedRuleContext(CParser.FuncDeclaratorContext,0)


        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def Typedef(self):
            return self.getToken(CParser.Typedef, 0)

        def funcDeclarationSpecifiers(self):
            return self.getTypedRuleContext(CParser.FuncDeclarationSpecifiersContext,0)


        def declarationList(self):
            return self.getTypedRuleContext(CParser.DeclarationListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_functionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclaration" ):
                listener.enterFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclaration" ):
                listener.exitFunctionDeclaration(self)




    def functionDeclaration(self):

        localctx = CParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_functionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1247
            _la = self._input.LA(1)
            if _la <= 0 or _la==CParser.Typedef:
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 1248
                self.funcDeclarationSpecifiers()


            self.state = 1251
            self.funcDeclarator()
            self.state = 1253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__15) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert))) != 0) or _la==CParser.ThreadLocal or _la==CParser.Identifier:
                self.state = 1252
                self.declarationList()


            self.state = 1255
            self.match(CParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(CParser.CompoundStatementContext,0)


        def funcDeclarationSpecifiers(self):
            return self.getTypedRuleContext(CParser.FuncDeclarationSpecifiersContext,0)


        def declarationList(self):
            return self.getTypedRuleContext(CParser.DeclarationListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)




    def functionDefinition(self):

        localctx = CParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 1257
                self.funcDeclarationSpecifiers()


            self.state = 1260
            self.declarator()
            self.state = 1262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__15) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert))) != 0) or _la==CParser.ThreadLocal or _la==CParser.Identifier:
                self.state = 1261
                self.declarationList()


            self.state = 1264
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self):
            return self.getToken(CParser.StringLiteral, 0)

        def Constant(self):
            return self.getToken(CParser.Constant, 0)

        def Identifier(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Identifier)
            else:
                return self.getToken(CParser.Identifier, i)

        def getRuleIndex(self):
            return CParser.RULE_stringIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringIdentifier" ):
                listener.enterStringIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringIdentifier" ):
                listener.exitStringIdentifier(self)




    def stringIdentifier(self):

        localctx = CParser.StringIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_stringIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1273
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CParser.Identifier]:
                self.state = 1267 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1266
                    self.match(CParser.Identifier)
                    self.state = 1269 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==CParser.Identifier):
                        break

                pass
            elif token in [CParser.StringLiteral]:
                self.state = 1271
                self.match(CParser.StringLiteral)
                pass
            elif token in [CParser.Constant]:
                self.state = 1272
                self.match(CParser.Constant)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.StringIdentifierContext)
            else:
                return self.getTypedRuleContext(CParser.StringIdentifierContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CParser.Comma)
            else:
                return self.getToken(CParser.Comma, i)

        def getRuleIndex(self):
            return CParser.RULE_stringIdentifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringIdentifierList" ):
                listener.enterStringIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringIdentifierList" ):
                listener.exitStringIdentifierList(self)




    def stringIdentifierList(self):

        localctx = CParser.StringIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_stringIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1275
            self.stringIdentifier()
            self.state = 1280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Comma:
                self.state = 1276
                self.match(CParser.Comma)
                self.state = 1277
                self.stringIdentifier()
                self.state = 1282
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MacroDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CParser.RightParen, 0)

        def directDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectDeclaratorContext,0)


        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def stringIdentifierList(self):
            return self.getTypedRuleContext(CParser.StringIdentifierListContext,0)


        def Semi(self):
            return self.getToken(CParser.Semi, 0)

        def getRuleIndex(self):
            return CParser.RULE_macroDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMacroDefinition" ):
                listener.enterMacroDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMacroDefinition" ):
                listener.exitMacroDefinition(self)




    def macroDefinition(self):

        localctx = CParser.MacroDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_macroDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1285
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.state = 1283
                self.directDeclarator(0)
                pass

            elif la_ == 2:
                self.state = 1284
                self.match(CParser.Identifier)
                pass


            self.state = 1287
            self.match(CParser.LeftParen)
            self.state = 1289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & ((1 << (CParser.Identifier - 111)) | (1 << (CParser.Constant - 111)) | (1 << (CParser.StringLiteral - 111)))) != 0):
                self.state = 1288
                self.stringIdentifierList()


            self.state = 1291
            self.match(CParser.RightParen)
            self.state = 1293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
            if la_ == 1:
                self.state = 1292
                self.match(CParser.Semi)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(CParser.DeclarationContext,i)


        def getRuleIndex(self):
            return CParser.RULE_declarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationList" ):
                listener.enterDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationList" ):
                listener.exitDeclarationList(self)




    def declarationList(self):

        localctx = CParser.DeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_declarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1296 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1295
                self.declaration()
                self.state = 1298 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__15) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert))) != 0) or _la==CParser.ThreadLocal or _la==CParser.Identifier):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[35] = self.typeSpecifier_sempred
        self._predicates[54] = self.directDeclarator_sempred
        self._predicates[68] = self.directAbstractDeclarator_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def typeSpecifier_sempred(self, localctx:TypeSpecifierContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def directDeclarator_sempred(self, localctx:DirectDeclaratorContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 3)
         

    def directAbstractDeclarator_sempred(self, localctx:DirectAbstractDeclaratorContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 1)
         




