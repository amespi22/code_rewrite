Text=list_t*cgc_haiku_list=NULL;uint32_tnext_haiku_id=INIT_HAIKU_ID;uint32_tcgc_recv_uint32(){uint32_tnum[1]={0};RECV(num,sizeof(uint32_t));returnnum[0];}uint32_tcgc_recv_uint16(){uint16_tnum[1]={0};RECV(num,sizeof(uint16_t));returnnum[0];}uint8_tcgc_haiku_list_exists(){if(NULL==cgc_haiku_list){returnFALSE;}else{returnTRUE;}}uint8_tcgc_is_haiku_list_empty(){if(0==cgc_haiku_list->count){returnTRUE;}else{returnFALSE;}}voidcgc_init_haiku_list(){if(FALSE==cgc_haiku_list_exists()){cgc_haiku_list=cgc_list_create();}}intcgc_get_count(){if(TRUE==cgc_haiku_list_exists()){returncgc_haiku_list->count;}else{returnERR_LIST_NOT_EXIST;}}uint32_tcgc_get_id_from_haiku(node_t*haiku){if(NULL!=haiku->data){structhaiku*h=(structhaiku*)haiku->data;returnh->id;}else{returnERR_EMPTY_NODE;}}uint32_tcgc_get_next_haiku_id(){next_haiku_id++;returnnext_haiku_id-1;}intcgc_get_random_idx(uint32_t*idx){uint32_trandom_idx=0;intret=0;ret=cgc_rand((char*)&random_idx,4);int32_tcount=cgc_get_count();if(ERR_LIST_NOT_EXIST==count){returncount;}elseif(0==count){returnERR_LIST_EMPTY;}elseif(0!=ret){returnERR_RAND_FAILED;}else{*idx=random_idx%(uint32_t)count;returnSUCCESS;}}intcgc_populate_array_with_haiku_ids(uint32_tid_arr[],uint32_tcount){node_t*haiku_ptr=NULL;structhaiku*h=NULL;uint32_tid=0;if(TRUE==cgc_haiku_list_exists()){haiku_ptr=cgc_haiku_list->tail;}else{returnERR_LIST_NOT_EXIST;}if((0==count)||(NULL==haiku_ptr)){returnERR_LIST_EMPTY;}while((0<count)&&(NULL!=haiku_ptr)){h=(structhaiku*)haiku_ptr->data;id_arr[count-1]=h->id;count--;haiku_ptr=haiku_ptr->prev;}returnSUCCESS;}intcgc_find_haiku_with_id(structhaiku**h,uint32_tid){node_t*haiku_ptr=NULL;structhaiku*tmp=NULL;intcount=0;bool_tfound=FALSE;count=cgc_get_count();if(0<count){haiku_ptr=cgc_haiku_list->head;}elseif(0==count){returnERR_LIST_EMPTY;}else{returnERR_LIST_NOT_EXIST;}while(NULL!=haiku_ptr){tmp=(structhaiku*)haiku_ptr->data;if(id==tmp->id){*h=tmp;found=TRUE;break;}haiku_ptr=haiku_ptr->next;}if(TRUE==found){returnSUCCESS;}else{returnERR_INVALID_ID;}}voidcgc_send_haiku(structhaiku*h){uint32_tid=h->id;char*content=h->content;uint16_tlength=h->length;cgc_send((char*)&id,sizeof(uint32_t));cgc_send((char*)&length,sizeof(uint16_t));cgc_send(content,length);}voidcgc_send_easter_egg_haiku(){uint32_tid=EGG_ID;char*content=EGG_HAIKU;uint16_tlength=cgc_strlen(content);cgc_send((char*)&id,sizeof(uint32_t));cgc_send((char*)&length,sizeof(uint16_t));cgc_send(content,length);}voidcgc_send_haiku_id(uint32_tid){SENDUI(id);}intcgc_add_haiku_to_list(structhaiku*h){node_t*nd=cgc_node_create((void*)h);returncgc_list_push(cgc_haiku_list,nd);}intcgc_recv_haiku_line(char*haiku_content_ptr,int16_tbytes_remaining){chartemp_line_buf[MAX_HAIKU_LINE_LEN]={0};int16_tbytes_received=0;int16_tbytes_written=0;bytes_received=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN);if(0>bytes_received){returnERR_INVALID_HAIKU;}bytes_written=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf);returnbytes_written;}structhaiku*cgc_recv_haiku(uint16_ttotal_bytes){structhaiku*h=NULL;char*haiku_content_ptr=NULL;int16_tbytes_remaining=0;int16_tbytes_written=0;bytes_remaining=(int16_t)total_bytes;ALLOC(sizeof(structhaiku)+total_bytes+1,&h);haiku_content_ptr=h->content;while(0!=bytes_remaining){bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);if(0>bytes_written){returnNULL;}haiku_content_ptr+=bytes_written;bytes_remaining-=bytes_written;}h->id=cgc_get_next_haiku_id();h->length=total_bytes;returnh;}uint16_tcgc_recv_haiku_size(){returncgc_recv_uint16();}intcgc_add_haiku(){intret=SUCCESS;uint16_ttotal_bytes=0;structhaiku*h=NULL;if(FALSE==cgc_haiku_list_exists()){cgc_init_haiku_list();}total_bytes=cgc_recv_haiku_size();if((0<total_bytes)&&(MAX_HAIKU_LEN>total_bytes)){h=cgc_recv_haiku(total_bytes);if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}}else{ret=ERR_INVALID_HAIKU_LEN;}returnret;}intcgc_get_haiku_by_id(){structhaiku*h=NULL;uint32_tid=0;intres=0;if(TRUE==cgc_haiku_list_exists()){id=cgc_recv_uint32();if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}}else{res=ERR_LIST_NOT_EXIST;}returnres;}intcgc_get_haiku_cgc_random(){uint32_trandom_idx=0;uint32_tcount=0;uint32_t*id_arr=NULL;structhaiku*rand_haiku=NULL;intres=SUCCESS;if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();if(0==count){returnERR_LIST_EMPTY;}ALLOC(count*sizeof(uint32_t),&id_arr);res=cgc_populate_array_with_haiku_ids(id_arr,count);res=cgc_get_random_idx(&random_idx);if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}DEALLOC(id_arr,count*sizeof(uint32_t));if(SUCCESS==res){cgc_send_haiku(rand_haiku);}}else{res=ERR_LIST_NOT_EXIST;}returnres;}intcgc_get_haiku_count(){uint32_tcount=0;if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();SENDUI(count);returnSUCCESS;}else{returnERR_LIST_NOT_EXIST;}}intcgc_get_haiku_ids(){if(TRUE==cgc_haiku_list_exists()){uint32_tcount=(uint32_t)cgc_get_count();SENDUI(count);node_t*hl_ptr=cgc_haiku_list->head;while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}}else{returnERR_LIST_NOT_EXIST;}returnSUCCESS;}
Type=<class 'CParser.CParser.TranslationUnitContext'>
Child Count = 25
0 : <class 'CParser.CParser.ExternalDeclarationContext'> [list_t*cgc_haiku_list=NULL;]
1 : <class 'CParser.CParser.ExternalDeclarationContext'> [uint32_tnext_haiku_id=INIT_HAIKU_ID;]
2 : <class 'CParser.CParser.ExternalDeclarationContext'> [uint32_tcgc_recv_uint32(){uint32_tnum[1]={0};RECV(num,sizeof(uint32_t));returnnum[0];}]
3 : <class 'CParser.CParser.ExternalDeclarationContext'> [uint32_tcgc_recv_uint16(){uint16_tnum[1]={0};RECV(num,sizeof(uint16_t));returnnum[0];}]
4 : <class 'CParser.CParser.ExternalDeclarationContext'> [uint8_tcgc_haiku_list_exists(){if(NULL==cgc_haiku_list){returnFALSE;}else{returnTRUE;}}]
5 : <class 'CParser.CParser.ExternalDeclarationContext'> [uint8_tcgc_is_haiku_list_empty(){if(0==cgc_haiku_list->count){returnTRUE;}else{returnFALSE;}}]
6 : <class 'CParser.CParser.ExternalDeclarationContext'> [voidcgc_init_haiku_list(){if(FALSE==cgc_haiku_list_exists()){cgc_haiku_list=cgc_list_create();}}]
7 : <class 'CParser.CParser.ExternalDeclarationContext'> [intcgc_get_count(){if(TRUE==cgc_haiku_list_exists()){returncgc_haiku_list->count;}else{returnERR_LIST_NOT_EXIST;}}]
8 : <class 'CParser.CParser.ExternalDeclarationContext'> [uint32_tcgc_get_id_from_haiku(node_t*haiku){if(NULL!=haiku->data){structhaiku*h=(structhaiku*)haiku->data;returnh->id;}else{returnERR_EMPTY_NODE;}}]
9 : <class 'CParser.CParser.ExternalDeclarationContext'> [uint32_tcgc_get_next_haiku_id(){next_haiku_id++;returnnext_haiku_id-1;}]
10 : <class 'CParser.CParser.ExternalDeclarationContext'> [intcgc_get_random_idx(uint32_t*idx){uint32_trandom_idx=0;intret=0;ret=cgc_rand((char*)&random_idx,4);int32_tcount=cgc_get_count();if(ERR_LIST_NOT_EXIST==count){returncount;}elseif(0==count){returnERR_LIST_EMPTY;}elseif(0!=ret){returnERR_RAND_FAILED;}else{*idx=random_idx%(uint32_t)count;returnSUCCESS;}}]
11 : <class 'CParser.CParser.ExternalDeclarationContext'> [intcgc_populate_array_with_haiku_ids(uint32_tid_arr[],uint32_tcount){node_t*haiku_ptr=NULL;structhaiku*h=NULL;uint32_tid=0;if(TRUE==cgc_haiku_list_exists()){haiku_ptr=cgc_haiku_list->tail;}else{returnERR_LIST_NOT_EXIST;}if((0==count)||(NULL==haiku_ptr)){returnERR_LIST_EMPTY;}while((0<count)&&(NULL!=haiku_ptr)){h=(structhaiku*)haiku_ptr->data;id_arr[count-1]=h->id;count--;haiku_ptr=haiku_ptr->prev;}returnSUCCESS;}]
12 : <class 'CParser.CParser.ExternalDeclarationContext'> [intcgc_find_haiku_with_id(structhaiku**h,uint32_tid){node_t*haiku_ptr=NULL;structhaiku*tmp=NULL;intcount=0;bool_tfound=FALSE;count=cgc_get_count();if(0<count){haiku_ptr=cgc_haiku_list->head;}elseif(0==count){returnERR_LIST_EMPTY;}else{returnERR_LIST_NOT_EXIST;}while(NULL!=haiku_ptr){tmp=(structhaiku*)haiku_ptr->data;if(id==tmp->id){*h=tmp;found=TRUE;break;}haiku_ptr=haiku_ptr->next;}if(TRUE==found){returnSUCCESS;}else{returnERR_INVALID_ID;}}]
13 : <class 'CParser.CParser.ExternalDeclarationContext'> [voidcgc_send_haiku(structhaiku*h){uint32_tid=h->id;char*content=h->content;uint16_tlength=h->length;cgc_send((char*)&id,sizeof(uint32_t));cgc_send((char*)&length,sizeof(uint16_t));cgc_send(content,length);}]
14 : <class 'CParser.CParser.ExternalDeclarationContext'> [voidcgc_send_easter_egg_haiku(){uint32_tid=EGG_ID;char*content=EGG_HAIKU;uint16_tlength=cgc_strlen(content);cgc_send((char*)&id,sizeof(uint32_t));cgc_send((char*)&length,sizeof(uint16_t));cgc_send(content,length);}]
15 : <class 'CParser.CParser.ExternalDeclarationContext'> [voidcgc_send_haiku_id(uint32_tid){SENDUI(id);}]
16 : <class 'CParser.CParser.ExternalDeclarationContext'> [intcgc_add_haiku_to_list(structhaiku*h){node_t*nd=cgc_node_create((void*)h);returncgc_list_push(cgc_haiku_list,nd);}]
17 : <class 'CParser.CParser.ExternalDeclarationContext'> [intcgc_recv_haiku_line(char*haiku_content_ptr,int16_tbytes_remaining){chartemp_line_buf[MAX_HAIKU_LINE_LEN]={0};int16_tbytes_received=0;int16_tbytes_written=0;bytes_received=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN);if(0>bytes_received){returnERR_INVALID_HAIKU;}bytes_written=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf);returnbytes_written;}]
18 : <class 'CParser.CParser.ExternalDeclarationContext'> [structhaiku*cgc_recv_haiku(uint16_ttotal_bytes){structhaiku*h=NULL;char*haiku_content_ptr=NULL;int16_tbytes_remaining=0;int16_tbytes_written=0;bytes_remaining=(int16_t)total_bytes;ALLOC(sizeof(structhaiku)+total_bytes+1,&h);haiku_content_ptr=h->content;while(0!=bytes_remaining){bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);if(0>bytes_written){returnNULL;}haiku_content_ptr+=bytes_written;bytes_remaining-=bytes_written;}h->id=cgc_get_next_haiku_id();h->length=total_bytes;returnh;}]
19 : <class 'CParser.CParser.ExternalDeclarationContext'> [uint16_tcgc_recv_haiku_size(){returncgc_recv_uint16();}]
20 : <class 'CParser.CParser.ExternalDeclarationContext'> [intcgc_add_haiku(){intret=SUCCESS;uint16_ttotal_bytes=0;structhaiku*h=NULL;if(FALSE==cgc_haiku_list_exists()){cgc_init_haiku_list();}total_bytes=cgc_recv_haiku_size();if((0<total_bytes)&&(MAX_HAIKU_LEN>total_bytes)){h=cgc_recv_haiku(total_bytes);if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}}else{ret=ERR_INVALID_HAIKU_LEN;}returnret;}]
21 : <class 'CParser.CParser.ExternalDeclarationContext'> [intcgc_get_haiku_by_id(){structhaiku*h=NULL;uint32_tid=0;intres=0;if(TRUE==cgc_haiku_list_exists()){id=cgc_recv_uint32();if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}}else{res=ERR_LIST_NOT_EXIST;}returnres;}]
22 : <class 'CParser.CParser.ExternalDeclarationContext'> [intcgc_get_haiku_cgc_random(){uint32_trandom_idx=0;uint32_tcount=0;uint32_t*id_arr=NULL;structhaiku*rand_haiku=NULL;intres=SUCCESS;if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();if(0==count){returnERR_LIST_EMPTY;}ALLOC(count*sizeof(uint32_t),&id_arr);res=cgc_populate_array_with_haiku_ids(id_arr,count);res=cgc_get_random_idx(&random_idx);if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}DEALLOC(id_arr,count*sizeof(uint32_t));if(SUCCESS==res){cgc_send_haiku(rand_haiku);}}else{res=ERR_LIST_NOT_EXIST;}returnres;}]
23 : <class 'CParser.CParser.ExternalDeclarationContext'> [intcgc_get_haiku_count(){uint32_tcount=0;if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();SENDUI(count);returnSUCCESS;}else{returnERR_LIST_NOT_EXIST;}}]
24 : <class 'CParser.CParser.ExternalDeclarationContext'> [intcgc_get_haiku_ids(){if(TRUE==cgc_haiku_list_exists()){uint32_tcount=(uint32_t)cgc_get_count();SENDUI(count);node_t*hl_ptr=cgc_haiku_list->head;while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}}else{returnERR_LIST_NOT_EXIST;}returnSUCCESS;}]
-------
Text=<EOF>
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=list_t*cgc_haiku_list=NULL;
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [list_t*cgc_haiku_list=NULL;]
-------
Text=uint32_tnext_haiku_id=INIT_HAIKU_ID;
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [uint32_tnext_haiku_id=INIT_HAIKU_ID;]
-------
Text=uint32_tcgc_recv_uint32(){uint32_tnum[1]={0};RECV(num,sizeof(uint32_t));returnnum[0];}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [uint32_tcgc_recv_uint32(){uint32_tnum[1]={0};RECV(num,sizeof(uint32_t));returnnum[0];}]
-------
Text=uint32_tcgc_recv_uint16(){uint16_tnum[1]={0};RECV(num,sizeof(uint16_t));returnnum[0];}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [uint32_tcgc_recv_uint16(){uint16_tnum[1]={0};RECV(num,sizeof(uint16_t));returnnum[0];}]
-------
Text=uint8_tcgc_haiku_list_exists(){if(NULL==cgc_haiku_list){returnFALSE;}else{returnTRUE;}}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [uint8_tcgc_haiku_list_exists(){if(NULL==cgc_haiku_list){returnFALSE;}else{returnTRUE;}}]
-------
Text=uint8_tcgc_is_haiku_list_empty(){if(0==cgc_haiku_list->count){returnTRUE;}else{returnFALSE;}}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [uint8_tcgc_is_haiku_list_empty(){if(0==cgc_haiku_list->count){returnTRUE;}else{returnFALSE;}}]
-------
Text=voidcgc_init_haiku_list(){if(FALSE==cgc_haiku_list_exists()){cgc_haiku_list=cgc_list_create();}}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [voidcgc_init_haiku_list(){if(FALSE==cgc_haiku_list_exists()){cgc_haiku_list=cgc_list_create();}}]
-------
Text=intcgc_get_count(){if(TRUE==cgc_haiku_list_exists()){returncgc_haiku_list->count;}else{returnERR_LIST_NOT_EXIST;}}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [intcgc_get_count(){if(TRUE==cgc_haiku_list_exists()){returncgc_haiku_list->count;}else{returnERR_LIST_NOT_EXIST;}}]
-------
Text=uint32_tcgc_get_id_from_haiku(node_t*haiku){if(NULL!=haiku->data){structhaiku*h=(structhaiku*)haiku->data;returnh->id;}else{returnERR_EMPTY_NODE;}}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [uint32_tcgc_get_id_from_haiku(node_t*haiku){if(NULL!=haiku->data){structhaiku*h=(structhaiku*)haiku->data;returnh->id;}else{returnERR_EMPTY_NODE;}}]
-------
Text=uint32_tcgc_get_next_haiku_id(){next_haiku_id++;returnnext_haiku_id-1;}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [uint32_tcgc_get_next_haiku_id(){next_haiku_id++;returnnext_haiku_id-1;}]
-------
Text=intcgc_get_random_idx(uint32_t*idx){uint32_trandom_idx=0;intret=0;ret=cgc_rand((char*)&random_idx,4);int32_tcount=cgc_get_count();if(ERR_LIST_NOT_EXIST==count){returncount;}elseif(0==count){returnERR_LIST_EMPTY;}elseif(0!=ret){returnERR_RAND_FAILED;}else{*idx=random_idx%(uint32_t)count;returnSUCCESS;}}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [intcgc_get_random_idx(uint32_t*idx){uint32_trandom_idx=0;intret=0;ret=cgc_rand((char*)&random_idx,4);int32_tcount=cgc_get_count();if(ERR_LIST_NOT_EXIST==count){returncount;}elseif(0==count){returnERR_LIST_EMPTY;}elseif(0!=ret){returnERR_RAND_FAILED;}else{*idx=random_idx%(uint32_t)count;returnSUCCESS;}}]
-------
Text=intcgc_populate_array_with_haiku_ids(uint32_tid_arr[],uint32_tcount){node_t*haiku_ptr=NULL;structhaiku*h=NULL;uint32_tid=0;if(TRUE==cgc_haiku_list_exists()){haiku_ptr=cgc_haiku_list->tail;}else{returnERR_LIST_NOT_EXIST;}if((0==count)||(NULL==haiku_ptr)){returnERR_LIST_EMPTY;}while((0<count)&&(NULL!=haiku_ptr)){h=(structhaiku*)haiku_ptr->data;id_arr[count-1]=h->id;count--;haiku_ptr=haiku_ptr->prev;}returnSUCCESS;}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [intcgc_populate_array_with_haiku_ids(uint32_tid_arr[],uint32_tcount){node_t*haiku_ptr=NULL;structhaiku*h=NULL;uint32_tid=0;if(TRUE==cgc_haiku_list_exists()){haiku_ptr=cgc_haiku_list->tail;}else{returnERR_LIST_NOT_EXIST;}if((0==count)||(NULL==haiku_ptr)){returnERR_LIST_EMPTY;}while((0<count)&&(NULL!=haiku_ptr)){h=(structhaiku*)haiku_ptr->data;id_arr[count-1]=h->id;count--;haiku_ptr=haiku_ptr->prev;}returnSUCCESS;}]
-------
Text=intcgc_find_haiku_with_id(structhaiku**h,uint32_tid){node_t*haiku_ptr=NULL;structhaiku*tmp=NULL;intcount=0;bool_tfound=FALSE;count=cgc_get_count();if(0<count){haiku_ptr=cgc_haiku_list->head;}elseif(0==count){returnERR_LIST_EMPTY;}else{returnERR_LIST_NOT_EXIST;}while(NULL!=haiku_ptr){tmp=(structhaiku*)haiku_ptr->data;if(id==tmp->id){*h=tmp;found=TRUE;break;}haiku_ptr=haiku_ptr->next;}if(TRUE==found){returnSUCCESS;}else{returnERR_INVALID_ID;}}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [intcgc_find_haiku_with_id(structhaiku**h,uint32_tid){node_t*haiku_ptr=NULL;structhaiku*tmp=NULL;intcount=0;bool_tfound=FALSE;count=cgc_get_count();if(0<count){haiku_ptr=cgc_haiku_list->head;}elseif(0==count){returnERR_LIST_EMPTY;}else{returnERR_LIST_NOT_EXIST;}while(NULL!=haiku_ptr){tmp=(structhaiku*)haiku_ptr->data;if(id==tmp->id){*h=tmp;found=TRUE;break;}haiku_ptr=haiku_ptr->next;}if(TRUE==found){returnSUCCESS;}else{returnERR_INVALID_ID;}}]
-------
Text=voidcgc_send_haiku(structhaiku*h){uint32_tid=h->id;char*content=h->content;uint16_tlength=h->length;cgc_send((char*)&id,sizeof(uint32_t));cgc_send((char*)&length,sizeof(uint16_t));cgc_send(content,length);}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [voidcgc_send_haiku(structhaiku*h){uint32_tid=h->id;char*content=h->content;uint16_tlength=h->length;cgc_send((char*)&id,sizeof(uint32_t));cgc_send((char*)&length,sizeof(uint16_t));cgc_send(content,length);}]
-------
Text=voidcgc_send_easter_egg_haiku(){uint32_tid=EGG_ID;char*content=EGG_HAIKU;uint16_tlength=cgc_strlen(content);cgc_send((char*)&id,sizeof(uint32_t));cgc_send((char*)&length,sizeof(uint16_t));cgc_send(content,length);}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [voidcgc_send_easter_egg_haiku(){uint32_tid=EGG_ID;char*content=EGG_HAIKU;uint16_tlength=cgc_strlen(content);cgc_send((char*)&id,sizeof(uint32_t));cgc_send((char*)&length,sizeof(uint16_t));cgc_send(content,length);}]
-------
Text=voidcgc_send_haiku_id(uint32_tid){SENDUI(id);}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [voidcgc_send_haiku_id(uint32_tid){SENDUI(id);}]
-------
Text=intcgc_add_haiku_to_list(structhaiku*h){node_t*nd=cgc_node_create((void*)h);returncgc_list_push(cgc_haiku_list,nd);}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [intcgc_add_haiku_to_list(structhaiku*h){node_t*nd=cgc_node_create((void*)h);returncgc_list_push(cgc_haiku_list,nd);}]
-------
Text=intcgc_recv_haiku_line(char*haiku_content_ptr,int16_tbytes_remaining){chartemp_line_buf[MAX_HAIKU_LINE_LEN]={0};int16_tbytes_received=0;int16_tbytes_written=0;bytes_received=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN);if(0>bytes_received){returnERR_INVALID_HAIKU;}bytes_written=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf);returnbytes_written;}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [intcgc_recv_haiku_line(char*haiku_content_ptr,int16_tbytes_remaining){chartemp_line_buf[MAX_HAIKU_LINE_LEN]={0};int16_tbytes_received=0;int16_tbytes_written=0;bytes_received=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN);if(0>bytes_received){returnERR_INVALID_HAIKU;}bytes_written=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf);returnbytes_written;}]
-------
Text=structhaiku*cgc_recv_haiku(uint16_ttotal_bytes){structhaiku*h=NULL;char*haiku_content_ptr=NULL;int16_tbytes_remaining=0;int16_tbytes_written=0;bytes_remaining=(int16_t)total_bytes;ALLOC(sizeof(structhaiku)+total_bytes+1,&h);haiku_content_ptr=h->content;while(0!=bytes_remaining){bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);if(0>bytes_written){returnNULL;}haiku_content_ptr+=bytes_written;bytes_remaining-=bytes_written;}h->id=cgc_get_next_haiku_id();h->length=total_bytes;returnh;}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [structhaiku*cgc_recv_haiku(uint16_ttotal_bytes){structhaiku*h=NULL;char*haiku_content_ptr=NULL;int16_tbytes_remaining=0;int16_tbytes_written=0;bytes_remaining=(int16_t)total_bytes;ALLOC(sizeof(structhaiku)+total_bytes+1,&h);haiku_content_ptr=h->content;while(0!=bytes_remaining){bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);if(0>bytes_written){returnNULL;}haiku_content_ptr+=bytes_written;bytes_remaining-=bytes_written;}h->id=cgc_get_next_haiku_id();h->length=total_bytes;returnh;}]
-------
Text=uint16_tcgc_recv_haiku_size(){returncgc_recv_uint16();}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [uint16_tcgc_recv_haiku_size(){returncgc_recv_uint16();}]
-------
Text=intcgc_add_haiku(){intret=SUCCESS;uint16_ttotal_bytes=0;structhaiku*h=NULL;if(FALSE==cgc_haiku_list_exists()){cgc_init_haiku_list();}total_bytes=cgc_recv_haiku_size();if((0<total_bytes)&&(MAX_HAIKU_LEN>total_bytes)){h=cgc_recv_haiku(total_bytes);if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}}else{ret=ERR_INVALID_HAIKU_LEN;}returnret;}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [intcgc_add_haiku(){intret=SUCCESS;uint16_ttotal_bytes=0;structhaiku*h=NULL;if(FALSE==cgc_haiku_list_exists()){cgc_init_haiku_list();}total_bytes=cgc_recv_haiku_size();if((0<total_bytes)&&(MAX_HAIKU_LEN>total_bytes)){h=cgc_recv_haiku(total_bytes);if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}}else{ret=ERR_INVALID_HAIKU_LEN;}returnret;}]
-------
Text=intcgc_get_haiku_by_id(){structhaiku*h=NULL;uint32_tid=0;intres=0;if(TRUE==cgc_haiku_list_exists()){id=cgc_recv_uint32();if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}}else{res=ERR_LIST_NOT_EXIST;}returnres;}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [intcgc_get_haiku_by_id(){structhaiku*h=NULL;uint32_tid=0;intres=0;if(TRUE==cgc_haiku_list_exists()){id=cgc_recv_uint32();if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}}else{res=ERR_LIST_NOT_EXIST;}returnres;}]
-------
Text=intcgc_get_haiku_cgc_random(){uint32_trandom_idx=0;uint32_tcount=0;uint32_t*id_arr=NULL;structhaiku*rand_haiku=NULL;intres=SUCCESS;if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();if(0==count){returnERR_LIST_EMPTY;}ALLOC(count*sizeof(uint32_t),&id_arr);res=cgc_populate_array_with_haiku_ids(id_arr,count);res=cgc_get_random_idx(&random_idx);if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}DEALLOC(id_arr,count*sizeof(uint32_t));if(SUCCESS==res){cgc_send_haiku(rand_haiku);}}else{res=ERR_LIST_NOT_EXIST;}returnres;}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [intcgc_get_haiku_cgc_random(){uint32_trandom_idx=0;uint32_tcount=0;uint32_t*id_arr=NULL;structhaiku*rand_haiku=NULL;intres=SUCCESS;if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();if(0==count){returnERR_LIST_EMPTY;}ALLOC(count*sizeof(uint32_t),&id_arr);res=cgc_populate_array_with_haiku_ids(id_arr,count);res=cgc_get_random_idx(&random_idx);if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}DEALLOC(id_arr,count*sizeof(uint32_t));if(SUCCESS==res){cgc_send_haiku(rand_haiku);}}else{res=ERR_LIST_NOT_EXIST;}returnres;}]
-------
Text=intcgc_get_haiku_count(){uint32_tcount=0;if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();SENDUI(count);returnSUCCESS;}else{returnERR_LIST_NOT_EXIST;}}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [intcgc_get_haiku_count(){uint32_tcount=0;if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();SENDUI(count);returnSUCCESS;}else{returnERR_LIST_NOT_EXIST;}}]
-------
Text=intcgc_get_haiku_ids(){if(TRUE==cgc_haiku_list_exists()){uint32_tcount=(uint32_t)cgc_get_count();SENDUI(count);node_t*hl_ptr=cgc_haiku_list->head;while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}}else{returnERR_LIST_NOT_EXIST;}returnSUCCESS;}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [intcgc_get_haiku_ids(){if(TRUE==cgc_haiku_list_exists()){uint32_tcount=(uint32_t)cgc_get_count();SENDUI(count);node_t*hl_ptr=cgc_haiku_list->head;while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}}else{returnERR_LIST_NOT_EXIST;}returnSUCCESS;}]
-------
Text=list_t*cgc_haiku_list=NULL;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [list_t*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [cgc_haiku_list=NULL]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=uint32_tnext_haiku_id=INIT_HAIKU_ID;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [uint32_t]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [next_haiku_id=INIT_HAIKU_ID]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=uint32_tcgc_recv_uint32(){uint32_tnum[1]={0};RECV(num,sizeof(uint32_t));returnnum[0];}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [uint32_t]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_recv_uint32()]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{uint32_tnum[1]={0};RECV(num,sizeof(uint32_t));returnnum[0];}]
-------
Text=uint32_tcgc_recv_uint16(){uint16_tnum[1]={0};RECV(num,sizeof(uint16_t));returnnum[0];}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [uint32_t]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_recv_uint16()]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{uint16_tnum[1]={0};RECV(num,sizeof(uint16_t));returnnum[0];}]
-------
Text=uint8_tcgc_haiku_list_exists(){if(NULL==cgc_haiku_list){returnFALSE;}else{returnTRUE;}}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [uint8_t]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_haiku_list_exists()]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{if(NULL==cgc_haiku_list){returnFALSE;}else{returnTRUE;}}]
-------
Text=uint8_tcgc_is_haiku_list_empty(){if(0==cgc_haiku_list->count){returnTRUE;}else{returnFALSE;}}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [uint8_t]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_is_haiku_list_empty()]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{if(0==cgc_haiku_list->count){returnTRUE;}else{returnFALSE;}}]
-------
Text=voidcgc_init_haiku_list(){if(FALSE==cgc_haiku_list_exists()){cgc_haiku_list=cgc_list_create();}}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [void]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_init_haiku_list()]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{if(FALSE==cgc_haiku_list_exists()){cgc_haiku_list=cgc_list_create();}}]
-------
Text=intcgc_get_count(){if(TRUE==cgc_haiku_list_exists()){returncgc_haiku_list->count;}else{returnERR_LIST_NOT_EXIST;}}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [int]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_get_count()]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{if(TRUE==cgc_haiku_list_exists()){returncgc_haiku_list->count;}else{returnERR_LIST_NOT_EXIST;}}]
-------
Text=uint32_tcgc_get_id_from_haiku(node_t*haiku){if(NULL!=haiku->data){structhaiku*h=(structhaiku*)haiku->data;returnh->id;}else{returnERR_EMPTY_NODE;}}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [uint32_t]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_get_id_from_haiku(node_t*haiku)]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{if(NULL!=haiku->data){structhaiku*h=(structhaiku*)haiku->data;returnh->id;}else{returnERR_EMPTY_NODE;}}]
-------
Text=uint32_tcgc_get_next_haiku_id(){next_haiku_id++;returnnext_haiku_id-1;}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [uint32_t]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_get_next_haiku_id()]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{next_haiku_id++;returnnext_haiku_id-1;}]
-------
Text=intcgc_get_random_idx(uint32_t*idx){uint32_trandom_idx=0;intret=0;ret=cgc_rand((char*)&random_idx,4);int32_tcount=cgc_get_count();if(ERR_LIST_NOT_EXIST==count){returncount;}elseif(0==count){returnERR_LIST_EMPTY;}elseif(0!=ret){returnERR_RAND_FAILED;}else{*idx=random_idx%(uint32_t)count;returnSUCCESS;}}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [int]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_get_random_idx(uint32_t*idx)]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{uint32_trandom_idx=0;intret=0;ret=cgc_rand((char*)&random_idx,4);int32_tcount=cgc_get_count();if(ERR_LIST_NOT_EXIST==count){returncount;}elseif(0==count){returnERR_LIST_EMPTY;}elseif(0!=ret){returnERR_RAND_FAILED;}else{*idx=random_idx%(uint32_t)count;returnSUCCESS;}}]
-------
Text=intcgc_populate_array_with_haiku_ids(uint32_tid_arr[],uint32_tcount){node_t*haiku_ptr=NULL;structhaiku*h=NULL;uint32_tid=0;if(TRUE==cgc_haiku_list_exists()){haiku_ptr=cgc_haiku_list->tail;}else{returnERR_LIST_NOT_EXIST;}if((0==count)||(NULL==haiku_ptr)){returnERR_LIST_EMPTY;}while((0<count)&&(NULL!=haiku_ptr)){h=(structhaiku*)haiku_ptr->data;id_arr[count-1]=h->id;count--;haiku_ptr=haiku_ptr->prev;}returnSUCCESS;}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [int]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_populate_array_with_haiku_ids(uint32_tid_arr[],uint32_tcount)]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{node_t*haiku_ptr=NULL;structhaiku*h=NULL;uint32_tid=0;if(TRUE==cgc_haiku_list_exists()){haiku_ptr=cgc_haiku_list->tail;}else{returnERR_LIST_NOT_EXIST;}if((0==count)||(NULL==haiku_ptr)){returnERR_LIST_EMPTY;}while((0<count)&&(NULL!=haiku_ptr)){h=(structhaiku*)haiku_ptr->data;id_arr[count-1]=h->id;count--;haiku_ptr=haiku_ptr->prev;}returnSUCCESS;}]
-------
Text=intcgc_find_haiku_with_id(structhaiku**h,uint32_tid){node_t*haiku_ptr=NULL;structhaiku*tmp=NULL;intcount=0;bool_tfound=FALSE;count=cgc_get_count();if(0<count){haiku_ptr=cgc_haiku_list->head;}elseif(0==count){returnERR_LIST_EMPTY;}else{returnERR_LIST_NOT_EXIST;}while(NULL!=haiku_ptr){tmp=(structhaiku*)haiku_ptr->data;if(id==tmp->id){*h=tmp;found=TRUE;break;}haiku_ptr=haiku_ptr->next;}if(TRUE==found){returnSUCCESS;}else{returnERR_INVALID_ID;}}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [int]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_find_haiku_with_id(structhaiku**h,uint32_tid)]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{node_t*haiku_ptr=NULL;structhaiku*tmp=NULL;intcount=0;bool_tfound=FALSE;count=cgc_get_count();if(0<count){haiku_ptr=cgc_haiku_list->head;}elseif(0==count){returnERR_LIST_EMPTY;}else{returnERR_LIST_NOT_EXIST;}while(NULL!=haiku_ptr){tmp=(structhaiku*)haiku_ptr->data;if(id==tmp->id){*h=tmp;found=TRUE;break;}haiku_ptr=haiku_ptr->next;}if(TRUE==found){returnSUCCESS;}else{returnERR_INVALID_ID;}}]
-------
Text=voidcgc_send_haiku(structhaiku*h){uint32_tid=h->id;char*content=h->content;uint16_tlength=h->length;cgc_send((char*)&id,sizeof(uint32_t));cgc_send((char*)&length,sizeof(uint16_t));cgc_send(content,length);}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [void]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_send_haiku(structhaiku*h)]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{uint32_tid=h->id;char*content=h->content;uint16_tlength=h->length;cgc_send((char*)&id,sizeof(uint32_t));cgc_send((char*)&length,sizeof(uint16_t));cgc_send(content,length);}]
-------
Text=voidcgc_send_easter_egg_haiku(){uint32_tid=EGG_ID;char*content=EGG_HAIKU;uint16_tlength=cgc_strlen(content);cgc_send((char*)&id,sizeof(uint32_t));cgc_send((char*)&length,sizeof(uint16_t));cgc_send(content,length);}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [void]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_send_easter_egg_haiku()]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{uint32_tid=EGG_ID;char*content=EGG_HAIKU;uint16_tlength=cgc_strlen(content);cgc_send((char*)&id,sizeof(uint32_t));cgc_send((char*)&length,sizeof(uint16_t));cgc_send(content,length);}]
-------
Text=voidcgc_send_haiku_id(uint32_tid){SENDUI(id);}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [void]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_send_haiku_id(uint32_tid)]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{SENDUI(id);}]
-------
Text=intcgc_add_haiku_to_list(structhaiku*h){node_t*nd=cgc_node_create((void*)h);returncgc_list_push(cgc_haiku_list,nd);}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [int]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_add_haiku_to_list(structhaiku*h)]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{node_t*nd=cgc_node_create((void*)h);returncgc_list_push(cgc_haiku_list,nd);}]
-------
Text=intcgc_recv_haiku_line(char*haiku_content_ptr,int16_tbytes_remaining){chartemp_line_buf[MAX_HAIKU_LINE_LEN]={0};int16_tbytes_received=0;int16_tbytes_written=0;bytes_received=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN);if(0>bytes_received){returnERR_INVALID_HAIKU;}bytes_written=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf);returnbytes_written;}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [int]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_recv_haiku_line(char*haiku_content_ptr,int16_tbytes_remaining)]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{chartemp_line_buf[MAX_HAIKU_LINE_LEN]={0};int16_tbytes_received=0;int16_tbytes_written=0;bytes_received=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN);if(0>bytes_received){returnERR_INVALID_HAIKU;}bytes_written=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf);returnbytes_written;}]
-------
Text=structhaiku*cgc_recv_haiku(uint16_ttotal_bytes){structhaiku*h=NULL;char*haiku_content_ptr=NULL;int16_tbytes_remaining=0;int16_tbytes_written=0;bytes_remaining=(int16_t)total_bytes;ALLOC(sizeof(structhaiku)+total_bytes+1,&h);haiku_content_ptr=h->content;while(0!=bytes_remaining){bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);if(0>bytes_written){returnNULL;}haiku_content_ptr+=bytes_written;bytes_remaining-=bytes_written;}h->id=cgc_get_next_haiku_id();h->length=total_bytes;returnh;}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [structhaiku*]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_recv_haiku(uint16_ttotal_bytes)]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{structhaiku*h=NULL;char*haiku_content_ptr=NULL;int16_tbytes_remaining=0;int16_tbytes_written=0;bytes_remaining=(int16_t)total_bytes;ALLOC(sizeof(structhaiku)+total_bytes+1,&h);haiku_content_ptr=h->content;while(0!=bytes_remaining){bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);if(0>bytes_written){returnNULL;}haiku_content_ptr+=bytes_written;bytes_remaining-=bytes_written;}h->id=cgc_get_next_haiku_id();h->length=total_bytes;returnh;}]
-------
Text=uint16_tcgc_recv_haiku_size(){returncgc_recv_uint16();}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [uint16_t]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_recv_haiku_size()]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{returncgc_recv_uint16();}]
-------
Text=intcgc_add_haiku(){intret=SUCCESS;uint16_ttotal_bytes=0;structhaiku*h=NULL;if(FALSE==cgc_haiku_list_exists()){cgc_init_haiku_list();}total_bytes=cgc_recv_haiku_size();if((0<total_bytes)&&(MAX_HAIKU_LEN>total_bytes)){h=cgc_recv_haiku(total_bytes);if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}}else{ret=ERR_INVALID_HAIKU_LEN;}returnret;}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [int]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_add_haiku()]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{intret=SUCCESS;uint16_ttotal_bytes=0;structhaiku*h=NULL;if(FALSE==cgc_haiku_list_exists()){cgc_init_haiku_list();}total_bytes=cgc_recv_haiku_size();if((0<total_bytes)&&(MAX_HAIKU_LEN>total_bytes)){h=cgc_recv_haiku(total_bytes);if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}}else{ret=ERR_INVALID_HAIKU_LEN;}returnret;}]
-------
Text=intcgc_get_haiku_by_id(){structhaiku*h=NULL;uint32_tid=0;intres=0;if(TRUE==cgc_haiku_list_exists()){id=cgc_recv_uint32();if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}}else{res=ERR_LIST_NOT_EXIST;}returnres;}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [int]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_get_haiku_by_id()]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{structhaiku*h=NULL;uint32_tid=0;intres=0;if(TRUE==cgc_haiku_list_exists()){id=cgc_recv_uint32();if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}}else{res=ERR_LIST_NOT_EXIST;}returnres;}]
-------
Text=intcgc_get_haiku_cgc_random(){uint32_trandom_idx=0;uint32_tcount=0;uint32_t*id_arr=NULL;structhaiku*rand_haiku=NULL;intres=SUCCESS;if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();if(0==count){returnERR_LIST_EMPTY;}ALLOC(count*sizeof(uint32_t),&id_arr);res=cgc_populate_array_with_haiku_ids(id_arr,count);res=cgc_get_random_idx(&random_idx);if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}DEALLOC(id_arr,count*sizeof(uint32_t));if(SUCCESS==res){cgc_send_haiku(rand_haiku);}}else{res=ERR_LIST_NOT_EXIST;}returnres;}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [int]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_get_haiku_cgc_random()]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{uint32_trandom_idx=0;uint32_tcount=0;uint32_t*id_arr=NULL;structhaiku*rand_haiku=NULL;intres=SUCCESS;if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();if(0==count){returnERR_LIST_EMPTY;}ALLOC(count*sizeof(uint32_t),&id_arr);res=cgc_populate_array_with_haiku_ids(id_arr,count);res=cgc_get_random_idx(&random_idx);if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}DEALLOC(id_arr,count*sizeof(uint32_t));if(SUCCESS==res){cgc_send_haiku(rand_haiku);}}else{res=ERR_LIST_NOT_EXIST;}returnres;}]
-------
Text=intcgc_get_haiku_count(){uint32_tcount=0;if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();SENDUI(count);returnSUCCESS;}else{returnERR_LIST_NOT_EXIST;}}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [int]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_get_haiku_count()]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{uint32_tcount=0;if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();SENDUI(count);returnSUCCESS;}else{returnERR_LIST_NOT_EXIST;}}]
-------
Text=intcgc_get_haiku_ids(){if(TRUE==cgc_haiku_list_exists()){uint32_tcount=(uint32_t)cgc_get_count();SENDUI(count);node_t*hl_ptr=cgc_haiku_list->head;while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}}else{returnERR_LIST_NOT_EXIST;}returnSUCCESS;}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [int]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_get_haiku_ids()]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{if(TRUE==cgc_haiku_list_exists()){uint32_tcount=(uint32_t)cgc_get_count();SENDUI(count);node_t*hl_ptr=cgc_haiku_list->head;while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}}else{returnERR_LIST_NOT_EXIST;}returnSUCCESS;}]
-------
Text=list_t*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [list_t*]
-------
Text=cgc_haiku_list=NULL
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [cgc_haiku_list=NULL]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint32_t]
-------
Text=next_haiku_id=INIT_HAIKU_ID
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [next_haiku_id=INIT_HAIKU_ID]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint32_t]
-------
Text=cgc_recv_uint32()
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_recv_uint32()]
-------
Text={uint32_tnum[1]={0};RECV(num,sizeof(uint32_t));returnnum[0];}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [uint32_tnum[1]={0};RECV(num,sizeof(uint32_t));returnnum[0];]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=uint32_t
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint32_t]
-------
Text=cgc_recv_uint16()
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_recv_uint16()]
-------
Text={uint16_tnum[1]={0};RECV(num,sizeof(uint16_t));returnnum[0];}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [uint16_tnum[1]={0};RECV(num,sizeof(uint16_t));returnnum[0];]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=uint8_t
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint8_t]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_haiku_list_exists()]
-------
Text={if(NULL==cgc_haiku_list){returnFALSE;}else{returnTRUE;}}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [if(NULL==cgc_haiku_list){returnFALSE;}else{returnTRUE;}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=uint8_t
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint8_t]
-------
Text=cgc_is_haiku_list_empty()
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_is_haiku_list_empty()]
-------
Text={if(0==cgc_haiku_list->count){returnTRUE;}else{returnFALSE;}}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [if(0==cgc_haiku_list->count){returnTRUE;}else{returnFALSE;}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=void
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [void]
-------
Text=cgc_init_haiku_list()
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_init_haiku_list()]
-------
Text={if(FALSE==cgc_haiku_list_exists()){cgc_haiku_list=cgc_list_create();}}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [if(FALSE==cgc_haiku_list_exists()){cgc_haiku_list=cgc_list_create();}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=int
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_get_count()]
-------
Text={if(TRUE==cgc_haiku_list_exists()){returncgc_haiku_list->count;}else{returnERR_LIST_NOT_EXIST;}}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [if(TRUE==cgc_haiku_list_exists()){returncgc_haiku_list->count;}else{returnERR_LIST_NOT_EXIST;}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=uint32_t
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint32_t]
-------
Text=cgc_get_id_from_haiku(node_t*haiku)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_get_id_from_haiku(node_t*haiku)]
-------
Text={if(NULL!=haiku->data){structhaiku*h=(structhaiku*)haiku->data;returnh->id;}else{returnERR_EMPTY_NODE;}}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [if(NULL!=haiku->data){structhaiku*h=(structhaiku*)haiku->data;returnh->id;}else{returnERR_EMPTY_NODE;}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=uint32_t
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint32_t]
-------
Text=cgc_get_next_haiku_id()
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_get_next_haiku_id()]
-------
Text={next_haiku_id++;returnnext_haiku_id-1;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [next_haiku_id++;returnnext_haiku_id-1;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=int
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=cgc_get_random_idx(uint32_t*idx)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_get_random_idx(uint32_t*idx)]
-------
Text={uint32_trandom_idx=0;intret=0;ret=cgc_rand((char*)&random_idx,4);int32_tcount=cgc_get_count();if(ERR_LIST_NOT_EXIST==count){returncount;}elseif(0==count){returnERR_LIST_EMPTY;}elseif(0!=ret){returnERR_RAND_FAILED;}else{*idx=random_idx%(uint32_t)count;returnSUCCESS;}}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [uint32_trandom_idx=0;intret=0;ret=cgc_rand((char*)&random_idx,4);int32_tcount=cgc_get_count();if(ERR_LIST_NOT_EXIST==count){returncount;}elseif(0==count){returnERR_LIST_EMPTY;}elseif(0!=ret){returnERR_RAND_FAILED;}else{*idx=random_idx%(uint32_t)count;returnSUCCESS;}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=int
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=cgc_populate_array_with_haiku_ids(uint32_tid_arr[],uint32_tcount)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_populate_array_with_haiku_ids(uint32_tid_arr[],uint32_tcount)]
-------
Text={node_t*haiku_ptr=NULL;structhaiku*h=NULL;uint32_tid=0;if(TRUE==cgc_haiku_list_exists()){haiku_ptr=cgc_haiku_list->tail;}else{returnERR_LIST_NOT_EXIST;}if((0==count)||(NULL==haiku_ptr)){returnERR_LIST_EMPTY;}while((0<count)&&(NULL!=haiku_ptr)){h=(structhaiku*)haiku_ptr->data;id_arr[count-1]=h->id;count--;haiku_ptr=haiku_ptr->prev;}returnSUCCESS;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [node_t*haiku_ptr=NULL;structhaiku*h=NULL;uint32_tid=0;if(TRUE==cgc_haiku_list_exists()){haiku_ptr=cgc_haiku_list->tail;}else{returnERR_LIST_NOT_EXIST;}if((0==count)||(NULL==haiku_ptr)){returnERR_LIST_EMPTY;}while((0<count)&&(NULL!=haiku_ptr)){h=(structhaiku*)haiku_ptr->data;id_arr[count-1]=h->id;count--;haiku_ptr=haiku_ptr->prev;}returnSUCCESS;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=int
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=cgc_find_haiku_with_id(structhaiku**h,uint32_tid)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_find_haiku_with_id(structhaiku**h,uint32_tid)]
-------
Text={node_t*haiku_ptr=NULL;structhaiku*tmp=NULL;intcount=0;bool_tfound=FALSE;count=cgc_get_count();if(0<count){haiku_ptr=cgc_haiku_list->head;}elseif(0==count){returnERR_LIST_EMPTY;}else{returnERR_LIST_NOT_EXIST;}while(NULL!=haiku_ptr){tmp=(structhaiku*)haiku_ptr->data;if(id==tmp->id){*h=tmp;found=TRUE;break;}haiku_ptr=haiku_ptr->next;}if(TRUE==found){returnSUCCESS;}else{returnERR_INVALID_ID;}}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [node_t*haiku_ptr=NULL;structhaiku*tmp=NULL;intcount=0;bool_tfound=FALSE;count=cgc_get_count();if(0<count){haiku_ptr=cgc_haiku_list->head;}elseif(0==count){returnERR_LIST_EMPTY;}else{returnERR_LIST_NOT_EXIST;}while(NULL!=haiku_ptr){tmp=(structhaiku*)haiku_ptr->data;if(id==tmp->id){*h=tmp;found=TRUE;break;}haiku_ptr=haiku_ptr->next;}if(TRUE==found){returnSUCCESS;}else{returnERR_INVALID_ID;}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=void
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [void]
-------
Text=cgc_send_haiku(structhaiku*h)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_send_haiku(structhaiku*h)]
-------
Text={uint32_tid=h->id;char*content=h->content;uint16_tlength=h->length;cgc_send((char*)&id,sizeof(uint32_t));cgc_send((char*)&length,sizeof(uint16_t));cgc_send(content,length);}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [uint32_tid=h->id;char*content=h->content;uint16_tlength=h->length;cgc_send((char*)&id,sizeof(uint32_t));cgc_send((char*)&length,sizeof(uint16_t));cgc_send(content,length);]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=void
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [void]
-------
Text=cgc_send_easter_egg_haiku()
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_send_easter_egg_haiku()]
-------
Text={uint32_tid=EGG_ID;char*content=EGG_HAIKU;uint16_tlength=cgc_strlen(content);cgc_send((char*)&id,sizeof(uint32_t));cgc_send((char*)&length,sizeof(uint16_t));cgc_send(content,length);}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [uint32_tid=EGG_ID;char*content=EGG_HAIKU;uint16_tlength=cgc_strlen(content);cgc_send((char*)&id,sizeof(uint32_t));cgc_send((char*)&length,sizeof(uint16_t));cgc_send(content,length);]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=void
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [void]
-------
Text=cgc_send_haiku_id(uint32_tid)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_send_haiku_id(uint32_tid)]
-------
Text={SENDUI(id);}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [SENDUI(id);]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=int
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=cgc_add_haiku_to_list(structhaiku*h)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_add_haiku_to_list(structhaiku*h)]
-------
Text={node_t*nd=cgc_node_create((void*)h);returncgc_list_push(cgc_haiku_list,nd);}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [node_t*nd=cgc_node_create((void*)h);returncgc_list_push(cgc_haiku_list,nd);]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=int
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=cgc_recv_haiku_line(char*haiku_content_ptr,int16_tbytes_remaining)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_recv_haiku_line(char*haiku_content_ptr,int16_tbytes_remaining)]
-------
Text={chartemp_line_buf[MAX_HAIKU_LINE_LEN]={0};int16_tbytes_received=0;int16_tbytes_written=0;bytes_received=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN);if(0>bytes_received){returnERR_INVALID_HAIKU;}bytes_written=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf);returnbytes_written;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [chartemp_line_buf[MAX_HAIKU_LINE_LEN]={0};int16_tbytes_received=0;int16_tbytes_written=0;bytes_received=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN);if(0>bytes_received){returnERR_INVALID_HAIKU;}bytes_written=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf);returnbytes_written;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [structhaiku*]
-------
Text=cgc_recv_haiku(uint16_ttotal_bytes)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_recv_haiku(uint16_ttotal_bytes)]
-------
Text={structhaiku*h=NULL;char*haiku_content_ptr=NULL;int16_tbytes_remaining=0;int16_tbytes_written=0;bytes_remaining=(int16_t)total_bytes;ALLOC(sizeof(structhaiku)+total_bytes+1,&h);haiku_content_ptr=h->content;while(0!=bytes_remaining){bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);if(0>bytes_written){returnNULL;}haiku_content_ptr+=bytes_written;bytes_remaining-=bytes_written;}h->id=cgc_get_next_haiku_id();h->length=total_bytes;returnh;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [structhaiku*h=NULL;char*haiku_content_ptr=NULL;int16_tbytes_remaining=0;int16_tbytes_written=0;bytes_remaining=(int16_t)total_bytes;ALLOC(sizeof(structhaiku)+total_bytes+1,&h);haiku_content_ptr=h->content;while(0!=bytes_remaining){bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);if(0>bytes_written){returnNULL;}haiku_content_ptr+=bytes_written;bytes_remaining-=bytes_written;}h->id=cgc_get_next_haiku_id();h->length=total_bytes;returnh;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=uint16_t
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint16_t]
-------
Text=cgc_recv_haiku_size()
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_recv_haiku_size()]
-------
Text={returncgc_recv_uint16();}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [returncgc_recv_uint16();]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=int
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=cgc_add_haiku()
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_add_haiku()]
-------
Text={intret=SUCCESS;uint16_ttotal_bytes=0;structhaiku*h=NULL;if(FALSE==cgc_haiku_list_exists()){cgc_init_haiku_list();}total_bytes=cgc_recv_haiku_size();if((0<total_bytes)&&(MAX_HAIKU_LEN>total_bytes)){h=cgc_recv_haiku(total_bytes);if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}}else{ret=ERR_INVALID_HAIKU_LEN;}returnret;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [intret=SUCCESS;uint16_ttotal_bytes=0;structhaiku*h=NULL;if(FALSE==cgc_haiku_list_exists()){cgc_init_haiku_list();}total_bytes=cgc_recv_haiku_size();if((0<total_bytes)&&(MAX_HAIKU_LEN>total_bytes)){h=cgc_recv_haiku(total_bytes);if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}}else{ret=ERR_INVALID_HAIKU_LEN;}returnret;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=int
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=cgc_get_haiku_by_id()
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_get_haiku_by_id()]
-------
Text={structhaiku*h=NULL;uint32_tid=0;intres=0;if(TRUE==cgc_haiku_list_exists()){id=cgc_recv_uint32();if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}}else{res=ERR_LIST_NOT_EXIST;}returnres;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [structhaiku*h=NULL;uint32_tid=0;intres=0;if(TRUE==cgc_haiku_list_exists()){id=cgc_recv_uint32();if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}}else{res=ERR_LIST_NOT_EXIST;}returnres;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=int
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=cgc_get_haiku_cgc_random()
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_get_haiku_cgc_random()]
-------
Text={uint32_trandom_idx=0;uint32_tcount=0;uint32_t*id_arr=NULL;structhaiku*rand_haiku=NULL;intres=SUCCESS;if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();if(0==count){returnERR_LIST_EMPTY;}ALLOC(count*sizeof(uint32_t),&id_arr);res=cgc_populate_array_with_haiku_ids(id_arr,count);res=cgc_get_random_idx(&random_idx);if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}DEALLOC(id_arr,count*sizeof(uint32_t));if(SUCCESS==res){cgc_send_haiku(rand_haiku);}}else{res=ERR_LIST_NOT_EXIST;}returnres;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [uint32_trandom_idx=0;uint32_tcount=0;uint32_t*id_arr=NULL;structhaiku*rand_haiku=NULL;intres=SUCCESS;if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();if(0==count){returnERR_LIST_EMPTY;}ALLOC(count*sizeof(uint32_t),&id_arr);res=cgc_populate_array_with_haiku_ids(id_arr,count);res=cgc_get_random_idx(&random_idx);if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}DEALLOC(id_arr,count*sizeof(uint32_t));if(SUCCESS==res){cgc_send_haiku(rand_haiku);}}else{res=ERR_LIST_NOT_EXIST;}returnres;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=int
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=cgc_get_haiku_count()
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_get_haiku_count()]
-------
Text={uint32_tcount=0;if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();SENDUI(count);returnSUCCESS;}else{returnERR_LIST_NOT_EXIST;}}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [uint32_tcount=0;if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();SENDUI(count);returnSUCCESS;}else{returnERR_LIST_NOT_EXIST;}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=int
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=cgc_get_haiku_ids()
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_get_haiku_ids()]
-------
Text={if(TRUE==cgc_haiku_list_exists()){uint32_tcount=(uint32_t)cgc_get_count();SENDUI(count);node_t*hl_ptr=cgc_haiku_list->head;while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}}else{returnERR_LIST_NOT_EXIST;}returnSUCCESS;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [if(TRUE==cgc_haiku_list_exists()){uint32_tcount=(uint32_t)cgc_get_count();SENDUI(count);node_t*hl_ptr=cgc_haiku_list->head;while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}}else{returnERR_LIST_NOT_EXIST;}returnSUCCESS;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=list_t*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [list_t*]
-------
Text=cgc_haiku_list=NULL
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [cgc_haiku_list]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [NULL]
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint32_t]
-------
Text=next_haiku_id=INIT_HAIKU_ID
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [next_haiku_id]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [INIT_HAIKU_ID]
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint32_t]
-------
Text=cgc_recv_uint32()
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_recv_uint32]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_tnum[1]={0};RECV(num,sizeof(uint32_t));returnnum[0];
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 3
0 : <class 'CParser.CParser.BlockItemContext'> [uint32_tnum[1]={0};]
1 : <class 'CParser.CParser.BlockItemContext'> [RECV(num,sizeof(uint32_t));]
2 : <class 'CParser.CParser.BlockItemContext'> [returnnum[0];]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint32_t]
-------
Text=cgc_recv_uint16()
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_recv_uint16]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint16_tnum[1]={0};RECV(num,sizeof(uint16_t));returnnum[0];
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 3
0 : <class 'CParser.CParser.BlockItemContext'> [uint16_tnum[1]={0};]
1 : <class 'CParser.CParser.BlockItemContext'> [RECV(num,sizeof(uint16_t));]
2 : <class 'CParser.CParser.BlockItemContext'> [returnnum[0];]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint8_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint8_t]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_haiku_list_exists]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(NULL==cgc_haiku_list){returnFALSE;}else{returnTRUE;}
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [if(NULL==cgc_haiku_list){returnFALSE;}else{returnTRUE;}]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint8_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint8_t]
-------
Text=cgc_is_haiku_list_empty()
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_is_haiku_list_empty]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(0==cgc_haiku_list->count){returnTRUE;}else{returnFALSE;}
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [if(0==cgc_haiku_list->count){returnTRUE;}else{returnFALSE;}]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
-------
Text=cgc_init_haiku_list()
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_init_haiku_list]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(FALSE==cgc_haiku_list_exists()){cgc_haiku_list=cgc_list_create();}
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [if(FALSE==cgc_haiku_list_exists()){cgc_haiku_list=cgc_list_create();}]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_get_count]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(TRUE==cgc_haiku_list_exists()){returncgc_haiku_list->count;}else{returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [if(TRUE==cgc_haiku_list_exists()){returncgc_haiku_list->count;}else{returnERR_LIST_NOT_EXIST;}]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint32_t]
-------
Text=cgc_get_id_from_haiku(node_t*haiku)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_get_id_from_haiku]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ParameterTypeListContext'> [node_t*haiku]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(NULL!=haiku->data){structhaiku*h=(structhaiku*)haiku->data;returnh->id;}else{returnERR_EMPTY_NODE;}
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [if(NULL!=haiku->data){structhaiku*h=(structhaiku*)haiku->data;returnh->id;}else{returnERR_EMPTY_NODE;}]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint32_t]
-------
Text=cgc_get_next_haiku_id()
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_get_next_haiku_id]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=next_haiku_id++;returnnext_haiku_id-1;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 2
0 : <class 'CParser.CParser.BlockItemContext'> [next_haiku_id++;]
1 : <class 'CParser.CParser.BlockItemContext'> [returnnext_haiku_id-1;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=cgc_get_random_idx(uint32_t*idx)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_get_random_idx]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ParameterTypeListContext'> [uint32_t*idx]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_trandom_idx=0;intret=0;ret=cgc_rand((char*)&random_idx,4);int32_tcount=cgc_get_count();if(ERR_LIST_NOT_EXIST==count){returncount;}elseif(0==count){returnERR_LIST_EMPTY;}elseif(0!=ret){returnERR_RAND_FAILED;}else{*idx=random_idx%(uint32_t)count;returnSUCCESS;}
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 5
0 : <class 'CParser.CParser.BlockItemContext'> [uint32_trandom_idx=0;]
1 : <class 'CParser.CParser.BlockItemContext'> [intret=0;]
2 : <class 'CParser.CParser.BlockItemContext'> [ret=cgc_rand((char*)&random_idx,4);]
3 : <class 'CParser.CParser.BlockItemContext'> [int32_tcount=cgc_get_count();]
4 : <class 'CParser.CParser.BlockItemContext'> [if(ERR_LIST_NOT_EXIST==count){returncount;}elseif(0==count){returnERR_LIST_EMPTY;}elseif(0!=ret){returnERR_RAND_FAILED;}else{*idx=random_idx%(uint32_t)count;returnSUCCESS;}]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=cgc_populate_array_with_haiku_ids(uint32_tid_arr[],uint32_tcount)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_populate_array_with_haiku_ids]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ParameterTypeListContext'> [uint32_tid_arr[],uint32_tcount]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=node_t*haiku_ptr=NULL;structhaiku*h=NULL;uint32_tid=0;if(TRUE==cgc_haiku_list_exists()){haiku_ptr=cgc_haiku_list->tail;}else{returnERR_LIST_NOT_EXIST;}if((0==count)||(NULL==haiku_ptr)){returnERR_LIST_EMPTY;}while((0<count)&&(NULL!=haiku_ptr)){h=(structhaiku*)haiku_ptr->data;id_arr[count-1]=h->id;count--;haiku_ptr=haiku_ptr->prev;}returnSUCCESS;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 7
0 : <class 'CParser.CParser.BlockItemContext'> [node_t*haiku_ptr=NULL;]
1 : <class 'CParser.CParser.BlockItemContext'> [structhaiku*h=NULL;]
2 : <class 'CParser.CParser.BlockItemContext'> [uint32_tid=0;]
3 : <class 'CParser.CParser.BlockItemContext'> [if(TRUE==cgc_haiku_list_exists()){haiku_ptr=cgc_haiku_list->tail;}else{returnERR_LIST_NOT_EXIST;}]
4 : <class 'CParser.CParser.BlockItemContext'> [if((0==count)||(NULL==haiku_ptr)){returnERR_LIST_EMPTY;}]
5 : <class 'CParser.CParser.BlockItemContext'> [while((0<count)&&(NULL!=haiku_ptr)){h=(structhaiku*)haiku_ptr->data;id_arr[count-1]=h->id;count--;haiku_ptr=haiku_ptr->prev;}]
6 : <class 'CParser.CParser.BlockItemContext'> [returnSUCCESS;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=cgc_find_haiku_with_id(structhaiku**h,uint32_tid)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_find_haiku_with_id]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ParameterTypeListContext'> [structhaiku**h,uint32_tid]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=node_t*haiku_ptr=NULL;structhaiku*tmp=NULL;intcount=0;bool_tfound=FALSE;count=cgc_get_count();if(0<count){haiku_ptr=cgc_haiku_list->head;}elseif(0==count){returnERR_LIST_EMPTY;}else{returnERR_LIST_NOT_EXIST;}while(NULL!=haiku_ptr){tmp=(structhaiku*)haiku_ptr->data;if(id==tmp->id){*h=tmp;found=TRUE;break;}haiku_ptr=haiku_ptr->next;}if(TRUE==found){returnSUCCESS;}else{returnERR_INVALID_ID;}
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 8
0 : <class 'CParser.CParser.BlockItemContext'> [node_t*haiku_ptr=NULL;]
1 : <class 'CParser.CParser.BlockItemContext'> [structhaiku*tmp=NULL;]
2 : <class 'CParser.CParser.BlockItemContext'> [intcount=0;]
3 : <class 'CParser.CParser.BlockItemContext'> [bool_tfound=FALSE;]
4 : <class 'CParser.CParser.BlockItemContext'> [count=cgc_get_count();]
5 : <class 'CParser.CParser.BlockItemContext'> [if(0<count){haiku_ptr=cgc_haiku_list->head;}elseif(0==count){returnERR_LIST_EMPTY;}else{returnERR_LIST_NOT_EXIST;}]
6 : <class 'CParser.CParser.BlockItemContext'> [while(NULL!=haiku_ptr){tmp=(structhaiku*)haiku_ptr->data;if(id==tmp->id){*h=tmp;found=TRUE;break;}haiku_ptr=haiku_ptr->next;}]
7 : <class 'CParser.CParser.BlockItemContext'> [if(TRUE==found){returnSUCCESS;}else{returnERR_INVALID_ID;}]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
-------
Text=cgc_send_haiku(structhaiku*h)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_send_haiku]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ParameterTypeListContext'> [structhaiku*h]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_tid=h->id;char*content=h->content;uint16_tlength=h->length;cgc_send((char*)&id,sizeof(uint32_t));cgc_send((char*)&length,sizeof(uint16_t));cgc_send(content,length);
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 6
0 : <class 'CParser.CParser.BlockItemContext'> [uint32_tid=h->id;]
1 : <class 'CParser.CParser.BlockItemContext'> [char*content=h->content;]
2 : <class 'CParser.CParser.BlockItemContext'> [uint16_tlength=h->length;]
3 : <class 'CParser.CParser.BlockItemContext'> [cgc_send((char*)&id,sizeof(uint32_t));]
4 : <class 'CParser.CParser.BlockItemContext'> [cgc_send((char*)&length,sizeof(uint16_t));]
5 : <class 'CParser.CParser.BlockItemContext'> [cgc_send(content,length);]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
-------
Text=cgc_send_easter_egg_haiku()
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_send_easter_egg_haiku]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_tid=EGG_ID;char*content=EGG_HAIKU;uint16_tlength=cgc_strlen(content);cgc_send((char*)&id,sizeof(uint32_t));cgc_send((char*)&length,sizeof(uint16_t));cgc_send(content,length);
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 6
0 : <class 'CParser.CParser.BlockItemContext'> [uint32_tid=EGG_ID;]
1 : <class 'CParser.CParser.BlockItemContext'> [char*content=EGG_HAIKU;]
2 : <class 'CParser.CParser.BlockItemContext'> [uint16_tlength=cgc_strlen(content);]
3 : <class 'CParser.CParser.BlockItemContext'> [cgc_send((char*)&id,sizeof(uint32_t));]
4 : <class 'CParser.CParser.BlockItemContext'> [cgc_send((char*)&length,sizeof(uint16_t));]
5 : <class 'CParser.CParser.BlockItemContext'> [cgc_send(content,length);]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
-------
Text=cgc_send_haiku_id(uint32_tid)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_send_haiku_id]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ParameterTypeListContext'> [uint32_tid]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SENDUI(id);
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [SENDUI(id);]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=cgc_add_haiku_to_list(structhaiku*h)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_add_haiku_to_list]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ParameterTypeListContext'> [structhaiku*h]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=node_t*nd=cgc_node_create((void*)h);returncgc_list_push(cgc_haiku_list,nd);
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 2
0 : <class 'CParser.CParser.BlockItemContext'> [node_t*nd=cgc_node_create((void*)h);]
1 : <class 'CParser.CParser.BlockItemContext'> [returncgc_list_push(cgc_haiku_list,nd);]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=cgc_recv_haiku_line(char*haiku_content_ptr,int16_tbytes_remaining)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_recv_haiku_line]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ParameterTypeListContext'> [char*haiku_content_ptr,int16_tbytes_remaining]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=chartemp_line_buf[MAX_HAIKU_LINE_LEN]={0};int16_tbytes_received=0;int16_tbytes_written=0;bytes_received=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN);if(0>bytes_received){returnERR_INVALID_HAIKU;}bytes_written=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf);returnbytes_written;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 7
0 : <class 'CParser.CParser.BlockItemContext'> [chartemp_line_buf[MAX_HAIKU_LINE_LEN]={0};]
1 : <class 'CParser.CParser.BlockItemContext'> [int16_tbytes_received=0;]
2 : <class 'CParser.CParser.BlockItemContext'> [int16_tbytes_written=0;]
3 : <class 'CParser.CParser.BlockItemContext'> [bytes_received=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN);]
4 : <class 'CParser.CParser.BlockItemContext'> [if(0>bytes_received){returnERR_INVALID_HAIKU;}]
5 : <class 'CParser.CParser.BlockItemContext'> [bytes_written=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf);]
6 : <class 'CParser.CParser.BlockItemContext'> [returnbytes_written;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku*]
-------
Text=cgc_recv_haiku(uint16_ttotal_bytes)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_recv_haiku]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ParameterTypeListContext'> [uint16_ttotal_bytes]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku*h=NULL;char*haiku_content_ptr=NULL;int16_tbytes_remaining=0;int16_tbytes_written=0;bytes_remaining=(int16_t)total_bytes;ALLOC(sizeof(structhaiku)+total_bytes+1,&h);haiku_content_ptr=h->content;while(0!=bytes_remaining){bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);if(0>bytes_written){returnNULL;}haiku_content_ptr+=bytes_written;bytes_remaining-=bytes_written;}h->id=cgc_get_next_haiku_id();h->length=total_bytes;returnh;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 11
0 : <class 'CParser.CParser.BlockItemContext'> [structhaiku*h=NULL;]
1 : <class 'CParser.CParser.BlockItemContext'> [char*haiku_content_ptr=NULL;]
2 : <class 'CParser.CParser.BlockItemContext'> [int16_tbytes_remaining=0;]
3 : <class 'CParser.CParser.BlockItemContext'> [int16_tbytes_written=0;]
4 : <class 'CParser.CParser.BlockItemContext'> [bytes_remaining=(int16_t)total_bytes;]
5 : <class 'CParser.CParser.BlockItemContext'> [ALLOC(sizeof(structhaiku)+total_bytes+1,&h);]
6 : <class 'CParser.CParser.BlockItemContext'> [haiku_content_ptr=h->content;]
7 : <class 'CParser.CParser.BlockItemContext'> [while(0!=bytes_remaining){bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);if(0>bytes_written){returnNULL;}haiku_content_ptr+=bytes_written;bytes_remaining-=bytes_written;}]
8 : <class 'CParser.CParser.BlockItemContext'> [h->id=cgc_get_next_haiku_id();]
9 : <class 'CParser.CParser.BlockItemContext'> [h->length=total_bytes;]
10 : <class 'CParser.CParser.BlockItemContext'> [returnh;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint16_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint16_t]
-------
Text=cgc_recv_haiku_size()
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_recv_haiku_size]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returncgc_recv_uint16();
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [returncgc_recv_uint16();]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=cgc_add_haiku()
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_add_haiku]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=intret=SUCCESS;uint16_ttotal_bytes=0;structhaiku*h=NULL;if(FALSE==cgc_haiku_list_exists()){cgc_init_haiku_list();}total_bytes=cgc_recv_haiku_size();if((0<total_bytes)&&(MAX_HAIKU_LEN>total_bytes)){h=cgc_recv_haiku(total_bytes);if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}}else{ret=ERR_INVALID_HAIKU_LEN;}returnret;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 7
0 : <class 'CParser.CParser.BlockItemContext'> [intret=SUCCESS;]
1 : <class 'CParser.CParser.BlockItemContext'> [uint16_ttotal_bytes=0;]
2 : <class 'CParser.CParser.BlockItemContext'> [structhaiku*h=NULL;]
3 : <class 'CParser.CParser.BlockItemContext'> [if(FALSE==cgc_haiku_list_exists()){cgc_init_haiku_list();}]
4 : <class 'CParser.CParser.BlockItemContext'> [total_bytes=cgc_recv_haiku_size();]
5 : <class 'CParser.CParser.BlockItemContext'> [if((0<total_bytes)&&(MAX_HAIKU_LEN>total_bytes)){h=cgc_recv_haiku(total_bytes);if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}}else{ret=ERR_INVALID_HAIKU_LEN;}]
6 : <class 'CParser.CParser.BlockItemContext'> [returnret;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=cgc_get_haiku_by_id()
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_get_haiku_by_id]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku*h=NULL;uint32_tid=0;intres=0;if(TRUE==cgc_haiku_list_exists()){id=cgc_recv_uint32();if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}}else{res=ERR_LIST_NOT_EXIST;}returnres;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 5
0 : <class 'CParser.CParser.BlockItemContext'> [structhaiku*h=NULL;]
1 : <class 'CParser.CParser.BlockItemContext'> [uint32_tid=0;]
2 : <class 'CParser.CParser.BlockItemContext'> [intres=0;]
3 : <class 'CParser.CParser.BlockItemContext'> [if(TRUE==cgc_haiku_list_exists()){id=cgc_recv_uint32();if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}}else{res=ERR_LIST_NOT_EXIST;}]
4 : <class 'CParser.CParser.BlockItemContext'> [returnres;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=cgc_get_haiku_cgc_random()
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_get_haiku_cgc_random]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_trandom_idx=0;uint32_tcount=0;uint32_t*id_arr=NULL;structhaiku*rand_haiku=NULL;intres=SUCCESS;if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();if(0==count){returnERR_LIST_EMPTY;}ALLOC(count*sizeof(uint32_t),&id_arr);res=cgc_populate_array_with_haiku_ids(id_arr,count);res=cgc_get_random_idx(&random_idx);if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}DEALLOC(id_arr,count*sizeof(uint32_t));if(SUCCESS==res){cgc_send_haiku(rand_haiku);}}else{res=ERR_LIST_NOT_EXIST;}returnres;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 7
0 : <class 'CParser.CParser.BlockItemContext'> [uint32_trandom_idx=0;]
1 : <class 'CParser.CParser.BlockItemContext'> [uint32_tcount=0;]
2 : <class 'CParser.CParser.BlockItemContext'> [uint32_t*id_arr=NULL;]
3 : <class 'CParser.CParser.BlockItemContext'> [structhaiku*rand_haiku=NULL;]
4 : <class 'CParser.CParser.BlockItemContext'> [intres=SUCCESS;]
5 : <class 'CParser.CParser.BlockItemContext'> [if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();if(0==count){returnERR_LIST_EMPTY;}ALLOC(count*sizeof(uint32_t),&id_arr);res=cgc_populate_array_with_haiku_ids(id_arr,count);res=cgc_get_random_idx(&random_idx);if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}DEALLOC(id_arr,count*sizeof(uint32_t));if(SUCCESS==res){cgc_send_haiku(rand_haiku);}}else{res=ERR_LIST_NOT_EXIST;}]
6 : <class 'CParser.CParser.BlockItemContext'> [returnres;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=cgc_get_haiku_count()
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_get_haiku_count]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_tcount=0;if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();SENDUI(count);returnSUCCESS;}else{returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 2
0 : <class 'CParser.CParser.BlockItemContext'> [uint32_tcount=0;]
1 : <class 'CParser.CParser.BlockItemContext'> [if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();SENDUI(count);returnSUCCESS;}else{returnERR_LIST_NOT_EXIST;}]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=cgc_get_haiku_ids()
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_get_haiku_ids]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(TRUE==cgc_haiku_list_exists()){uint32_tcount=(uint32_t)cgc_get_count();SENDUI(count);node_t*hl_ptr=cgc_haiku_list->head;while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}}else{returnERR_LIST_NOT_EXIST;}returnSUCCESS;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 2
0 : <class 'CParser.CParser.BlockItemContext'> [if(TRUE==cgc_haiku_list_exists()){uint32_tcount=(uint32_t)cgc_get_count();SENDUI(count);node_t*hl_ptr=cgc_haiku_list->head;while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}}else{returnERR_LIST_NOT_EXIST;}]
1 : <class 'CParser.CParser.BlockItemContext'> [returnSUCCESS;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=list_t*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [list_t]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=cgc_haiku_list
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_haiku_list]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint32_t]
-------
Text=next_haiku_id
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [next_haiku_id]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=INIT_HAIKU_ID
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [INIT_HAIKU_ID]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint32_t]
-------
Text=cgc_recv_uint32
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_recv_uint32]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_tnum[1]={0};
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [uint32_tnum[1]={0};]
-------
Text=RECV(num,sizeof(uint32_t));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [RECV(num,sizeof(uint32_t));]
-------
Text=returnnum[0];
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnnum[0];]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint32_t]
-------
Text=cgc_recv_uint16
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_recv_uint16]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint16_tnum[1]={0};
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [uint16_tnum[1]={0};]
-------
Text=RECV(num,sizeof(uint16_t));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [RECV(num,sizeof(uint16_t));]
-------
Text=returnnum[0];
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnnum[0];]
-------
Text=uint8_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint8_t]
-------
Text=cgc_haiku_list_exists
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_haiku_list_exists]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(NULL==cgc_haiku_list){returnFALSE;}else{returnTRUE;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(NULL==cgc_haiku_list){returnFALSE;}else{returnTRUE;}]
-------
Text=uint8_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint8_t]
-------
Text=cgc_is_haiku_list_empty
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_is_haiku_list_empty]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(0==cgc_haiku_list->count){returnTRUE;}else{returnFALSE;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(0==cgc_haiku_list->count){returnTRUE;}else{returnFALSE;}]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=cgc_init_haiku_list
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_init_haiku_list]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(FALSE==cgc_haiku_list_exists()){cgc_haiku_list=cgc_list_create();}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(FALSE==cgc_haiku_list_exists()){cgc_haiku_list=cgc_list_create();}]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=cgc_get_count
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_get_count]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(TRUE==cgc_haiku_list_exists()){returncgc_haiku_list->count;}else{returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(TRUE==cgc_haiku_list_exists()){returncgc_haiku_list->count;}else{returnERR_LIST_NOT_EXIST;}]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint32_t]
-------
Text=cgc_get_id_from_haiku
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_get_id_from_haiku]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=node_t*haiku
Type=<class 'CParser.CParser.ParameterTypeListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterListContext'> [node_t*haiku]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(NULL!=haiku->data){structhaiku*h=(structhaiku*)haiku->data;returnh->id;}else{returnERR_EMPTY_NODE;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(NULL!=haiku->data){structhaiku*h=(structhaiku*)haiku->data;returnh->id;}else{returnERR_EMPTY_NODE;}]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint32_t]
-------
Text=cgc_get_next_haiku_id
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_get_next_haiku_id]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=next_haiku_id++;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [next_haiku_id++;]
-------
Text=returnnext_haiku_id-1;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnnext_haiku_id-1;]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=cgc_get_random_idx
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_get_random_idx]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t*idx
Type=<class 'CParser.CParser.ParameterTypeListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterListContext'> [uint32_t*idx]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_trandom_idx=0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [uint32_trandom_idx=0;]
-------
Text=intret=0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [intret=0;]
-------
Text=ret=cgc_rand((char*)&random_idx,4);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [ret=cgc_rand((char*)&random_idx,4);]
-------
Text=int32_tcount=cgc_get_count();
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [int32_tcount=cgc_get_count();]
-------
Text=if(ERR_LIST_NOT_EXIST==count){returncount;}elseif(0==count){returnERR_LIST_EMPTY;}elseif(0!=ret){returnERR_RAND_FAILED;}else{*idx=random_idx%(uint32_t)count;returnSUCCESS;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(ERR_LIST_NOT_EXIST==count){returncount;}elseif(0==count){returnERR_LIST_EMPTY;}elseif(0!=ret){returnERR_RAND_FAILED;}else{*idx=random_idx%(uint32_t)count;returnSUCCESS;}]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=cgc_populate_array_with_haiku_ids
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_populate_array_with_haiku_ids]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_tid_arr[],uint32_tcount
Type=<class 'CParser.CParser.ParameterTypeListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterListContext'> [uint32_tid_arr[],uint32_tcount]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=node_t*haiku_ptr=NULL;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [node_t*haiku_ptr=NULL;]
-------
Text=structhaiku*h=NULL;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [structhaiku*h=NULL;]
-------
Text=uint32_tid=0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [uint32_tid=0;]
-------
Text=if(TRUE==cgc_haiku_list_exists()){haiku_ptr=cgc_haiku_list->tail;}else{returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(TRUE==cgc_haiku_list_exists()){haiku_ptr=cgc_haiku_list->tail;}else{returnERR_LIST_NOT_EXIST;}]
-------
Text=if((0==count)||(NULL==haiku_ptr)){returnERR_LIST_EMPTY;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if((0==count)||(NULL==haiku_ptr)){returnERR_LIST_EMPTY;}]
-------
Text=while((0<count)&&(NULL!=haiku_ptr)){h=(structhaiku*)haiku_ptr->data;id_arr[count-1]=h->id;count--;haiku_ptr=haiku_ptr->prev;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [while((0<count)&&(NULL!=haiku_ptr)){h=(structhaiku*)haiku_ptr->data;id_arr[count-1]=h->id;count--;haiku_ptr=haiku_ptr->prev;}]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnSUCCESS;]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=cgc_find_haiku_with_id
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_find_haiku_with_id]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku**h,uint32_tid
Type=<class 'CParser.CParser.ParameterTypeListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterListContext'> [structhaiku**h,uint32_tid]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=node_t*haiku_ptr=NULL;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [node_t*haiku_ptr=NULL;]
-------
Text=structhaiku*tmp=NULL;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [structhaiku*tmp=NULL;]
-------
Text=intcount=0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [intcount=0;]
-------
Text=bool_tfound=FALSE;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [bool_tfound=FALSE;]
-------
Text=count=cgc_get_count();
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [count=cgc_get_count();]
-------
Text=if(0<count){haiku_ptr=cgc_haiku_list->head;}elseif(0==count){returnERR_LIST_EMPTY;}else{returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(0<count){haiku_ptr=cgc_haiku_list->head;}elseif(0==count){returnERR_LIST_EMPTY;}else{returnERR_LIST_NOT_EXIST;}]
-------
Text=while(NULL!=haiku_ptr){tmp=(structhaiku*)haiku_ptr->data;if(id==tmp->id){*h=tmp;found=TRUE;break;}haiku_ptr=haiku_ptr->next;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [while(NULL!=haiku_ptr){tmp=(structhaiku*)haiku_ptr->data;if(id==tmp->id){*h=tmp;found=TRUE;break;}haiku_ptr=haiku_ptr->next;}]
-------
Text=if(TRUE==found){returnSUCCESS;}else{returnERR_INVALID_ID;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(TRUE==found){returnSUCCESS;}else{returnERR_INVALID_ID;}]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=cgc_send_haiku
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_send_haiku]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku*h
Type=<class 'CParser.CParser.ParameterTypeListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterListContext'> [structhaiku*h]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_tid=h->id;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [uint32_tid=h->id;]
-------
Text=char*content=h->content;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [char*content=h->content;]
-------
Text=uint16_tlength=h->length;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [uint16_tlength=h->length;]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_send((char*)&id,sizeof(uint32_t));]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_send((char*)&length,sizeof(uint16_t));]
-------
Text=cgc_send(content,length);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_send(content,length);]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=cgc_send_easter_egg_haiku
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_send_easter_egg_haiku]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_tid=EGG_ID;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [uint32_tid=EGG_ID;]
-------
Text=char*content=EGG_HAIKU;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [char*content=EGG_HAIKU;]
-------
Text=uint16_tlength=cgc_strlen(content);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [uint16_tlength=cgc_strlen(content);]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_send((char*)&id,sizeof(uint32_t));]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_send((char*)&length,sizeof(uint16_t));]
-------
Text=cgc_send(content,length);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_send(content,length);]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=cgc_send_haiku_id
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_send_haiku_id]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_tid
Type=<class 'CParser.CParser.ParameterTypeListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterListContext'> [uint32_tid]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SENDUI(id);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [SENDUI(id);]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=cgc_add_haiku_to_list
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_add_haiku_to_list]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku*h
Type=<class 'CParser.CParser.ParameterTypeListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterListContext'> [structhaiku*h]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=node_t*nd=cgc_node_create((void*)h);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [node_t*nd=cgc_node_create((void*)h);]
-------
Text=returncgc_list_push(cgc_haiku_list,nd);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returncgc_list_push(cgc_haiku_list,nd);]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=cgc_recv_haiku_line
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_recv_haiku_line]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*haiku_content_ptr,int16_tbytes_remaining
Type=<class 'CParser.CParser.ParameterTypeListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterListContext'> [char*haiku_content_ptr,int16_tbytes_remaining]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=chartemp_line_buf[MAX_HAIKU_LINE_LEN]={0};
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [chartemp_line_buf[MAX_HAIKU_LINE_LEN]={0};]
-------
Text=int16_tbytes_received=0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [int16_tbytes_received=0;]
-------
Text=int16_tbytes_written=0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [int16_tbytes_written=0;]
-------
Text=bytes_received=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [bytes_received=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN);]
-------
Text=if(0>bytes_received){returnERR_INVALID_HAIKU;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(0>bytes_received){returnERR_INVALID_HAIKU;}]
-------
Text=bytes_written=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [bytes_written=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf);]
-------
Text=returnbytes_written;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnbytes_written;]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=cgc_recv_haiku
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_recv_haiku]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint16_ttotal_bytes
Type=<class 'CParser.CParser.ParameterTypeListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterListContext'> [uint16_ttotal_bytes]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku*h=NULL;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [structhaiku*h=NULL;]
-------
Text=char*haiku_content_ptr=NULL;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [char*haiku_content_ptr=NULL;]
-------
Text=int16_tbytes_remaining=0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [int16_tbytes_remaining=0;]
-------
Text=int16_tbytes_written=0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [int16_tbytes_written=0;]
-------
Text=bytes_remaining=(int16_t)total_bytes;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [bytes_remaining=(int16_t)total_bytes;]
-------
Text=ALLOC(sizeof(structhaiku)+total_bytes+1,&h);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [ALLOC(sizeof(structhaiku)+total_bytes+1,&h);]
-------
Text=haiku_content_ptr=h->content;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [haiku_content_ptr=h->content;]
-------
Text=while(0!=bytes_remaining){bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);if(0>bytes_written){returnNULL;}haiku_content_ptr+=bytes_written;bytes_remaining-=bytes_written;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [while(0!=bytes_remaining){bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);if(0>bytes_written){returnNULL;}haiku_content_ptr+=bytes_written;bytes_remaining-=bytes_written;}]
-------
Text=h->id=cgc_get_next_haiku_id();
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [h->id=cgc_get_next_haiku_id();]
-------
Text=h->length=total_bytes;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [h->length=total_bytes;]
-------
Text=returnh;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnh;]
-------
Text=uint16_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint16_t]
-------
Text=cgc_recv_haiku_size
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_recv_haiku_size]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returncgc_recv_uint16();
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returncgc_recv_uint16();]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=cgc_add_haiku
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_add_haiku]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=intret=SUCCESS;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [intret=SUCCESS;]
-------
Text=uint16_ttotal_bytes=0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [uint16_ttotal_bytes=0;]
-------
Text=structhaiku*h=NULL;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [structhaiku*h=NULL;]
-------
Text=if(FALSE==cgc_haiku_list_exists()){cgc_init_haiku_list();}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(FALSE==cgc_haiku_list_exists()){cgc_init_haiku_list();}]
-------
Text=total_bytes=cgc_recv_haiku_size();
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [total_bytes=cgc_recv_haiku_size();]
-------
Text=if((0<total_bytes)&&(MAX_HAIKU_LEN>total_bytes)){h=cgc_recv_haiku(total_bytes);if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}}else{ret=ERR_INVALID_HAIKU_LEN;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if((0<total_bytes)&&(MAX_HAIKU_LEN>total_bytes)){h=cgc_recv_haiku(total_bytes);if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}}else{ret=ERR_INVALID_HAIKU_LEN;}]
-------
Text=returnret;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnret;]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=cgc_get_haiku_by_id
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_get_haiku_by_id]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku*h=NULL;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [structhaiku*h=NULL;]
-------
Text=uint32_tid=0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [uint32_tid=0;]
-------
Text=intres=0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [intres=0;]
-------
Text=if(TRUE==cgc_haiku_list_exists()){id=cgc_recv_uint32();if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}}else{res=ERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(TRUE==cgc_haiku_list_exists()){id=cgc_recv_uint32();if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}}else{res=ERR_LIST_NOT_EXIST;}]
-------
Text=returnres;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnres;]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=cgc_get_haiku_cgc_random
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_get_haiku_cgc_random]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_trandom_idx=0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [uint32_trandom_idx=0;]
-------
Text=uint32_tcount=0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [uint32_tcount=0;]
-------
Text=uint32_t*id_arr=NULL;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [uint32_t*id_arr=NULL;]
-------
Text=structhaiku*rand_haiku=NULL;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [structhaiku*rand_haiku=NULL;]
-------
Text=intres=SUCCESS;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [intres=SUCCESS;]
-------
Text=if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();if(0==count){returnERR_LIST_EMPTY;}ALLOC(count*sizeof(uint32_t),&id_arr);res=cgc_populate_array_with_haiku_ids(id_arr,count);res=cgc_get_random_idx(&random_idx);if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}DEALLOC(id_arr,count*sizeof(uint32_t));if(SUCCESS==res){cgc_send_haiku(rand_haiku);}}else{res=ERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();if(0==count){returnERR_LIST_EMPTY;}ALLOC(count*sizeof(uint32_t),&id_arr);res=cgc_populate_array_with_haiku_ids(id_arr,count);res=cgc_get_random_idx(&random_idx);if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}DEALLOC(id_arr,count*sizeof(uint32_t));if(SUCCESS==res){cgc_send_haiku(rand_haiku);}}else{res=ERR_LIST_NOT_EXIST;}]
-------
Text=returnres;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnres;]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=cgc_get_haiku_count
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_get_haiku_count]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_tcount=0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [uint32_tcount=0;]
-------
Text=if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();SENDUI(count);returnSUCCESS;}else{returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();SENDUI(count);returnSUCCESS;}else{returnERR_LIST_NOT_EXIST;}]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=cgc_get_haiku_ids
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_get_haiku_ids]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(TRUE==cgc_haiku_list_exists()){uint32_tcount=(uint32_t)cgc_get_count();SENDUI(count);node_t*hl_ptr=cgc_haiku_list->head;while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}}else{returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(TRUE==cgc_haiku_list_exists()){uint32_tcount=(uint32_t)cgc_get_count();SENDUI(count);node_t*hl_ptr=cgc_haiku_list->head;while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}}else{returnERR_LIST_NOT_EXIST;}]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnSUCCESS;]
-------
Text=list_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [list_t]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=cgc_haiku_list
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_haiku_list]
-------
Text=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=next_haiku_id
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [next_haiku_id]
-------
Text=INIT_HAIKU_ID
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [INIT_HAIKU_ID]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=cgc_recv_uint32
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_tnum[1]={0};
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [uint32_t]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [num[1]={0}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=RECV(num,sizeof(uint32_t));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [RECV(num,sizeof(uint32_t));]
-------
Text=returnnum[0];
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnnum[0];]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=cgc_recv_uint16
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint16_tnum[1]={0};
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [uint16_t]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [num[1]={0}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=RECV(num,sizeof(uint16_t));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [RECV(num,sizeof(uint16_t));]
-------
Text=returnnum[0];
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnnum[0];]
-------
Text=uint8_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint8_t]
-------
Text=cgc_haiku_list_exists
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(NULL==cgc_haiku_list){returnFALSE;}else{returnTRUE;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(NULL==cgc_haiku_list){returnFALSE;}else{returnTRUE;}]
-------
Text=uint8_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint8_t]
-------
Text=cgc_is_haiku_list_empty
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(0==cgc_haiku_list->count){returnTRUE;}else{returnFALSE;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0==cgc_haiku_list->count){returnTRUE;}else{returnFALSE;}]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_init_haiku_list
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(FALSE==cgc_haiku_list_exists()){cgc_haiku_list=cgc_list_create();}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(FALSE==cgc_haiku_list_exists()){cgc_haiku_list=cgc_list_create();}]
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(TRUE==cgc_haiku_list_exists()){returncgc_haiku_list->count;}else{returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(TRUE==cgc_haiku_list_exists()){returncgc_haiku_list->count;}else{returnERR_LIST_NOT_EXIST;}]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=cgc_get_id_from_haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=node_t*haiku
Type=<class 'CParser.CParser.ParameterListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterDeclarationContext'> [node_t*haiku]
-------
Text=if(NULL!=haiku->data){structhaiku*h=(structhaiku*)haiku->data;returnh->id;}else{returnERR_EMPTY_NODE;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(NULL!=haiku->data){structhaiku*h=(structhaiku*)haiku->data;returnh->id;}else{returnERR_EMPTY_NODE;}]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=cgc_get_next_haiku_id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=next_haiku_id++;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [next_haiku_id++;]
-------
Text=returnnext_haiku_id-1;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnnext_haiku_id-1;]
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_random_idx
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t*idx
Type=<class 'CParser.CParser.ParameterListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterDeclarationContext'> [uint32_t*idx]
-------
Text=uint32_trandom_idx=0;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [uint32_t]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [random_idx=0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=intret=0;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [int]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [ret=0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=ret=cgc_rand((char*)&random_idx,4);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [ret=cgc_rand((char*)&random_idx,4);]
-------
Text=int32_tcount=cgc_get_count();
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [int32_t]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [count=cgc_get_count()]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(ERR_LIST_NOT_EXIST==count){returncount;}elseif(0==count){returnERR_LIST_EMPTY;}elseif(0!=ret){returnERR_RAND_FAILED;}else{*idx=random_idx%(uint32_t)count;returnSUCCESS;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(ERR_LIST_NOT_EXIST==count){returncount;}elseif(0==count){returnERR_LIST_EMPTY;}elseif(0!=ret){returnERR_RAND_FAILED;}else{*idx=random_idx%(uint32_t)count;returnSUCCESS;}]
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_populate_array_with_haiku_ids
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_tid_arr[],uint32_tcount
Type=<class 'CParser.CParser.ParameterListContext'>
Child Count = 3
0 : <class 'CParser.CParser.ParameterDeclarationContext'> [uint32_tid_arr[]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.ParameterDeclarationContext'> [uint32_tcount]
-------
Text=node_t*haiku_ptr=NULL;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [node_t*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [haiku_ptr=NULL]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=structhaiku*h=NULL;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [structhaiku*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [h=NULL]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=uint32_tid=0;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [uint32_t]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [id=0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(TRUE==cgc_haiku_list_exists()){haiku_ptr=cgc_haiku_list->tail;}else{returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(TRUE==cgc_haiku_list_exists()){haiku_ptr=cgc_haiku_list->tail;}else{returnERR_LIST_NOT_EXIST;}]
-------
Text=if((0==count)||(NULL==haiku_ptr)){returnERR_LIST_EMPTY;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if((0==count)||(NULL==haiku_ptr)){returnERR_LIST_EMPTY;}]
-------
Text=while((0<count)&&(NULL!=haiku_ptr)){h=(structhaiku*)haiku_ptr->data;id_arr[count-1]=h->id;count--;haiku_ptr=haiku_ptr->prev;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.IterationStatementContext'> [while((0<count)&&(NULL!=haiku_ptr)){h=(structhaiku*)haiku_ptr->data;id_arr[count-1]=h->id;count--;haiku_ptr=haiku_ptr->prev;}]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnSUCCESS;]
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_find_haiku_with_id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku**h,uint32_tid
Type=<class 'CParser.CParser.ParameterListContext'>
Child Count = 3
0 : <class 'CParser.CParser.ParameterDeclarationContext'> [structhaiku**h]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.ParameterDeclarationContext'> [uint32_tid]
-------
Text=node_t*haiku_ptr=NULL;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [node_t*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [haiku_ptr=NULL]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=structhaiku*tmp=NULL;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [structhaiku*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [tmp=NULL]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=intcount=0;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [int]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [count=0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=bool_tfound=FALSE;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [bool_t]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [found=FALSE]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=count=cgc_get_count();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [count=cgc_get_count();]
-------
Text=if(0<count){haiku_ptr=cgc_haiku_list->head;}elseif(0==count){returnERR_LIST_EMPTY;}else{returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0<count){haiku_ptr=cgc_haiku_list->head;}elseif(0==count){returnERR_LIST_EMPTY;}else{returnERR_LIST_NOT_EXIST;}]
-------
Text=while(NULL!=haiku_ptr){tmp=(structhaiku*)haiku_ptr->data;if(id==tmp->id){*h=tmp;found=TRUE;break;}haiku_ptr=haiku_ptr->next;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.IterationStatementContext'> [while(NULL!=haiku_ptr){tmp=(structhaiku*)haiku_ptr->data;if(id==tmp->id){*h=tmp;found=TRUE;break;}haiku_ptr=haiku_ptr->next;}]
-------
Text=if(TRUE==found){returnSUCCESS;}else{returnERR_INVALID_ID;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(TRUE==found){returnSUCCESS;}else{returnERR_INVALID_ID;}]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_send_haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku*h
Type=<class 'CParser.CParser.ParameterListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterDeclarationContext'> [structhaiku*h]
-------
Text=uint32_tid=h->id;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [uint32_t]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [id=h->id]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=char*content=h->content;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [char*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [content=h->content]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=uint16_tlength=h->length;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [uint16_t]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [length=h->length]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_send((char*)&id,sizeof(uint32_t));]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_send((char*)&length,sizeof(uint16_t));]
-------
Text=cgc_send(content,length);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_send(content,length);]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_send_easter_egg_haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_tid=EGG_ID;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [uint32_t]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [id=EGG_ID]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=char*content=EGG_HAIKU;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [char*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [content=EGG_HAIKU]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=uint16_tlength=cgc_strlen(content);
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [uint16_t]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [length=cgc_strlen(content)]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_send((char*)&id,sizeof(uint32_t));]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_send((char*)&length,sizeof(uint16_t));]
-------
Text=cgc_send(content,length);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_send(content,length);]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_send_haiku_id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_tid
Type=<class 'CParser.CParser.ParameterListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterDeclarationContext'> [uint32_tid]
-------
Text=SENDUI(id);
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [SENDUI]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [(id)]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_add_haiku_to_list
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku*h
Type=<class 'CParser.CParser.ParameterListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterDeclarationContext'> [structhaiku*h]
-------
Text=node_t*nd=cgc_node_create((void*)h);
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [node_t*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [nd=cgc_node_create((void*)h)]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=returncgc_list_push(cgc_haiku_list,nd);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returncgc_list_push(cgc_haiku_list,nd);]
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recv_haiku_line
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*haiku_content_ptr,int16_tbytes_remaining
Type=<class 'CParser.CParser.ParameterListContext'>
Child Count = 3
0 : <class 'CParser.CParser.ParameterDeclarationContext'> [char*haiku_content_ptr]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.ParameterDeclarationContext'> [int16_tbytes_remaining]
-------
Text=chartemp_line_buf[MAX_HAIKU_LINE_LEN]={0};
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [char]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [temp_line_buf[MAX_HAIKU_LINE_LEN]={0}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=int16_tbytes_received=0;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [int16_t]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [bytes_received=0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=int16_tbytes_written=0;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [int16_t]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [bytes_written=0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=bytes_received=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [bytes_received=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN);]
-------
Text=if(0>bytes_received){returnERR_INVALID_HAIKU;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0>bytes_received){returnERR_INVALID_HAIKU;}]
-------
Text=bytes_written=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [bytes_written=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf);]
-------
Text=returnbytes_written;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnbytes_written;]
-------
Text=structhaiku
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StructOrUnionSpecifierContext'> [structhaiku]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=cgc_recv_haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint16_ttotal_bytes
Type=<class 'CParser.CParser.ParameterListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterDeclarationContext'> [uint16_ttotal_bytes]
-------
Text=structhaiku*h=NULL;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [structhaiku*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [h=NULL]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=char*haiku_content_ptr=NULL;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [char*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [haiku_content_ptr=NULL]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=int16_tbytes_remaining=0;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [int16_t]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [bytes_remaining=0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=int16_tbytes_written=0;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [int16_t]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [bytes_written=0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=bytes_remaining=(int16_t)total_bytes;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [bytes_remaining=(int16_t)total_bytes;]
-------
Text=ALLOC(sizeof(structhaiku)+total_bytes+1,&h);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [ALLOC(sizeof(structhaiku)+total_bytes+1,&h);]
-------
Text=haiku_content_ptr=h->content;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [haiku_content_ptr=h->content;]
-------
Text=while(0!=bytes_remaining){bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);if(0>bytes_written){returnNULL;}haiku_content_ptr+=bytes_written;bytes_remaining-=bytes_written;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.IterationStatementContext'> [while(0!=bytes_remaining){bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);if(0>bytes_written){returnNULL;}haiku_content_ptr+=bytes_written;bytes_remaining-=bytes_written;}]
-------
Text=h->id=cgc_get_next_haiku_id();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [h->id=cgc_get_next_haiku_id();]
-------
Text=h->length=total_bytes;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [h->length=total_bytes;]
-------
Text=returnh;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnh;]
-------
Text=uint16_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint16_t]
-------
Text=cgc_recv_haiku_size
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returncgc_recv_uint16();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returncgc_recv_uint16();]
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_add_haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=intret=SUCCESS;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [int]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [ret=SUCCESS]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=uint16_ttotal_bytes=0;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [uint16_t]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [total_bytes=0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=structhaiku*h=NULL;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [structhaiku*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [h=NULL]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(FALSE==cgc_haiku_list_exists()){cgc_init_haiku_list();}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(FALSE==cgc_haiku_list_exists()){cgc_init_haiku_list();}]
-------
Text=total_bytes=cgc_recv_haiku_size();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [total_bytes=cgc_recv_haiku_size();]
-------
Text=if((0<total_bytes)&&(MAX_HAIKU_LEN>total_bytes)){h=cgc_recv_haiku(total_bytes);if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}}else{ret=ERR_INVALID_HAIKU_LEN;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if((0<total_bytes)&&(MAX_HAIKU_LEN>total_bytes)){h=cgc_recv_haiku(total_bytes);if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}}else{ret=ERR_INVALID_HAIKU_LEN;}]
-------
Text=returnret;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnret;]
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_haiku_by_id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku*h=NULL;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [structhaiku*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [h=NULL]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=uint32_tid=0;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [uint32_t]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [id=0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=intres=0;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [int]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [res=0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(TRUE==cgc_haiku_list_exists()){id=cgc_recv_uint32();if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}}else{res=ERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(TRUE==cgc_haiku_list_exists()){id=cgc_recv_uint32();if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}}else{res=ERR_LIST_NOT_EXIST;}]
-------
Text=returnres;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnres;]
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_haiku_cgc_random
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_trandom_idx=0;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [uint32_t]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [random_idx=0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=uint32_tcount=0;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [uint32_t]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [count=0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=uint32_t*id_arr=NULL;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [uint32_t*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [id_arr=NULL]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=structhaiku*rand_haiku=NULL;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [structhaiku*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [rand_haiku=NULL]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=intres=SUCCESS;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [int]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [res=SUCCESS]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();if(0==count){returnERR_LIST_EMPTY;}ALLOC(count*sizeof(uint32_t),&id_arr);res=cgc_populate_array_with_haiku_ids(id_arr,count);res=cgc_get_random_idx(&random_idx);if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}DEALLOC(id_arr,count*sizeof(uint32_t));if(SUCCESS==res){cgc_send_haiku(rand_haiku);}}else{res=ERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();if(0==count){returnERR_LIST_EMPTY;}ALLOC(count*sizeof(uint32_t),&id_arr);res=cgc_populate_array_with_haiku_ids(id_arr,count);res=cgc_get_random_idx(&random_idx);if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}DEALLOC(id_arr,count*sizeof(uint32_t));if(SUCCESS==res){cgc_send_haiku(rand_haiku);}}else{res=ERR_LIST_NOT_EXIST;}]
-------
Text=returnres;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnres;]
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_haiku_count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_tcount=0;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [uint32_t]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [count=0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();SENDUI(count);returnSUCCESS;}else{returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();SENDUI(count);returnSUCCESS;}else{returnERR_LIST_NOT_EXIST;}]
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_haiku_ids
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(TRUE==cgc_haiku_list_exists()){uint32_tcount=(uint32_t)cgc_get_count();SENDUI(count);node_t*hl_ptr=cgc_haiku_list->head;while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}}else{returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(TRUE==cgc_haiku_list_exists()){uint32_tcount=(uint32_t)cgc_get_count();SENDUI(count);node_t*hl_ptr=cgc_haiku_list->head;while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}}else{returnERR_LIST_NOT_EXIST;}]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnSUCCESS;]
-------
Text=list_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [list_t]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL]
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=next_haiku_id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=INIT_HAIKU_ID
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [INIT_HAIKU_ID]
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint32_t]
-------
Text=num[1]={0}
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [num[1]={0}]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV(num,sizeof(uint32_t));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [RECV(num,sizeof(uint32_t))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=returnnum[0];
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [num[0]]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint16_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint16_t]
-------
Text=num[1]={0}
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [num[1]={0}]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV(num,sizeof(uint16_t));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [RECV(num,sizeof(uint16_t))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=returnnum[0];
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [num[0]]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=uint8_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(NULL==cgc_haiku_list){returnFALSE;}else{returnTRUE;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [NULL==cgc_haiku_list]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{returnFALSE;}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [{returnTRUE;}]
-------
Text=uint8_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(0==cgc_haiku_list->count){returnTRUE;}else{returnFALSE;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0==cgc_haiku_list->count]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{returnTRUE;}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [{returnFALSE;}]
-------
Text=if(FALSE==cgc_haiku_list_exists()){cgc_haiku_list=cgc_list_create();}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [FALSE==cgc_haiku_list_exists()]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{cgc_haiku_list=cgc_list_create();}]
-------
Text=if(TRUE==cgc_haiku_list_exists()){returncgc_haiku_list->count;}else{returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [TRUE==cgc_haiku_list_exists()]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{returncgc_haiku_list->count;}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [{returnERR_LIST_NOT_EXIST;}]
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=node_t*haiku
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [node_t*]
1 : <class 'CParser.CParser.DeclaratorContext'> [haiku]
-------
Text=if(NULL!=haiku->data){structhaiku*h=(structhaiku*)haiku->data;returnh->id;}else{returnERR_EMPTY_NODE;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [NULL!=haiku->data]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{structhaiku*h=(structhaiku*)haiku->data;returnh->id;}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [{returnERR_EMPTY_NODE;}]
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=next_haiku_id++;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [next_haiku_id++]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=returnnext_haiku_id-1;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [next_haiku_id-1]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=uint32_t*idx
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [uint32_t*]
1 : <class 'CParser.CParser.DeclaratorContext'> [idx]
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint32_t]
-------
Text=random_idx=0
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [random_idx=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=ret=0
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [ret=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret=cgc_rand((char*)&random_idx,4);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [ret=cgc_rand((char*)&random_idx,4)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=int32_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int32_t]
-------
Text=count=cgc_get_count()
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [count=cgc_get_count()]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(ERR_LIST_NOT_EXIST==count){returncount;}elseif(0==count){returnERR_LIST_EMPTY;}elseif(0!=ret){returnERR_RAND_FAILED;}else{*idx=random_idx%(uint32_t)count;returnSUCCESS;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [ERR_LIST_NOT_EXIST==count]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{returncount;}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [if(0==count){returnERR_LIST_EMPTY;}elseif(0!=ret){returnERR_RAND_FAILED;}else{*idx=random_idx%(uint32_t)count;returnSUCCESS;}]
-------
Text=uint32_tid_arr[]
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [uint32_t]
1 : <class 'CParser.CParser.DeclaratorContext'> [id_arr[]]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_tcount
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [uint32_t]
1 : <class 'CParser.CParser.DeclaratorContext'> [count]
-------
Text=node_t*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [node_t*]
-------
Text=haiku_ptr=NULL
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [haiku_ptr=NULL]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [structhaiku*]
-------
Text=h=NULL
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [h=NULL]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint32_t]
-------
Text=id=0
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [id=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(TRUE==cgc_haiku_list_exists()){haiku_ptr=cgc_haiku_list->tail;}else{returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [TRUE==cgc_haiku_list_exists()]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{haiku_ptr=cgc_haiku_list->tail;}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [{returnERR_LIST_NOT_EXIST;}]
-------
Text=if((0==count)||(NULL==haiku_ptr)){returnERR_LIST_EMPTY;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [(0==count)||(NULL==haiku_ptr)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{returnERR_LIST_EMPTY;}]
-------
Text=while((0<count)&&(NULL!=haiku_ptr)){h=(structhaiku*)haiku_ptr->data;id_arr[count-1]=h->id;count--;haiku_ptr=haiku_ptr->prev;}
Type=<class 'CParser.CParser.IterationStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [while]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [(0<count)&&(NULL!=haiku_ptr)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{h=(structhaiku*)haiku_ptr->data;id_arr[count-1]=h->id;count--;haiku_ptr=haiku_ptr->prev;}]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [SUCCESS]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=structhaiku**h
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [structhaiku**]
1 : <class 'CParser.CParser.DeclaratorContext'> [h]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_tid
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [uint32_t]
1 : <class 'CParser.CParser.DeclaratorContext'> [id]
-------
Text=node_t*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [node_t*]
-------
Text=haiku_ptr=NULL
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [haiku_ptr=NULL]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [structhaiku*]
-------
Text=tmp=NULL
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [tmp=NULL]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=count=0
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [count=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bool_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [bool_t]
-------
Text=found=FALSE
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [found=FALSE]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count=cgc_get_count();
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [count=cgc_get_count()]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(0<count){haiku_ptr=cgc_haiku_list->head;}elseif(0==count){returnERR_LIST_EMPTY;}else{returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0<count]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{haiku_ptr=cgc_haiku_list->head;}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [if(0==count){returnERR_LIST_EMPTY;}else{returnERR_LIST_NOT_EXIST;}]
-------
Text=while(NULL!=haiku_ptr){tmp=(structhaiku*)haiku_ptr->data;if(id==tmp->id){*h=tmp;found=TRUE;break;}haiku_ptr=haiku_ptr->next;}
Type=<class 'CParser.CParser.IterationStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [while]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [NULL!=haiku_ptr]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{tmp=(structhaiku*)haiku_ptr->data;if(id==tmp->id){*h=tmp;found=TRUE;break;}haiku_ptr=haiku_ptr->next;}]
-------
Text=if(TRUE==found){returnSUCCESS;}else{returnERR_INVALID_ID;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [TRUE==found]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{returnSUCCESS;}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [{returnERR_INVALID_ID;}]
-------
Text=structhaiku*h
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [structhaiku*]
1 : <class 'CParser.CParser.DeclaratorContext'> [h]
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint32_t]
-------
Text=id=h->id
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [id=h->id]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char*]
-------
Text=content=h->content
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [content=h->content]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint16_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint16_t]
-------
Text=length=h->length
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [length=h->length]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_send((char*)&id,sizeof(uint32_t));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_send(content,length);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_send(content,length)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint32_t]
-------
Text=id=EGG_ID
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [id=EGG_ID]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char*]
-------
Text=content=EGG_HAIKU
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [content=EGG_HAIKU]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint16_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint16_t]
-------
Text=length=cgc_strlen(content)
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [length=cgc_strlen(content)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_send((char*)&id,sizeof(uint32_t));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_send(content,length);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_send(content,length)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=uint32_tid
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [uint32_t]
1 : <class 'CParser.CParser.DeclaratorContext'> [id]
-------
Text=SENDUI
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [SENDUI]
-------
Text=(id)
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [(id)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku*h
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [structhaiku*]
1 : <class 'CParser.CParser.DeclaratorContext'> [h]
-------
Text=node_t*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [node_t*]
-------
Text=nd=cgc_node_create((void*)h)
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [nd=cgc_node_create((void*)h)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returncgc_list_push(cgc_haiku_list,nd);
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [cgc_list_push(cgc_haiku_list,nd)]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=char*haiku_content_ptr
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [char*]
1 : <class 'CParser.CParser.DeclaratorContext'> [haiku_content_ptr]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int16_tbytes_remaining
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [int16_t]
1 : <class 'CParser.CParser.DeclaratorContext'> [bytes_remaining]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=temp_line_buf[MAX_HAIKU_LINE_LEN]={0}
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [temp_line_buf[MAX_HAIKU_LINE_LEN]={0}]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int16_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int16_t]
-------
Text=bytes_received=0
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [bytes_received=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int16_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int16_t]
-------
Text=bytes_written=0
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [bytes_written=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_received=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [bytes_received=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(0>bytes_received){returnERR_INVALID_HAIKU;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0>bytes_received]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{returnERR_INVALID_HAIKU;}]
-------
Text=bytes_written=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [bytes_written=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=returnbytes_written;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [bytes_written]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=structhaiku
Type=<class 'CParser.CParser.StructOrUnionSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.StructOrUnionContext'> [struct]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint16_ttotal_bytes
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [uint16_t]
1 : <class 'CParser.CParser.DeclaratorContext'> [total_bytes]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [structhaiku*]
-------
Text=h=NULL
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [h=NULL]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char*]
-------
Text=haiku_content_ptr=NULL
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [haiku_content_ptr=NULL]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int16_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int16_t]
-------
Text=bytes_remaining=0
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [bytes_remaining=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int16_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int16_t]
-------
Text=bytes_written=0
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [bytes_written=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_remaining=(int16_t)total_bytes;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [bytes_remaining=(int16_t)total_bytes]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=ALLOC(sizeof(structhaiku)+total_bytes+1,&h);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [ALLOC(sizeof(structhaiku)+total_bytes+1,&h)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=haiku_content_ptr=h->content;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [haiku_content_ptr=h->content]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=while(0!=bytes_remaining){bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);if(0>bytes_written){returnNULL;}haiku_content_ptr+=bytes_written;bytes_remaining-=bytes_written;}
Type=<class 'CParser.CParser.IterationStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [while]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0!=bytes_remaining]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);if(0>bytes_written){returnNULL;}haiku_content_ptr+=bytes_written;bytes_remaining-=bytes_written;}]
-------
Text=h->id=cgc_get_next_haiku_id();
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [h->id=cgc_get_next_haiku_id()]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=h->length=total_bytes;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [h->length=total_bytes]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=returnh;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [h]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=uint16_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returncgc_recv_uint16();
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [cgc_recv_uint16()]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=ret=SUCCESS
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [ret=SUCCESS]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint16_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint16_t]
-------
Text=total_bytes=0
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [total_bytes=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [structhaiku*]
-------
Text=h=NULL
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [h=NULL]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(FALSE==cgc_haiku_list_exists()){cgc_init_haiku_list();}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [FALSE==cgc_haiku_list_exists()]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{cgc_init_haiku_list();}]
-------
Text=total_bytes=cgc_recv_haiku_size();
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [total_bytes=cgc_recv_haiku_size()]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if((0<total_bytes)&&(MAX_HAIKU_LEN>total_bytes)){h=cgc_recv_haiku(total_bytes);if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}}else{ret=ERR_INVALID_HAIKU_LEN;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [(0<total_bytes)&&(MAX_HAIKU_LEN>total_bytes)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{h=cgc_recv_haiku(total_bytes);if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [{ret=ERR_INVALID_HAIKU_LEN;}]
-------
Text=returnret;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [ret]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [structhaiku*]
-------
Text=h=NULL
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [h=NULL]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint32_t]
-------
Text=id=0
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [id=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=res=0
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [res=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(TRUE==cgc_haiku_list_exists()){id=cgc_recv_uint32();if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}}else{res=ERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [TRUE==cgc_haiku_list_exists()]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{id=cgc_recv_uint32();if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [{res=ERR_LIST_NOT_EXIST;}]
-------
Text=returnres;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [res]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint32_t]
-------
Text=random_idx=0
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [random_idx=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint32_t]
-------
Text=count=0
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [count=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint32_t*]
-------
Text=id_arr=NULL
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [id_arr=NULL]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [structhaiku*]
-------
Text=rand_haiku=NULL
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [rand_haiku=NULL]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=res=SUCCESS
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [res=SUCCESS]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();if(0==count){returnERR_LIST_EMPTY;}ALLOC(count*sizeof(uint32_t),&id_arr);res=cgc_populate_array_with_haiku_ids(id_arr,count);res=cgc_get_random_idx(&random_idx);if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}DEALLOC(id_arr,count*sizeof(uint32_t));if(SUCCESS==res){cgc_send_haiku(rand_haiku);}}else{res=ERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [TRUE==cgc_haiku_list_exists()]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{count=cgc_get_count();if(0==count){returnERR_LIST_EMPTY;}ALLOC(count*sizeof(uint32_t),&id_arr);res=cgc_populate_array_with_haiku_ids(id_arr,count);res=cgc_get_random_idx(&random_idx);if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}DEALLOC(id_arr,count*sizeof(uint32_t));if(SUCCESS==res){cgc_send_haiku(rand_haiku);}}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [{res=ERR_LIST_NOT_EXIST;}]
-------
Text=returnres;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [res]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint32_t]
-------
Text=count=0
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [count=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(TRUE==cgc_haiku_list_exists()){count=cgc_get_count();SENDUI(count);returnSUCCESS;}else{returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [TRUE==cgc_haiku_list_exists()]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{count=cgc_get_count();SENDUI(count);returnSUCCESS;}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [{returnERR_LIST_NOT_EXIST;}]
-------
Text=if(TRUE==cgc_haiku_list_exists()){uint32_tcount=(uint32_t)cgc_get_count();SENDUI(count);node_t*hl_ptr=cgc_haiku_list->head;while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}}else{returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [TRUE==cgc_haiku_list_exists()]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{uint32_tcount=(uint32_t)cgc_get_count();SENDUI(count);node_t*hl_ptr=cgc_haiku_list->head;while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [{returnERR_LIST_NOT_EXIST;}]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [SUCCESS]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=list_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL]
-------
Text=INIT_HAIKU_ID
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [INIT_HAIKU_ID]
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint32_t]
-------
Text=num[1]={0}
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [num[1]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [{0}]
-------
Text=RECV(num,sizeof(uint32_t))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [RECV(num,sizeof(uint32_t))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=num[0]
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [num[0]]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint16_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint16_t]
-------
Text=num[1]={0}
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [num[1]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [{0}]
-------
Text=RECV(num,sizeof(uint16_t))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [RECV(num,sizeof(uint16_t))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=num[0]
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [num[0]]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL==cgc_haiku_list
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL==cgc_haiku_list]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={returnFALSE;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{returnFALSE;}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={returnTRUE;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{returnTRUE;}]
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==cgc_haiku_list->count
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0==cgc_haiku_list->count]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={returnTRUE;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{returnTRUE;}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={returnFALSE;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{returnFALSE;}]
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=FALSE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [FALSE==cgc_haiku_list_exists()]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={cgc_haiku_list=cgc_list_create();}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{cgc_haiku_list=cgc_list_create();}]
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={returncgc_haiku_list->count;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{returncgc_haiku_list->count;}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{returnERR_LIST_NOT_EXIST;}]
-------
Text=node_t*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [node_t*]
-------
Text=haiku
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [haiku]
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL!=haiku->data
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL!=haiku->data]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={structhaiku*h=(structhaiku*)haiku->data;returnh->id;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{structhaiku*h=(structhaiku*)haiku->data;returnh->id;}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={returnERR_EMPTY_NODE;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{returnERR_EMPTY_NODE;}]
-------
Text=next_haiku_id++
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [next_haiku_id++]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=next_haiku_id-1
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [next_haiku_id-1]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint32_t*]
-------
Text=idx
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [idx]
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint32_t]
-------
Text=random_idx=0
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [random_idx]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=ret=0
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [ret]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=ret=cgc_rand((char*)&random_idx,4)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ret=cgc_rand((char*)&random_idx,4)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int32_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int32_t]
-------
Text=count=cgc_get_count()
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [count]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [cgc_get_count()]
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_NOT_EXIST==count
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ERR_LIST_NOT_EXIST==count]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={returncount;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{returncount;}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(0==count){returnERR_LIST_EMPTY;}elseif(0!=ret){returnERR_RAND_FAILED;}else{*idx=random_idx%(uint32_t)count;returnSUCCESS;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0==count){returnERR_LIST_EMPTY;}elseif(0!=ret){returnERR_RAND_FAILED;}else{*idx=random_idx%(uint32_t)count;returnSUCCESS;}]
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint32_t]
-------
Text=id_arr[]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [id_arr[]]
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint32_t]
-------
Text=count
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [count]
-------
Text=node_t*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [node_t*]
-------
Text=haiku_ptr=NULL
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [haiku_ptr]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [NULL]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku*]
-------
Text=h=NULL
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [h]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [NULL]
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint32_t]
-------
Text=id=0
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [id]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={haiku_ptr=cgc_haiku_list->tail;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{haiku_ptr=cgc_haiku_list->tail;}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{returnERR_LIST_NOT_EXIST;}]
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(0==count)||(NULL==haiku_ptr)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(0==count)||(NULL==haiku_ptr)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={returnERR_LIST_EMPTY;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{returnERR_LIST_EMPTY;}]
-------
Text=while
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(0<count)&&(NULL!=haiku_ptr)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(0<count)&&(NULL!=haiku_ptr)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={h=(structhaiku*)haiku_ptr->data;id_arr[count-1]=h->id;count--;haiku_ptr=haiku_ptr->prev;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{h=(structhaiku*)haiku_ptr->data;id_arr[count-1]=h->id;count--;haiku_ptr=haiku_ptr->prev;}]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SUCCESS]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku**
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [structhaiku**]
-------
Text=h
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [h]
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint32_t]
-------
Text=id
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [id]
-------
Text=node_t*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [node_t*]
-------
Text=haiku_ptr=NULL
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [haiku_ptr]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [NULL]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku*]
-------
Text=tmp=NULL
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [tmp]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [NULL]
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=count=0
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [count]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=bool_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [bool_t]
-------
Text=found=FALSE
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [found]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [FALSE]
-------
Text=count=cgc_get_count()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [count=cgc_get_count()]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0<count
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0<count]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={haiku_ptr=cgc_haiku_list->head;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{haiku_ptr=cgc_haiku_list->head;}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(0==count){returnERR_LIST_EMPTY;}else{returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0==count){returnERR_LIST_EMPTY;}else{returnERR_LIST_NOT_EXIST;}]
-------
Text=while
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL!=haiku_ptr
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL!=haiku_ptr]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={tmp=(structhaiku*)haiku_ptr->data;if(id==tmp->id){*h=tmp;found=TRUE;break;}haiku_ptr=haiku_ptr->next;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{tmp=(structhaiku*)haiku_ptr->data;if(id==tmp->id){*h=tmp;found=TRUE;break;}haiku_ptr=haiku_ptr->next;}]
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=TRUE==found
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [TRUE==found]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={returnSUCCESS;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{returnSUCCESS;}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={returnERR_INVALID_ID;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{returnERR_INVALID_ID;}]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [structhaiku*]
-------
Text=h
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [h]
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint32_t]
-------
Text=id=h->id
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [id]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [h->id]
-------
Text=char*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=content=h->content
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [content]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [h->content]
-------
Text=uint16_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint16_t]
-------
Text=length=h->length
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [length]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [h->length]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_send(content,length)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint32_t]
-------
Text=id=EGG_ID
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [id]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [EGG_ID]
-------
Text=char*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=content=EGG_HAIKU
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [content]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [EGG_HAIKU]
-------
Text=uint16_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint16_t]
-------
Text=length=cgc_strlen(content)
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [length]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [cgc_strlen(content)]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_send(content,length)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint32_t]
-------
Text=id
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [id]
-------
Text=SENDUI
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [SENDUI]
-------
Text=(id)
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclaratorContext'> [(id)]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [structhaiku*]
-------
Text=h
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [h]
-------
Text=node_t*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [node_t*]
-------
Text=nd=cgc_node_create((void*)h)
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [nd]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [cgc_node_create((void*)h)]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_push(cgc_haiku_list,nd)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_list_push(cgc_haiku_list,nd)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char*]
-------
Text=haiku_content_ptr
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [haiku_content_ptr]
-------
Text=int16_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int16_t]
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [bytes_remaining]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=temp_line_buf[MAX_HAIKU_LINE_LEN]={0}
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [temp_line_buf[MAX_HAIKU_LINE_LEN]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [{0}]
-------
Text=int16_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int16_t]
-------
Text=bytes_received=0
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [bytes_received]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=int16_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int16_t]
-------
Text=bytes_written=0
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [bytes_written]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=bytes_received=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [bytes_received=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0>bytes_received
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0>bytes_received]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={returnERR_INVALID_HAIKU;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{returnERR_INVALID_HAIKU;}]
-------
Text=bytes_written=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [bytes_written=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_written
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [bytes_written]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=struct
Type=<class 'CParser.CParser.StructOrUnionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [struct]
-------
Text=haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint16_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint16_t]
-------
Text=total_bytes
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [total_bytes]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku*]
-------
Text=h=NULL
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [h]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [NULL]
-------
Text=char*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=haiku_content_ptr=NULL
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [haiku_content_ptr]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [NULL]
-------
Text=int16_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int16_t]
-------
Text=bytes_remaining=0
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [bytes_remaining]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=int16_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int16_t]
-------
Text=bytes_written=0
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [bytes_written]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=bytes_remaining=(int16_t)total_bytes
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [bytes_remaining=(int16_t)total_bytes]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ALLOC(sizeof(structhaiku)+total_bytes+1,&h)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ALLOC(sizeof(structhaiku)+total_bytes+1,&h)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_content_ptr=h->content
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [haiku_content_ptr=h->content]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=while
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0!=bytes_remaining
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0!=bytes_remaining]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);if(0>bytes_written){returnNULL;}haiku_content_ptr+=bytes_written;bytes_remaining-=bytes_written;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);if(0>bytes_written){returnNULL;}haiku_content_ptr+=bytes_written;bytes_remaining-=bytes_written;}]
-------
Text=h->id=cgc_get_next_haiku_id()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [h->id=cgc_get_next_haiku_id()]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h->length=total_bytes
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [h->length=total_bytes]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [h]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recv_uint16()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_recv_uint16()]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=ret=SUCCESS
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [ret]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [SUCCESS]
-------
Text=uint16_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint16_t]
-------
Text=total_bytes=0
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [total_bytes]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku*]
-------
Text=h=NULL
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [h]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [NULL]
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=FALSE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [FALSE==cgc_haiku_list_exists()]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={cgc_init_haiku_list();}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{cgc_init_haiku_list();}]
-------
Text=total_bytes=cgc_recv_haiku_size()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [total_bytes=cgc_recv_haiku_size()]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(0<total_bytes)&&(MAX_HAIKU_LEN>total_bytes)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(0<total_bytes)&&(MAX_HAIKU_LEN>total_bytes)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={h=cgc_recv_haiku(total_bytes);if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{h=cgc_recv_haiku(total_bytes);if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={ret=ERR_INVALID_HAIKU_LEN;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{ret=ERR_INVALID_HAIKU_LEN;}]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ret]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku*]
-------
Text=h=NULL
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [h]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [NULL]
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint32_t]
-------
Text=id=0
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [id]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=res=0
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [res]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={id=cgc_recv_uint32();if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{id=cgc_recv_uint32();if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={res=ERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{res=ERR_LIST_NOT_EXIST;}]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=res
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [res]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint32_t]
-------
Text=random_idx=0
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [random_idx]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint32_t]
-------
Text=count=0
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [count]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=uint32_t*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint32_t*]
-------
Text=id_arr=NULL
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [id_arr]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [NULL]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku*]
-------
Text=rand_haiku=NULL
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [rand_haiku]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [NULL]
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=res=SUCCESS
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [res]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [SUCCESS]
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={count=cgc_get_count();if(0==count){returnERR_LIST_EMPTY;}ALLOC(count*sizeof(uint32_t),&id_arr);res=cgc_populate_array_with_haiku_ids(id_arr,count);res=cgc_get_random_idx(&random_idx);if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}DEALLOC(id_arr,count*sizeof(uint32_t));if(SUCCESS==res){cgc_send_haiku(rand_haiku);}}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{count=cgc_get_count();if(0==count){returnERR_LIST_EMPTY;}ALLOC(count*sizeof(uint32_t),&id_arr);res=cgc_populate_array_with_haiku_ids(id_arr,count);res=cgc_get_random_idx(&random_idx);if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}DEALLOC(id_arr,count*sizeof(uint32_t));if(SUCCESS==res){cgc_send_haiku(rand_haiku);}}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={res=ERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{res=ERR_LIST_NOT_EXIST;}]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=res
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [res]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint32_t]
-------
Text=count=0
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [count]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={count=cgc_get_count();SENDUI(count);returnSUCCESS;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{count=cgc_get_count();SENDUI(count);returnSUCCESS;}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{returnERR_LIST_NOT_EXIST;}]
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={uint32_tcount=(uint32_t)cgc_get_count();SENDUI(count);node_t*hl_ptr=cgc_haiku_list->head;while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{uint32_tcount=(uint32_t)cgc_get_count();SENDUI(count);node_t*hl_ptr=cgc_haiku_list->head;while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{returnERR_LIST_NOT_EXIST;}]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SUCCESS]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL]
-------
Text=INIT_HAIKU_ID
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [INIT_HAIKU_ID]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint32_t]
-------
Text=num[1]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [num[1]]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={0}
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.InitializerListContext'> [0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=RECV(num,sizeof(uint32_t))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [RECV(num,sizeof(uint32_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [num[0]]
-------
Text=uint16_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint16_t]
-------
Text=num[1]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [num[1]]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={0}
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.InitializerListContext'> [0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=RECV(num,sizeof(uint16_t))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [RECV(num,sizeof(uint16_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [num[0]]
-------
Text=NULL==cgc_haiku_list
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL==cgc_haiku_list]
-------
Text={returnFALSE;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [returnFALSE;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text={returnTRUE;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [returnTRUE;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=0==cgc_haiku_list->count
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0==cgc_haiku_list->count]
-------
Text={returnTRUE;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [returnTRUE;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text={returnFALSE;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [returnFALSE;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=FALSE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [FALSE==cgc_haiku_list_exists()]
-------
Text={cgc_haiku_list=cgc_list_create();}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [cgc_haiku_list=cgc_list_create();]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text={returncgc_haiku_list->count;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [returncgc_haiku_list->count;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text={returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [returnERR_LIST_NOT_EXIST;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=node_t*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [node_t*]
-------
Text=haiku
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku]
-------
Text=NULL!=haiku->data
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL!=haiku->data]
-------
Text={structhaiku*h=(structhaiku*)haiku->data;returnh->id;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [structhaiku*h=(structhaiku*)haiku->data;returnh->id;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text={returnERR_EMPTY_NODE;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [returnERR_EMPTY_NODE;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=next_haiku_id++
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [next_haiku_id++]
-------
Text=next_haiku_id-1
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [next_haiku_id-1]
-------
Text=uint32_t*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint32_t*]
-------
Text=idx
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [idx]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint32_t]
-------
Text=random_idx
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [random_idx]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=ret
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [ret]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=ret=cgc_rand((char*)&random_idx,4)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ret]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_rand((char*)&random_idx,4)]
-------
Text=int32_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [int32_t]
-------
Text=count
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [count]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_get_count()]
-------
Text=ERR_LIST_NOT_EXIST==count
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [ERR_LIST_NOT_EXIST==count]
-------
Text={returncount;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [returncount;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=if(0==count){returnERR_LIST_EMPTY;}elseif(0!=ret){returnERR_RAND_FAILED;}else{*idx=random_idx%(uint32_t)count;returnSUCCESS;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0==count]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{returnERR_LIST_EMPTY;}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [if(0!=ret){returnERR_RAND_FAILED;}else{*idx=random_idx%(uint32_t)count;returnSUCCESS;}]
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint32_t]
-------
Text=id_arr[]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [id_arr]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint32_t]
-------
Text=count
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=node_t*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [node_t]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [haiku_ptr]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=h
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [h]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint32_t]
-------
Text=id
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [id]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text={haiku_ptr=cgc_haiku_list->tail;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [haiku_ptr=cgc_haiku_list->tail;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text={returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [returnERR_LIST_NOT_EXIST;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=(0==count)||(NULL==haiku_ptr)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(0==count)||(NULL==haiku_ptr)]
-------
Text={returnERR_LIST_EMPTY;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [returnERR_LIST_EMPTY;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=(0<count)&&(NULL!=haiku_ptr)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(0<count)&&(NULL!=haiku_ptr)]
-------
Text={h=(structhaiku*)haiku_ptr->data;id_arr[count-1]=h->id;count--;haiku_ptr=haiku_ptr->prev;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [h=(structhaiku*)haiku_ptr->data;id_arr[count-1]=h->id;count--;haiku_ptr=haiku_ptr->prev;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SUCCESS]
-------
Text=structhaiku**
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku**]
-------
Text=h
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint32_t]
-------
Text=id
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id]
-------
Text=node_t*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [node_t]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [haiku_ptr]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=tmp
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [tmp]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=count
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [count]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=bool_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [bool_t]
-------
Text=found
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [found]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=FALSE
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [FALSE]
-------
Text=count=cgc_get_count()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [count]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_get_count()]
-------
Text=0<count
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0<count]
-------
Text={haiku_ptr=cgc_haiku_list->head;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [haiku_ptr=cgc_haiku_list->head;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=if(0==count){returnERR_LIST_EMPTY;}else{returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0==count]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{returnERR_LIST_EMPTY;}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [{returnERR_LIST_NOT_EXIST;}]
-------
Text=NULL!=haiku_ptr
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL!=haiku_ptr]
-------
Text={tmp=(structhaiku*)haiku_ptr->data;if(id==tmp->id){*h=tmp;found=TRUE;break;}haiku_ptr=haiku_ptr->next;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [tmp=(structhaiku*)haiku_ptr->data;if(id==tmp->id){*h=tmp;found=TRUE;break;}haiku_ptr=haiku_ptr->next;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=TRUE==found
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [TRUE==found]
-------
Text={returnSUCCESS;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [returnSUCCESS;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text={returnERR_INVALID_ID;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [returnERR_INVALID_ID;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku*]
-------
Text=h
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint32_t]
-------
Text=id
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [id]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h->id
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [h->id]
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=content
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [content]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h->content
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [h->content]
-------
Text=uint16_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint16_t]
-------
Text=length
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [length]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h->length
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [h->length]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_send(content,length)]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint32_t]
-------
Text=id
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [id]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=EGG_ID
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [EGG_ID]
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=content
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [content]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=EGG_HAIKU
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [EGG_HAIKU]
-------
Text=uint16_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint16_t]
-------
Text=length
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [length]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_strlen(content)
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_strlen(content)]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_send(content,length)]
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint32_t]
-------
Text=id
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id]
-------
Text=SENDUI
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [SENDUI]
-------
Text=(id)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [(id)]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku*]
-------
Text=h
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=node_t*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [node_t]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=nd
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [nd]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_node_create((void*)h)
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_node_create((void*)h)]
-------
Text=cgc_list_push(cgc_haiku_list,nd)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_list_push(cgc_haiku_list,nd)]
-------
Text=char*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=haiku_content_ptr
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku_content_ptr]
-------
Text=int16_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int16_t]
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bytes_remaining]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=temp_line_buf[MAX_HAIKU_LINE_LEN]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [temp_line_buf[MAX_HAIKU_LINE_LEN]]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={0}
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.InitializerListContext'> [0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=int16_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [int16_t]
-------
Text=bytes_received
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [bytes_received]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=int16_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [int16_t]
-------
Text=bytes_written
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [bytes_written]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=bytes_received=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [bytes_received]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)]
-------
Text=0>bytes_received
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0>bytes_received]
-------
Text={returnERR_INVALID_HAIKU;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [returnERR_INVALID_HAIKU;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=bytes_written=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [bytes_written]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)]
-------
Text=bytes_written
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [bytes_written]
-------
Text=struct
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint16_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint16_t]
-------
Text=total_bytes
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [total_bytes]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=h
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [h]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL]
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=haiku_content_ptr
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [haiku_content_ptr]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL]
-------
Text=int16_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [int16_t]
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [bytes_remaining]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=int16_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [int16_t]
-------
Text=bytes_written
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [bytes_written]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=bytes_remaining=(int16_t)total_bytes
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [bytes_remaining]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [(int16_t)total_bytes]
-------
Text=ALLOC(sizeof(structhaiku)+total_bytes+1,&h)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [ALLOC(sizeof(structhaiku)+total_bytes+1,&h)]
-------
Text=haiku_content_ptr=h->content
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [haiku_content_ptr]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [h->content]
-------
Text=0!=bytes_remaining
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0!=bytes_remaining]
-------
Text={bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);if(0>bytes_written){returnNULL;}haiku_content_ptr+=bytes_written;bytes_remaining-=bytes_written;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);if(0>bytes_written){returnNULL;}haiku_content_ptr+=bytes_written;bytes_remaining-=bytes_written;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=h->id=cgc_get_next_haiku_id()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [h->id]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_get_next_haiku_id()]
-------
Text=h->length=total_bytes
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [h->length]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [total_bytes]
-------
Text=h
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [h]
-------
Text=cgc_recv_uint16()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_recv_uint16()]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=ret
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [ret]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SUCCESS]
-------
Text=uint16_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint16_t]
-------
Text=total_bytes
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [total_bytes]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=h
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [h]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL]
-------
Text=FALSE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [FALSE==cgc_haiku_list_exists()]
-------
Text={cgc_init_haiku_list();}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [cgc_init_haiku_list();]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=total_bytes=cgc_recv_haiku_size()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [total_bytes]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_recv_haiku_size()]
-------
Text=(0<total_bytes)&&(MAX_HAIKU_LEN>total_bytes)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(0<total_bytes)&&(MAX_HAIKU_LEN>total_bytes)]
-------
Text={h=cgc_recv_haiku(total_bytes);if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [h=cgc_recv_haiku(total_bytes);if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text={ret=ERR_INVALID_HAIKU_LEN;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [ret=ERR_INVALID_HAIKU_LEN;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=ret
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [ret]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=h
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [h]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint32_t]
-------
Text=id
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [id]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=res
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [res]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text={id=cgc_recv_uint32();if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [id=cgc_recv_uint32();if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text={res=ERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [res=ERR_LIST_NOT_EXIST;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=res
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [res]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint32_t]
-------
Text=random_idx
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [random_idx]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint32_t]
-------
Text=count
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [count]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=uint32_t*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint32_t]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=id_arr
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [id_arr]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=rand_haiku
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [rand_haiku]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=res
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [res]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SUCCESS]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text={count=cgc_get_count();if(0==count){returnERR_LIST_EMPTY;}ALLOC(count*sizeof(uint32_t),&id_arr);res=cgc_populate_array_with_haiku_ids(id_arr,count);res=cgc_get_random_idx(&random_idx);if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}DEALLOC(id_arr,count*sizeof(uint32_t));if(SUCCESS==res){cgc_send_haiku(rand_haiku);}}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [count=cgc_get_count();if(0==count){returnERR_LIST_EMPTY;}ALLOC(count*sizeof(uint32_t),&id_arr);res=cgc_populate_array_with_haiku_ids(id_arr,count);res=cgc_get_random_idx(&random_idx);if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}DEALLOC(id_arr,count*sizeof(uint32_t));if(SUCCESS==res){cgc_send_haiku(rand_haiku);}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text={res=ERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [res=ERR_LIST_NOT_EXIST;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=res
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [res]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint32_t]
-------
Text=count
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [count]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text={count=cgc_get_count();SENDUI(count);returnSUCCESS;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [count=cgc_get_count();SENDUI(count);returnSUCCESS;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text={returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [returnERR_LIST_NOT_EXIST;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text={uint32_tcount=(uint32_t)cgc_get_count();SENDUI(count);node_t*hl_ptr=cgc_haiku_list->head;while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [uint32_tcount=(uint32_t)cgc_get_count();SENDUI(count);node_t*hl_ptr=cgc_haiku_list->head;while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text={returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [returnERR_LIST_NOT_EXIST;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL]
-------
Text=INIT_HAIKU_ID
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [INIT_HAIKU_ID]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=num[1]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [num]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [1]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV(num,sizeof(uint32_t))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [RECV(num,sizeof(uint32_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [num[0]]
-------
Text=uint16_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint16_t]
-------
Text=num[1]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [num]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [1]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV(num,sizeof(uint16_t))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [RECV(num,sizeof(uint16_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [num[0]]
-------
Text=NULL==cgc_haiku_list
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL==cgc_haiku_list]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returnFALSE;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [returnFALSE;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returnTRUE;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [returnTRUE;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==cgc_haiku_list->count
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0==cgc_haiku_list->count]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returnTRUE;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [returnTRUE;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returnFALSE;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [returnFALSE;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=FALSE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [FALSE==cgc_haiku_list_exists()]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list=cgc_list_create();
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [cgc_haiku_list=cgc_list_create();]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returncgc_haiku_list->count;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [returncgc_haiku_list->count;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returnERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [returnERR_LIST_NOT_EXIST;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=node_t*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [node_t]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL!=haiku->data
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL!=haiku->data]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku*h=(structhaiku*)haiku->data;returnh->id;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 2
0 : <class 'CParser.CParser.BlockItemContext'> [structhaiku*h=(structhaiku*)haiku->data;]
1 : <class 'CParser.CParser.BlockItemContext'> [returnh->id;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returnERR_EMPTY_NODE;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [returnERR_EMPTY_NODE;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=next_haiku_id++
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [next_haiku_id++]
-------
Text=next_haiku_id-1
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [next_haiku_id-1]
-------
Text=uint32_t*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint32_t]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=idx
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=random_idx
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [random_idx]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ret]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=ret
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ret]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_rand((char*)&random_idx,4)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_rand((char*)&random_idx,4)]
-------
Text=int32_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int32_t]
-------
Text=count
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_get_count()]
-------
Text=ERR_LIST_NOT_EXIST==count
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [ERR_LIST_NOT_EXIST==count]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returncount;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [returncount;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==count
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0==count]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={returnERR_LIST_EMPTY;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{returnERR_LIST_EMPTY;}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(0!=ret){returnERR_RAND_FAILED;}else{*idx=random_idx%(uint32_t)count;returnSUCCESS;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0!=ret){returnERR_RAND_FAILED;}else{*idx=random_idx%(uint32_t)count;returnSUCCESS;}]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint32_t]
-------
Text=id_arr
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id_arr]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint32_t]
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=node_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [node_t]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku_ptr]
-------
Text=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL]
-------
Text=structhaiku
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StructOrUnionSpecifierContext'> [structhaiku]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=h
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=id
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_ptr=cgc_haiku_list->tail;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [haiku_ptr=cgc_haiku_list->tail;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returnERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [returnERR_LIST_NOT_EXIST;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(0==count)||(NULL==haiku_ptr)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(0==count)||(NULL==haiku_ptr)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returnERR_LIST_EMPTY;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [returnERR_LIST_EMPTY;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(0<count)&&(NULL!=haiku_ptr)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(0<count)&&(NULL!=haiku_ptr)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h=(structhaiku*)haiku_ptr->data;id_arr[count-1]=h->id;count--;haiku_ptr=haiku_ptr->prev;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 4
0 : <class 'CParser.CParser.BlockItemContext'> [h=(structhaiku*)haiku_ptr->data;]
1 : <class 'CParser.CParser.BlockItemContext'> [id_arr[count-1]=h->id;]
2 : <class 'CParser.CParser.BlockItemContext'> [count--;]
3 : <class 'CParser.CParser.BlockItemContext'> [haiku_ptr=haiku_ptr->prev;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SUCCESS]
-------
Text=structhaiku**
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku]
1 : <class 'CParser.CParser.PointerContext'> [**]
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint32_t]
-------
Text=id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=node_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [node_t]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku_ptr]
-------
Text=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL]
-------
Text=structhaiku
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StructOrUnionSpecifierContext'> [structhaiku]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=tmp
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [tmp]
-------
Text=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL]
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=bool_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bool_t]
-------
Text=found
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [found]
-------
Text=FALSE
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [FALSE]
-------
Text=count
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [count]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_get_count()]
-------
Text=0<count
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0<count]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_ptr=cgc_haiku_list->head;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [haiku_ptr=cgc_haiku_list->head;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==count
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0==count]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={returnERR_LIST_EMPTY;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{returnERR_LIST_EMPTY;}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{returnERR_LIST_NOT_EXIST;}]
-------
Text=NULL!=haiku_ptr
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL!=haiku_ptr]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=tmp=(structhaiku*)haiku_ptr->data;if(id==tmp->id){*h=tmp;found=TRUE;break;}haiku_ptr=haiku_ptr->next;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 3
0 : <class 'CParser.CParser.BlockItemContext'> [tmp=(structhaiku*)haiku_ptr->data;]
1 : <class 'CParser.CParser.BlockItemContext'> [if(id==tmp->id){*h=tmp;found=TRUE;break;}]
2 : <class 'CParser.CParser.BlockItemContext'> [haiku_ptr=haiku_ptr->next;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=TRUE==found
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [TRUE==found]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [returnSUCCESS;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returnERR_INVALID_ID;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [returnERR_INVALID_ID;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=id
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id]
-------
Text=h->id
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [h->id]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=content
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [content]
-------
Text=h->content
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [h->content]
-------
Text=uint16_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint16_t]
-------
Text=length
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [length]
-------
Text=h->length
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [h->length]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_send(content,length)]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=id
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id]
-------
Text=EGG_ID
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [EGG_ID]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=content
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [content]
-------
Text=EGG_HAIKU
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [EGG_HAIKU]
-------
Text=uint16_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint16_t]
-------
Text=length
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [length]
-------
Text=cgc_strlen(content)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_strlen(content)]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_send(content,length)]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint32_t]
-------
Text=id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SENDUI
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SENDUI]
-------
Text=(id)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.DeclaratorContext'> [id]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=node_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [node_t]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=nd
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [nd]
-------
Text=cgc_node_create((void*)h)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_node_create((void*)h)]
-------
Text=cgc_list_push(cgc_haiku_list,nd)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_list_push(cgc_haiku_list,nd)]
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=haiku_content_ptr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int16_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [int16_t]
-------
Text=bytes_remaining
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=temp_line_buf[MAX_HAIKU_LINE_LEN]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [temp_line_buf]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [MAX_HAIKU_LINE_LEN]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int16_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int16_t]
-------
Text=bytes_received
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bytes_received]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=int16_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int16_t]
-------
Text=bytes_written
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bytes_written]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=bytes_received
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [bytes_received]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)]
-------
Text=0>bytes_received
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0>bytes_received]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returnERR_INVALID_HAIKU;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [returnERR_INVALID_HAIKU;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_written
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [bytes_written]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)]
-------
Text=bytes_written
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [bytes_written]
-------
Text=uint16_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint16_t]
-------
Text=total_bytes
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StructOrUnionSpecifierContext'> [structhaiku]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=h
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=haiku_content_ptr
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku_content_ptr]
-------
Text=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL]
-------
Text=int16_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int16_t]
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bytes_remaining]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=int16_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int16_t]
-------
Text=bytes_written
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bytes_written]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [bytes_remaining]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=(int16_t)total_bytes
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(int16_t)total_bytes]
-------
Text=ALLOC(sizeof(structhaiku)+total_bytes+1,&h)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [ALLOC(sizeof(structhaiku)+total_bytes+1,&h)]
-------
Text=haiku_content_ptr
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [haiku_content_ptr]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=h->content
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [h->content]
-------
Text=0!=bytes_remaining
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0!=bytes_remaining]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);if(0>bytes_written){returnNULL;}haiku_content_ptr+=bytes_written;bytes_remaining-=bytes_written;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 4
0 : <class 'CParser.CParser.BlockItemContext'> [bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);]
1 : <class 'CParser.CParser.BlockItemContext'> [if(0>bytes_written){returnNULL;}]
2 : <class 'CParser.CParser.BlockItemContext'> [haiku_content_ptr+=bytes_written;]
3 : <class 'CParser.CParser.BlockItemContext'> [bytes_remaining-=bytes_written;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h->id
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [h->id]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_get_next_haiku_id()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_get_next_haiku_id()]
-------
Text=h->length
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [h->length]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=total_bytes
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [total_bytes]
-------
Text=h
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [h]
-------
Text=cgc_recv_uint16()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_recv_uint16()]
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ret]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SUCCESS]
-------
Text=uint16_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint16_t]
-------
Text=total_bytes
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [total_bytes]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=structhaiku
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StructOrUnionSpecifierContext'> [structhaiku]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=h
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL]
-------
Text=FALSE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [FALSE==cgc_haiku_list_exists()]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_init_haiku_list();
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [cgc_init_haiku_list();]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=total_bytes
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [total_bytes]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_recv_haiku_size()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_recv_haiku_size()]
-------
Text=(0<total_bytes)&&(MAX_HAIKU_LEN>total_bytes)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(0<total_bytes)&&(MAX_HAIKU_LEN>total_bytes)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h=cgc_recv_haiku(total_bytes);if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 2
0 : <class 'CParser.CParser.BlockItemContext'> [h=cgc_recv_haiku(total_bytes);]
1 : <class 'CParser.CParser.BlockItemContext'> [if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret=ERR_INVALID_HAIKU_LEN;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [ret=ERR_INVALID_HAIKU_LEN;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [ret]
-------
Text=structhaiku
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StructOrUnionSpecifierContext'> [structhaiku]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=h
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=id
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=res
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [res]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id=cgc_recv_uint32();if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 2
0 : <class 'CParser.CParser.BlockItemContext'> [id=cgc_recv_uint32();]
1 : <class 'CParser.CParser.BlockItemContext'> [if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=res=ERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [res=ERR_LIST_NOT_EXIST;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=res
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [res]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=random_idx
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [random_idx]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=count
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint32_t]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=id_arr
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id_arr]
-------
Text=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL]
-------
Text=structhaiku
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StructOrUnionSpecifierContext'> [structhaiku]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=rand_haiku
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [rand_haiku]
-------
Text=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL]
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=res
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [res]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SUCCESS]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count=cgc_get_count();if(0==count){returnERR_LIST_EMPTY;}ALLOC(count*sizeof(uint32_t),&id_arr);res=cgc_populate_array_with_haiku_ids(id_arr,count);res=cgc_get_random_idx(&random_idx);if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}DEALLOC(id_arr,count*sizeof(uint32_t));if(SUCCESS==res){cgc_send_haiku(rand_haiku);}
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 8
0 : <class 'CParser.CParser.BlockItemContext'> [count=cgc_get_count();]
1 : <class 'CParser.CParser.BlockItemContext'> [if(0==count){returnERR_LIST_EMPTY;}]
2 : <class 'CParser.CParser.BlockItemContext'> [ALLOC(count*sizeof(uint32_t),&id_arr);]
3 : <class 'CParser.CParser.BlockItemContext'> [res=cgc_populate_array_with_haiku_ids(id_arr,count);]
4 : <class 'CParser.CParser.BlockItemContext'> [res=cgc_get_random_idx(&random_idx);]
5 : <class 'CParser.CParser.BlockItemContext'> [if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}]
6 : <class 'CParser.CParser.BlockItemContext'> [DEALLOC(id_arr,count*sizeof(uint32_t));]
7 : <class 'CParser.CParser.BlockItemContext'> [if(SUCCESS==res){cgc_send_haiku(rand_haiku);}]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=res=ERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [res=ERR_LIST_NOT_EXIST;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=res
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [res]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=count
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count=cgc_get_count();SENDUI(count);returnSUCCESS;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 3
0 : <class 'CParser.CParser.BlockItemContext'> [count=cgc_get_count();]
1 : <class 'CParser.CParser.BlockItemContext'> [SENDUI(count);]
2 : <class 'CParser.CParser.BlockItemContext'> [returnSUCCESS;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returnERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [returnERR_LIST_NOT_EXIST;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_tcount=(uint32_t)cgc_get_count();SENDUI(count);node_t*hl_ptr=cgc_haiku_list->head;while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 4
0 : <class 'CParser.CParser.BlockItemContext'> [uint32_tcount=(uint32_t)cgc_get_count();]
1 : <class 'CParser.CParser.BlockItemContext'> [SENDUI(count);]
2 : <class 'CParser.CParser.BlockItemContext'> [node_t*hl_ptr=cgc_haiku_list->head;]
3 : <class 'CParser.CParser.BlockItemContext'> [while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returnERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [returnERR_LIST_NOT_EXIST;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL]
-------
Text=INIT_HAIKU_ID
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [INIT_HAIKU_ID]
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=num
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [num]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [1]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=RECV(num,sizeof(uint32_t))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [RECV(num,sizeof(uint32_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [num[0]]
-------
Text=uint16_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=num
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [num]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [1]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=RECV(num,sizeof(uint16_t))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [RECV(num,sizeof(uint16_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [num[0]]
-------
Text=NULL==cgc_haiku_list
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL==cgc_haiku_list]
-------
Text=returnFALSE;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnFALSE;]
-------
Text=returnTRUE;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnTRUE;]
-------
Text=0==cgc_haiku_list->count
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0==cgc_haiku_list->count]
-------
Text=returnTRUE;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnTRUE;]
-------
Text=returnFALSE;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnFALSE;]
-------
Text=FALSE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [FALSE==cgc_haiku_list_exists()]
-------
Text=cgc_haiku_list=cgc_list_create();
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_haiku_list=cgc_list_create();]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=returncgc_haiku_list->count;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returncgc_haiku_list->count;]
-------
Text=returnERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnERR_LIST_NOT_EXIST;]
-------
Text=node_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [node_t]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=NULL!=haiku->data
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL!=haiku->data]
-------
Text=structhaiku*h=(structhaiku*)haiku->data;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [structhaiku*h=(structhaiku*)haiku->data;]
-------
Text=returnh->id;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnh->id;]
-------
Text=returnERR_EMPTY_NODE;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnERR_EMPTY_NODE;]
-------
Text=next_haiku_id++
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [next_haiku_id++]
-------
Text=next_haiku_id-1
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [next_haiku_id-1]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint32_t]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=random_idx
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=ret
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=ret
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ret]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_rand((char*)&random_idx,4)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_rand((char*)&random_idx,4)]
-------
Text=int32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_get_count()]
-------
Text=ERR_LIST_NOT_EXIST==count
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [ERR_LIST_NOT_EXIST==count]
-------
Text=returncount;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returncount;]
-------
Text=0==count
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0==count]
-------
Text={returnERR_LIST_EMPTY;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [returnERR_LIST_EMPTY;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=if(0!=ret){returnERR_RAND_FAILED;}else{*idx=random_idx%(uint32_t)count;returnSUCCESS;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0!=ret]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{returnERR_RAND_FAILED;}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [{*idx=random_idx%(uint32_t)count;returnSUCCESS;}]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=id_arr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=node_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [node_t]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_ptr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL]
-------
Text=structhaiku
Type=<class 'CParser.CParser.StructOrUnionSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.StructOrUnionContext'> [struct]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL]
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=haiku_ptr=cgc_haiku_list->tail;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [haiku_ptr=cgc_haiku_list->tail;]
-------
Text=returnERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnERR_LIST_NOT_EXIST;]
-------
Text=(0==count)||(NULL==haiku_ptr)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(0==count)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [||]
2 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(NULL==haiku_ptr)]
-------
Text=returnERR_LIST_EMPTY;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnERR_LIST_EMPTY;]
-------
Text=(0<count)&&(NULL!=haiku_ptr)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(0<count)&&(NULL!=haiku_ptr)]
-------
Text=h=(structhaiku*)haiku_ptr->data;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [h=(structhaiku*)haiku_ptr->data;]
-------
Text=id_arr[count-1]=h->id;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [id_arr[count-1]=h->id;]
-------
Text=count--;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [count--;]
-------
Text=haiku_ptr=haiku_ptr->prev;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [haiku_ptr=haiku_ptr->prev;]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SUCCESS]
-------
Text=structhaiku
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StructOrUnionSpecifierContext'> [structhaiku]
-------
Text=**
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=node_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [node_t]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_ptr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL]
-------
Text=structhaiku
Type=<class 'CParser.CParser.StructOrUnionSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.StructOrUnionContext'> [struct]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=tmp
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL]
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=bool_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=found
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=FALSE
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [FALSE]
-------
Text=count
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [count]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_get_count()]
-------
Text=0<count
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0<count]
-------
Text=haiku_ptr=cgc_haiku_list->head;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [haiku_ptr=cgc_haiku_list->head;]
-------
Text=0==count
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0==count]
-------
Text={returnERR_LIST_EMPTY;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [returnERR_LIST_EMPTY;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text={returnERR_LIST_NOT_EXIST;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [returnERR_LIST_NOT_EXIST;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=NULL!=haiku_ptr
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL!=haiku_ptr]
-------
Text=tmp=(structhaiku*)haiku_ptr->data;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [tmp=(structhaiku*)haiku_ptr->data;]
-------
Text=if(id==tmp->id){*h=tmp;found=TRUE;break;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(id==tmp->id){*h=tmp;found=TRUE;break;}]
-------
Text=haiku_ptr=haiku_ptr->next;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [haiku_ptr=haiku_ptr->next;]
-------
Text=TRUE==found
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [TRUE==found]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnSUCCESS;]
-------
Text=returnERR_INVALID_ID;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnERR_INVALID_ID;]
-------
Text=structhaiku
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StructOrUnionSpecifierContext'> [structhaiku]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h->id
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [h->id]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=content
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h->content
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [h->content]
-------
Text=uint16_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=length
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h->length
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [h->length]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_send(content,length)]
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=EGG_ID
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [EGG_ID]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=content
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=EGG_HAIKU
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [EGG_HAIKU]
-------
Text=uint16_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=length
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_strlen(content)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_strlen(content)]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_send(content,length)]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=SENDUI
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [id]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StructOrUnionSpecifierContext'> [structhaiku]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=node_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [node_t]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=nd
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_node_create((void*)h)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_node_create((void*)h)]
-------
Text=cgc_list_push(cgc_haiku_list,nd)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_list_push(cgc_haiku_list,nd)]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=int16_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int16_t]
-------
Text=temp_line_buf
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [temp_line_buf]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=MAX_HAIKU_LINE_LEN
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [MAX_HAIKU_LINE_LEN]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=int16_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_received
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=int16_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_written
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=bytes_received
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [bytes_received]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)]
-------
Text=0>bytes_received
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0>bytes_received]
-------
Text=returnERR_INVALID_HAIKU;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnERR_INVALID_HAIKU;]
-------
Text=bytes_written
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [bytes_written]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)]
-------
Text=bytes_written
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [bytes_written]
-------
Text=uint16_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint16_t]
-------
Text=structhaiku
Type=<class 'CParser.CParser.StructOrUnionSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.StructOrUnionContext'> [struct]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_content_ptr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL]
-------
Text=int16_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_remaining
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=int16_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_written
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [bytes_remaining]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(int16_t)total_bytes
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(int16_t)total_bytes]
-------
Text=ALLOC(sizeof(structhaiku)+total_bytes+1,&h)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [ALLOC(sizeof(structhaiku)+total_bytes+1,&h)]
-------
Text=haiku_content_ptr
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [haiku_content_ptr]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h->content
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [h->content]
-------
Text=0!=bytes_remaining
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0!=bytes_remaining]
-------
Text=bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);]
-------
Text=if(0>bytes_written){returnNULL;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(0>bytes_written){returnNULL;}]
-------
Text=haiku_content_ptr+=bytes_written;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [haiku_content_ptr+=bytes_written;]
-------
Text=bytes_remaining-=bytes_written;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [bytes_remaining-=bytes_written;]
-------
Text=h->id
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [h]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_next_haiku_id()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_get_next_haiku_id()]
-------
Text=h->length
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [h]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [length]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=total_bytes
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [total_bytes]
-------
Text=h
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [h]
-------
Text=cgc_recv_uint16()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_recv_uint16()]
-------
Text=ret
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SUCCESS]
-------
Text=uint16_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=total_bytes
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=structhaiku
Type=<class 'CParser.CParser.StructOrUnionSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.StructOrUnionContext'> [struct]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL]
-------
Text=FALSE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [FALSE==cgc_haiku_list_exists()]
-------
Text=cgc_init_haiku_list();
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_init_haiku_list();]
-------
Text=total_bytes
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [total_bytes]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recv_haiku_size()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_recv_haiku_size()]
-------
Text=(0<total_bytes)&&(MAX_HAIKU_LEN>total_bytes)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(0<total_bytes)&&(MAX_HAIKU_LEN>total_bytes)]
-------
Text=h=cgc_recv_haiku(total_bytes);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [h=cgc_recv_haiku(total_bytes);]
-------
Text=if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}]
-------
Text=ret=ERR_INVALID_HAIKU_LEN;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [ret=ERR_INVALID_HAIKU_LEN;]
-------
Text=ret
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [ret]
-------
Text=structhaiku
Type=<class 'CParser.CParser.StructOrUnionSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.StructOrUnionContext'> [struct]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL]
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=res
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=id=cgc_recv_uint32();
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [id=cgc_recv_uint32();]
-------
Text=if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}]
-------
Text=res=ERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [res=ERR_LIST_NOT_EXIST;]
-------
Text=res
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [res]
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=random_idx
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id_arr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL]
-------
Text=structhaiku
Type=<class 'CParser.CParser.StructOrUnionSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.StructOrUnionContext'> [struct]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=rand_haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL]
-------
Text=res
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SUCCESS]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=count=cgc_get_count();
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [count=cgc_get_count();]
-------
Text=if(0==count){returnERR_LIST_EMPTY;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(0==count){returnERR_LIST_EMPTY;}]
-------
Text=ALLOC(count*sizeof(uint32_t),&id_arr);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [ALLOC(count*sizeof(uint32_t),&id_arr);]
-------
Text=res=cgc_populate_array_with_haiku_ids(id_arr,count);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [res=cgc_populate_array_with_haiku_ids(id_arr,count);]
-------
Text=res=cgc_get_random_idx(&random_idx);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [res=cgc_get_random_idx(&random_idx);]
-------
Text=if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}]
-------
Text=DEALLOC(id_arr,count*sizeof(uint32_t));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [DEALLOC(id_arr,count*sizeof(uint32_t));]
-------
Text=if(SUCCESS==res){cgc_send_haiku(rand_haiku);}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(SUCCESS==res){cgc_send_haiku(rand_haiku);}]
-------
Text=res=ERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [res=ERR_LIST_NOT_EXIST;]
-------
Text=res
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [res]
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=count=cgc_get_count();
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [count=cgc_get_count();]
-------
Text=SENDUI(count);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [SENDUI(count);]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnSUCCESS;]
-------
Text=returnERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnERR_LIST_NOT_EXIST;]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=uint32_tcount=(uint32_t)cgc_get_count();
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [uint32_tcount=(uint32_t)cgc_get_count();]
-------
Text=SENDUI(count);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [SENDUI(count);]
-------
Text=node_t*hl_ptr=cgc_haiku_list->head;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [node_t*hl_ptr=cgc_haiku_list->head;]
-------
Text=while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}]
-------
Text=returnERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnERR_LIST_NOT_EXIST;]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL]
-------
Text=INIT_HAIKU_ID
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [INIT_HAIKU_ID]
-------
Text=num
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=RECV(num,sizeof(uint32_t))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [RECV(num,sizeof(uint32_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [num[0]]
-------
Text=num
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=RECV(num,sizeof(uint16_t))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [RECV(num,sizeof(uint16_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [num[0]]
-------
Text=NULL==cgc_haiku_list
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL==cgc_haiku_list]
-------
Text=returnFALSE;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnFALSE;]
-------
Text=returnTRUE;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnTRUE;]
-------
Text=0==cgc_haiku_list->count
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0==cgc_haiku_list->count]
-------
Text=returnTRUE;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnTRUE;]
-------
Text=returnFALSE;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnFALSE;]
-------
Text=FALSE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [FALSE==cgc_haiku_list_exists()]
-------
Text=cgc_haiku_list=cgc_list_create();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_haiku_list=cgc_list_create();]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=returncgc_haiku_list->count;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returncgc_haiku_list->count;]
-------
Text=returnERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnERR_LIST_NOT_EXIST;]
-------
Text=node_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [node_t]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL!=haiku->data
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL!=haiku->data]
-------
Text=structhaiku*h=(structhaiku*)haiku->data;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [structhaiku*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [h=(structhaiku*)haiku->data]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=returnh->id;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnh->id;]
-------
Text=returnERR_EMPTY_NODE;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnERR_EMPTY_NODE;]
-------
Text=next_haiku_id++
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [next_haiku_id++]
-------
Text=next_haiku_id-1
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [next_haiku_id-1]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=ret
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ret]
-------
Text=cgc_rand((char*)&random_idx,4)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_rand((char*)&random_idx,4)]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_get_count()]
-------
Text=ERR_LIST_NOT_EXIST==count
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [ERR_LIST_NOT_EXIST==count]
-------
Text=returncount;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returncount;]
-------
Text=0==count
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0==count]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returnERR_LIST_EMPTY;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [returnERR_LIST_EMPTY;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0!=ret
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0!=ret]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={returnERR_RAND_FAILED;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{returnERR_RAND_FAILED;}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={*idx=random_idx%(uint32_t)count;returnSUCCESS;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{*idx=random_idx%(uint32_t)count;returnSUCCESS;}]
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=node_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL]
-------
Text=struct
Type=<class 'CParser.CParser.StructOrUnionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [struct]
-------
Text=haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=haiku_ptr=cgc_haiku_list->tail;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [haiku_ptr=cgc_haiku_list->tail;]
-------
Text=returnERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnERR_LIST_NOT_EXIST;]
-------
Text=(0==count)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(0==count)]
-------
Text=||
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(NULL==haiku_ptr)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(NULL==haiku_ptr)]
-------
Text=returnERR_LIST_EMPTY;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnERR_LIST_EMPTY;]
-------
Text=(0<count)&&(NULL!=haiku_ptr)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(0<count)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&&]
2 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(NULL!=haiku_ptr)]
-------
Text=h=(structhaiku*)haiku_ptr->data;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [h=(structhaiku*)haiku_ptr->data;]
-------
Text=id_arr[count-1]=h->id;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [id_arr[count-1]=h->id;]
-------
Text=count--;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [count--;]
-------
Text=haiku_ptr=haiku_ptr->prev;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [haiku_ptr=haiku_ptr->prev;]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SUCCESS]
-------
Text=structhaiku
Type=<class 'CParser.CParser.StructOrUnionSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.StructOrUnionContext'> [struct]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=node_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL]
-------
Text=struct
Type=<class 'CParser.CParser.StructOrUnionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [struct]
-------
Text=haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=FALSE
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [FALSE]
-------
Text=count
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_get_count()]
-------
Text=0<count
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0<count]
-------
Text=haiku_ptr=cgc_haiku_list->head;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [haiku_ptr=cgc_haiku_list->head;]
-------
Text=0==count
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0==count]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returnERR_LIST_EMPTY;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [returnERR_LIST_EMPTY;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returnERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [returnERR_LIST_NOT_EXIST;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL!=haiku_ptr
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL!=haiku_ptr]
-------
Text=tmp=(structhaiku*)haiku_ptr->data;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [tmp=(structhaiku*)haiku_ptr->data;]
-------
Text=if(id==tmp->id){*h=tmp;found=TRUE;break;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(id==tmp->id){*h=tmp;found=TRUE;break;}]
-------
Text=haiku_ptr=haiku_ptr->next;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [haiku_ptr=haiku_ptr->next;]
-------
Text=TRUE==found
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [TRUE==found]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnSUCCESS;]
-------
Text=returnERR_INVALID_ID;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnERR_INVALID_ID;]
-------
Text=structhaiku
Type=<class 'CParser.CParser.StructOrUnionSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.StructOrUnionContext'> [struct]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h->id
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [h->id]
-------
Text=h->content
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [h->content]
-------
Text=h->length
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [h->length]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_send(content,length)]
-------
Text=EGG_ID
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [EGG_ID]
-------
Text=EGG_HAIKU
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [EGG_HAIKU]
-------
Text=cgc_strlen(content)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_strlen(content)]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_send(content,length)]
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id]
-------
Text=structhaiku
Type=<class 'CParser.CParser.StructOrUnionSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.StructOrUnionContext'> [struct]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=node_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_node_create((void*)h)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_node_create((void*)h)]
-------
Text=cgc_list_push(cgc_haiku_list,nd)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_list_push(cgc_haiku_list,nd)]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int16_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=temp_line_buf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=MAX_HAIKU_LINE_LEN
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [MAX_HAIKU_LINE_LEN]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=bytes_received
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bytes_received]
-------
Text=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)]
-------
Text=0>bytes_received
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0>bytes_received]
-------
Text=returnERR_INVALID_HAIKU;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnERR_INVALID_HAIKU;]
-------
Text=bytes_written
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bytes_written]
-------
Text=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)]
-------
Text=bytes_written
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [bytes_written]
-------
Text=uint16_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=struct
Type=<class 'CParser.CParser.StructOrUnionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [struct]
-------
Text=haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bytes_remaining]
-------
Text=(int16_t)total_bytes
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(int16_t)total_bytes]
-------
Text=ALLOC(sizeof(structhaiku)+total_bytes+1,&h)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [ALLOC(sizeof(structhaiku)+total_bytes+1,&h)]
-------
Text=haiku_content_ptr
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku_content_ptr]
-------
Text=h->content
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [h->content]
-------
Text=0!=bytes_remaining
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0!=bytes_remaining]
-------
Text=bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);]
-------
Text=if(0>bytes_written){returnNULL;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0>bytes_written){returnNULL;}]
-------
Text=haiku_content_ptr+=bytes_written;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [haiku_content_ptr+=bytes_written;]
-------
Text=bytes_remaining-=bytes_written;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [bytes_remaining-=bytes_written;]
-------
Text=h
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_next_haiku_id()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_get_next_haiku_id()]
-------
Text=h
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=length
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=total_bytes
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [total_bytes]
-------
Text=h
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [h]
-------
Text=cgc_recv_uint16()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_recv_uint16()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=struct
Type=<class 'CParser.CParser.StructOrUnionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [struct]
-------
Text=haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL]
-------
Text=FALSE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [FALSE==cgc_haiku_list_exists()]
-------
Text=cgc_init_haiku_list();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_init_haiku_list();]
-------
Text=total_bytes
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [total_bytes]
-------
Text=cgc_recv_haiku_size()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_recv_haiku_size()]
-------
Text=(0<total_bytes)&&(MAX_HAIKU_LEN>total_bytes)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(0<total_bytes)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&&]
2 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(MAX_HAIKU_LEN>total_bytes)]
-------
Text=h=cgc_recv_haiku(total_bytes);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [h=cgc_recv_haiku(total_bytes);]
-------
Text=if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}]
-------
Text=ret=ERR_INVALID_HAIKU_LEN;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [ret=ERR_INVALID_HAIKU_LEN;]
-------
Text=ret
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [ret]
-------
Text=struct
Type=<class 'CParser.CParser.StructOrUnionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [struct]
-------
Text=haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=id=cgc_recv_uint32();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [id=cgc_recv_uint32();]
-------
Text=if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}]
-------
Text=res=ERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [res=ERR_LIST_NOT_EXIST;]
-------
Text=res
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [res]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL]
-------
Text=struct
Type=<class 'CParser.CParser.StructOrUnionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [struct]
-------
Text=haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SUCCESS]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=count=cgc_get_count();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [count=cgc_get_count();]
-------
Text=if(0==count){returnERR_LIST_EMPTY;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0==count){returnERR_LIST_EMPTY;}]
-------
Text=ALLOC(count*sizeof(uint32_t),&id_arr);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [ALLOC(count*sizeof(uint32_t),&id_arr);]
-------
Text=res=cgc_populate_array_with_haiku_ids(id_arr,count);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [res=cgc_populate_array_with_haiku_ids(id_arr,count);]
-------
Text=res=cgc_get_random_idx(&random_idx);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [res=cgc_get_random_idx(&random_idx);]
-------
Text=if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}]
-------
Text=DEALLOC(id_arr,count*sizeof(uint32_t));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [DEALLOC(id_arr,count*sizeof(uint32_t));]
-------
Text=if(SUCCESS==res){cgc_send_haiku(rand_haiku);}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(SUCCESS==res){cgc_send_haiku(rand_haiku);}]
-------
Text=res=ERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [res=ERR_LIST_NOT_EXIST;]
-------
Text=res
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [res]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=count=cgc_get_count();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [count=cgc_get_count();]
-------
Text=SENDUI(count);
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [SENDUI]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [(count)]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnSUCCESS;]
-------
Text=returnERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnERR_LIST_NOT_EXIST;]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=uint32_tcount=(uint32_t)cgc_get_count();
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [uint32_t]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [count=(uint32_t)cgc_get_count()]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=SENDUI(count);
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [SENDUI]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [(count)]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=node_t*hl_ptr=cgc_haiku_list->head;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [node_t*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [hl_ptr=cgc_haiku_list->head]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.IterationStatementContext'> [while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}]
-------
Text=returnERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnERR_LIST_NOT_EXIST;]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=INIT_HAIKU_ID
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [INIT_HAIKU_ID]
-------
Text=1
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=RECV(num,sizeof(uint32_t))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [RECV(num,sizeof(uint32_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [num[0]]
-------
Text=1
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=RECV(num,sizeof(uint16_t))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [RECV(num,sizeof(uint16_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [num[0]]
-------
Text=NULL==cgc_haiku_list
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL==cgc_haiku_list]
-------
Text=returnFALSE;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [FALSE]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=returnTRUE;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [TRUE]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=0==cgc_haiku_list->count
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0==cgc_haiku_list->count]
-------
Text=returnTRUE;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [TRUE]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=returnFALSE;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [FALSE]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=FALSE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [FALSE==cgc_haiku_list_exists()]
-------
Text=cgc_haiku_list=cgc_list_create();
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_haiku_list=cgc_list_create()]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=returncgc_haiku_list->count;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [cgc_haiku_list->count]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=returnERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [ERR_LIST_NOT_EXIST]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=node_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL!=haiku->data
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL!=haiku->data]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [structhaiku*]
-------
Text=h=(structhaiku*)haiku->data
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [h=(structhaiku*)haiku->data]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returnh->id;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [h->id]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=returnERR_EMPTY_NODE;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [ERR_EMPTY_NODE]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=next_haiku_id++
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [next_haiku_id++]
-------
Text=next_haiku_id-1
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [next_haiku_id-1]
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=ret
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_rand((char*)&random_idx,4)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_rand((char*)&random_idx,4)]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_get_count()]
-------
Text=ERR_LIST_NOT_EXIST==count
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [ERR_LIST_NOT_EXIST==count]
-------
Text=returncount;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [count]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=0==count
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0==count]
-------
Text=returnERR_LIST_EMPTY;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnERR_LIST_EMPTY;]
-------
Text=0!=ret
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0!=ret]
-------
Text={returnERR_RAND_FAILED;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [returnERR_RAND_FAILED;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text={*idx=random_idx%(uint32_t)count;returnSUCCESS;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [*idx=random_idx%(uint32_t)count;returnSUCCESS;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL]
-------
Text=struct
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=haiku_ptr=cgc_haiku_list->tail;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [haiku_ptr=cgc_haiku_list->tail]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=returnERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [ERR_LIST_NOT_EXIST]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=(0==count)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(0==count)]
-------
Text=(NULL==haiku_ptr)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(NULL==haiku_ptr)]
-------
Text=returnERR_LIST_EMPTY;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [ERR_LIST_EMPTY]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=(0<count)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(0<count)]
-------
Text=&&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(NULL!=haiku_ptr)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(NULL!=haiku_ptr)]
-------
Text=h=(structhaiku*)haiku_ptr->data;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [h=(structhaiku*)haiku_ptr->data]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=id_arr[count-1]=h->id;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [id_arr[count-1]=h->id]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=count--;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [count--]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=haiku_ptr=haiku_ptr->prev;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [haiku_ptr=haiku_ptr->prev]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SUCCESS]
-------
Text=struct
Type=<class 'CParser.CParser.StructOrUnionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [struct]
-------
Text=haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL]
-------
Text=struct
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=FALSE
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [FALSE]
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_get_count()]
-------
Text=0<count
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0<count]
-------
Text=haiku_ptr=cgc_haiku_list->head;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [haiku_ptr=cgc_haiku_list->head]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=0==count
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0==count]
-------
Text=returnERR_LIST_EMPTY;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnERR_LIST_EMPTY;]
-------
Text=returnERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnERR_LIST_NOT_EXIST;]
-------
Text=NULL!=haiku_ptr
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL!=haiku_ptr]
-------
Text=tmp=(structhaiku*)haiku_ptr->data;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [tmp=(structhaiku*)haiku_ptr->data]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(id==tmp->id){*h=tmp;found=TRUE;break;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [id==tmp->id]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{*h=tmp;found=TRUE;break;}]
-------
Text=haiku_ptr=haiku_ptr->next;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [haiku_ptr=haiku_ptr->next]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=TRUE==found
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [TRUE==found]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [SUCCESS]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=returnERR_INVALID_ID;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [ERR_INVALID_ID]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=struct
Type=<class 'CParser.CParser.StructOrUnionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [struct]
-------
Text=haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h->id
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [h->id]
-------
Text=h->content
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [h->content]
-------
Text=h->length
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [h->length]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_send(content,length)]
-------
Text=EGG_ID
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [EGG_ID]
-------
Text=EGG_HAIKU
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [EGG_HAIKU]
-------
Text=cgc_strlen(content)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_strlen(content)]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_send(content,length)]
-------
Text=id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=struct
Type=<class 'CParser.CParser.StructOrUnionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [struct]
-------
Text=haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_node_create((void*)h)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_node_create((void*)h)]
-------
Text=cgc_list_push(cgc_haiku_list,nd)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_list_push(cgc_haiku_list,nd)]
-------
Text=MAX_HAIKU_LINE_LEN
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [MAX_HAIKU_LINE_LEN]
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=bytes_received
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)]
-------
Text=0>bytes_received
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0>bytes_received]
-------
Text=returnERR_INVALID_HAIKU;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [ERR_INVALID_HAIKU]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=bytes_written
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)]
-------
Text=bytes_written
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [bytes_written]
-------
Text=struct
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=bytes_remaining
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(int16_t)total_bytes
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(int16_t)total_bytes]
-------
Text=ALLOC(sizeof(structhaiku)+total_bytes+1,&h)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [ALLOC(sizeof(structhaiku)+total_bytes+1,&h)]
-------
Text=haiku_content_ptr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h->content
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [h->content]
-------
Text=0!=bytes_remaining
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0!=bytes_remaining]
-------
Text=bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(0>bytes_written){returnNULL;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0>bytes_written]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{returnNULL;}]
-------
Text=haiku_content_ptr+=bytes_written;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [haiku_content_ptr+=bytes_written]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=bytes_remaining-=bytes_written;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [bytes_remaining-=bytes_written]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_next_haiku_id()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_get_next_haiku_id()]
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=total_bytes
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [total_bytes]
-------
Text=h
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [h]
-------
Text=cgc_recv_uint16()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_recv_uint16()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=struct
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL]
-------
Text=FALSE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [FALSE==cgc_haiku_list_exists()]
-------
Text=cgc_init_haiku_list();
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_init_haiku_list()]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=total_bytes
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recv_haiku_size()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_recv_haiku_size()]
-------
Text=(0<total_bytes)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(0<total_bytes)]
-------
Text=&&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(MAX_HAIKU_LEN>total_bytes)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(MAX_HAIKU_LEN>total_bytes)]
-------
Text=h=cgc_recv_haiku(total_bytes);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [h=cgc_recv_haiku(total_bytes)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(NULL==h){ret=ERR_INVALID_HAIKU;}else{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [NULL==h]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{ret=ERR_INVALID_HAIKU;}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}]
-------
Text=ret=ERR_INVALID_HAIKU_LEN;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [ret=ERR_INVALID_HAIKU_LEN]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=ret
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [ret]
-------
Text=struct
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=id=cgc_recv_uint32();
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [id=cgc_recv_uint32()]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(EGG_ID==id){cgc_send_easter_egg_haiku();}else{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [EGG_ID==id]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{cgc_send_easter_egg_haiku();}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}]
-------
Text=res=ERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [res=ERR_LIST_NOT_EXIST]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=res
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [res]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL]
-------
Text=struct
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SUCCESS]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=count=cgc_get_count();
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [count=cgc_get_count()]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(0==count){returnERR_LIST_EMPTY;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0==count]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{returnERR_LIST_EMPTY;}]
-------
Text=ALLOC(count*sizeof(uint32_t),&id_arr);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [ALLOC(count*sizeof(uint32_t),&id_arr)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=res=cgc_populate_array_with_haiku_ids(id_arr,count);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [res=cgc_populate_array_with_haiku_ids(id_arr,count)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=res=cgc_get_random_idx(&random_idx);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [res=cgc_get_random_idx(&random_idx)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(ERR_RAND_FAILED!=res){res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [ERR_RAND_FAILED!=res]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}]
-------
Text=DEALLOC(id_arr,count*sizeof(uint32_t));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [DEALLOC(id_arr,count*sizeof(uint32_t))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(SUCCESS==res){cgc_send_haiku(rand_haiku);}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [SUCCESS==res]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{cgc_send_haiku(rand_haiku);}]
-------
Text=res=ERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [res=ERR_LIST_NOT_EXIST]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=res
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [res]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=count=cgc_get_count();
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [count=cgc_get_count()]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=SENDUI
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [SENDUI]
-------
Text=(count)
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [(count)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [SUCCESS]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=returnERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [ERR_LIST_NOT_EXIST]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint32_t]
-------
Text=count=(uint32_t)cgc_get_count()
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [count=(uint32_t)cgc_get_count()]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SENDUI
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [SENDUI]
-------
Text=(count)
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [(count)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=node_t*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [node_t*]
-------
Text=hl_ptr=cgc_haiku_list->head
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [hl_ptr=cgc_haiku_list->head]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=while(NULL!=hl_ptr){uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}
Type=<class 'CParser.CParser.IterationStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [while]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [NULL!=hl_ptr]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}]
-------
Text=returnERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [ERR_LIST_NOT_EXIST]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=INIT_HAIKU_ID
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [INIT_HAIKU_ID]
-------
Text=1
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=RECV(num,sizeof(uint32_t))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [RECV(num,sizeof(uint32_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [num[0]]
-------
Text=1
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=RECV(num,sizeof(uint16_t))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [RECV(num,sizeof(uint16_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [num[0]]
-------
Text=NULL==cgc_haiku_list
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL==cgc_haiku_list]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=FALSE
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [FALSE]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=TRUE
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [TRUE]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==cgc_haiku_list->count
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0==cgc_haiku_list->count]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=TRUE
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [TRUE]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=FALSE
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [FALSE]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=FALSE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [FALSE==cgc_haiku_list_exists()]
-------
Text=cgc_haiku_list=cgc_list_create()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_haiku_list=cgc_list_create()]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list->count
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_haiku_list->count]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL!=haiku->data
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL!=haiku->data]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku*]
-------
Text=h=(structhaiku*)haiku->data
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [h]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [(structhaiku*)haiku->data]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h->id
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [h->id]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_EMPTY_NODE
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ERR_EMPTY_NODE]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=next_haiku_id++
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [next_haiku_id++]
-------
Text=next_haiku_id-1
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [next_haiku_id-1]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=cgc_rand((char*)&random_idx,4)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_rand((char*)&random_idx,4)]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_get_count()]
-------
Text=ERR_LIST_NOT_EXIST==count
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [ERR_LIST_NOT_EXIST==count]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [count]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==count
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0==count]
-------
Text=returnERR_LIST_EMPTY;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnERR_LIST_EMPTY;]
-------
Text=0!=ret
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0!=ret]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returnERR_RAND_FAILED;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [returnERR_RAND_FAILED;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*idx=random_idx%(uint32_t)count;returnSUCCESS;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 2
0 : <class 'CParser.CParser.BlockItemContext'> [*idx=random_idx%(uint32_t)count;]
1 : <class 'CParser.CParser.BlockItemContext'> [returnSUCCESS;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=haiku_ptr=cgc_haiku_list->tail
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [haiku_ptr=cgc_haiku_list->tail]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(0==count)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(0==count)]
-------
Text=(NULL==haiku_ptr)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(NULL==haiku_ptr)]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(0<count)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(0<count)]
-------
Text=(NULL!=haiku_ptr)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(NULL!=haiku_ptr)]
-------
Text=h=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [h=(structhaiku*)haiku_ptr->data]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id_arr[count-1]=h->id
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [id_arr[count-1]=h->id]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count--
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [count--]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_ptr=haiku_ptr->prev
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [haiku_ptr=haiku_ptr->prev]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SUCCESS]
-------
Text=struct
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=FALSE
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [FALSE]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_get_count()]
-------
Text=0<count
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0<count]
-------
Text=haiku_ptr=cgc_haiku_list->head
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [haiku_ptr=cgc_haiku_list->head]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==count
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0==count]
-------
Text=returnERR_LIST_EMPTY;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnERR_LIST_EMPTY;]
-------
Text=returnERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnERR_LIST_NOT_EXIST;]
-------
Text=NULL!=haiku_ptr
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL!=haiku_ptr]
-------
Text=tmp=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [tmp=(structhaiku*)haiku_ptr->data]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id==tmp->id
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [id==tmp->id]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={*h=tmp;found=TRUE;break;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{*h=tmp;found=TRUE;break;}]
-------
Text=haiku_ptr=haiku_ptr->next
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [haiku_ptr=haiku_ptr->next]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=TRUE==found
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [TRUE==found]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SUCCESS]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_INVALID_ID
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ERR_INVALID_ID]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=struct
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h->id
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [h->id]
-------
Text=h->content
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [h->content]
-------
Text=h->length
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [h->length]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_send(content,length)]
-------
Text=EGG_ID
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [EGG_ID]
-------
Text=EGG_HAIKU
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [EGG_HAIKU]
-------
Text=cgc_strlen(content)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_strlen(content)]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_send(content,length)]
-------
Text=struct
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_node_create((void*)h)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_node_create((void*)h)]
-------
Text=cgc_list_push(cgc_haiku_list,nd)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_list_push(cgc_haiku_list,nd)]
-------
Text=MAX_HAIKU_LINE_LEN
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [MAX_HAIKU_LINE_LEN]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)]
-------
Text=0>bytes_received
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0>bytes_received]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)]
-------
Text=bytes_written
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [bytes_written]
-------
Text=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=(int16_t)total_bytes
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(int16_t)total_bytes]
-------
Text=ALLOC(sizeof(structhaiku)+total_bytes+1,&h)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [ALLOC(sizeof(structhaiku)+total_bytes+1,&h)]
-------
Text=h->content
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [h->content]
-------
Text=0!=bytes_remaining
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0!=bytes_remaining]
-------
Text=bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0>bytes_written
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0>bytes_written]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={returnNULL;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{returnNULL;}]
-------
Text=haiku_content_ptr+=bytes_written
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [haiku_content_ptr+=bytes_written]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_remaining-=bytes_written
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [bytes_remaining-=bytes_written]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_next_haiku_id()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_get_next_haiku_id()]
-------
Text=total_bytes
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [total_bytes]
-------
Text=h
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [h]
-------
Text=cgc_recv_uint16()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_recv_uint16()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL]
-------
Text=FALSE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [FALSE==cgc_haiku_list_exists()]
-------
Text=cgc_init_haiku_list()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_init_haiku_list()]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recv_haiku_size()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_recv_haiku_size()]
-------
Text=(0<total_bytes)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(0<total_bytes)]
-------
Text=(MAX_HAIKU_LEN>total_bytes)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(MAX_HAIKU_LEN>total_bytes)]
-------
Text=h=cgc_recv_haiku(total_bytes)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [h=cgc_recv_haiku(total_bytes)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL==h
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL==h]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={ret=ERR_INVALID_HAIKU;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{ret=ERR_INVALID_HAIKU;}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}]
-------
Text=ret=ERR_INVALID_HAIKU_LEN
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ret=ERR_INVALID_HAIKU_LEN]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [ret]
-------
Text=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=id=cgc_recv_uint32()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [id=cgc_recv_uint32()]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=EGG_ID==id
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [EGG_ID==id]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={cgc_send_easter_egg_haiku();}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{cgc_send_easter_egg_haiku();}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}]
-------
Text=res=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [res=ERR_LIST_NOT_EXIST]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=res
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [res]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SUCCESS]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=count=cgc_get_count()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [count=cgc_get_count()]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==count
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0==count]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={returnERR_LIST_EMPTY;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{returnERR_LIST_EMPTY;}]
-------
Text=ALLOC(count*sizeof(uint32_t),&id_arr)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ALLOC(count*sizeof(uint32_t),&id_arr)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=res=cgc_populate_array_with_haiku_ids(id_arr,count)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [res=cgc_populate_array_with_haiku_ids(id_arr,count)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=res=cgc_get_random_idx(&random_idx)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [res=cgc_get_random_idx(&random_idx)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_RAND_FAILED!=res
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ERR_RAND_FAILED!=res]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}]
-------
Text=DEALLOC(id_arr,count*sizeof(uint32_t))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [DEALLOC(id_arr,count*sizeof(uint32_t))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS==res
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SUCCESS==res]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={cgc_send_haiku(rand_haiku);}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{cgc_send_haiku(rand_haiku);}]
-------
Text=res=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [res=ERR_LIST_NOT_EXIST]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=res
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [res]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=count=cgc_get_count()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [count=cgc_get_count()]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SENDUI
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [SENDUI]
-------
Text=(count)
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclaratorContext'> [(count)]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SUCCESS]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint32_t]
-------
Text=count=(uint32_t)cgc_get_count()
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [count]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [(uint32_t)cgc_get_count()]
-------
Text=SENDUI
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [SENDUI]
-------
Text=(count)
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclaratorContext'> [(count)]
-------
Text=node_t*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [node_t*]
-------
Text=hl_ptr=cgc_haiku_list->head
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [hl_ptr]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [cgc_haiku_list->head]
-------
Text=while
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL!=hl_ptr
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL!=hl_ptr]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=INIT_HAIKU_ID
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [INIT_HAIKU_ID]
-------
Text=1
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=RECV(num,sizeof(uint32_t))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [RECV(num,sizeof(uint32_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [num[0]]
-------
Text=1
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=RECV(num,sizeof(uint16_t))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [RECV(num,sizeof(uint16_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [num[0]]
-------
Text=NULL==cgc_haiku_list
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL==cgc_haiku_list]
-------
Text=FALSE
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [FALSE]
-------
Text=TRUE
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [TRUE]
-------
Text=0==cgc_haiku_list->count
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0==cgc_haiku_list->count]
-------
Text=TRUE
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [TRUE]
-------
Text=FALSE
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [FALSE]
-------
Text=FALSE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [FALSE==cgc_haiku_list_exists()]
-------
Text=cgc_haiku_list=cgc_list_create()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_haiku_list]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_list_create()]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=cgc_haiku_list->count
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_haiku_list->count]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=NULL!=haiku->data
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL!=haiku->data]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=h
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [h]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(structhaiku*)haiku->data
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(structhaiku*)haiku->data]
-------
Text=h->id
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [h->id]
-------
Text=ERR_EMPTY_NODE
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [ERR_EMPTY_NODE]
-------
Text=next_haiku_id++
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [next_haiku_id++]
-------
Text=next_haiku_id-1
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [next_haiku_id-1]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=cgc_rand((char*)&random_idx,4)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_rand((char*)&random_idx,4)]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_get_count()]
-------
Text=ERR_LIST_NOT_EXIST==count
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [ERR_LIST_NOT_EXIST==count]
-------
Text=count
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [count]
-------
Text=0==count
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0==count]
-------
Text=returnERR_LIST_EMPTY;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [ERR_LIST_EMPTY]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=0!=ret
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0!=ret]
-------
Text=returnERR_RAND_FAILED;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnERR_RAND_FAILED;]
-------
Text=*idx=random_idx%(uint32_t)count;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [*idx=random_idx%(uint32_t)count;]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnSUCCESS;]
-------
Text=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=haiku_ptr=cgc_haiku_list->tail
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [haiku_ptr]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_haiku_list->tail]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=(0==count)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(0==count)]
-------
Text=(NULL==haiku_ptr)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(NULL==haiku_ptr)]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=(0<count)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(0<count)]
-------
Text=(NULL!=haiku_ptr)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(NULL!=haiku_ptr)]
-------
Text=h=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [h]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [(structhaiku*)haiku_ptr->data]
-------
Text=id_arr[count-1]=h->id
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [id_arr[count-1]]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [h->id]
-------
Text=count--
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [count--]
-------
Text=haiku_ptr=haiku_ptr->prev
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [haiku_ptr]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [haiku_ptr->prev]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=FALSE
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [FALSE]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_get_count()]
-------
Text=0<count
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0<count]
-------
Text=haiku_ptr=cgc_haiku_list->head
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [haiku_ptr]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_haiku_list->head]
-------
Text=0==count
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0==count]
-------
Text=returnERR_LIST_EMPTY;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [ERR_LIST_EMPTY]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=returnERR_LIST_NOT_EXIST;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [ERR_LIST_NOT_EXIST]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=NULL!=haiku_ptr
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL!=haiku_ptr]
-------
Text=tmp=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [tmp]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [(structhaiku*)haiku_ptr->data]
-------
Text=id==tmp->id
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [id==tmp->id]
-------
Text={*h=tmp;found=TRUE;break;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [*h=tmp;found=TRUE;break;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=haiku_ptr=haiku_ptr->next
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [haiku_ptr]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [haiku_ptr->next]
-------
Text=TRUE==found
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [TRUE==found]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SUCCESS]
-------
Text=ERR_INVALID_ID
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [ERR_INVALID_ID]
-------
Text=h->id
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [h->id]
-------
Text=h->content
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [h->content]
-------
Text=h->length
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [h->length]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_send(content,length)]
-------
Text=EGG_ID
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [EGG_ID]
-------
Text=EGG_HAIKU
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [EGG_HAIKU]
-------
Text=cgc_strlen(content)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_strlen(content)]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_send(content,length)]
-------
Text=cgc_node_create((void*)h)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_node_create((void*)h)]
-------
Text=cgc_list_push(cgc_haiku_list,nd)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_list_push(cgc_haiku_list,nd)]
-------
Text=MAX_HAIKU_LINE_LEN
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [MAX_HAIKU_LINE_LEN]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)]
-------
Text=0>bytes_received
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0>bytes_received]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)]
-------
Text=bytes_written
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [bytes_written]
-------
Text=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=(int16_t)total_bytes
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(int16_t)total_bytes]
-------
Text=ALLOC(sizeof(structhaiku)+total_bytes+1,&h)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [ALLOC(sizeof(structhaiku)+total_bytes+1,&h)]
-------
Text=h->content
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [h->content]
-------
Text=0!=bytes_remaining
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0!=bytes_remaining]
-------
Text=bytes_written=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [bytes_written]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)]
-------
Text=0>bytes_written
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0>bytes_written]
-------
Text={returnNULL;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [returnNULL;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=haiku_content_ptr+=bytes_written
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [haiku_content_ptr]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [+=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [bytes_written]
-------
Text=bytes_remaining-=bytes_written
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [bytes_remaining]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [-=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [bytes_written]
-------
Text=cgc_get_next_haiku_id()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_get_next_haiku_id()]
-------
Text=total_bytes
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [total_bytes]
-------
Text=h
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [h]
-------
Text=cgc_recv_uint16()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_recv_uint16()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL]
-------
Text=FALSE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [FALSE==cgc_haiku_list_exists()]
-------
Text=cgc_init_haiku_list()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_init_haiku_list()]
-------
Text=cgc_recv_haiku_size()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_recv_haiku_size()]
-------
Text=(0<total_bytes)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(0<total_bytes)]
-------
Text=(MAX_HAIKU_LEN>total_bytes)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(MAX_HAIKU_LEN>total_bytes)]
-------
Text=h=cgc_recv_haiku(total_bytes)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [h]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_recv_haiku(total_bytes)]
-------
Text=NULL==h
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL==h]
-------
Text={ret=ERR_INVALID_HAIKU;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [ret=ERR_INVALID_HAIKU;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text={ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=ret=ERR_INVALID_HAIKU_LEN
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ret]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [ERR_INVALID_HAIKU_LEN]
-------
Text=ret
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [ret]
-------
Text=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=id=cgc_recv_uint32()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [id]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_recv_uint32()]
-------
Text=EGG_ID==id
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [EGG_ID==id]
-------
Text={cgc_send_easter_egg_haiku();}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [cgc_send_easter_egg_haiku();]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text={res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=res=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [res]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=res
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [res]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SUCCESS]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=count=cgc_get_count()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [count]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_get_count()]
-------
Text=0==count
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0==count]
-------
Text={returnERR_LIST_EMPTY;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [returnERR_LIST_EMPTY;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=ALLOC(count*sizeof(uint32_t),&id_arr)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [ALLOC(count*sizeof(uint32_t),&id_arr)]
-------
Text=res=cgc_populate_array_with_haiku_ids(id_arr,count)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [res]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_populate_array_with_haiku_ids(id_arr,count)]
-------
Text=res=cgc_get_random_idx(&random_idx)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [res]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_get_random_idx(&random_idx)]
-------
Text=ERR_RAND_FAILED!=res
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [ERR_RAND_FAILED!=res]
-------
Text={res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=DEALLOC(id_arr,count*sizeof(uint32_t))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [DEALLOC(id_arr,count*sizeof(uint32_t))]
-------
Text=SUCCESS==res
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SUCCESS==res]
-------
Text={cgc_send_haiku(rand_haiku);}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [cgc_send_haiku(rand_haiku);]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=res=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [res]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=res
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [res]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=count=cgc_get_count()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [count]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_get_count()]
-------
Text=SENDUI
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [SENDUI]
-------
Text=(count)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [(count)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SUCCESS]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [TRUE==cgc_haiku_list_exists()]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint32_t]
-------
Text=count
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [count]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(uint32_t)cgc_get_count()
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(uint32_t)cgc_get_count()]
-------
Text=SENDUI
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [SENDUI]
-------
Text=(count)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [(count)]
-------
Text=node_t*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [node_t]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=hl_ptr
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [hl_ptr]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_haiku_list->head]
-------
Text=NULL!=hl_ptr
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL!=hl_ptr]
-------
Text={uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=INIT_HAIKU_ID
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [INIT_HAIKU_ID]
-------
Text=1
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=RECV(num,sizeof(uint32_t))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [RECV(num,sizeof(uint32_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [num[0]]
-------
Text=1
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=RECV(num,sizeof(uint16_t))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [RECV(num,sizeof(uint16_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [num[0]]
-------
Text=NULL==cgc_haiku_list
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_haiku_list]
-------
Text=FALSE
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [FALSE]
-------
Text=TRUE
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [TRUE]
-------
Text=0==cgc_haiku_list->count
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_haiku_list->count]
-------
Text=TRUE
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [TRUE]
-------
Text=FALSE
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [FALSE]
-------
Text=FALSE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [FALSE]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_haiku_list
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_haiku_list]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_list_create()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_list_create()]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [TRUE]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_haiku_list->count
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_haiku_list->count]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=NULL!=haiku->data
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [!=]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [haiku->data]
-------
Text=structhaiku
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StructOrUnionSpecifierContext'> [structhaiku]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=h
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=(structhaiku*)haiku->data
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(structhaiku*)haiku->data]
-------
Text=h->id
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [h->id]
-------
Text=ERR_EMPTY_NODE
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [ERR_EMPTY_NODE]
-------
Text=next_haiku_id++
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [next_haiku_id++]
-------
Text=next_haiku_id-1
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [next_haiku_id-1]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=cgc_rand((char*)&random_idx,4)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_rand((char*)&random_idx,4)]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_get_count()]
-------
Text=ERR_LIST_NOT_EXIST==count
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [ERR_LIST_NOT_EXIST]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [count]
-------
Text=count
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [count]
-------
Text=0==count
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0==count]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0!=ret
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0!=ret]
-------
Text=returnERR_RAND_FAILED;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnERR_RAND_FAILED;]
-------
Text=*idx=random_idx%(uint32_t)count;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [*idx=random_idx%(uint32_t)count;]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnSUCCESS;]
-------
Text=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [TRUE]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [haiku_ptr]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_haiku_list->tail
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_haiku_list->tail]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=(0==count)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(0==count)]
-------
Text=(NULL==haiku_ptr)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(NULL==haiku_ptr)]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=(0<count)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(0<count)]
-------
Text=(NULL!=haiku_ptr)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(NULL!=haiku_ptr)]
-------
Text=h
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [h]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(structhaiku*)haiku_ptr->data]
-------
Text=id_arr[count-1]
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [id_arr[count-1]]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=h->id
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [h->id]
-------
Text=count--
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [count--]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [haiku_ptr]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=haiku_ptr->prev
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [haiku_ptr->prev]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=FALSE
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [FALSE]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_get_count()]
-------
Text=0<count
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0<count]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [haiku_ptr]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_haiku_list->head]
-------
Text=0==count
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0==count]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL!=haiku_ptr
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [!=]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [haiku_ptr]
-------
Text=tmp
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [tmp]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(structhaiku*)haiku_ptr->data]
-------
Text=id==tmp->id
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [id==tmp->id]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*h=tmp;found=TRUE;break;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 3
0 : <class 'CParser.CParser.BlockItemContext'> [*h=tmp;]
1 : <class 'CParser.CParser.BlockItemContext'> [found=TRUE;]
2 : <class 'CParser.CParser.BlockItemContext'> [break;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [haiku_ptr]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=haiku_ptr->next
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [haiku_ptr->next]
-------
Text=TRUE==found
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [TRUE]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [found]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SUCCESS]
-------
Text=ERR_INVALID_ID
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [ERR_INVALID_ID]
-------
Text=h->id
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [h->id]
-------
Text=h->content
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [h->content]
-------
Text=h->length
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [h->length]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_send(content,length)]
-------
Text=EGG_ID
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [EGG_ID]
-------
Text=EGG_HAIKU
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [EGG_HAIKU]
-------
Text=cgc_strlen(content)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_strlen(content)]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_send(content,length)]
-------
Text=cgc_node_create((void*)h)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_node_create((void*)h)]
-------
Text=cgc_list_push(cgc_haiku_list,nd)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_list_push(cgc_haiku_list,nd)]
-------
Text=MAX_HAIKU_LINE_LEN
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [MAX_HAIKU_LINE_LEN]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)]
-------
Text=0>bytes_received
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0>bytes_received]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)]
-------
Text=bytes_written
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [bytes_written]
-------
Text=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=(int16_t)total_bytes
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(int16_t)total_bytes]
-------
Text=ALLOC(sizeof(structhaiku)+total_bytes+1,&h)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [ALLOC(sizeof(structhaiku)+total_bytes+1,&h)]
-------
Text=h->content
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [h->content]
-------
Text=0!=bytes_remaining
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [!=]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [bytes_remaining]
-------
Text=bytes_written
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [bytes_written]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)]
-------
Text=0>bytes_written
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0>bytes_written]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returnNULL;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [returnNULL;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_content_ptr
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [haiku_content_ptr]
-------
Text=+=
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [+=]
-------
Text=bytes_written
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [bytes_written]
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [bytes_remaining]
-------
Text=-=
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [-=]
-------
Text=bytes_written
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [bytes_written]
-------
Text=cgc_get_next_haiku_id()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_get_next_haiku_id()]
-------
Text=total_bytes
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [total_bytes]
-------
Text=h
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [h]
-------
Text=cgc_recv_uint16()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_recv_uint16()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL]
-------
Text=FALSE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [FALSE]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_init_haiku_list()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_init_haiku_list()]
-------
Text=cgc_recv_haiku_size()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_recv_haiku_size()]
-------
Text=(0<total_bytes)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(0<total_bytes)]
-------
Text=(MAX_HAIKU_LEN>total_bytes)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(MAX_HAIKU_LEN>total_bytes)]
-------
Text=h
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [h]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_recv_haiku(total_bytes)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_recv_haiku(total_bytes)]
-------
Text=NULL==h
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL==h]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret=ERR_INVALID_HAIKU;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [ret=ERR_INVALID_HAIKU;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret=cgc_add_haiku_to_list(h);cgc_send_haiku_id(h->id);
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 2
0 : <class 'CParser.CParser.BlockItemContext'> [ret=cgc_add_haiku_to_list(h);]
1 : <class 'CParser.CParser.BlockItemContext'> [cgc_send_haiku_id(h->id);]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ret]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=ERR_INVALID_HAIKU_LEN
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [ERR_INVALID_HAIKU_LEN]
-------
Text=ret
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [ret]
-------
Text=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [TRUE]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=id
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [id]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_recv_uint32()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_recv_uint32()]
-------
Text=EGG_ID==id
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [EGG_ID==id]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_send_easter_egg_haiku();
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [cgc_send_easter_egg_haiku();]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=res=cgc_find_haiku_with_id(&h,id);if(SUCCESS==res){cgc_send_haiku(h);}
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 2
0 : <class 'CParser.CParser.BlockItemContext'> [res=cgc_find_haiku_with_id(&h,id);]
1 : <class 'CParser.CParser.BlockItemContext'> [if(SUCCESS==res){cgc_send_haiku(h);}]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=res
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [res]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=res
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [res]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SUCCESS]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [TRUE]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=count
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [count]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_get_count()]
-------
Text=0==count
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0==count]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returnERR_LIST_EMPTY;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [returnERR_LIST_EMPTY;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ALLOC(count*sizeof(uint32_t),&id_arr)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [ALLOC(count*sizeof(uint32_t),&id_arr)]
-------
Text=res
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [res]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_populate_array_with_haiku_ids(id_arr,count)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_populate_array_with_haiku_ids(id_arr,count)]
-------
Text=res
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [res]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_get_random_idx(&random_idx)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_get_random_idx(&random_idx)]
-------
Text=ERR_RAND_FAILED!=res
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [ERR_RAND_FAILED!=res]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=DEALLOC(id_arr,count*sizeof(uint32_t))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [DEALLOC(id_arr,count*sizeof(uint32_t))]
-------
Text=SUCCESS==res
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SUCCESS==res]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_send_haiku(rand_haiku);
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [cgc_send_haiku(rand_haiku);]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=res
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [res]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=res
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [res]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [TRUE]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=count
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [count]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_get_count()]
-------
Text=SENDUI
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SENDUI]
-------
Text=(count)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.DeclaratorContext'> [count]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SUCCESS]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=TRUE==cgc_haiku_list_exists()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [TRUE]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=count
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=(uint32_t)cgc_get_count()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(uint32_t)cgc_get_count()]
-------
Text=SENDUI
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SENDUI]
-------
Text=(count)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.DeclaratorContext'> [count]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=node_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [node_t]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=hl_ptr
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [hl_ptr]
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_haiku_list->head]
-------
Text=NULL!=hl_ptr
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL!=hl_ptr]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_tid=cgc_get_id_from_haiku(hl_ptr);SENDUI(id);hl_ptr=hl_ptr->next;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 3
0 : <class 'CParser.CParser.BlockItemContext'> [uint32_tid=cgc_get_id_from_haiku(hl_ptr);]
1 : <class 'CParser.CParser.BlockItemContext'> [SENDUI(id);]
2 : <class 'CParser.CParser.BlockItemContext'> [hl_ptr=hl_ptr->next;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=INIT_HAIKU_ID
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [INIT_HAIKU_ID]
-------
Text=1
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=RECV(num,sizeof(uint32_t))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [RECV(num,sizeof(uint32_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [num[0]]
-------
Text=1
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=RECV(num,sizeof(uint16_t))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [RECV(num,sizeof(uint16_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [num[0]]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_haiku_list]
-------
Text=FALSE
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [FALSE]
-------
Text=TRUE
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [TRUE]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list->count
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_haiku_list->count]
-------
Text=TRUE
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [TRUE]
-------
Text=FALSE
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [FALSE]
-------
Text=FALSE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [FALSE]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_haiku_list
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_haiku_list]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_create()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_list_create()]
-------
Text=TRUE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [TRUE]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_haiku_list->count
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_haiku_list->count]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=!=
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku->data
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [haiku->data]
-------
Text=structhaiku
Type=<class 'CParser.CParser.StructOrUnionSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.StructOrUnionContext'> [struct]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(structhaiku*)haiku->data
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(structhaiku*)haiku->data]
-------
Text=h->id
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [h->id]
-------
Text=ERR_EMPTY_NODE
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [ERR_EMPTY_NODE]
-------
Text=next_haiku_id++
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [next_haiku_id++]
-------
Text=next_haiku_id-1
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [next_haiku_id-1]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=cgc_rand((char*)&random_idx,4)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_rand((char*)&random_idx,4)]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_get_count()]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [count]
-------
Text=count
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [count]
-------
Text=0==count
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0==count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=0!=ret
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0!=ret]
-------
Text=returnERR_RAND_FAILED;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [ERR_RAND_FAILED]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=*idx=random_idx%(uint32_t)count;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [*idx=random_idx%(uint32_t)count]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [SUCCESS]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=TRUE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [TRUE]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [haiku_ptr]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list->tail
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_haiku_list->tail]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=(0==count)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(0==count)]
-------
Text=(NULL==haiku_ptr)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(NULL==haiku_ptr)]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=(0<count)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(0<count)]
-------
Text=(NULL!=haiku_ptr)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(NULL!=haiku_ptr)]
-------
Text=h
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [h]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(structhaiku*)haiku_ptr->data]
-------
Text=id_arr[count-1]
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [id_arr]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.ExpressionContext'> [count-1]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h->id
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [h->id]
-------
Text=count--
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [count--]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [haiku_ptr]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_ptr->prev
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [haiku_ptr->prev]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=FALSE
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [FALSE]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_get_count()]
-------
Text=0<count
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [<]
2 : <class 'CParser.CParser.ShiftExpressionContext'> [count]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [haiku_ptr]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_haiku_list->head]
-------
Text=0==count
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0==count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=!=
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [haiku_ptr]
-------
Text=tmp
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [tmp]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(structhaiku*)haiku_ptr->data]
-------
Text=id==tmp->id
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [id==tmp->id]
-------
Text=*h=tmp;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [*h=tmp;]
-------
Text=found=TRUE;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [found=TRUE;]
-------
Text=break;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [break;]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [haiku_ptr]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_ptr->next
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [haiku_ptr->next]
-------
Text=TRUE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [TRUE]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=found
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [found]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SUCCESS]
-------
Text=ERR_INVALID_ID
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [ERR_INVALID_ID]
-------
Text=h->id
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [h->id]
-------
Text=h->content
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [h->content]
-------
Text=h->length
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [h->length]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_send(content,length)]
-------
Text=EGG_ID
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [EGG_ID]
-------
Text=EGG_HAIKU
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [EGG_HAIKU]
-------
Text=cgc_strlen(content)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_strlen(content)]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_send(content,length)]
-------
Text=cgc_node_create((void*)h)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_node_create((void*)h)]
-------
Text=cgc_list_push(cgc_haiku_list,nd)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_list_push(cgc_haiku_list,nd)]
-------
Text=MAX_HAIKU_LINE_LEN
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [MAX_HAIKU_LINE_LEN]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)]
-------
Text=0>bytes_received
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [>]
2 : <class 'CParser.CParser.ShiftExpressionContext'> [bytes_received]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)]
-------
Text=bytes_written
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [bytes_written]
-------
Text=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=(int16_t)total_bytes
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(int16_t)total_bytes]
-------
Text=ALLOC(sizeof(structhaiku)+total_bytes+1,&h)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [ALLOC(sizeof(structhaiku)+total_bytes+1,&h)]
-------
Text=h->content
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [h->content]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=!=
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [bytes_remaining]
-------
Text=bytes_written
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [bytes_written]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)]
-------
Text=0>bytes_written
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0>bytes_written]
-------
Text=returnNULL;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnNULL;]
-------
Text=haiku_content_ptr
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [haiku_content_ptr]
-------
Text=+=
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_written
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [bytes_written]
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [bytes_remaining]
-------
Text=-=
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_written
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [bytes_written]
-------
Text=cgc_get_next_haiku_id()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_get_next_haiku_id()]
-------
Text=total_bytes
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [total_bytes]
-------
Text=h
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [h]
-------
Text=cgc_recv_uint16()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_recv_uint16()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=FALSE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [FALSE]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_init_haiku_list()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_init_haiku_list()]
-------
Text=cgc_recv_haiku_size()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_recv_haiku_size()]
-------
Text=(0<total_bytes)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(0<total_bytes)]
-------
Text=(MAX_HAIKU_LEN>total_bytes)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(MAX_HAIKU_LEN>total_bytes)]
-------
Text=h
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [h]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recv_haiku(total_bytes)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_recv_haiku(total_bytes)]
-------
Text=NULL==h
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL==h]
-------
Text=ret=ERR_INVALID_HAIKU;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [ret=ERR_INVALID_HAIKU;]
-------
Text=ret=cgc_add_haiku_to_list(h);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [ret=cgc_add_haiku_to_list(h);]
-------
Text=cgc_send_haiku_id(h->id);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_send_haiku_id(h->id);]
-------
Text=ret
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ret]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_INVALID_HAIKU_LEN
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [ERR_INVALID_HAIKU_LEN]
-------
Text=ret
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [ret]
-------
Text=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=TRUE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [TRUE]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=id
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [id]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recv_uint32()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_recv_uint32()]
-------
Text=EGG_ID==id
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [EGG_ID==id]
-------
Text=cgc_send_easter_egg_haiku();
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_send_easter_egg_haiku();]
-------
Text=res=cgc_find_haiku_with_id(&h,id);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [res=cgc_find_haiku_with_id(&h,id);]
-------
Text=if(SUCCESS==res){cgc_send_haiku(h);}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(SUCCESS==res){cgc_send_haiku(h);}]
-------
Text=res
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [res]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=res
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [res]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SUCCESS]
-------
Text=TRUE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [TRUE]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=count
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [count]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_get_count()]
-------
Text=0==count
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0==count]
-------
Text=returnERR_LIST_EMPTY;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnERR_LIST_EMPTY;]
-------
Text=ALLOC(count*sizeof(uint32_t),&id_arr)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [ALLOC(count*sizeof(uint32_t),&id_arr)]
-------
Text=res
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [res]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_populate_array_with_haiku_ids(id_arr,count)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_populate_array_with_haiku_ids(id_arr,count)]
-------
Text=res
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [res]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_random_idx(&random_idx)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_get_random_idx(&random_idx)]
-------
Text=ERR_RAND_FAILED!=res
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [ERR_RAND_FAILED!=res]
-------
Text=res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);]
-------
Text=DEALLOC(id_arr,count*sizeof(uint32_t))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [DEALLOC(id_arr,count*sizeof(uint32_t))]
-------
Text=SUCCESS==res
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SUCCESS==res]
-------
Text=cgc_send_haiku(rand_haiku);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [cgc_send_haiku(rand_haiku);]
-------
Text=res
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [res]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=res
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [res]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=TRUE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [TRUE]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=count
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [count]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_get_count()]
-------
Text=SENDUI
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [count]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SUCCESS]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=TRUE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [TRUE]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(uint32_t)cgc_get_count()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(uint32_t)cgc_get_count()]
-------
Text=SENDUI
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [count]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=node_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [node_t]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=hl_ptr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_haiku_list->head]
-------
Text=NULL!=hl_ptr
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL!=hl_ptr]
-------
Text=uint32_tid=cgc_get_id_from_haiku(hl_ptr);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [uint32_tid=cgc_get_id_from_haiku(hl_ptr);]
-------
Text=SENDUI(id);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [SENDUI(id);]
-------
Text=hl_ptr=hl_ptr->next;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [hl_ptr=hl_ptr->next;]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=INIT_HAIKU_ID
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [INIT_HAIKU_ID]
-------
Text=1
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=RECV(num,sizeof(uint32_t))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [RECV(num,sizeof(uint32_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [num[0]]
-------
Text=1
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=RECV(num,sizeof(uint16_t))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [RECV(num,sizeof(uint16_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [num[0]]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=cgc_haiku_list
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_haiku_list]
-------
Text=FALSE
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [FALSE]
-------
Text=TRUE
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [TRUE]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=cgc_haiku_list->count
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_haiku_list->count]
-------
Text=TRUE
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [TRUE]
-------
Text=FALSE
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [FALSE]
-------
Text=FALSE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [FALSE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_haiku_list
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_haiku_list]
-------
Text=cgc_list_create()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_list_create()]
-------
Text=TRUE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_haiku_list->count
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_haiku_list->count]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=haiku->data
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [haiku->data]
-------
Text=struct
Type=<class 'CParser.CParser.StructOrUnionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [struct]
-------
Text=haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(structhaiku*)haiku->data
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(structhaiku*)haiku->data]
-------
Text=h->id
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [h->id]
-------
Text=ERR_EMPTY_NODE
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [ERR_EMPTY_NODE]
-------
Text=next_haiku_id++
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [next_haiku_id++]
-------
Text=next_haiku_id-1
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [next_haiku_id-1]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=cgc_rand((char*)&random_idx,4)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_rand((char*)&random_idx,4)]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_get_count()]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=count
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [count]
-------
Text=count
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [count]
-------
Text=0==count
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=0!=ret
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0!=ret]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_RAND_FAILED
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ERR_RAND_FAILED]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*idx=random_idx%(uint32_t)count
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [*idx=random_idx%(uint32_t)count]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SUCCESS]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=TRUE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku_ptr]
-------
Text=cgc_haiku_list->tail
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_haiku_list->tail]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=(0==count)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(0==count)]
-------
Text=(NULL==haiku_ptr)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(NULL==haiku_ptr)]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=(0<count)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(0<count)]
-------
Text=(NULL!=haiku_ptr)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(NULL!=haiku_ptr)]
-------
Text=h
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(structhaiku*)haiku_ptr->data]
-------
Text=id_arr
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id_arr]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count-1
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [count-1]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h->id
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [h->id]
-------
Text=count--
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [count--]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku_ptr]
-------
Text=haiku_ptr->prev
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [haiku_ptr->prev]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=FALSE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [FALSE]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_get_count()]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=<
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [count]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku_ptr]
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_haiku_list->head]
-------
Text=0==count
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [haiku_ptr]
-------
Text=tmp
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [tmp]
-------
Text=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(structhaiku*)haiku_ptr->data]
-------
Text=id==tmp->id
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [id==tmp->id]
-------
Text=*h=tmp;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [*h=tmp;]
-------
Text=found=TRUE;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [found=TRUE;]
-------
Text=break;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [break;]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku_ptr]
-------
Text=haiku_ptr->next
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [haiku_ptr->next]
-------
Text=TRUE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [TRUE]
-------
Text=found
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [found]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SUCCESS]
-------
Text=ERR_INVALID_ID
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [ERR_INVALID_ID]
-------
Text=h->id
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [h->id]
-------
Text=h->content
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [h->content]
-------
Text=h->length
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [h->length]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_send(content,length)]
-------
Text=EGG_ID
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [EGG_ID]
-------
Text=EGG_HAIKU
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [EGG_HAIKU]
-------
Text=cgc_strlen(content)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_strlen(content)]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_send(content,length)]
-------
Text=cgc_node_create((void*)h)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_node_create((void*)h)]
-------
Text=cgc_list_push(cgc_haiku_list,nd)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_list_push(cgc_haiku_list,nd)]
-------
Text=MAX_HAIKU_LINE_LEN
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [MAX_HAIKU_LINE_LEN]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=>
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_received
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [bytes_received]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)]
-------
Text=bytes_written
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [bytes_written]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=(int16_t)total_bytes
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(int16_t)total_bytes]
-------
Text=ALLOC(sizeof(structhaiku)+total_bytes+1,&h)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [ALLOC(sizeof(structhaiku)+total_bytes+1,&h)]
-------
Text=h->content
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [h->content]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [bytes_remaining]
-------
Text=bytes_written
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bytes_written]
-------
Text=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)]
-------
Text=0>bytes_written
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0>bytes_written]
-------
Text=returnNULL;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnNULL;]
-------
Text=haiku_content_ptr
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku_content_ptr]
-------
Text=bytes_written
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [bytes_written]
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bytes_remaining]
-------
Text=bytes_written
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [bytes_written]
-------
Text=cgc_get_next_haiku_id()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_get_next_haiku_id()]
-------
Text=total_bytes
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [total_bytes]
-------
Text=h
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [h]
-------
Text=cgc_recv_uint16()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_recv_uint16()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=FALSE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [FALSE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_init_haiku_list()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_init_haiku_list()]
-------
Text=cgc_recv_haiku_size()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_recv_haiku_size()]
-------
Text=(0<total_bytes)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(0<total_bytes)]
-------
Text=(MAX_HAIKU_LEN>total_bytes)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(MAX_HAIKU_LEN>total_bytes)]
-------
Text=h
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=cgc_recv_haiku(total_bytes)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_recv_haiku(total_bytes)]
-------
Text=NULL==h
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL==h]
-------
Text=ret=ERR_INVALID_HAIKU;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [ret=ERR_INVALID_HAIKU;]
-------
Text=ret=cgc_add_haiku_to_list(h);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [ret=cgc_add_haiku_to_list(h);]
-------
Text=cgc_send_haiku_id(h->id);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_send_haiku_id(h->id);]
-------
Text=ret
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ret]
-------
Text=ERR_INVALID_HAIKU_LEN
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [ERR_INVALID_HAIKU_LEN]
-------
Text=ret
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [ret]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=TRUE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=id
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id]
-------
Text=cgc_recv_uint32()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_recv_uint32()]
-------
Text=EGG_ID==id
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [EGG_ID==id]
-------
Text=cgc_send_easter_egg_haiku();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_send_easter_egg_haiku();]
-------
Text=res=cgc_find_haiku_with_id(&h,id);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [res=cgc_find_haiku_with_id(&h,id);]
-------
Text=if(SUCCESS==res){cgc_send_haiku(h);}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(SUCCESS==res){cgc_send_haiku(h);}]
-------
Text=res
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [res]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=res
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [res]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SUCCESS]
-------
Text=TRUE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=count
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_get_count()]
-------
Text=0==count
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0==count]
-------
Text=returnERR_LIST_EMPTY;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnERR_LIST_EMPTY;]
-------
Text=ALLOC(count*sizeof(uint32_t),&id_arr)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [ALLOC(count*sizeof(uint32_t),&id_arr)]
-------
Text=res
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [res]
-------
Text=cgc_populate_array_with_haiku_ids(id_arr,count)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_populate_array_with_haiku_ids(id_arr,count)]
-------
Text=res
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [res]
-------
Text=cgc_get_random_idx(&random_idx)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_get_random_idx(&random_idx)]
-------
Text=ERR_RAND_FAILED!=res
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [ERR_RAND_FAILED!=res]
-------
Text=res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);]
-------
Text=DEALLOC(id_arr,count*sizeof(uint32_t))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [DEALLOC(id_arr,count*sizeof(uint32_t))]
-------
Text=SUCCESS==res
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SUCCESS==res]
-------
Text=cgc_send_haiku(rand_haiku);
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [cgc_send_haiku]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [(rand_haiku)]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=res
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [res]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=res
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [res]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=TRUE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=count
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_get_count()]
-------
Text=count
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SUCCESS]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=TRUE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=(uint32_t)cgc_get_count()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(uint32_t)cgc_get_count()]
-------
Text=count
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=node_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_haiku_list->head]
-------
Text=NULL!=hl_ptr
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL!=hl_ptr]
-------
Text=uint32_tid=cgc_get_id_from_haiku(hl_ptr);
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [uint32_t]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [id=cgc_get_id_from_haiku(hl_ptr)]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=SENDUI(id);
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [SENDUI]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [(id)]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=hl_ptr=hl_ptr->next;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [hl_ptr=hl_ptr->next;]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=INIT_HAIKU_ID
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [INIT_HAIKU_ID]
-------
Text=1
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=RECV(num,sizeof(uint32_t))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [RECV(num,sizeof(uint32_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [num[0]]
-------
Text=1
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=RECV(num,sizeof(uint16_t))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [RECV(num,sizeof(uint16_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [num[0]]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=cgc_haiku_list
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_haiku_list]
-------
Text=FALSE
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [FALSE]
-------
Text=TRUE
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [TRUE]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=cgc_haiku_list->count
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_haiku_list->count]
-------
Text=TRUE
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [TRUE]
-------
Text=FALSE
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [FALSE]
-------
Text=FALSE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [FALSE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_haiku_list
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_create()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_list_create()]
-------
Text=TRUE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_haiku_list->count
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_haiku_list->count]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=haiku->data
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [haiku->data]
-------
Text=struct
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(structhaiku*)haiku->data
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(structhaiku*)haiku->data]
-------
Text=h->id
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [h->id]
-------
Text=ERR_EMPTY_NODE
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [ERR_EMPTY_NODE]
-------
Text=next_haiku_id++
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [next_haiku_id++]
-------
Text=next_haiku_id-1
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [next_haiku_id]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [-]
2 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=cgc_rand((char*)&random_idx,4)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_rand((char*)&random_idx,4)]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_get_count()]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=count
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [count]
-------
Text=count
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [count]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=0!=ret
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0!=ret]
-------
Text=ERR_RAND_FAILED
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [ERR_RAND_FAILED]
-------
Text=*idx=random_idx%(uint32_t)count
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [*idx]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [random_idx%(uint32_t)count]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=TRUE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=haiku_ptr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list->tail
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_haiku_list->tail]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=(0==count)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(0==count)]
-------
Text=(NULL==haiku_ptr)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(NULL==haiku_ptr)]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=(0<count)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(0<count)]
-------
Text=(NULL!=haiku_ptr)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(NULL!=haiku_ptr)]
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(structhaiku*)haiku_ptr->data]
-------
Text=id_arr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count-1
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [count-1]
-------
Text=h->id
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [h->id]
-------
Text=count--
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [count--]
-------
Text=haiku_ptr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_ptr->prev
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [haiku_ptr->prev]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=FALSE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [FALSE]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_get_count()]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [count]
-------
Text=haiku_ptr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_haiku_list->head]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [haiku_ptr]
-------
Text=tmp
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(structhaiku*)haiku_ptr->data]
-------
Text=id==tmp->id
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [id==tmp->id]
-------
Text=*h=tmp;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [*h=tmp]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=found=TRUE;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [found=TRUE]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=break;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [break]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=haiku_ptr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_ptr->next
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [haiku_ptr->next]
-------
Text=TRUE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [TRUE]
-------
Text=found
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [found]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SUCCESS]
-------
Text=ERR_INVALID_ID
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [ERR_INVALID_ID]
-------
Text=h->id
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [h->id]
-------
Text=h->content
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [h->content]
-------
Text=h->length
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [h->length]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_send(content,length)]
-------
Text=EGG_ID
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [EGG_ID]
-------
Text=EGG_HAIKU
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [EGG_HAIKU]
-------
Text=cgc_strlen(content)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_strlen(content)]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_send(content,length)]
-------
Text=cgc_node_create((void*)h)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_node_create((void*)h)]
-------
Text=cgc_list_push(cgc_haiku_list,nd)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_list_push(cgc_haiku_list,nd)]
-------
Text=MAX_HAIKU_LINE_LEN
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [MAX_HAIKU_LINE_LEN]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=bytes_received
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [bytes_received]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)]
-------
Text=bytes_written
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [bytes_written]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=(int16_t)total_bytes
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(int16_t)total_bytes]
-------
Text=ALLOC(sizeof(structhaiku)+total_bytes+1,&h)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [ALLOC(sizeof(structhaiku)+total_bytes+1,&h)]
-------
Text=h->content
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [h->content]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [bytes_remaining]
-------
Text=bytes_written
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)]
-------
Text=0>bytes_written
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0>bytes_written]
-------
Text=returnNULL;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [NULL]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=haiku_content_ptr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_written
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [bytes_written]
-------
Text=bytes_remaining
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_written
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [bytes_written]
-------
Text=cgc_get_next_haiku_id()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_get_next_haiku_id()]
-------
Text=total_bytes
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [total_bytes]
-------
Text=h
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [h]
-------
Text=cgc_recv_uint16()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_recv_uint16()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=FALSE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [FALSE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_init_haiku_list()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_init_haiku_list()]
-------
Text=cgc_recv_haiku_size()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_recv_haiku_size()]
-------
Text=(0<total_bytes)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(0<total_bytes)]
-------
Text=(MAX_HAIKU_LEN>total_bytes)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(MAX_HAIKU_LEN>total_bytes)]
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recv_haiku(total_bytes)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_recv_haiku(total_bytes)]
-------
Text=NULL==h
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL==h]
-------
Text=ret=ERR_INVALID_HAIKU;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [ret=ERR_INVALID_HAIKU]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=ret=cgc_add_haiku_to_list(h);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [ret=cgc_add_haiku_to_list(h)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_send_haiku_id(h->id);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_send_haiku_id(h->id)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=ret
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_INVALID_HAIKU_LEN
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [ERR_INVALID_HAIKU_LEN]
-------
Text=ret
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [ret]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=TRUE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recv_uint32()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_recv_uint32()]
-------
Text=EGG_ID==id
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [EGG_ID==id]
-------
Text=cgc_send_easter_egg_haiku();
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_send_easter_egg_haiku()]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=res=cgc_find_haiku_with_id(&h,id);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [res=cgc_find_haiku_with_id(&h,id)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(SUCCESS==res){cgc_send_haiku(h);}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [SUCCESS==res]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{cgc_send_haiku(h);}]
-------
Text=res
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=res
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [res]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SUCCESS]
-------
Text=TRUE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_get_count()]
-------
Text=0==count
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0==count]
-------
Text=returnERR_LIST_EMPTY;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [ERR_LIST_EMPTY]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=ALLOC(count*sizeof(uint32_t),&id_arr)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [ALLOC(count*sizeof(uint32_t),&id_arr)]
-------
Text=res
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_populate_array_with_haiku_ids(id_arr,count)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_populate_array_with_haiku_ids(id_arr,count)]
-------
Text=res
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_random_idx(&random_idx)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_get_random_idx(&random_idx)]
-------
Text=ERR_RAND_FAILED!=res
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [ERR_RAND_FAILED!=res]
-------
Text=res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx]);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=DEALLOC(id_arr,count*sizeof(uint32_t))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [DEALLOC(id_arr,count*sizeof(uint32_t))]
-------
Text=SUCCESS==res
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SUCCESS==res]
-------
Text=cgc_send_haiku
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [cgc_send_haiku]
-------
Text=(rand_haiku)
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [(rand_haiku)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=res
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=res
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [res]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=TRUE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_get_count()]
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SUCCESS]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=TRUE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=(uint32_t)cgc_get_count()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(uint32_t)cgc_get_count()]
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_haiku_list->head]
-------
Text=NULL!=hl_ptr
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL!=hl_ptr]
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [uint32_t]
-------
Text=id=cgc_get_id_from_haiku(hl_ptr)
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [id=cgc_get_id_from_haiku(hl_ptr)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SENDUI
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [SENDUI]
-------
Text=(id)
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [(id)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=hl_ptr=hl_ptr->next;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [hl_ptr=hl_ptr->next]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=INIT_HAIKU_ID
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [INIT_HAIKU_ID]
-------
Text=1
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=RECV(num,sizeof(uint32_t))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [RECV(num,sizeof(uint32_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [num[0]]
-------
Text=1
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=RECV(num,sizeof(uint16_t))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [RECV(num,sizeof(uint16_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [num[0]]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=cgc_haiku_list
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_haiku_list]
-------
Text=FALSE
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [FALSE]
-------
Text=TRUE
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [TRUE]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=cgc_haiku_list->count
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_haiku_list->count]
-------
Text=TRUE
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [TRUE]
-------
Text=FALSE
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [FALSE]
-------
Text=FALSE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [FALSE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_list_create()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_list_create()]
-------
Text=TRUE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_haiku_list->count
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_haiku_list->count]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=haiku->data
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [haiku->data]
-------
Text=(structhaiku*)haiku->data
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(structhaiku*)haiku->data]
-------
Text=h->id
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [h->id]
-------
Text=ERR_EMPTY_NODE
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [ERR_EMPTY_NODE]
-------
Text=next_haiku_id++
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [next_haiku_id++]
-------
Text=next_haiku_id
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [next_haiku_id]
-------
Text=-
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=cgc_rand((char*)&random_idx,4)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_rand((char*)&random_idx,4)]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_get_count()]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=count
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [count]
-------
Text=count
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [count]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=0!=ret
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [!=]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [ret]
-------
Text=ERR_RAND_FAILED
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [ERR_RAND_FAILED]
-------
Text=*idx
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [*]
1 : <class 'CParser.CParser.CastExpressionContext'> [idx]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=random_idx%(uint32_t)count
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [random_idx%(uint32_t)count]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=TRUE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_haiku_list->tail
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_haiku_list->tail]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=(0==count)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(0==count)]
-------
Text=(NULL==haiku_ptr)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(NULL==haiku_ptr)]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=(0<count)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(0<count)]
-------
Text=(NULL!=haiku_ptr)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(NULL!=haiku_ptr)]
-------
Text=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(structhaiku*)haiku_ptr->data]
-------
Text=count-1
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [count-1]
-------
Text=h->id
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [h->id]
-------
Text=count--
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [count--]
-------
Text=haiku_ptr->prev
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [haiku_ptr->prev]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=FALSE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [FALSE]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_get_count()]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [count]
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_haiku_list->head]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [haiku_ptr]
-------
Text=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(structhaiku*)haiku_ptr->data]
-------
Text=id==tmp->id
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [id==tmp->id]
-------
Text=*h=tmp
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [*h=tmp]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=found=TRUE
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [found=TRUE]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=break
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_ptr->next
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [haiku_ptr->next]
-------
Text=TRUE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [TRUE]
-------
Text=found
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [found]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SUCCESS]
-------
Text=ERR_INVALID_ID
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [ERR_INVALID_ID]
-------
Text=h->id
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [h->id]
-------
Text=h->content
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [h->content]
-------
Text=h->length
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [h->length]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_send(content,length)]
-------
Text=EGG_ID
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [EGG_ID]
-------
Text=EGG_HAIKU
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [EGG_HAIKU]
-------
Text=cgc_strlen(content)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_strlen(content)]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_send(content,length)]
-------
Text=cgc_node_create((void*)h)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_node_create((void*)h)]
-------
Text=cgc_list_push(cgc_haiku_list,nd)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_list_push(cgc_haiku_list,nd)]
-------
Text=MAX_HAIKU_LINE_LEN
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [MAX_HAIKU_LINE_LEN]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=bytes_received
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [bytes_received]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)]
-------
Text=bytes_written
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [bytes_written]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=(int16_t)total_bytes
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(int16_t)total_bytes]
-------
Text=ALLOC(sizeof(structhaiku)+total_bytes+1,&h)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [ALLOC(sizeof(structhaiku)+total_bytes+1,&h)]
-------
Text=h->content
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [h->content]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [bytes_remaining]
-------
Text=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)]
-------
Text=0>bytes_written
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0>bytes_written]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_written
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [bytes_written]
-------
Text=bytes_written
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [bytes_written]
-------
Text=cgc_get_next_haiku_id()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_get_next_haiku_id()]
-------
Text=total_bytes
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [total_bytes]
-------
Text=h
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [h]
-------
Text=cgc_recv_uint16()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_recv_uint16()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=FALSE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [FALSE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_init_haiku_list()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_init_haiku_list()]
-------
Text=cgc_recv_haiku_size()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_recv_haiku_size()]
-------
Text=(0<total_bytes)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(0<total_bytes)]
-------
Text=(MAX_HAIKU_LEN>total_bytes)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(MAX_HAIKU_LEN>total_bytes)]
-------
Text=cgc_recv_haiku(total_bytes)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_recv_haiku(total_bytes)]
-------
Text=NULL==h
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL==h]
-------
Text=ret=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ret=ERR_INVALID_HAIKU]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret=cgc_add_haiku_to_list(h)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ret=cgc_add_haiku_to_list(h)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_send_haiku_id(h->id)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_send_haiku_id(h->id)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_INVALID_HAIKU_LEN
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [ERR_INVALID_HAIKU_LEN]
-------
Text=ret
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [ret]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=TRUE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_recv_uint32()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_recv_uint32()]
-------
Text=EGG_ID==id
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [EGG_ID==id]
-------
Text=cgc_send_easter_egg_haiku()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_send_easter_egg_haiku()]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=res=cgc_find_haiku_with_id(&h,id)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [res=cgc_find_haiku_with_id(&h,id)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS==res
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SUCCESS==res]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={cgc_send_haiku(h);}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{cgc_send_haiku(h);}]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=res
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [res]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SUCCESS]
-------
Text=TRUE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_get_count()]
-------
Text=0==count
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0==count]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ALLOC(count*sizeof(uint32_t),&id_arr)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [ALLOC(count*sizeof(uint32_t),&id_arr)]
-------
Text=cgc_populate_array_with_haiku_ids(id_arr,count)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_populate_array_with_haiku_ids(id_arr,count)]
-------
Text=cgc_get_random_idx(&random_idx)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_get_random_idx(&random_idx)]
-------
Text=ERR_RAND_FAILED!=res
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [ERR_RAND_FAILED!=res]
-------
Text=res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=DEALLOC(id_arr,count*sizeof(uint32_t))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [DEALLOC(id_arr,count*sizeof(uint32_t))]
-------
Text=SUCCESS==res
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SUCCESS==res]
-------
Text=cgc_send_haiku
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [cgc_send_haiku]
-------
Text=(rand_haiku)
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclaratorContext'> [(rand_haiku)]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=res
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [res]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=TRUE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_get_count()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SUCCESS]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=TRUE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=(uint32_t)cgc_get_count()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(uint32_t)cgc_get_count()]
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_haiku_list->head]
-------
Text=NULL!=hl_ptr
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL!=hl_ptr]
-------
Text=uint32_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint32_t]
-------
Text=id=cgc_get_id_from_haiku(hl_ptr)
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [id]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [cgc_get_id_from_haiku(hl_ptr)]
-------
Text=SENDUI
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [SENDUI]
-------
Text=(id)
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclaratorContext'> [(id)]
-------
Text=hl_ptr=hl_ptr->next
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [hl_ptr=hl_ptr->next]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=INIT_HAIKU_ID
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [INIT_HAIKU_ID]
-------
Text=1
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=RECV(num,sizeof(uint32_t))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [RECV(num,sizeof(uint32_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [num[0]]
-------
Text=1
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=RECV(num,sizeof(uint16_t))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [RECV(num,sizeof(uint16_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [num[0]]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=cgc_haiku_list
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_haiku_list]
-------
Text=FALSE
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [FALSE]
-------
Text=TRUE
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [TRUE]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=cgc_haiku_list->count
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_haiku_list->count]
-------
Text=TRUE
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [TRUE]
-------
Text=FALSE
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [FALSE]
-------
Text=FALSE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [FALSE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_list_create()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_list_create()]
-------
Text=TRUE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_haiku_list->count
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_haiku_list->count]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=haiku->data
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [haiku->data]
-------
Text=(structhaiku*)haiku->data
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(structhaiku*)haiku->data]
-------
Text=h->id
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [h->id]
-------
Text=ERR_EMPTY_NODE
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [ERR_EMPTY_NODE]
-------
Text=next_haiku_id++
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [next_haiku_id++]
-------
Text=next_haiku_id
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [next_haiku_id]
-------
Text=1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=cgc_rand((char*)&random_idx,4)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_rand((char*)&random_idx,4)]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_get_count()]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=count
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [count]
-------
Text=count
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [count]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=!=
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [ret]
-------
Text=ERR_RAND_FAILED
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [ERR_RAND_FAILED]
-------
Text=*
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=idx
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [idx]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=random_idx%(uint32_t)count
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [random_idx%(uint32_t)count]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=TRUE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_haiku_list->tail
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_haiku_list->tail]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=(0==count)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [(0==count)]
-------
Text=(NULL==haiku_ptr)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [(NULL==haiku_ptr)]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=(0<count)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [(0<count)]
-------
Text=(NULL!=haiku_ptr)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [(NULL!=haiku_ptr)]
-------
Text=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(structhaiku*)haiku_ptr->data]
-------
Text=count-1
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [count-1]
-------
Text=h->id
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [h->id]
-------
Text=count--
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [count--]
-------
Text=haiku_ptr->prev
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [haiku_ptr->prev]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=FALSE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [FALSE]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_get_count()]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [count]
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_haiku_list->head]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [haiku_ptr]
-------
Text=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(structhaiku*)haiku_ptr->data]
-------
Text=id==tmp->id
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [id==tmp->id]
-------
Text=*h=tmp
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [*h]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [tmp]
-------
Text=found=TRUE
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [found]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [TRUE]
-------
Text=haiku_ptr->next
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [haiku_ptr->next]
-------
Text=TRUE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [TRUE]
-------
Text=found
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [found]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SUCCESS]
-------
Text=ERR_INVALID_ID
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [ERR_INVALID_ID]
-------
Text=h->id
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [h->id]
-------
Text=h->content
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [h->content]
-------
Text=h->length
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [h->length]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_send(content,length)]
-------
Text=EGG_ID
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [EGG_ID]
-------
Text=EGG_HAIKU
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [EGG_HAIKU]
-------
Text=cgc_strlen(content)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_strlen(content)]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_send(content,length)]
-------
Text=cgc_node_create((void*)h)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_node_create((void*)h)]
-------
Text=cgc_list_push(cgc_haiku_list,nd)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_list_push(cgc_haiku_list,nd)]
-------
Text=MAX_HAIKU_LINE_LEN
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [MAX_HAIKU_LINE_LEN]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=bytes_received
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [bytes_received]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)]
-------
Text=bytes_written
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [bytes_written]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=(int16_t)total_bytes
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(int16_t)total_bytes]
-------
Text=ALLOC(sizeof(structhaiku)+total_bytes+1,&h)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ALLOC(sizeof(structhaiku)+total_bytes+1,&h)]
-------
Text=h->content
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [h->content]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [bytes_remaining]
-------
Text=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)]
-------
Text=0>bytes_written
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0>bytes_written]
-------
Text=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL]
-------
Text=bytes_written
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [bytes_written]
-------
Text=bytes_written
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [bytes_written]
-------
Text=cgc_get_next_haiku_id()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_get_next_haiku_id()]
-------
Text=total_bytes
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [total_bytes]
-------
Text=h
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [h]
-------
Text=cgc_recv_uint16()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_recv_uint16()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=FALSE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [FALSE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_init_haiku_list()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_init_haiku_list()]
-------
Text=cgc_recv_haiku_size()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_recv_haiku_size()]
-------
Text=(0<total_bytes)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [(0<total_bytes)]
-------
Text=(MAX_HAIKU_LEN>total_bytes)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [(MAX_HAIKU_LEN>total_bytes)]
-------
Text=cgc_recv_haiku(total_bytes)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_recv_haiku(total_bytes)]
-------
Text=NULL==h
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL==h]
-------
Text=ret=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ret]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=ret=cgc_add_haiku_to_list(h)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ret]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_add_haiku_to_list(h)]
-------
Text=cgc_send_haiku_id(h->id)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_send_haiku_id(h->id)]
-------
Text=ERR_INVALID_HAIKU_LEN
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [ERR_INVALID_HAIKU_LEN]
-------
Text=ret
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ret]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=TRUE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_recv_uint32()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_recv_uint32()]
-------
Text=EGG_ID==id
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [EGG_ID==id]
-------
Text=cgc_send_easter_egg_haiku()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_send_easter_egg_haiku()]
-------
Text=res=cgc_find_haiku_with_id(&h,id)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [res]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_find_haiku_with_id(&h,id)]
-------
Text=SUCCESS==res
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SUCCESS==res]
-------
Text={cgc_send_haiku(h);}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [cgc_send_haiku(h);]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=res
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [res]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SUCCESS]
-------
Text=TRUE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_get_count()]
-------
Text=0==count
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0==count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ALLOC(count*sizeof(uint32_t),&id_arr)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [ALLOC(count*sizeof(uint32_t),&id_arr)]
-------
Text=cgc_populate_array_with_haiku_ids(id_arr,count)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_populate_array_with_haiku_ids(id_arr,count)]
-------
Text=cgc_get_random_idx(&random_idx)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_get_random_idx(&random_idx)]
-------
Text=ERR_RAND_FAILED!=res
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [ERR_RAND_FAILED!=res]
-------
Text=res=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [res]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])]
-------
Text=DEALLOC(id_arr,count*sizeof(uint32_t))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [DEALLOC(id_arr,count*sizeof(uint32_t))]
-------
Text=SUCCESS==res
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SUCCESS==res]
-------
Text=cgc_send_haiku
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [cgc_send_haiku]
-------
Text=(rand_haiku)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [(rand_haiku)]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=res
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [res]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=TRUE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_get_count()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SUCCESS]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=TRUE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=(uint32_t)cgc_get_count()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(uint32_t)cgc_get_count()]
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_haiku_list->head]
-------
Text=NULL!=hl_ptr
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL!=hl_ptr]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint32_t]
-------
Text=id
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [id]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_id_from_haiku(hl_ptr)
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_get_id_from_haiku(hl_ptr)]
-------
Text=SENDUI
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [SENDUI]
-------
Text=(id)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [(id)]
-------
Text=hl_ptr=hl_ptr->next
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [hl_ptr]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [hl_ptr->next]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=INIT_HAIKU_ID
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=RECV(num,sizeof(uint32_t))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [RECV(num,sizeof(uint32_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [num[0]]
-------
Text=1
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=RECV(num,sizeof(uint16_t))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [RECV(num,sizeof(uint16_t))]
-------
Text=num[0]
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [num[0]]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=cgc_haiku_list
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_haiku_list]
-------
Text=FALSE
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [FALSE]
-------
Text=TRUE
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [TRUE]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=cgc_haiku_list->count
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_haiku_list->count]
-------
Text=TRUE
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [TRUE]
-------
Text=FALSE
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [FALSE]
-------
Text=FALSE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [FALSE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_list_create()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_list_create()]
-------
Text=TRUE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_haiku_list->count
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_haiku_list->count]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=haiku->data
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [haiku->data]
-------
Text=(structhaiku*)haiku->data
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(structhaiku*)haiku->data]
-------
Text=h->id
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [h->id]
-------
Text=ERR_EMPTY_NODE
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [ERR_EMPTY_NODE]
-------
Text=next_haiku_id++
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [next_haiku_id++]
-------
Text=next_haiku_id
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [next_haiku_id]
-------
Text=1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=cgc_rand((char*)&random_idx,4)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_rand((char*)&random_idx,4)]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_get_count()]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=count
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [count]
-------
Text=count
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [count]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=ret
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [ret]
-------
Text=ERR_RAND_FAILED
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [ERR_RAND_FAILED]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=idx
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [idx]
-------
Text=random_idx%(uint32_t)count
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [random_idx%(uint32_t)count]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=TRUE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_haiku_list->tail
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_haiku_list->tail]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=(0==count)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [(0==count)]
-------
Text=(NULL==haiku_ptr)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [(NULL==haiku_ptr)]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=(0<count)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [(0<count)]
-------
Text=(NULL!=haiku_ptr)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [(NULL!=haiku_ptr)]
-------
Text=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(structhaiku*)haiku_ptr->data]
-------
Text=count-1
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [count-1]
-------
Text=h->id
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [h->id]
-------
Text=count--
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [count--]
-------
Text=haiku_ptr->prev
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [haiku_ptr->prev]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=FALSE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [FALSE]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_get_count()]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [count]
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_haiku_list->head]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [haiku_ptr]
-------
Text=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(structhaiku*)haiku_ptr->data]
-------
Text=id==tmp->id
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [id]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [tmp->id]
-------
Text=*h
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [*]
1 : <class 'CParser.CParser.CastExpressionContext'> [h]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=tmp
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [tmp]
-------
Text=found
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [found]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=TRUE
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [TRUE]
-------
Text=haiku_ptr->next
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [haiku_ptr->next]
-------
Text=TRUE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [TRUE]
-------
Text=found
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [found]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SUCCESS]
-------
Text=ERR_INVALID_ID
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [ERR_INVALID_ID]
-------
Text=h->id
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [h->id]
-------
Text=h->content
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [h->content]
-------
Text=h->length
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [h->length]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_send(content,length)]
-------
Text=EGG_ID
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [EGG_ID]
-------
Text=EGG_HAIKU
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [EGG_HAIKU]
-------
Text=cgc_strlen(content)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_strlen(content)]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_send((char*)&id,sizeof(uint32_t))]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_send((char*)&length,sizeof(uint16_t))]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_send(content,length)]
-------
Text=cgc_node_create((void*)h)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_node_create((void*)h)]
-------
Text=cgc_list_push(cgc_haiku_list,nd)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_list_push(cgc_haiku_list,nd)]
-------
Text=MAX_HAIKU_LINE_LEN
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [MAX_HAIKU_LINE_LEN]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=bytes_received
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [bytes_received]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)]
-------
Text=bytes_written
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [bytes_written]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=(int16_t)total_bytes
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [int16_t]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [total_bytes]
-------
Text=ALLOC(sizeof(structhaiku)+total_bytes+1,&h)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ALLOC(sizeof(structhaiku)+total_bytes+1,&h)]
-------
Text=h->content
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [h->content]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [bytes_remaining]
-------
Text=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)]
-------
Text=0>bytes_written
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0>bytes_written]
-------
Text=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL]
-------
Text=bytes_written
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [bytes_written]
-------
Text=bytes_written
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [bytes_written]
-------
Text=cgc_get_next_haiku_id()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_get_next_haiku_id()]
-------
Text=total_bytes
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [total_bytes]
-------
Text=h
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [h]
-------
Text=cgc_recv_uint16()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_recv_uint16()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=FALSE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [FALSE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_init_haiku_list()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_init_haiku_list()]
-------
Text=cgc_recv_haiku_size()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_recv_haiku_size()]
-------
Text=(0<total_bytes)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [(0<total_bytes)]
-------
Text=(MAX_HAIKU_LEN>total_bytes)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [(MAX_HAIKU_LEN>total_bytes)]
-------
Text=cgc_recv_haiku(total_bytes)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_recv_haiku(total_bytes)]
-------
Text=NULL==h
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [h]
-------
Text=ret
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ret]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=ret
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ret]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_add_haiku_to_list(h)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_add_haiku_to_list(h)]
-------
Text=cgc_send_haiku_id(h->id)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_send_haiku_id(h->id)]
-------
Text=ERR_INVALID_HAIKU_LEN
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [ERR_INVALID_HAIKU_LEN]
-------
Text=ret
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ret]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=TRUE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_recv_uint32()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_recv_uint32()]
-------
Text=EGG_ID==id
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [EGG_ID]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [id]
-------
Text=cgc_send_easter_egg_haiku()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_send_easter_egg_haiku()]
-------
Text=res
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [res]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_find_haiku_with_id(&h,id)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_find_haiku_with_id(&h,id)]
-------
Text=SUCCESS==res
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SUCCESS==res]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_send_haiku(h);
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [cgc_send_haiku(h);]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=res
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [res]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SUCCESS]
-------
Text=TRUE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_get_count()]
-------
Text=0==count
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ALLOC(count*sizeof(uint32_t),&id_arr)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [ALLOC(count*sizeof(uint32_t),&id_arr)]
-------
Text=cgc_populate_array_with_haiku_ids(id_arr,count)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_populate_array_with_haiku_ids(id_arr,count)]
-------
Text=cgc_get_random_idx(&random_idx)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_get_random_idx(&random_idx)]
-------
Text=ERR_RAND_FAILED!=res
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [ERR_RAND_FAILED]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [!=]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [res]
-------
Text=res
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [res]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])]
-------
Text=DEALLOC(id_arr,count*sizeof(uint32_t))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [DEALLOC(id_arr,count*sizeof(uint32_t))]
-------
Text=SUCCESS==res
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SUCCESS]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [res]
-------
Text=cgc_send_haiku
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_send_haiku]
-------
Text=(rand_haiku)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.DeclaratorContext'> [rand_haiku]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=res
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [res]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=TRUE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_get_count()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SUCCESS]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=TRUE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_haiku_list_exists()]
-------
Text=(uint32_t)cgc_get_count()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(uint32_t)cgc_get_count()]
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_haiku_list->head]
-------
Text=NULL!=hl_ptr
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [!=]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [hl_ptr]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=id
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id]
-------
Text=cgc_get_id_from_haiku(hl_ptr)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_get_id_from_haiku(hl_ptr)]
-------
Text=SENDUI
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SENDUI]
-------
Text=(id)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.DeclaratorContext'> [id]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=hl_ptr
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [hl_ptr]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=hl_ptr->next
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [hl_ptr->next]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SUCCESS]
-------
Text=1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=RECV(num,sizeof(uint32_t))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [RECV]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [num,sizeof(uint32_t)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=num[0]
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [num]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.ExpressionContext'> [0]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text=1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=RECV(num,sizeof(uint16_t))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [RECV]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [num,sizeof(uint16_t)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=num[0]
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [num]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.ExpressionContext'> [0]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=cgc_haiku_list
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_haiku_list]
-------
Text=FALSE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [FALSE]
-------
Text=TRUE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [TRUE]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=cgc_haiku_list->count
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_haiku_list]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=TRUE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [TRUE]
-------
Text=FALSE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [FALSE]
-------
Text=FALSE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [FALSE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_haiku_list_exists]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_list_create()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_list_create()]
-------
Text=TRUE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_haiku_list_exists]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_haiku_list->count
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_haiku_list->count]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=haiku->data
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [haiku]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [data]
-------
Text=(structhaiku*)haiku->data
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(structhaiku*)haiku->data]
-------
Text=h->id
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [h->id]
-------
Text=ERR_EMPTY_NODE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [ERR_EMPTY_NODE]
-------
Text=next_haiku_id++
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [next_haiku_id]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [++]
-------
Text=next_haiku_id
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [next_haiku_id]
-------
Text=1
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=cgc_rand((char*)&random_idx,4)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_rand((char*)&random_idx,4)]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_get_count()]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=count
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [count]
-------
Text=count
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [count]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=ret
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [ret]
-------
Text=ERR_RAND_FAILED
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [ERR_RAND_FAILED]
-------
Text=idx
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [idx]
-------
Text=random_idx%(uint32_t)count
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [random_idx%(uint32_t)count]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=TRUE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_haiku_list_exists]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_haiku_list->tail
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_haiku_list->tail]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=(0==count)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(0==count)]
-------
Text=(NULL==haiku_ptr)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(NULL==haiku_ptr)]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=(0<count)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(0<count)]
-------
Text=(NULL!=haiku_ptr)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(NULL!=haiku_ptr)]
-------
Text=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(structhaiku*)haiku_ptr->data]
-------
Text=count-1
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [count-1]
-------
Text=h->id
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [h->id]
-------
Text=count--
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [count--]
-------
Text=haiku_ptr->prev
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [haiku_ptr->prev]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=FALSE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [FALSE]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_get_count()]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [count]
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_haiku_list->head]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [haiku_ptr]
-------
Text=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(structhaiku*)haiku_ptr->data]
-------
Text=id
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [id]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=tmp->id
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [tmp->id]
-------
Text=*
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=h
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [h]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=tmp
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [tmp]
-------
Text=found
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [found]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=TRUE
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [TRUE]
-------
Text=haiku_ptr->next
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [haiku_ptr->next]
-------
Text=TRUE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [TRUE]
-------
Text=found
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [found]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SUCCESS]
-------
Text=ERR_INVALID_ID
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [ERR_INVALID_ID]
-------
Text=h->id
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [h->id]
-------
Text=h->content
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [h->content]
-------
Text=h->length
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [h->length]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_send]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [(char*)&id,sizeof(uint32_t)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_send]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [(char*)&length,sizeof(uint16_t)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_send]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [content,length]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=EGG_ID
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [EGG_ID]
-------
Text=EGG_HAIKU
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [EGG_HAIKU]
-------
Text=cgc_strlen(content)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_strlen(content)]
-------
Text=cgc_send((char*)&id,sizeof(uint32_t))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_send]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [(char*)&id,sizeof(uint32_t)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_send((char*)&length,sizeof(uint16_t))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_send]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [(char*)&length,sizeof(uint16_t)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_send(content,length)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_send]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [content,length]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_node_create((void*)h)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_node_create((void*)h)]
-------
Text=cgc_list_push(cgc_haiku_list,nd)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_list_push]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [cgc_haiku_list,nd]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=MAX_HAIKU_LINE_LEN
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [MAX_HAIKU_LINE_LEN]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=bytes_received
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [bytes_received]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)]
-------
Text=bytes_written
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [bytes_written]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int16_t
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [int16_t]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=total_bytes
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [total_bytes]
-------
Text=ALLOC(sizeof(structhaiku)+total_bytes+1,&h)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ALLOC]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [sizeof(structhaiku)+total_bytes+1,&h]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=h->content
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [h->content]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [bytes_remaining]
-------
Text=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)]
-------
Text=0>bytes_written
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [>]
2 : <class 'CParser.CParser.ShiftExpressionContext'> [bytes_written]
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL]
-------
Text=bytes_written
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [bytes_written]
-------
Text=bytes_written
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [bytes_written]
-------
Text=cgc_get_next_haiku_id()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_get_next_haiku_id()]
-------
Text=total_bytes
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [total_bytes]
-------
Text=h
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [h]
-------
Text=cgc_recv_uint16()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_recv_uint16]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=FALSE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [FALSE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_haiku_list_exists]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_init_haiku_list()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_init_haiku_list()]
-------
Text=cgc_recv_haiku_size()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_recv_haiku_size()]
-------
Text=(0<total_bytes)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(0<total_bytes)]
-------
Text=(MAX_HAIKU_LEN>total_bytes)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(MAX_HAIKU_LEN>total_bytes)]
-------
Text=cgc_recv_haiku(total_bytes)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_recv_haiku(total_bytes)]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [h]
-------
Text=ret
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ret]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=ret
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ret]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_add_haiku_to_list(h)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_add_haiku_to_list(h)]
-------
Text=cgc_send_haiku_id(h->id)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_send_haiku_id(h->id)]
-------
Text=ERR_INVALID_HAIKU_LEN
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [ERR_INVALID_HAIKU_LEN]
-------
Text=ret
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ret]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=TRUE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_haiku_list_exists]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_recv_uint32()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_recv_uint32()]
-------
Text=EGG_ID
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [EGG_ID]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [id]
-------
Text=cgc_send_easter_egg_haiku()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_send_easter_egg_haiku()]
-------
Text=res
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [res]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_find_haiku_with_id(&h,id)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_find_haiku_with_id(&h,id)]
-------
Text=SUCCESS==res
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SUCCESS==res]
-------
Text=cgc_send_haiku(h);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [cgc_send_haiku(h);]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=res
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [res]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SUCCESS]
-------
Text=TRUE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_haiku_list_exists]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_get_count()]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ALLOC(count*sizeof(uint32_t),&id_arr)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [ALLOC(count*sizeof(uint32_t),&id_arr)]
-------
Text=cgc_populate_array_with_haiku_ids(id_arr,count)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_populate_array_with_haiku_ids(id_arr,count)]
-------
Text=cgc_get_random_idx(&random_idx)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_get_random_idx(&random_idx)]
-------
Text=ERR_RAND_FAILED
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [ERR_RAND_FAILED]
-------
Text=!=
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=res
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [res]
-------
Text=res
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [res]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])]
-------
Text=DEALLOC(id_arr,count*sizeof(uint32_t))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [DEALLOC(id_arr,count*sizeof(uint32_t))]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SUCCESS]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=res
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [res]
-------
Text=cgc_send_haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=rand_haiku
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [rand_haiku]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=res
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [res]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=TRUE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_haiku_list_exists]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_get_count()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SUCCESS]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=TRUE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [TRUE]
-------
Text=cgc_haiku_list_exists()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_haiku_list_exists]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(uint32_t)cgc_get_count()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(uint32_t)cgc_get_count()]
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_haiku_list->head]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=!=
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=hl_ptr
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [hl_ptr]
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_id_from_haiku(hl_ptr)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_get_id_from_haiku(hl_ptr)]
-------
Text=SENDUI
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [id]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=hl_ptr
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [hl_ptr]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=hl_ptr->next
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [hl_ptr->next]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SUCCESS]
-------
Text=1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=RECV
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [RECV]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=num,sizeof(uint32_t)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [num]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(uint32_t)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=num
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [num]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=RECV
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [RECV]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=num,sizeof(uint16_t)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [num]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(uint16_t)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=num
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [num]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=cgc_haiku_list
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_haiku_list]
-------
Text=FALSE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [FALSE]
-------
Text=TRUE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [TRUE]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=cgc_haiku_list
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_haiku_list]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=TRUE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [TRUE]
-------
Text=FALSE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [FALSE]
-------
Text=FALSE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [FALSE]
-------
Text=cgc_haiku_list_exists
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_haiku_list_exists]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_create()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_list_create()]
-------
Text=TRUE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [TRUE]
-------
Text=cgc_haiku_list_exists
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_haiku_list_exists]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list->count
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_haiku_list->count]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=haiku
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=data
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(structhaiku*)haiku->data
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(structhaiku*)haiku->data]
-------
Text=h->id
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [h->id]
-------
Text=ERR_EMPTY_NODE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [ERR_EMPTY_NODE]
-------
Text=next_haiku_id
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [next_haiku_id]
-------
Text=++
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=next_haiku_id
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [next_haiku_id]
-------
Text=1
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=cgc_rand((char*)&random_idx,4)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_rand]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [(char*)&random_idx,4]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_get_count]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ERR_LIST_NOT_EXIST]
-------
Text=count
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=count
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [count]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=ret
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [ret]
-------
Text=ERR_RAND_FAILED
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [ERR_RAND_FAILED]
-------
Text=idx
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [idx]
-------
Text=random_idx%(uint32_t)count
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [random_idx%(uint32_t)count]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=TRUE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [TRUE]
-------
Text=cgc_haiku_list_exists
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_haiku_list_exists]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list->tail
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_haiku_list->tail]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=(0==count)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [0==count]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(NULL==haiku_ptr)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [NULL==haiku_ptr]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=(0<count)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [0<count]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(NULL!=haiku_ptr)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [NULL!=haiku_ptr]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(structhaiku*)haiku_ptr->data]
-------
Text=count-1
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [count-1]
-------
Text=h->id
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [h->id]
-------
Text=count--
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [count--]
-------
Text=haiku_ptr->prev
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [haiku_ptr->prev]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=FALSE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [FALSE]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_get_count]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=count
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_haiku_list->head]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku_ptr]
-------
Text=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(structhaiku*)haiku_ptr->data]
-------
Text=id
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [id]
-------
Text=tmp->id
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [tmp->id]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [h]
-------
Text=tmp
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [tmp]
-------
Text=found
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [found]
-------
Text=TRUE
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [TRUE]
-------
Text=haiku_ptr->next
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [haiku_ptr->next]
-------
Text=TRUE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [TRUE]
-------
Text=found
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [found]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SUCCESS]
-------
Text=ERR_INVALID_ID
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [ERR_INVALID_ID]
-------
Text=h->id
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [h]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id]
-------
Text=h->content
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [h]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [content]
-------
Text=h->length
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [h]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [length]
-------
Text=cgc_send
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_send]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&id,sizeof(uint32_t)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [(char*)&id]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(uint32_t)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_send
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_send]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&length,sizeof(uint16_t)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [(char*)&length]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(uint16_t)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_send
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_send]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=content,length
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [content]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [length]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=EGG_ID
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [EGG_ID]
-------
Text=EGG_HAIKU
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [EGG_HAIKU]
-------
Text=cgc_strlen(content)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_strlen]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [content]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_send
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_send]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&id,sizeof(uint32_t)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [(char*)&id]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(uint32_t)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_send
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_send]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&length,sizeof(uint16_t)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [(char*)&length]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(uint16_t)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_send
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_send]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=content,length
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [content]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [length]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_node_create((void*)h)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_node_create]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [(void*)h]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_list_push
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_list_push]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list,nd
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [cgc_haiku_list]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [nd]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=MAX_HAIKU_LINE_LEN
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [MAX_HAIKU_LINE_LEN]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=cgc_recvline(STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_recvline]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=bytes_received
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bytes_received]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=cgc_snprintf(haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_snprintf]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=bytes_written
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bytes_written]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=int16_t
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int16_t]
-------
Text=total_bytes
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [total_bytes]
-------
Text=ALLOC
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ALLOC]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(structhaiku)+total_bytes+1,&h
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(structhaiku)+total_bytes+1]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [&h]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h->content
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [h]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [content]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bytes_remaining]
-------
Text=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=>
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_written
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [bytes_written]
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL]
-------
Text=bytes_written
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [bytes_written]
-------
Text=bytes_written
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [bytes_written]
-------
Text=cgc_get_next_haiku_id()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_get_next_haiku_id]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=total_bytes
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [total_bytes]
-------
Text=h
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=cgc_recv_uint16
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_recv_uint16]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=FALSE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [FALSE]
-------
Text=cgc_haiku_list_exists
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_haiku_list_exists]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_init_haiku_list()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_init_haiku_list()]
-------
Text=cgc_recv_haiku_size()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_recv_haiku_size]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(0<total_bytes)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [0<total_bytes]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(MAX_HAIKU_LEN>total_bytes)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [MAX_HAIKU_LEN>total_bytes]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_recv_haiku(total_bytes)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_recv_haiku(total_bytes)]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=h
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [h]
-------
Text=ret
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ret]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=ret
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ret]
-------
Text=cgc_add_haiku_to_list(h)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_add_haiku_to_list(h)]
-------
Text=cgc_send_haiku_id(h->id)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_send_haiku_id(h->id)]
-------
Text=ERR_INVALID_HAIKU_LEN
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [ERR_INVALID_HAIKU_LEN]
-------
Text=ret
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ret]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=TRUE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [TRUE]
-------
Text=cgc_haiku_list_exists
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_haiku_list_exists]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recv_uint32()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_recv_uint32()]
-------
Text=EGG_ID
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [EGG_ID]
-------
Text=id
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [id]
-------
Text=cgc_send_easter_egg_haiku()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_send_easter_egg_haiku()]
-------
Text=res
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [res]
-------
Text=cgc_find_haiku_with_id(&h,id)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_find_haiku_with_id(&h,id)]
-------
Text=SUCCESS==res
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SUCCESS==res]
-------
Text=cgc_send_haiku(h);
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [cgc_send_haiku]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [(h)]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=res
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [res]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SUCCESS]
-------
Text=TRUE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [TRUE]
-------
Text=cgc_haiku_list_exists
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_haiku_list_exists]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_get_count()]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ALLOC(count*sizeof(uint32_t),&id_arr)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [ALLOC(count*sizeof(uint32_t),&id_arr)]
-------
Text=cgc_populate_array_with_haiku_ids(id_arr,count)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_populate_array_with_haiku_ids(id_arr,count)]
-------
Text=cgc_get_random_idx(&random_idx)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_get_random_idx(&random_idx)]
-------
Text=ERR_RAND_FAILED
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [ERR_RAND_FAILED]
-------
Text=res
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [res]
-------
Text=res
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [res]
-------
Text=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])]
-------
Text=DEALLOC(id_arr,count*sizeof(uint32_t))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [DEALLOC(id_arr,count*sizeof(uint32_t))]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SUCCESS]
-------
Text=res
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [res]
-------
Text=rand_haiku
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [rand_haiku]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=res
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [res]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=TRUE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [TRUE]
-------
Text=cgc_haiku_list_exists
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_haiku_list_exists]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_get_count()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SUCCESS]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=TRUE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [TRUE]
-------
Text=cgc_haiku_list_exists
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_haiku_list_exists]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(uint32_t)cgc_get_count()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(uint32_t)cgc_get_count()]
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_haiku_list->head]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=hl_ptr
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [hl_ptr]
-------
Text=cgc_get_id_from_haiku(hl_ptr)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_get_id_from_haiku(hl_ptr)]
-------
Text=id
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id]
-------
Text=hl_ptr
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [hl_ptr]
-------
Text=hl_ptr->next
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [hl_ptr->next]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SUCCESS]
-------
Text=1
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=RECV
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=num
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [num]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(uint32_t)]
-------
Text=num
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=1
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=RECV
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=num
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [num]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(uint16_t)]
-------
Text=num
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=FALSE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [FALSE]
-------
Text=TRUE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [TRUE]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=TRUE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [TRUE]
-------
Text=FALSE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [FALSE]
-------
Text=FALSE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list_exists
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_create()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_list_create()]
-------
Text=TRUE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list_exists
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list->count
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_haiku_list->count]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(structhaiku*)haiku->data
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(structhaiku*)haiku->data]
-------
Text=h->id
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [h->id]
-------
Text=ERR_EMPTY_NODE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [ERR_EMPTY_NODE]
-------
Text=next_haiku_id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=next_haiku_id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=cgc_rand
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_rand]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&random_idx,4
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [(char*)&random_idx]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [4]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_count
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_get_count]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [count]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=ret
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ret]
-------
Text=ERR_RAND_FAILED
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [ERR_RAND_FAILED]
-------
Text=idx
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=random_idx%(uint32_t)count
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [random_idx%(uint32_t)count]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=TRUE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list_exists
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list->tail
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_haiku_list->tail]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==count
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0==count]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL==haiku_ptr
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL==haiku_ptr]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0<count
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0<count]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL!=haiku_ptr
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL!=haiku_ptr]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(structhaiku*)haiku_ptr->data]
-------
Text=count-1
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [count-1]
-------
Text=h->id
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [h->id]
-------
Text=count--
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [count--]
-------
Text=haiku_ptr->prev
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [haiku_ptr->prev]
-------
Text=SUCCESS
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=FALSE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [FALSE]
-------
Text=cgc_get_count
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_get_count]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_haiku_list->head]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_ptr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(structhaiku*)haiku_ptr->data]
-------
Text=id
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [id]
-------
Text=tmp->id
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [tmp->id]
-------
Text=h
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [h]
-------
Text=tmp
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [tmp]
-------
Text=found
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=TRUE
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [TRUE]
-------
Text=haiku_ptr->next
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [haiku_ptr->next]
-------
Text=TRUE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=found
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SUCCESS]
-------
Text=ERR_INVALID_ID
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [ERR_INVALID_ID]
-------
Text=h
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=content
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=length
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_send
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&id
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(char*)&id]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(uint32_t)]
-------
Text=cgc_send
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&length
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(char*)&length]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(uint16_t)]
-------
Text=cgc_send
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=content
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [content]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=length
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [length]
-------
Text=EGG_ID
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [EGG_ID]
-------
Text=EGG_HAIKU
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [EGG_HAIKU]
-------
Text=cgc_strlen
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_strlen]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=content
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [content]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_send
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&id
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(char*)&id]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(uint32_t)]
-------
Text=cgc_send
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&length
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(char*)&length]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(uint16_t)]
-------
Text=cgc_send
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=content
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [content]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=length
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [length]
-------
Text=cgc_node_create
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_node_create]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)h
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [(void*)h]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_push
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [cgc_haiku_list]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=nd
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [nd]
-------
Text=MAX_HAIKU_LINE_LEN
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [MAX_HAIKU_LINE_LEN]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=cgc_recvline
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_recvline]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN,temp_line_buf,MAX_HAIKU_LINE_LEN
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDIN]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [temp_line_buf]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [MAX_HAIKU_LINE_LEN]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_received
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=cgc_snprintf
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_snprintf]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_content_ptr,bytes_remaining+1,"~c\x07",temp_line_buf
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 7
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [haiku_content_ptr]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [bytes_remaining+1]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> ["~c\x07"]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
6 : <class 'CParser.CParser.PassignmentExpressionContext'> [temp_line_buf]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_written
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=int16_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [int16_t]
-------
Text=total_bytes
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [total_bytes]
-------
Text=ALLOC
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(structhaiku)+total_bytes+1
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(structhaiku)+total_bytes+1]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&h
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [&h]
-------
Text=h
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=content
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_remaining
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=bytes_written
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [bytes_written]
-------
Text=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL]
-------
Text=bytes_written
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [bytes_written]
-------
Text=bytes_written
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [bytes_written]
-------
Text=cgc_get_next_haiku_id
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_get_next_haiku_id]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=total_bytes
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [total_bytes]
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recv_uint16
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=FALSE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list_exists
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_init_haiku_list()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_init_haiku_list()]
-------
Text=cgc_recv_haiku_size
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_recv_haiku_size]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0<total_bytes
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0<total_bytes]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=MAX_HAIKU_LEN>total_bytes
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [MAX_HAIKU_LEN>total_bytes]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recv_haiku(total_bytes)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_recv_haiku(total_bytes)]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=h
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [h]
-------
Text=ret
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=ret
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_add_haiku_to_list(h)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_add_haiku_to_list(h)]
-------
Text=cgc_send_haiku_id(h->id)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_send_haiku_id(h->id)]
-------
Text=ERR_INVALID_HAIKU_LEN
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [ERR_INVALID_HAIKU_LEN]
-------
Text=ret
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=TRUE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list_exists
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recv_uint32()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_recv_uint32()]
-------
Text=EGG_ID
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [EGG_ID]
-------
Text=id
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [id]
-------
Text=cgc_send_easter_egg_haiku()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_send_easter_egg_haiku()]
-------
Text=res
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_find_haiku_with_id(&h,id)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_find_haiku_with_id(&h,id)]
-------
Text=SUCCESS==res
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SUCCESS==res]
-------
Text=cgc_send_haiku
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [cgc_send_haiku]
-------
Text=(h)
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [(h)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=res
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SUCCESS]
-------
Text=TRUE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list_exists
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_get_count()]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ALLOC(count*sizeof(uint32_t),&id_arr)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [ALLOC(count*sizeof(uint32_t),&id_arr)]
-------
Text=cgc_populate_array_with_haiku_ids(id_arr,count)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_populate_array_with_haiku_ids(id_arr,count)]
-------
Text=cgc_get_random_idx(&random_idx)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_get_random_idx(&random_idx)]
-------
Text=ERR_RAND_FAILED
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [ERR_RAND_FAILED]
-------
Text=res
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [res]
-------
Text=res
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])]
-------
Text=DEALLOC(id_arr,count*sizeof(uint32_t))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [DEALLOC(id_arr,count*sizeof(uint32_t))]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SUCCESS]
-------
Text=res
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [res]
-------
Text=rand_haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=res
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=TRUE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list_exists
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_get_count()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SUCCESS]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=TRUE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list_exists
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(uint32_t)cgc_get_count()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(uint32_t)cgc_get_count()]
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_haiku_list->head]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=hl_ptr
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [hl_ptr]
-------
Text=cgc_get_id_from_haiku(hl_ptr)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_get_id_from_haiku(hl_ptr)]
-------
Text=id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=hl_ptr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=hl_ptr->next
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [hl_ptr->next]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=SUCCESS
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=num
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [num]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(uint32_t)]
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=1
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=num
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [num]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(uint16_t)]
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=FALSE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [FALSE]
-------
Text=TRUE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [TRUE]
-------
Text=TRUE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [TRUE]
-------
Text=FALSE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [FALSE]
-------
Text=cgc_list_create()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_list_create()]
-------
Text=cgc_haiku_list->count
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_haiku_list->count]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=(structhaiku*)haiku->data
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(structhaiku*)haiku->data]
-------
Text=h->id
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [h->id]
-------
Text=ERR_EMPTY_NODE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [ERR_EMPTY_NODE]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_rand
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&random_idx
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(char*)&random_idx]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [4]
-------
Text=cgc_get_count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [count]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=count
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=ret
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ret]
-------
Text=ERR_RAND_FAILED
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [ERR_RAND_FAILED]
-------
Text=random_idx%(uint32_t)count
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [random_idx%(uint32_t)count]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list->tail
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_haiku_list->tail]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=0==count
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0==count]
-------
Text=NULL==haiku_ptr
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL==haiku_ptr]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=0<count
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0<count]
-------
Text=NULL!=haiku_ptr
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL!=haiku_ptr]
-------
Text=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(structhaiku*)haiku_ptr->data]
-------
Text=count-1
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [count-1]
-------
Text=h->id
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [h->id]
-------
Text=count--
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [count--]
-------
Text=haiku_ptr->prev
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [haiku_ptr->prev]
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=FALSE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_haiku_list->head]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=count
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(structhaiku*)haiku_ptr->data]
-------
Text=id
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [id]
-------
Text=tmp->id
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [tmp->id]
-------
Text=h
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=tmp
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [tmp]
-------
Text=TRUE
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [TRUE]
-------
Text=haiku_ptr->next
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [haiku_ptr->next]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SUCCESS]
-------
Text=ERR_INVALID_ID
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [ERR_INVALID_ID]
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&id
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(char*)&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(uint32_t)]
-------
Text=(char*)&length
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(char*)&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(uint16_t)]
-------
Text=content
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [content]
-------
Text=length
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [length]
-------
Text=EGG_ID
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=EGG_HAIKU
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_strlen
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=content
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [content]
-------
Text=(char*)&id
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(char*)&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(uint32_t)]
-------
Text=(char*)&length
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(char*)&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(uint16_t)]
-------
Text=content
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [content]
-------
Text=length
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [length]
-------
Text=cgc_node_create
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)h
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(void*)h]
-------
Text=cgc_haiku_list
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [cgc_haiku_list]
-------
Text=nd
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [nd]
-------
Text=MAX_HAIKU_LINE_LEN
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [MAX_HAIKU_LINE_LEN]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recvline
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDIN]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=temp_line_buf
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [temp_line_buf]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=MAX_HAIKU_LINE_LEN
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [MAX_HAIKU_LINE_LEN]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=cgc_snprintf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_content_ptr
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [haiku_content_ptr]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_remaining+1
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [bytes_remaining+1]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="~c\x07"
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ["~c\x07"]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=temp_line_buf
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [temp_line_buf]
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int16_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int16_t]
-------
Text=total_bytes
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [total_bytes]
-------
Text=sizeof(structhaiku)+total_bytes+1
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(structhaiku)+total_bytes+1]
-------
Text=&h
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [&h]
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=bytes_written
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [bytes_written]
-------
Text=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL]
-------
Text=bytes_written
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [bytes_written]
-------
Text=bytes_written
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [bytes_written]
-------
Text=cgc_get_next_haiku_id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=total_bytes
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_init_haiku_list()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_init_haiku_list()]
-------
Text=cgc_recv_haiku_size
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0<total_bytes
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0<total_bytes]
-------
Text=MAX_HAIKU_LEN>total_bytes
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [MAX_HAIKU_LEN>total_bytes]
-------
Text=cgc_recv_haiku(total_bytes)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_recv_haiku(total_bytes)]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=h
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [h]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=cgc_add_haiku_to_list(h)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_add_haiku_to_list(h)]
-------
Text=cgc_send_haiku_id(h->id)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_send_haiku_id(h->id)]
-------
Text=ERR_INVALID_HAIKU_LEN
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [ERR_INVALID_HAIKU_LEN]
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recv_uint32()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_recv_uint32()]
-------
Text=EGG_ID
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [EGG_ID]
-------
Text=id
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [id]
-------
Text=cgc_send_easter_egg_haiku()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_send_easter_egg_haiku()]
-------
Text=cgc_find_haiku_with_id(&h,id)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_find_haiku_with_id(&h,id)]
-------
Text=SUCCESS==res
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SUCCESS==res]
-------
Text=cgc_send_haiku
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [cgc_send_haiku]
-------
Text=(h)
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclaratorContext'> [(h)]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_get_count()]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ALLOC(count*sizeof(uint32_t),&id_arr)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [ALLOC(count*sizeof(uint32_t),&id_arr)]
-------
Text=cgc_populate_array_with_haiku_ids(id_arr,count)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_populate_array_with_haiku_ids(id_arr,count)]
-------
Text=cgc_get_random_idx(&random_idx)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_get_random_idx(&random_idx)]
-------
Text=ERR_RAND_FAILED
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [ERR_RAND_FAILED]
-------
Text=res
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [res]
-------
Text=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])]
-------
Text=DEALLOC(id_arr,count*sizeof(uint32_t))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [DEALLOC(id_arr,count*sizeof(uint32_t))]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SUCCESS]
-------
Text=res
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [res]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_get_count()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SUCCESS]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=(uint32_t)cgc_get_count()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(uint32_t)cgc_get_count()]
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_haiku_list->head]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=hl_ptr
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [hl_ptr]
-------
Text=cgc_get_id_from_haiku(hl_ptr)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_get_id_from_haiku(hl_ptr)]
-------
Text=hl_ptr->next
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [hl_ptr->next]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=1
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=num
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [num]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(uint32_t)]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=1
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=num
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [num]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(uint16_t)]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=FALSE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [FALSE]
-------
Text=TRUE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [TRUE]
-------
Text=TRUE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [TRUE]
-------
Text=FALSE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [FALSE]
-------
Text=cgc_list_create()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_list_create()]
-------
Text=cgc_haiku_list->count
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_haiku_list->count]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=(structhaiku*)haiku->data
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(structhaiku*)haiku->data]
-------
Text=h->id
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [h->id]
-------
Text=ERR_EMPTY_NODE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ERR_EMPTY_NODE]
-------
Text=(char*)&random_idx
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(char*)&random_idx]
-------
Text=4
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [4]
-------
Text=count
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [count]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=ret
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ret]
-------
Text=ERR_RAND_FAILED
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [ERR_RAND_FAILED]
-------
Text=random_idx%(uint32_t)count
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [random_idx%(uint32_t)count]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SUCCESS]
-------
Text=cgc_haiku_list->tail
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_haiku_list->tail]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=0==count
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0==count]
-------
Text=NULL==haiku_ptr
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL==haiku_ptr]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=0<count
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0<count]
-------
Text=NULL!=haiku_ptr
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL!=haiku_ptr]
-------
Text=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(structhaiku*)haiku_ptr->data]
-------
Text=count-1
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [count-1]
-------
Text=h->id
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [h->id]
-------
Text=count--
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [count--]
-------
Text=haiku_ptr->prev
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [haiku_ptr->prev]
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_haiku_list->head]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(structhaiku*)haiku_ptr->data]
-------
Text=id
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [id]
-------
Text=tmp->id
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [tmp->id]
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=tmp
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [tmp]
-------
Text=TRUE
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [TRUE]
-------
Text=haiku_ptr->next
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [haiku_ptr->next]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SUCCESS]
-------
Text=ERR_INVALID_ID
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ERR_INVALID_ID]
-------
Text=(char*)&id
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(char*)&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(uint32_t)]
-------
Text=(char*)&length
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(char*)&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(uint16_t)]
-------
Text=content
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [content]
-------
Text=length
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [length]
-------
Text=content
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [content]
-------
Text=(char*)&id
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(char*)&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(uint32_t)]
-------
Text=(char*)&length
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(char*)&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(uint16_t)]
-------
Text=content
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [content]
-------
Text=length
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [length]
-------
Text=(void*)h
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(void*)h]
-------
Text=cgc_haiku_list
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [cgc_haiku_list]
-------
Text=nd
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [nd]
-------
Text=MAX_HAIKU_LINE_LEN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=STDIN
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDIN]
-------
Text=temp_line_buf
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [temp_line_buf]
-------
Text=MAX_HAIKU_LINE_LEN
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [MAX_HAIKU_LINE_LEN]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=haiku_content_ptr
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [haiku_content_ptr]
-------
Text=bytes_remaining+1
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [bytes_remaining+1]
-------
Text="~c\x07"
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ["~c\x07"]
-------
Text=temp_line_buf
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [temp_line_buf]
-------
Text=int16_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=total_bytes
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(structhaiku)+total_bytes+1
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(structhaiku)+total_bytes+1]
-------
Text=&h
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [&h]
-------
Text=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=bytes_written
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [bytes_written]
-------
Text=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL]
-------
Text=bytes_written
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [bytes_written]
-------
Text=bytes_written
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [bytes_written]
-------
Text=cgc_init_haiku_list()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_init_haiku_list()]
-------
Text=0<total_bytes
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0<total_bytes]
-------
Text=MAX_HAIKU_LEN>total_bytes
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [MAX_HAIKU_LEN>total_bytes]
-------
Text=cgc_recv_haiku(total_bytes)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_recv_haiku(total_bytes)]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=h
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [h]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=cgc_add_haiku_to_list(h)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_add_haiku_to_list(h)]
-------
Text=cgc_send_haiku_id(h->id)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_send_haiku_id(h->id)]
-------
Text=ERR_INVALID_HAIKU_LEN
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [ERR_INVALID_HAIKU_LEN]
-------
Text=cgc_recv_uint32()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_recv_uint32()]
-------
Text=EGG_ID
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [EGG_ID]
-------
Text=id
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [id]
-------
Text=cgc_send_easter_egg_haiku()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_send_easter_egg_haiku()]
-------
Text=cgc_find_haiku_with_id(&h,id)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_find_haiku_with_id(&h,id)]
-------
Text=SUCCESS==res
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SUCCESS==res]
-------
Text=cgc_send_haiku
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [cgc_send_haiku]
-------
Text=(h)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [(h)]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_get_count()]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ALLOC(count*sizeof(uint32_t),&id_arr)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ALLOC(count*sizeof(uint32_t),&id_arr)]
-------
Text=cgc_populate_array_with_haiku_ids(id_arr,count)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_populate_array_with_haiku_ids(id_arr,count)]
-------
Text=cgc_get_random_idx(&random_idx)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_get_random_idx(&random_idx)]
-------
Text=ERR_RAND_FAILED
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ERR_RAND_FAILED]
-------
Text=res
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [res]
-------
Text=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])]
-------
Text=DEALLOC(id_arr,count*sizeof(uint32_t))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [DEALLOC(id_arr,count*sizeof(uint32_t))]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SUCCESS]
-------
Text=res
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [res]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_get_count()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SUCCESS]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=(uint32_t)cgc_get_count()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(uint32_t)cgc_get_count()]
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_haiku_list->head]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=hl_ptr
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [hl_ptr]
-------
Text=cgc_get_id_from_haiku(hl_ptr)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_get_id_from_haiku(hl_ptr)]
-------
Text=hl_ptr->next
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [hl_ptr->next]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=num
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [num]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(uint32_t)]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=num
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [num]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(uint16_t)]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=FALSE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [FALSE]
-------
Text=TRUE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [TRUE]
-------
Text=TRUE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [TRUE]
-------
Text=FALSE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [FALSE]
-------
Text=cgc_list_create()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_list_create()]
-------
Text=cgc_haiku_list->count
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_haiku_list->count]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=(structhaiku*)haiku->data
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [structhaiku*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [haiku->data]
-------
Text=h->id
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [h->id]
-------
Text=ERR_EMPTY_NODE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ERR_EMPTY_NODE]
-------
Text=(char*)&random_idx
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(char*)&random_idx]
-------
Text=4
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [4]
-------
Text=count
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=ret
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ret]
-------
Text=ERR_RAND_FAILED
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [ERR_RAND_FAILED]
-------
Text=random_idx%(uint32_t)count
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [random_idx%(uint32_t)count]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SUCCESS]
-------
Text=cgc_haiku_list->tail
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_haiku_list->tail]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=0==count
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0==count]
-------
Text=NULL==haiku_ptr
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL==haiku_ptr]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=0<count
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0<count]
-------
Text=NULL!=haiku_ptr
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL!=haiku_ptr]
-------
Text=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [structhaiku*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [haiku_ptr->data]
-------
Text=count-1
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [count-1]
-------
Text=h->id
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [h->id]
-------
Text=count--
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [count--]
-------
Text=haiku_ptr->prev
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [haiku_ptr->prev]
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_haiku_list->head]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=(structhaiku*)haiku_ptr->data
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [structhaiku*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [haiku_ptr->data]
-------
Text=id
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [id]
-------
Text=tmp->id
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [tmp->id]
-------
Text=tmp
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [tmp]
-------
Text=TRUE
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [TRUE]
-------
Text=haiku_ptr->next
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [haiku_ptr->next]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SUCCESS]
-------
Text=ERR_INVALID_ID
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ERR_INVALID_ID]
-------
Text=(char*)&id
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(char*)&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(uint32_t)]
-------
Text=(char*)&length
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(char*)&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(uint16_t)]
-------
Text=content
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [content]
-------
Text=length
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [length]
-------
Text=content
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [content]
-------
Text=(char*)&id
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(char*)&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(uint32_t)]
-------
Text=(char*)&length
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(char*)&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(uint16_t)]
-------
Text=content
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [content]
-------
Text=length
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [length]
-------
Text=(void*)h
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(void*)h]
-------
Text=cgc_haiku_list
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_haiku_list]
-------
Text=nd
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [nd]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDIN]
-------
Text=temp_line_buf
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [temp_line_buf]
-------
Text=MAX_HAIKU_LINE_LEN
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [MAX_HAIKU_LINE_LEN]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=haiku_content_ptr
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [haiku_content_ptr]
-------
Text=bytes_remaining+1
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [bytes_remaining+1]
-------
Text="~c\x07"
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ["~c\x07"]
-------
Text=temp_line_buf
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [temp_line_buf]
-------
Text=sizeof(structhaiku)+total_bytes+1
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(structhaiku)+total_bytes+1]
-------
Text=&h
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [&h]
-------
Text=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=bytes_written
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [bytes_written]
-------
Text=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=bytes_written
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [bytes_written]
-------
Text=bytes_written
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [bytes_written]
-------
Text=cgc_init_haiku_list()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_init_haiku_list()]
-------
Text=0<total_bytes
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0<total_bytes]
-------
Text=MAX_HAIKU_LEN>total_bytes
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [MAX_HAIKU_LEN>total_bytes]
-------
Text=cgc_recv_haiku(total_bytes)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_recv_haiku(total_bytes)]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=h
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [h]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=cgc_add_haiku_to_list(h)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_add_haiku_to_list(h)]
-------
Text=cgc_send_haiku_id(h->id)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_send_haiku_id(h->id)]
-------
Text=ERR_INVALID_HAIKU_LEN
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ERR_INVALID_HAIKU_LEN]
-------
Text=cgc_recv_uint32()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_recv_uint32()]
-------
Text=EGG_ID
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [EGG_ID]
-------
Text=id
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [id]
-------
Text=cgc_send_easter_egg_haiku()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_send_easter_egg_haiku()]
-------
Text=cgc_find_haiku_with_id(&h,id)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_find_haiku_with_id(&h,id)]
-------
Text=SUCCESS==res
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SUCCESS]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [res]
-------
Text=cgc_send_haiku
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_send_haiku]
-------
Text=(h)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.DeclaratorContext'> [h]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_get_count()]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ALLOC(count*sizeof(uint32_t),&id_arr)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ALLOC(count*sizeof(uint32_t),&id_arr)]
-------
Text=cgc_populate_array_with_haiku_ids(id_arr,count)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_populate_array_with_haiku_ids(id_arr,count)]
-------
Text=cgc_get_random_idx(&random_idx)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_get_random_idx(&random_idx)]
-------
Text=ERR_RAND_FAILED
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ERR_RAND_FAILED]
-------
Text=res
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [res]
-------
Text=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])]
-------
Text=DEALLOC(id_arr,count*sizeof(uint32_t))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [DEALLOC(id_arr,count*sizeof(uint32_t))]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SUCCESS]
-------
Text=res
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [res]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_get_count()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SUCCESS]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=(uint32_t)cgc_get_count()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [uint32_t]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [cgc_get_count()]
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_haiku_list->head]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=hl_ptr
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [hl_ptr]
-------
Text=cgc_get_id_from_haiku(hl_ptr)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_get_id_from_haiku(hl_ptr)]
-------
Text=hl_ptr->next
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [hl_ptr->next]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=num
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(uint32_t)]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=num
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(uint16_t)]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=FALSE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [FALSE]
-------
Text=TRUE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [TRUE]
-------
Text=TRUE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [TRUE]
-------
Text=FALSE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [FALSE]
-------
Text=cgc_list_create()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_list_create()]
-------
Text=cgc_haiku_list->count
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_haiku_list]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [structhaiku*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku->data
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [haiku->data]
-------
Text=h->id
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [h]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id]
-------
Text=ERR_EMPTY_NODE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ERR_EMPTY_NODE]
-------
Text=(char*)&random_idx
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(char*)&random_idx]
-------
Text=4
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [4]
-------
Text=count
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_RAND_FAILED
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [ERR_RAND_FAILED]
-------
Text=random_idx%(uint32_t)count
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [random_idx%(uint32_t)count]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SUCCESS]
-------
Text=cgc_haiku_list->tail
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_haiku_list->tail]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=0==count
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0==count]
-------
Text=NULL==haiku_ptr
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL==haiku_ptr]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=0<count
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0<count]
-------
Text=NULL!=haiku_ptr
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL!=haiku_ptr]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [structhaiku*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_ptr->data
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [haiku_ptr->data]
-------
Text=count-1
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [count]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [-]
2 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [1]
-------
Text=h->id
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [h->id]
-------
Text=count--
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [count]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [--]
-------
Text=haiku_ptr->prev
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [haiku_ptr->prev]
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_haiku_list->head]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [structhaiku*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_ptr->data
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [haiku_ptr->data]
-------
Text=id
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [id]
-------
Text=tmp->id
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [tmp]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id]
-------
Text=tmp
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [tmp]
-------
Text=TRUE
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [TRUE]
-------
Text=haiku_ptr->next
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [haiku_ptr->next]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SUCCESS]
-------
Text=ERR_INVALID_ID
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ERR_INVALID_ID]
-------
Text=(char*)&id
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(char*)&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(uint32_t)]
-------
Text=(char*)&length
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(char*)&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(uint16_t)]
-------
Text=content
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=length
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=content
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [content]
-------
Text=(char*)&id
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(char*)&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(uint32_t)]
-------
Text=(char*)&length
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(char*)&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(uint16_t)]
-------
Text=content
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=length
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)h
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(void*)h]
-------
Text=cgc_haiku_list
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=nd
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDIN]
-------
Text=temp_line_buf
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [temp_line_buf]
-------
Text=MAX_HAIKU_LINE_LEN
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [MAX_HAIKU_LINE_LEN]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=haiku_content_ptr
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku_content_ptr]
-------
Text=bytes_remaining+1
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [bytes_remaining+1]
-------
Text="~c\x07"
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ["~c\x07"]
-------
Text=temp_line_buf
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [temp_line_buf]
-------
Text=sizeof(structhaiku)+total_bytes+1
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(structhaiku)+total_bytes+1]
-------
Text=&h
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [&h]
-------
Text=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=bytes_written
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [bytes_written]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=bytes_written
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [bytes_written]
-------
Text=bytes_written
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [bytes_written]
-------
Text=cgc_init_haiku_list()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_init_haiku_list]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=0<total_bytes
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0<total_bytes]
-------
Text=MAX_HAIKU_LEN>total_bytes
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [MAX_HAIKU_LEN>total_bytes]
-------
Text=cgc_recv_haiku(total_bytes)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_recv_haiku(total_bytes)]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=h
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [h]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=cgc_add_haiku_to_list(h)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_add_haiku_to_list(h)]
-------
Text=cgc_send_haiku_id(h->id)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_send_haiku_id(h->id)]
-------
Text=ERR_INVALID_HAIKU_LEN
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ERR_INVALID_HAIKU_LEN]
-------
Text=cgc_recv_uint32()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_recv_uint32()]
-------
Text=EGG_ID
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [EGG_ID]
-------
Text=id
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [id]
-------
Text=cgc_send_easter_egg_haiku()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_send_easter_egg_haiku()]
-------
Text=cgc_find_haiku_with_id(&h,id)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_find_haiku_with_id(&h,id)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SUCCESS]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=res
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [res]
-------
Text=cgc_send_haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [h]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_get_count()]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ALLOC(count*sizeof(uint32_t),&id_arr)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ALLOC]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [count*sizeof(uint32_t),&id_arr]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_populate_array_with_haiku_ids(id_arr,count)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_populate_array_with_haiku_ids(id_arr,count)]
-------
Text=cgc_get_random_idx(&random_idx)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_get_random_idx(&random_idx)]
-------
Text=ERR_RAND_FAILED
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ERR_RAND_FAILED]
-------
Text=res
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [res]
-------
Text=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])]
-------
Text=DEALLOC(id_arr,count*sizeof(uint32_t))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [DEALLOC]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [id_arr,count*sizeof(uint32_t)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SUCCESS]
-------
Text=res
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [res]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_get_count()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SUCCESS]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [uint32_t]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_get_count()]
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_haiku_list->head]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=hl_ptr
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [hl_ptr]
-------
Text=cgc_get_id_from_haiku(hl_ptr)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_get_id_from_haiku(hl_ptr)]
-------
Text=hl_ptr->next
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [hl_ptr->next]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(uint32_t)]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(uint16_t)]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=FALSE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [FALSE]
-------
Text=TRUE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [TRUE]
-------
Text=TRUE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [TRUE]
-------
Text=FALSE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [FALSE]
-------
Text=cgc_list_create()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_list_create]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_haiku_list
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_haiku_list]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ERR_LIST_NOT_EXIST]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku*]
-------
Text=haiku->data
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [haiku->data]
-------
Text=h
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_EMPTY_NODE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ERR_EMPTY_NODE]
-------
Text=(char*)&random_idx
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(char*)&random_idx]
-------
Text=4
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [4]
-------
Text=count
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ERR_RAND_FAILED
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [ERR_RAND_FAILED]
-------
Text=random_idx%(uint32_t)count
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [random_idx%(uint32_t)count]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SUCCESS]
-------
Text=cgc_haiku_list->tail
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_haiku_list]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [tail]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ERR_LIST_NOT_EXIST]
-------
Text=0==count
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0==count]
-------
Text=NULL==haiku_ptr
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL==haiku_ptr]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ERR_LIST_EMPTY]
-------
Text=0<count
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0<count]
-------
Text=NULL!=haiku_ptr
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL!=haiku_ptr]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku*]
-------
Text=haiku_ptr->data
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [haiku_ptr->data]
-------
Text=count
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [count]
-------
Text=-
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [1]
-------
Text=h->id
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [h]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id]
-------
Text=count
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=--
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_ptr->prev
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [haiku_ptr]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [prev]
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_haiku_list]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [head]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku*]
-------
Text=haiku_ptr->data
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [haiku_ptr->data]
-------
Text=id
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id]
-------
Text=tmp
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [tmp]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=tmp
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [tmp]
-------
Text=TRUE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [TRUE]
-------
Text=haiku_ptr->next
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [haiku_ptr]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [next]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SUCCESS]
-------
Text=ERR_INVALID_ID
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ERR_INVALID_ID]
-------
Text=(char*)&id
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(char*)&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(uint32_t)]
-------
Text=(char*)&length
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(char*)&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(uint16_t)]
-------
Text=content
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&id
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(char*)&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(uint32_t)]
-------
Text=(char*)&length
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(char*)&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(uint16_t)]
-------
Text=(void*)h
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(void*)h]
-------
Text=STDIN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=temp_line_buf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=MAX_HAIKU_LINE_LEN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ERR_INVALID_HAIKU]
-------
Text=haiku_content_ptr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_remaining+1
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [bytes_remaining+1]
-------
Text="~c\x07"
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ["~c\x07"]
-------
Text=temp_line_buf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(structhaiku)+total_bytes+1
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(structhaiku)+total_bytes+1]
-------
Text=&h
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [&h]
-------
Text=cgc_recv_haiku_line(haiku_content_ptr,bytes_remaining)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_recv_haiku_line]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [haiku_content_ptr,bytes_remaining]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=bytes_written
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bytes_written]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=bytes_written
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [bytes_written]
-------
Text=bytes_written
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [bytes_written]
-------
Text=cgc_init_haiku_list
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_init_haiku_list]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0<total_bytes
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0<total_bytes]
-------
Text=MAX_HAIKU_LEN>total_bytes
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [MAX_HAIKU_LEN>total_bytes]
-------
Text=cgc_recv_haiku(total_bytes)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_recv_haiku]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [total_bytes]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=h
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=cgc_add_haiku_to_list(h)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_add_haiku_to_list(h)]
-------
Text=cgc_send_haiku_id(h->id)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_send_haiku_id(h->id)]
-------
Text=ERR_INVALID_HAIKU_LEN
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ERR_INVALID_HAIKU_LEN]
-------
Text=cgc_recv_uint32()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_recv_uint32]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=EGG_ID
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [EGG_ID]
-------
Text=id
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id]
-------
Text=cgc_send_easter_egg_haiku()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_send_easter_egg_haiku()]
-------
Text=cgc_find_haiku_with_id(&h,id)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_find_haiku_with_id(&h,id)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SUCCESS]
-------
Text=res
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [res]
-------
Text=h
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_get_count]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=count
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ALLOC
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ALLOC]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count*sizeof(uint32_t),&id_arr
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [count*sizeof(uint32_t)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [&id_arr]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_populate_array_with_haiku_ids(id_arr,count)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_populate_array_with_haiku_ids]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [id_arr,count]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_get_random_idx(&random_idx)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_get_random_idx]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [&random_idx]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=ERR_RAND_FAILED
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ERR_RAND_FAILED]
-------
Text=res
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [res]
-------
Text=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])]
-------
Text=DEALLOC
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [DEALLOC]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id_arr,count*sizeof(uint32_t)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [id_arr]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [count*sizeof(uint32_t)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SUCCESS]
-------
Text=res
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [res]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_get_count]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SUCCESS]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ERR_LIST_NOT_EXIST]
-------
Text=uint32_t
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint32_t]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_get_count()]
-------
Text=cgc_haiku_list->head
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_haiku_list]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [head]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=hl_ptr
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [hl_ptr]
-------
Text=cgc_get_id_from_haiku(hl_ptr)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_get_id_from_haiku(hl_ptr)]
-------
Text=hl_ptr->next
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [hl_ptr->next]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ERR_LIST_NOT_EXIST]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(uint32_t)]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(uint16_t)]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=FALSE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=TRUE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=TRUE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=FALSE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_create
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_list_create]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=haiku->data
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [haiku]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [data]
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_EMPTY_NODE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&random_idx
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(char*)&random_idx]
-------
Text=4
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [4]
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ERR_RAND_FAILED
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ERR_RAND_FAILED]
-------
Text=random_idx%(uint32_t)count
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.CastExpressionContext'> [random_idx]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [%]
2 : <class 'CParser.CParser.CastExpressionContext'> [(uint32_t)count]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SUCCESS]
-------
Text=cgc_haiku_list
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_haiku_list]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=tail
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==count
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0==count]
-------
Text=NULL==haiku_ptr
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL==haiku_ptr]
-------
Text=ERR_LIST_EMPTY
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0<count
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0<count]
-------
Text=NULL!=haiku_ptr
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL!=haiku_ptr]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=haiku_ptr->data
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [haiku_ptr]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [data]
-------
Text=count
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [count]
-------
Text=1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1]
-------
Text=h
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku_ptr]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=prev
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_haiku_list]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=head
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ERR_LIST_NOT_EXIST]
-------
Text=structhaiku*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=haiku_ptr->data
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [haiku_ptr]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [data]
-------
Text=id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=tmp
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=tmp
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [tmp]
-------
Text=TRUE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [TRUE]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku_ptr]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=next
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_INVALID_ID
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&id
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(char*)&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(uint32_t)]
-------
Text=(char*)&length
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(char*)&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(uint16_t)]
-------
Text=(char*)&id
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(char*)&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(uint32_t)]
-------
Text=(char*)&length
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(char*)&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(uint16_t)]
-------
Text=(void*)h
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(void*)h]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_remaining+1
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [bytes_remaining+1]
-------
Text="~c\x07"
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ["~c\x07"]
-------
Text=sizeof(structhaiku)+total_bytes+1
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(structhaiku)+total_bytes+1]
-------
Text=&h
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [&h]
-------
Text=cgc_recv_haiku_line
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_recv_haiku_line]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_content_ptr,bytes_remaining
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [haiku_content_ptr]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [bytes_remaining]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_written
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=bytes_written
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bytes_written]
-------
Text=bytes_written
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bytes_written]
-------
Text=cgc_init_haiku_list
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0<total_bytes
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0<total_bytes]
-------
Text=MAX_HAIKU_LEN>total_bytes
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [MAX_HAIKU_LEN>total_bytes]
-------
Text=cgc_recv_haiku
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_recv_haiku]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=total_bytes
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [total_bytes]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=cgc_add_haiku_to_list(h)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_add_haiku_to_list(h)]
-------
Text=cgc_send_haiku_id(h->id)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_send_haiku_id(h->id)]
-------
Text=ERR_INVALID_HAIKU_LEN
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ERR_INVALID_HAIKU_LEN]
-------
Text=cgc_recv_uint32
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_recv_uint32]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=EGG_ID
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_send_easter_egg_haiku()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_send_easter_egg_haiku()]
-------
Text=cgc_find_haiku_with_id(&h,id)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_find_haiku_with_id(&h,id)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SUCCESS]
-------
Text=res
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [res]
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ERR_LIST_NOT_EXIST]
-------
Text=cgc_get_count
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_get_count]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=ALLOC
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count*sizeof(uint32_t)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [count*sizeof(uint32_t)]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&id_arr
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [&id_arr]
-------
Text=cgc_populate_array_with_haiku_ids
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_populate_array_with_haiku_ids]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id_arr,count
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [id_arr]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [count]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_random_idx
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_get_random_idx]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&random_idx
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [&random_idx]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_RAND_FAILED
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=res
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])]
-------
Text=DEALLOC
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id_arr
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [id_arr]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count*sizeof(uint32_t)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [count*sizeof(uint32_t)]
-------
Text=SUCCESS
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=res
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ERR_LIST_NOT_EXIST]
-------
Text=cgc_get_count
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_get_count]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint32_t]
-------
Text=cgc_get_count()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_get_count]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_haiku_list
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_haiku_list]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=head
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=hl_ptr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_id_from_haiku(hl_ptr)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_get_id_from_haiku(hl_ptr)]
-------
Text=hl_ptr->next
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [hl_ptr->next]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(uint32_t)]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(uint16_t)]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=cgc_list_create
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StructOrUnionSpecifierContext'> [structhaiku]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=haiku
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=data
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&random_idx
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(char*)&random_idx]
-------
Text=4
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [4]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ERR_LIST_EMPTY]
-------
Text=ERR_RAND_FAILED
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ERR_RAND_FAILED]
-------
Text=random_idx
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [random_idx]
-------
Text=%
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(uint32_t)count
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [uint32_t]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [count]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SUCCESS]
-------
Text=cgc_haiku_list
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==count
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0==count]
-------
Text=NULL==haiku_ptr
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL==haiku_ptr]
-------
Text=0<count
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0<count]
-------
Text=NULL!=haiku_ptr
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL!=haiku_ptr]
-------
Text=structhaiku
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StructOrUnionSpecifierContext'> [structhaiku]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku_ptr]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=data
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [count]
-------
Text=1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1]
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_ptr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ERR_LIST_EMPTY]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ERR_LIST_NOT_EXIST]
-------
Text=structhaiku
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StructOrUnionSpecifierContext'> [structhaiku]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku_ptr]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=data
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=tmp
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [tmp]
-------
Text=TRUE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [TRUE]
-------
Text=haiku_ptr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&id
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(char*)&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(uint32_t)]
-------
Text=(char*)&length
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(char*)&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(uint16_t)]
-------
Text=(char*)&id
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(char*)&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(uint32_t)]
-------
Text=(char*)&length
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(char*)&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(uint16_t)]
-------
Text=(void*)h
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(void*)h]
-------
Text=bytes_remaining+1
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [bytes_remaining+1]
-------
Text="~c\x07"
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ["~c\x07"]
-------
Text=sizeof(structhaiku)+total_bytes+1
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(structhaiku)+total_bytes+1]
-------
Text=&h
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [&h]
-------
Text=cgc_recv_haiku_line
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_content_ptr
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [haiku_content_ptr]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [bytes_remaining]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=bytes_written
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_written
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0<total_bytes
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0<total_bytes]
-------
Text=MAX_HAIKU_LEN>total_bytes
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [MAX_HAIKU_LEN>total_bytes]
-------
Text=cgc_recv_haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=total_bytes
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [total_bytes]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=cgc_add_haiku_to_list(h)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_add_haiku_to_list(h)]
-------
Text=cgc_send_haiku_id(h->id)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_send_haiku_id(h->id)]
-------
Text=ERR_INVALID_HAIKU_LEN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recv_uint32
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_send_easter_egg_haiku()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_send_easter_egg_haiku()]
-------
Text=cgc_find_haiku_with_id(&h,id)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_find_haiku_with_id(&h,id)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SUCCESS]
-------
Text=res
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [res]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=count*sizeof(uint32_t)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [count*sizeof(uint32_t)]
-------
Text=&id_arr
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [&id_arr]
-------
Text=cgc_populate_array_with_haiku_ids
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id_arr
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [id_arr]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [count]
-------
Text=cgc_get_random_idx
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&random_idx
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [&random_idx]
-------
Text=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])]
-------
Text=id_arr
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [id_arr]
-------
Text=count*sizeof(uint32_t)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [count*sizeof(uint32_t)]
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=cgc_get_count
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_get_count]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_haiku_list
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_id_from_haiku(hl_ptr)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_get_id_from_haiku(hl_ptr)]
-------
Text=hl_ptr->next
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [hl_ptr->next]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(uint32_t)]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(uint16_t)]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=structhaiku
Type=<class 'CParser.CParser.StructOrUnionSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.StructOrUnionContext'> [struct]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&random_idx
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(char*)&random_idx]
-------
Text=4
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [4]
-------
Text=ERR_LIST_EMPTY
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_RAND_FAILED
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ERR_RAND_FAILED]
-------
Text=random_idx
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [random_idx]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [uint32_t]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [count]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SUCCESS]
-------
Text=0==count
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [count]
-------
Text=NULL==haiku_ptr
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [haiku_ptr]
-------
Text=0<count
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0<count]
-------
Text=NULL!=haiku_ptr
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [!=]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [haiku_ptr]
-------
Text=structhaiku
Type=<class 'CParser.CParser.StructOrUnionSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.StructOrUnionContext'> [struct]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_ptr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [count]
-------
Text=1
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1]
-------
Text=ERR_LIST_EMPTY
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_NOT_EXIST
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku
Type=<class 'CParser.CParser.StructOrUnionSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.StructOrUnionContext'> [struct]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_ptr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=tmp
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [tmp]
-------
Text=TRUE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [TRUE]
-------
Text=(char*)&id
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(char*)&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(uint32_t)]
-------
Text=(char*)&length
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(char*)&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(uint16_t)]
-------
Text=(char*)&id
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(char*)&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(uint32_t)]
-------
Text=(char*)&length
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(char*)&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(uint16_t)]
-------
Text=(void*)h
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(void*)h]
-------
Text=bytes_remaining+1
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [bytes_remaining+1]
-------
Text="~c\x07"
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ["~c\x07"]
-------
Text=sizeof(structhaiku)+total_bytes+1
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(structhaiku)+total_bytes+1]
-------
Text=&h
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [&h]
-------
Text=haiku_content_ptr
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [haiku_content_ptr]
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [bytes_remaining]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=0<total_bytes
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0<total_bytes]
-------
Text=MAX_HAIKU_LEN>total_bytes
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [MAX_HAIKU_LEN>total_bytes]
-------
Text=total_bytes
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [total_bytes]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=cgc_add_haiku_to_list(h)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_add_haiku_to_list(h)]
-------
Text=cgc_send_haiku_id(h->id)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_send_haiku_id(h->id)]
-------
Text=cgc_send_easter_egg_haiku()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_send_easter_egg_haiku()]
-------
Text=cgc_find_haiku_with_id(&h,id)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_find_haiku_with_id(&h,id)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SUCCESS]
-------
Text=res
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [res]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=count*sizeof(uint32_t)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [count*sizeof(uint32_t)]
-------
Text=&id_arr
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [&id_arr]
-------
Text=id_arr
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [id_arr]
-------
Text=count
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [count]
-------
Text=&random_idx
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [&random_idx]
-------
Text=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])]
-------
Text=id_arr
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [id_arr]
-------
Text=count*sizeof(uint32_t)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [count*sizeof(uint32_t)]
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_id_from_haiku(hl_ptr)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_get_id_from_haiku(hl_ptr)]
-------
Text=hl_ptr->next
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [hl_ptr->next]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(uint32_t)]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(uint16_t)]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=struct
Type=<class 'CParser.CParser.StructOrUnionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [struct]
-------
Text=haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&random_idx
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(char*)&random_idx]
-------
Text=4
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [4]
-------
Text=ERR_RAND_FAILED
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ERR_RAND_FAILED]
-------
Text=random_idx
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [random_idx]
-------
Text=uint32_t
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [uint32_t]
-------
Text=count
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [count]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [count]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [haiku_ptr]
-------
Text=0<count
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [<]
2 : <class 'CParser.CParser.ShiftExpressionContext'> [count]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=!=
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [haiku_ptr]
-------
Text=struct
Type=<class 'CParser.CParser.StructOrUnionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [struct]
-------
Text=haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=1
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1]
-------
Text=struct
Type=<class 'CParser.CParser.StructOrUnionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [struct]
-------
Text=haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=tmp
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [tmp]
-------
Text=TRUE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [TRUE]
-------
Text=(char*)&id
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(char*)&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(uint32_t)]
-------
Text=(char*)&length
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(char*)&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(uint16_t)]
-------
Text=(char*)&id
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(char*)&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(uint32_t)]
-------
Text=(char*)&length
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(char*)&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(uint16_t)]
-------
Text=(void*)h
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(void*)h]
-------
Text=bytes_remaining+1
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [bytes_remaining+1]
-------
Text="~c\x07"
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ["~c\x07"]
-------
Text=sizeof(structhaiku)+total_bytes+1
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(structhaiku)+total_bytes+1]
-------
Text=&h
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [&h]
-------
Text=haiku_content_ptr
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [haiku_content_ptr]
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [bytes_remaining]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=0<total_bytes
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [<]
2 : <class 'CParser.CParser.ShiftExpressionContext'> [total_bytes]
-------
Text=MAX_HAIKU_LEN>total_bytes
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.ShiftExpressionContext'> [MAX_HAIKU_LEN]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [>]
2 : <class 'CParser.CParser.ShiftExpressionContext'> [total_bytes]
-------
Text=total_bytes
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [total_bytes]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=cgc_add_haiku_to_list(h)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_add_haiku_to_list(h)]
-------
Text=cgc_send_haiku_id(h->id)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_send_haiku_id(h->id)]
-------
Text=cgc_send_easter_egg_haiku()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_send_easter_egg_haiku()]
-------
Text=cgc_find_haiku_with_id(&h,id)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_find_haiku_with_id(&h,id)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SUCCESS]
-------
Text=res
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [res]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=count*sizeof(uint32_t)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [count*sizeof(uint32_t)]
-------
Text=&id_arr
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [&id_arr]
-------
Text=id_arr
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [id_arr]
-------
Text=count
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [count]
-------
Text=&random_idx
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [&random_idx]
-------
Text=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])]
-------
Text=id_arr
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id_arr]
-------
Text=count*sizeof(uint32_t)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [count*sizeof(uint32_t)]
-------
Text=cgc_get_id_from_haiku(hl_ptr)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_get_id_from_haiku(hl_ptr)]
-------
Text=hl_ptr->next
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [hl_ptr->next]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(uint32_t)]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(uint16_t)]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=struct
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&random_idx
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(char*)&random_idx]
-------
Text=4
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [4]
-------
Text=ERR_RAND_FAILED
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=random_idx
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [random_idx]
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [uint32_t]
-------
Text=count
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [count]
-------
Text=SUCCESS
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [count]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [haiku_ptr]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=<
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [count]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [haiku_ptr]
-------
Text=struct
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=struct
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=tmp
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [tmp]
-------
Text=TRUE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [TRUE]
-------
Text=(char*)&id
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(char*)&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(uint32_t)]
-------
Text=(char*)&length
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(char*)&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(uint16_t)]
-------
Text=(char*)&id
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(char*)&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(uint32_t)]
-------
Text=(char*)&length
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(char*)&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(uint16_t)]
-------
Text=(void*)h
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(void*)h]
-------
Text=bytes_remaining+1
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [bytes_remaining+1]
-------
Text="~c\x07"
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ["~c\x07"]
-------
Text=sizeof(structhaiku)+total_bytes+1
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(structhaiku)+total_bytes+1]
-------
Text=&h
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [&h]
-------
Text=haiku_content_ptr
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku_content_ptr]
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bytes_remaining]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=<
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=total_bytes
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [total_bytes]
-------
Text=MAX_HAIKU_LEN
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [MAX_HAIKU_LEN]
-------
Text=>
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=total_bytes
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [total_bytes]
-------
Text=total_bytes
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [total_bytes]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=cgc_add_haiku_to_list(h)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_add_haiku_to_list(h)]
-------
Text=cgc_send_haiku_id(h->id)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_send_haiku_id]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [h->id]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_send_easter_egg_haiku()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_send_easter_egg_haiku]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_find_haiku_with_id(&h,id)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_find_haiku_with_id(&h,id)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SUCCESS]
-------
Text=res
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [res]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ERR_LIST_EMPTY]
-------
Text=count*sizeof(uint32_t)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [count*sizeof(uint32_t)]
-------
Text=&id_arr
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [&id_arr]
-------
Text=id_arr
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id_arr]
-------
Text=count
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=&random_idx
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [&random_idx]
-------
Text=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])]
-------
Text=id_arr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count*sizeof(uint32_t)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [count*sizeof(uint32_t)]
-------
Text=cgc_get_id_from_haiku(hl_ptr)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_get_id_from_haiku(hl_ptr)]
-------
Text=hl_ptr->next
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [hl_ptr->next]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(uint32_t)]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(uint16_t)]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=(char*)&random_idx
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(char*)&random_idx]
-------
Text=4
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [4]
-------
Text=random_idx
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=count
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [count]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [haiku_ptr]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [count]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [haiku_ptr]
-------
Text=tmp
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [tmp]
-------
Text=TRUE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [TRUE]
-------
Text=(char*)&id
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(char*)&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(uint32_t)]
-------
Text=(char*)&length
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(char*)&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(uint16_t)]
-------
Text=(char*)&id
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(char*)&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(uint32_t)]
-------
Text=(char*)&length
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(char*)&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(uint16_t)]
-------
Text=(void*)h
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(void*)h]
-------
Text=bytes_remaining+1
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [bytes_remaining+1]
-------
Text="~c\x07"
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ["~c\x07"]
-------
Text=sizeof(structhaiku)+total_bytes+1
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 5
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(structhaiku)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [+]
2 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [total_bytes]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [+]
4 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [1]
-------
Text=&h
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [&h]
-------
Text=haiku_content_ptr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_remaining
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=total_bytes
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [total_bytes]
-------
Text=MAX_HAIKU_LEN
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [MAX_HAIKU_LEN]
-------
Text=total_bytes
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [total_bytes]
-------
Text=total_bytes
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ERR_INVALID_HAIKU]
-------
Text=cgc_add_haiku_to_list(h)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_add_haiku_to_list]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [h]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_send_haiku_id
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_send_haiku_id]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h->id
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [h->id]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_send_easter_egg_haiku
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_send_easter_egg_haiku]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_find_haiku_with_id(&h,id)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_find_haiku_with_id]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [&h,id]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SUCCESS]
-------
Text=res
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [res]
-------
Text=ERR_LIST_EMPTY
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ERR_LIST_EMPTY]
-------
Text=count*sizeof(uint32_t)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [count*sizeof(uint32_t)]
-------
Text=&id_arr
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [&id_arr]
-------
Text=id_arr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&random_idx
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [&random_idx]
-------
Text=cgc_find_haiku_with_id(&rand_haiku,id_arr[random_idx])
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_find_haiku_with_id]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [&rand_haiku,id_arr[random_idx]]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=count*sizeof(uint32_t)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [count*sizeof(uint32_t)]
-------
Text=cgc_get_id_from_haiku(hl_ptr)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_get_id_from_haiku]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [hl_ptr]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=hl_ptr->next
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [hl_ptr]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [next]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(uint32_t)]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(uint16_t)]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=(char*)&random_idx
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(char*)&random_idx]
-------
Text=4
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [4]
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [count]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [haiku_ptr]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [count]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [haiku_ptr]
-------
Text=tmp
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [tmp]
-------
Text=TRUE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [TRUE]
-------
Text=(char*)&id
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(char*)&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(uint32_t)]
-------
Text=(char*)&length
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(char*)&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(uint16_t)]
-------
Text=(char*)&id
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(char*)&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(uint32_t)]
-------
Text=(char*)&length
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(char*)&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(uint16_t)]
-------
Text=(void*)h
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(void*)h]
-------
Text=bytes_remaining+1
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [bytes_remaining]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [+]
2 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [1]
-------
Text="~c\x07"
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ["~c\x07"]
-------
Text=sizeof(structhaiku)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(structhaiku)]
-------
Text=+
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=total_bytes
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [total_bytes]
-------
Text=+
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [1]
-------
Text=&h
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [&h]
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=total_bytes
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [total_bytes]
-------
Text=MAX_HAIKU_LEN
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [MAX_HAIKU_LEN]
-------
Text=total_bytes
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [total_bytes]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ERR_INVALID_HAIKU]
-------
Text=cgc_add_haiku_to_list
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_add_haiku_to_list]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [h]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_send_haiku_id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h->id
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [h->id]
-------
Text=cgc_send_easter_egg_haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_find_haiku_with_id
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_find_haiku_with_id]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&h,id
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [&h]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [id]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=res
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERR_LIST_EMPTY
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count*sizeof(uint32_t)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [count*sizeof(uint32_t)]
-------
Text=&id_arr
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [&id_arr]
-------
Text=&random_idx
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [&random_idx]
-------
Text=cgc_find_haiku_with_id
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_find_haiku_with_id]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&rand_haiku,id_arr[random_idx]
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [&rand_haiku]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [id_arr[random_idx]]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count*sizeof(uint32_t)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [count*sizeof(uint32_t)]
-------
Text=cgc_get_id_from_haiku
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_get_id_from_haiku]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=hl_ptr
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [hl_ptr]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=hl_ptr
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [hl_ptr]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=next
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(uint32_t)]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(uint16_t)]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=(char*)&random_idx
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(char*)&random_idx]
-------
Text=4
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [count]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [haiku_ptr]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [count]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [haiku_ptr]
-------
Text=tmp
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=TRUE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&id
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [char*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(uint32_t)]
-------
Text=(char*)&length
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [char*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(uint16_t)]
-------
Text=(char*)&id
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [char*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(uint32_t)]
-------
Text=(char*)&length
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [char*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(uint16_t)]
-------
Text=(void*)h
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(void*)h]
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [bytes_remaining]
-------
Text=+
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [1]
-------
Text="~c\x07"
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ["~c\x07"]
-------
Text=sizeof(structhaiku)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(structhaiku)]
-------
Text=total_bytes
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [total_bytes]
-------
Text=1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1]
-------
Text=&h
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&h]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=total_bytes
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [total_bytes]
-------
Text=MAX_HAIKU_LEN
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [MAX_HAIKU_LEN]
-------
Text=total_bytes
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [total_bytes]
-------
Text=ERR_INVALID_HAIKU
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_add_haiku_to_list
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [h]
-------
Text=h->id
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [h->id]
-------
Text=cgc_find_haiku_with_id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&h
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [&h]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [id]
-------
Text=count*sizeof(uint32_t)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [count*sizeof(uint32_t)]
-------
Text=&id_arr
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [&id_arr]
-------
Text=&random_idx
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [&random_idx]
-------
Text=cgc_find_haiku_with_id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&rand_haiku
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [&rand_haiku]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id_arr[random_idx]
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [id_arr[random_idx]]
-------
Text=count*sizeof(uint32_t)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [count*sizeof(uint32_t)]
-------
Text=cgc_get_id_from_haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=hl_ptr
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [hl_ptr]
-------
Text=hl_ptr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(uint32_t)]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(uint16_t)]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=(char*)&random_idx
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [char*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [&random_idx]
-------
Text=4
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [count]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [haiku_ptr]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [count]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [haiku_ptr]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [char*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&id
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(uint32_t)]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [char*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&length
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(uint16_t)]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [char*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&id
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&id]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(uint32_t)]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [char*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&length
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&length]
-------
Text=sizeof(uint16_t)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(uint16_t)]
-------
Text=(void*)h
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [void*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [h]
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [bytes_remaining]
-------
Text=1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1]
-------
Text="~c\x07"
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ["~c\x07"]
-------
Text=sizeof(structhaiku)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.TypeNameContext'> [structhaiku]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=total_bytes
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [total_bytes]
-------
Text=1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1]
-------
Text=&h
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [h]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=total_bytes
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [total_bytes]
-------
Text=MAX_HAIKU_LEN
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [MAX_HAIKU_LEN]
-------
Text=total_bytes
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [total_bytes]
-------
Text=h
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [h]
-------
Text=h->id
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [h->id]
-------
Text=&h
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [&h]
-------
Text=id
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [id]
-------
Text=count*sizeof(uint32_t)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [count*sizeof(uint32_t)]
-------
Text=&id_arr
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [&id_arr]
-------
Text=&random_idx
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [&random_idx]
-------
Text=&rand_haiku
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [&rand_haiku]
-------
Text=id_arr[random_idx]
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [id_arr[random_idx]]
-------
Text=count*sizeof(uint32_t)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [count*sizeof(uint32_t)]
-------
Text=hl_ptr
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [hl_ptr]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(uint32_t)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(uint32_t)]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(uint16_t)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(uint16_t)]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [char*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&random_idx
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&random_idx]
-------
Text=4
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [count]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [haiku_ptr]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [count]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [haiku_ptr]
-------
Text=char*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=&id
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [id]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(uint32_t)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(uint32_t)]
-------
Text=char*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=&length
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [length]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(uint16_t)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(uint16_t)]
-------
Text=char*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=&id
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [id]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(uint32_t)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(uint32_t)]
-------
Text=char*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=&length
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [length]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(uint16_t)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(uint16_t)]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [void*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [h]
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [bytes_remaining]
-------
Text=1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1]
-------
Text="~c\x07"
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ["~c\x07"]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [structhaiku]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=total_bytes
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [total_bytes]
-------
Text=1
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=h
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [h]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=total_bytes
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [total_bytes]
-------
Text=MAX_HAIKU_LEN
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [MAX_HAIKU_LEN]
-------
Text=total_bytes
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [total_bytes]
-------
Text=h
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [h]
-------
Text=h->id
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [h->id]
-------
Text=&h
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [&h]
-------
Text=id
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [id]
-------
Text=count*sizeof(uint32_t)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [count*sizeof(uint32_t)]
-------
Text=&id_arr
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [&id_arr]
-------
Text=&random_idx
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [&random_idx]
-------
Text=&rand_haiku
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [&rand_haiku]
-------
Text=id_arr[random_idx]
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [id_arr[random_idx]]
-------
Text=count*sizeof(uint32_t)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [count*sizeof(uint32_t)]
-------
Text=hl_ptr
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [hl_ptr]
-------
Text=(uint32_t)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [uint32_t]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(uint16_t)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [uint16_t]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=&random_idx
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [random_idx]
-------
Text=4
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=count
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku_ptr]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=count
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=haiku_ptr
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku_ptr]
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=id
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [id]
-------
Text=(uint32_t)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [uint32_t]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=length
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [length]
-------
Text=(uint16_t)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [uint16_t]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=id
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [id]
-------
Text=(uint32_t)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [uint32_t]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=length
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [length]
-------
Text=(uint16_t)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [uint16_t]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=void*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void*]
-------
Text=h
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [h]
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [bytes_remaining]
-------
Text=1
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1]
-------
Text="~c\x07"
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ["~c\x07"]
-------
Text=structhaiku
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structhaiku]
-------
Text=total_bytes
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [total_bytes]
-------
Text=1
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [h]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=total_bytes
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [total_bytes]
-------
Text=MAX_HAIKU_LEN
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [MAX_HAIKU_LEN]
-------
Text=total_bytes
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [total_bytes]
-------
Text=h
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=h->id
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [h->id]
-------
Text=&h
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [&h]
-------
Text=id
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id]
-------
Text=count*sizeof(uint32_t)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [count*sizeof(uint32_t)]
-------
Text=&id_arr
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [&id_arr]
-------
Text=&random_idx
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [&random_idx]
-------
Text=&rand_haiku
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [&rand_haiku]
-------
Text=id_arr[random_idx]
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [id_arr[random_idx]]
-------
Text=count*sizeof(uint32_t)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [count*sizeof(uint32_t)]
-------
Text=hl_ptr
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [hl_ptr]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [uint32_t]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint16_t
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [uint16_t]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=random_idx
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [random_idx]
-------
Text=4
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [4]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_ptr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=haiku_ptr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [id]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [uint32_t]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=length
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [length]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint16_t
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [uint16_t]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [id]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [uint32_t]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=length
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [length]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint16_t
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [uint16_t]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=h
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [h]
-------
Text=bytes_remaining
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bytes_remaining]
-------
Text=1
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1]
-------
Text="~c\x07"
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ["~c\x07"]
-------
Text=structhaiku
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StructOrUnionSpecifierContext'> [structhaiku]
-------
Text=total_bytes
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [h]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=total_bytes
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=MAX_HAIKU_LEN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=total_bytes
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h->id
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [h->id]
-------
Text=&h
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [&h]
-------
Text=id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count*sizeof(uint32_t)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [count*sizeof(uint32_t)]
-------
Text=&id_arr
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [&id_arr]
-------
Text=&random_idx
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [&random_idx]
-------
Text=&rand_haiku
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [&rand_haiku]
-------
Text=id_arr[random_idx]
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [id_arr[random_idx]]
-------
Text=count*sizeof(uint32_t)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [count*sizeof(uint32_t)]
-------
Text=hl_ptr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [uint16_t]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=random_idx
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [random_idx]
-------
Text=4
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [id]
-------
Text=uint32_t
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [uint32_t]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=length
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [length]
-------
Text=uint16_t
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [uint16_t]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [id]
-------
Text=uint32_t
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [uint32_t]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=length
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [length]
-------
Text=uint16_t
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [uint16_t]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=h
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=bytes_remaining
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="~c\x07"
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structhaiku
Type=<class 'CParser.CParser.StructOrUnionSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.StructOrUnionContext'> [struct]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [haiku]
-------
Text=h
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=h->id
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [h->id]
-------
Text=&h
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [&h]
-------
Text=count*sizeof(uint32_t)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.CastExpressionContext'> [count]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
2 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(uint32_t)]
-------
Text=&id_arr
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [&id_arr]
-------
Text=&random_idx
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [&random_idx]
-------
Text=&rand_haiku
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [&rand_haiku]
-------
Text=id_arr[random_idx]
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [id_arr[random_idx]]
-------
Text=count*sizeof(uint32_t)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.CastExpressionContext'> [count]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
2 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(uint32_t)]
-------
Text=uint32_t
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [uint16_t]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=random_idx
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [random_idx]
-------
Text=id
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id]
-------
Text=uint32_t
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [uint32_t]
-------
Text=length
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [length]
-------
Text=uint16_t
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [uint16_t]
-------
Text=id
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id]
-------
Text=uint32_t
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [uint32_t]
-------
Text=length
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [length]
-------
Text=uint16_t
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [uint16_t]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=struct
Type=<class 'CParser.CParser.StructOrUnionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [struct]
-------
Text=haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h->id
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [h->id]
-------
Text=&h
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [&h]
-------
Text=count
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [count]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(uint32_t)]
-------
Text=&id_arr
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&id_arr]
-------
Text=&random_idx
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [&random_idx]
-------
Text=&rand_haiku
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [&rand_haiku]
-------
Text=id_arr[random_idx]
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [id_arr[random_idx]]
-------
Text=count
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [count]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(uint32_t)]
-------
Text=uint32_t
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [uint16_t]
-------
Text=random_idx
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [random_idx]
-------
Text=id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [uint32_t]
-------
Text=length
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint16_t
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [uint16_t]
-------
Text=id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [uint32_t]
-------
Text=length
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint16_t
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [uint16_t]
-------
Text=struct
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h->id
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [h->id]
-------
Text=&h
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [&h]
-------
Text=count
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [count]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(uint32_t)]
-------
Text=&id_arr
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [id_arr]
-------
Text=&random_idx
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&random_idx]
-------
Text=&rand_haiku
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [&rand_haiku]
-------
Text=id_arr[random_idx]
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [id_arr[random_idx]]
-------
Text=count
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [count]
-------
Text=sizeof(uint32_t)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(uint32_t)]
-------
Text=uint32_t
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [uint16_t]
-------
Text=random_idx
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [uint16_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [uint16_t]
-------
Text=h->id
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [h->id]
-------
Text=&h
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [&h]
-------
Text=count
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [count]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(uint32_t)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(uint32_t)]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=id_arr
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [id_arr]
-------
Text=&random_idx
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [random_idx]
-------
Text=&rand_haiku
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [&rand_haiku]
-------
Text=id_arr[random_idx]
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [id_arr[random_idx]]
-------
Text=count
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [count]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(uint32_t)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(uint32_t)]
-------
Text=uint32_t
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [uint16_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [uint16_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [uint16_t]
-------
Text=h->id
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [h->id]
-------
Text=&h
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [&h]
-------
Text=count
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=(uint32_t)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [uint32_t]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id_arr
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [id_arr]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=random_idx
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [random_idx]
-------
Text=&rand_haiku
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [&rand_haiku]
-------
Text=id_arr[random_idx]
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [id_arr[random_idx]]
-------
Text=count
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=(uint32_t)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [uint32_t]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=uint32_t
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [uint16_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [uint16_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [uint16_t]
-------
Text=h->id
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [h->id]
-------
Text=&h
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [&h]
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [uint32_t]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id_arr
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [id_arr]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=random_idx
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [random_idx]
-------
Text=&rand_haiku
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [&rand_haiku]
-------
Text=id_arr[random_idx]
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [id_arr[random_idx]]
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [uint32_t]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [uint16_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [uint16_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [uint16_t]
-------
Text=h->id
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [h->id]
-------
Text=&h
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [&h]
-------
Text=uint32_t
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [uint32_t]
-------
Text=id_arr
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id_arr]
-------
Text=random_idx
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [random_idx]
-------
Text=&rand_haiku
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [&rand_haiku]
-------
Text=id_arr[random_idx]
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [id_arr[random_idx]]
-------
Text=uint32_t
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [uint32_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [uint16_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [uint16_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [uint16_t]
-------
Text=h->id
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [h->id]
-------
Text=&h
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [&h]
-------
Text=uint32_t
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [uint32_t]
-------
Text=id_arr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=random_idx
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [random_idx]
-------
Text=&rand_haiku
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [&rand_haiku]
-------
Text=id_arr[random_idx]
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [id_arr[random_idx]]
-------
Text=uint32_t
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [uint32_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [uint16_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [uint16_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [uint16_t]
-------
Text=h->id
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [h->id]
-------
Text=&h
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&h]
-------
Text=uint32_t
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [uint32_t]
-------
Text=random_idx
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&rand_haiku
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&rand_haiku]
-------
Text=id_arr[random_idx]
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [id_arr[random_idx]]
-------
Text=uint32_t
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [uint32_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [uint16_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [uint16_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [uint16_t]
-------
Text=h->id
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [h]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id]
-------
Text=&h
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [h]
-------
Text=uint32_t
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [uint32_t]
-------
Text=&rand_haiku
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [rand_haiku]
-------
Text=id_arr[random_idx]
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [id_arr[random_idx]]
-------
Text=uint32_t
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [uint32_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [uint16_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [uint16_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [uint16_t]
-------
Text=h
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=id
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=h
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [h]
-------
Text=uint32_t
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [uint32_t]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=rand_haiku
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [rand_haiku]
-------
Text=id_arr[random_idx]
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [id_arr]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.ExpressionContext'> [random_idx]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text=uint32_t
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [uint32_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [uint16_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [uint16_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [uint16_t]
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=h
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [h]
-------
Text=uint32_t
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [uint32_t]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=rand_haiku
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [rand_haiku]
-------
Text=id_arr
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [id_arr]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=random_idx
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [random_idx]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [uint32_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [uint16_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [uint16_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [uint16_t]
-------
Text=h
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [h]
-------
Text=uint32_t
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [uint32_t]
-------
Text=rand_haiku
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [rand_haiku]
-------
Text=id_arr
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=random_idx
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [random_idx]
-------
Text=uint32_t
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [uint32_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [uint16_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [uint16_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [uint16_t]
-------
Text=h
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [h]
-------
Text=uint32_t
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [uint32_t]
-------
Text=rand_haiku
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [rand_haiku]
-------
Text=random_idx
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [random_idx]
-------
Text=uint32_t
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [uint32_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [uint16_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [uint16_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [uint16_t]
-------
Text=h
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [uint32_t]
-------
Text=rand_haiku
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=random_idx
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [random_idx]
-------
Text=uint32_t
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [uint32_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint16_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint16_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=uint16_t
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint16_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [uint32_t]
-------
Text=random_idx
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [random_idx]
-------
Text=uint32_t
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [uint32_t]
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint16_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint16_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint16_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=uint32_t
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [uint32_t]
-------
Text=random_idx
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [random_idx]
-------
Text=uint32_t
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [uint32_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [uint32_t]
-------
Text=random_idx
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [random_idx]
-------
Text=uint32_t
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [uint32_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [uint32_t]
-------
Text=random_idx
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [random_idx]
-------
Text=uint32_t
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [uint32_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [uint32_t]
-------
Text=random_idx
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [random_idx]
-------
Text=uint32_t
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [uint32_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [uint32_t]
-------
Text=random_idx
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [random_idx]
-------
Text=uint32_t
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [uint32_t]
-------
Text=uint32_t
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=random_idx
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [random_idx]
-------
Text=uint32_t
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [uint32_t]
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=random_idx
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [random_idx]
-------
Text=uint32_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=random_idx
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [random_idx]
-------
Text=random_idx
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [random_idx]
-------
Text=random_idx
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [random_idx]
-------
Text=random_idx
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [random_idx]
-------
Text=random_idx
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [random_idx]
-------
Text=random_idx
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
