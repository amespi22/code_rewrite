Text=kty_parser_t*parser;kty_item_t*my_kty;intcgc_read_until(intfd,char*buf,cgc_size_tlen,chardelim){cgc_size_ti;char*c=buf;for(i=0;i<len;++i){cgc_size_trx;if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;if(*(c++)==delim)break;}*(c-1)='\0';returnc-buf;}voidcgc_import_kty(char*buf){if(my_kty!=NULL){cgc_free_kty_item(my_kty);my_kty=NULL;}parser->cats=0;my_kty=parser->loads(buf);if(my_kty==NULL)cgc_fdprintf(STDOUT,"Error!\n");}voidcgc_print_kty(){if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}parser->cats=0;parser->dumps(my_kty);}voidcgc_nyan(){inti;char*c;charbuf[1024]={0};charnyan_cat[]="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n";if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}parser->dumps(my_kty);if(parser->cats<3)return;cgc_fdprintf(STDOUT,"%s",nyan_cat);c=buf;for(i=0;i<cgc_array_length(parser->nyan_says);++i){kty_item_t*item=cgc_array_get(parser->nyan_says,i);cgc_strcpy(c,item->item.i_string.s);c+=item->item.i_string.len;}cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf);}voidcgc_quit(){cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n");cgc_exit(0);}voidcgc_menu(){cgc_fdprintf(STDOUT,"=======================\n");cgc_fdprintf(STDOUT," 1. Import KTY\n");cgc_fdprintf(STDOUT," 2. Print KTY\n");cgc_fdprintf(STDOUT," 3. Quit\n");cgc_fdprintf(STDOUT,"=======================\n");}intmain(intcgc_argc,char*cgc_argv[]){charbuf[MAX_KTY_LENGTH];charcgc_select[16];cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n");parser=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t));if(cgc_kty_init(parser)!=0){cgc_fdprintf(STDOUT,"Error!\n");cgc_quit();}cgc_menu();while(cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0){intmenu=cgc_strtol(cgc_select,NULL,10);switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}}return0;}
Type=<class 'CParser.CParser.TranslationUnitContext'>
Child Count = 9
0 : <class 'CParser.CParser.ExternalDeclarationContext'> [kty_parser_t*parser;]
1 : <class 'CParser.CParser.ExternalDeclarationContext'> [kty_item_t*my_kty;]
2 : <class 'CParser.CParser.ExternalDeclarationContext'> [intcgc_read_until(intfd,char*buf,cgc_size_tlen,chardelim){cgc_size_ti;char*c=buf;for(i=0;i<len;++i){cgc_size_trx;if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;if(*(c++)==delim)break;}*(c-1)='\0';returnc-buf;}]
3 : <class 'CParser.CParser.ExternalDeclarationContext'> [voidcgc_import_kty(char*buf){if(my_kty!=NULL){cgc_free_kty_item(my_kty);my_kty=NULL;}parser->cats=0;my_kty=parser->loads(buf);if(my_kty==NULL)cgc_fdprintf(STDOUT,"Error!\n");}]
4 : <class 'CParser.CParser.ExternalDeclarationContext'> [voidcgc_print_kty(){if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}parser->cats=0;parser->dumps(my_kty);}]
5 : <class 'CParser.CParser.ExternalDeclarationContext'> [voidcgc_nyan(){inti;char*c;charbuf[1024]={0};charnyan_cat[]="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n";if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}parser->dumps(my_kty);if(parser->cats<3)return;cgc_fdprintf(STDOUT,"%s",nyan_cat);c=buf;for(i=0;i<cgc_array_length(parser->nyan_says);++i){kty_item_t*item=cgc_array_get(parser->nyan_says,i);cgc_strcpy(c,item->item.i_string.s);c+=item->item.i_string.len;}cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf);}]
6 : <class 'CParser.CParser.ExternalDeclarationContext'> [voidcgc_quit(){cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n");cgc_exit(0);}]
7 : <class 'CParser.CParser.ExternalDeclarationContext'> [voidcgc_menu(){cgc_fdprintf(STDOUT,"=======================\n");cgc_fdprintf(STDOUT," 1. Import KTY\n");cgc_fdprintf(STDOUT," 2. Print KTY\n");cgc_fdprintf(STDOUT," 3. Quit\n");cgc_fdprintf(STDOUT,"=======================\n");}]
8 : <class 'CParser.CParser.ExternalDeclarationContext'> [intmain(intcgc_argc,char*cgc_argv[]){charbuf[MAX_KTY_LENGTH];charcgc_select[16];cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n");parser=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t));if(cgc_kty_init(parser)!=0){cgc_fdprintf(STDOUT,"Error!\n");cgc_quit();}cgc_menu();while(cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0){intmenu=cgc_strtol(cgc_select,NULL,10);switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}}return0;}]
-------
Text=<EOF>
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=kty_parser_t*parser;
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [kty_parser_t*parser;]
-------
Text=kty_item_t*my_kty;
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [kty_item_t*my_kty;]
-------
Text=intcgc_read_until(intfd,char*buf,cgc_size_tlen,chardelim){cgc_size_ti;char*c=buf;for(i=0;i<len;++i){cgc_size_trx;if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;if(*(c++)==delim)break;}*(c-1)='\0';returnc-buf;}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [intcgc_read_until(intfd,char*buf,cgc_size_tlen,chardelim){cgc_size_ti;char*c=buf;for(i=0;i<len;++i){cgc_size_trx;if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;if(*(c++)==delim)break;}*(c-1)='\0';returnc-buf;}]
-------
Text=voidcgc_import_kty(char*buf){if(my_kty!=NULL){cgc_free_kty_item(my_kty);my_kty=NULL;}parser->cats=0;my_kty=parser->loads(buf);if(my_kty==NULL)cgc_fdprintf(STDOUT,"Error!\n");}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [voidcgc_import_kty(char*buf){if(my_kty!=NULL){cgc_free_kty_item(my_kty);my_kty=NULL;}parser->cats=0;my_kty=parser->loads(buf);if(my_kty==NULL)cgc_fdprintf(STDOUT,"Error!\n");}]
-------
Text=voidcgc_print_kty(){if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}parser->cats=0;parser->dumps(my_kty);}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [voidcgc_print_kty(){if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}parser->cats=0;parser->dumps(my_kty);}]
-------
Text=voidcgc_nyan(){inti;char*c;charbuf[1024]={0};charnyan_cat[]="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n";if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}parser->dumps(my_kty);if(parser->cats<3)return;cgc_fdprintf(STDOUT,"%s",nyan_cat);c=buf;for(i=0;i<cgc_array_length(parser->nyan_says);++i){kty_item_t*item=cgc_array_get(parser->nyan_says,i);cgc_strcpy(c,item->item.i_string.s);c+=item->item.i_string.len;}cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf);}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [voidcgc_nyan(){inti;char*c;charbuf[1024]={0};charnyan_cat[]="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n";if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}parser->dumps(my_kty);if(parser->cats<3)return;cgc_fdprintf(STDOUT,"%s",nyan_cat);c=buf;for(i=0;i<cgc_array_length(parser->nyan_says);++i){kty_item_t*item=cgc_array_get(parser->nyan_says,i);cgc_strcpy(c,item->item.i_string.s);c+=item->item.i_string.len;}cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf);}]
-------
Text=voidcgc_quit(){cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n");cgc_exit(0);}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [voidcgc_quit(){cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n");cgc_exit(0);}]
-------
Text=voidcgc_menu(){cgc_fdprintf(STDOUT,"=======================\n");cgc_fdprintf(STDOUT," 1. Import KTY\n");cgc_fdprintf(STDOUT," 2. Print KTY\n");cgc_fdprintf(STDOUT," 3. Quit\n");cgc_fdprintf(STDOUT,"=======================\n");}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [voidcgc_menu(){cgc_fdprintf(STDOUT,"=======================\n");cgc_fdprintf(STDOUT," 1. Import KTY\n");cgc_fdprintf(STDOUT," 2. Print KTY\n");cgc_fdprintf(STDOUT," 3. Quit\n");cgc_fdprintf(STDOUT,"=======================\n");}]
-------
Text=intmain(intcgc_argc,char*cgc_argv[]){charbuf[MAX_KTY_LENGTH];charcgc_select[16];cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n");parser=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t));if(cgc_kty_init(parser)!=0){cgc_fdprintf(STDOUT,"Error!\n");cgc_quit();}cgc_menu();while(cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0){intmenu=cgc_strtol(cgc_select,NULL,10);switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}}return0;}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [intmain(intcgc_argc,char*cgc_argv[]){charbuf[MAX_KTY_LENGTH];charcgc_select[16];cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n");parser=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t));if(cgc_kty_init(parser)!=0){cgc_fdprintf(STDOUT,"Error!\n");cgc_quit();}cgc_menu();while(cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0){intmenu=cgc_strtol(cgc_select,NULL,10);switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}}return0;}]
-------
Text=kty_parser_t*parser;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [kty_parser_t*parser]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=kty_item_t*my_kty;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [kty_item_t*my_kty]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=intcgc_read_until(intfd,char*buf,cgc_size_tlen,chardelim){cgc_size_ti;char*c=buf;for(i=0;i<len;++i){cgc_size_trx;if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;if(*(c++)==delim)break;}*(c-1)='\0';returnc-buf;}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [int]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_read_until(intfd,char*buf,cgc_size_tlen,chardelim)]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{cgc_size_ti;char*c=buf;for(i=0;i<len;++i){cgc_size_trx;if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;if(*(c++)==delim)break;}*(c-1)='\0';returnc-buf;}]
-------
Text=voidcgc_import_kty(char*buf){if(my_kty!=NULL){cgc_free_kty_item(my_kty);my_kty=NULL;}parser->cats=0;my_kty=parser->loads(buf);if(my_kty==NULL)cgc_fdprintf(STDOUT,"Error!\n");}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [void]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_import_kty(char*buf)]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{if(my_kty!=NULL){cgc_free_kty_item(my_kty);my_kty=NULL;}parser->cats=0;my_kty=parser->loads(buf);if(my_kty==NULL)cgc_fdprintf(STDOUT,"Error!\n");}]
-------
Text=voidcgc_print_kty(){if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}parser->cats=0;parser->dumps(my_kty);}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [void]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_print_kty()]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}parser->cats=0;parser->dumps(my_kty);}]
-------
Text=voidcgc_nyan(){inti;char*c;charbuf[1024]={0};charnyan_cat[]="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n";if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}parser->dumps(my_kty);if(parser->cats<3)return;cgc_fdprintf(STDOUT,"%s",nyan_cat);c=buf;for(i=0;i<cgc_array_length(parser->nyan_says);++i){kty_item_t*item=cgc_array_get(parser->nyan_says,i);cgc_strcpy(c,item->item.i_string.s);c+=item->item.i_string.len;}cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf);}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [void]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_nyan()]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{inti;char*c;charbuf[1024]={0};charnyan_cat[]="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n";if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}parser->dumps(my_kty);if(parser->cats<3)return;cgc_fdprintf(STDOUT,"%s",nyan_cat);c=buf;for(i=0;i<cgc_array_length(parser->nyan_says);++i){kty_item_t*item=cgc_array_get(parser->nyan_says,i);cgc_strcpy(c,item->item.i_string.s);c+=item->item.i_string.len;}cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf);}]
-------
Text=voidcgc_quit(){cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n");cgc_exit(0);}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [void]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_quit()]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n");cgc_exit(0);}]
-------
Text=voidcgc_menu(){cgc_fdprintf(STDOUT,"=======================\n");cgc_fdprintf(STDOUT," 1. Import KTY\n");cgc_fdprintf(STDOUT," 2. Print KTY\n");cgc_fdprintf(STDOUT," 3. Quit\n");cgc_fdprintf(STDOUT,"=======================\n");}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [void]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_menu()]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{cgc_fdprintf(STDOUT,"=======================\n");cgc_fdprintf(STDOUT," 1. Import KTY\n");cgc_fdprintf(STDOUT," 2. Print KTY\n");cgc_fdprintf(STDOUT," 3. Quit\n");cgc_fdprintf(STDOUT,"=======================\n");}]
-------
Text=intmain(intcgc_argc,char*cgc_argv[]){charbuf[MAX_KTY_LENGTH];charcgc_select[16];cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n");parser=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t));if(cgc_kty_init(parser)!=0){cgc_fdprintf(STDOUT,"Error!\n");cgc_quit();}cgc_menu();while(cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0){intmenu=cgc_strtol(cgc_select,NULL,10);switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}}return0;}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [int]
1 : <class 'CParser.CParser.DeclaratorContext'> [main(intcgc_argc,char*cgc_argv[])]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{charbuf[MAX_KTY_LENGTH];charcgc_select[16];cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n");parser=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t));if(cgc_kty_init(parser)!=0){cgc_fdprintf(STDOUT,"Error!\n");cgc_quit();}cgc_menu();while(cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0){intmenu=cgc_strtol(cgc_select,NULL,10);switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}}return0;}]
-------
Text=kty_parser_t*parser
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [kty_parser_t*]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [parser]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=kty_item_t*my_kty
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [kty_item_t*]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [my_kty]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=cgc_read_until(intfd,char*buf,cgc_size_tlen,chardelim)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_read_until(intfd,char*buf,cgc_size_tlen,chardelim)]
-------
Text={cgc_size_ti;char*c=buf;for(i=0;i<len;++i){cgc_size_trx;if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;if(*(c++)==delim)break;}*(c-1)='\0';returnc-buf;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [cgc_size_ti;char*c=buf;for(i=0;i<len;++i){cgc_size_trx;if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;if(*(c++)==delim)break;}*(c-1)='\0';returnc-buf;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=void
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [void]
-------
Text=cgc_import_kty(char*buf)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_import_kty(char*buf)]
-------
Text={if(my_kty!=NULL){cgc_free_kty_item(my_kty);my_kty=NULL;}parser->cats=0;my_kty=parser->loads(buf);if(my_kty==NULL)cgc_fdprintf(STDOUT,"Error!\n");}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [if(my_kty!=NULL){cgc_free_kty_item(my_kty);my_kty=NULL;}parser->cats=0;my_kty=parser->loads(buf);if(my_kty==NULL)cgc_fdprintf(STDOUT,"Error!\n");]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=void
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [void]
-------
Text=cgc_print_kty()
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_print_kty()]
-------
Text={if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}parser->cats=0;parser->dumps(my_kty);}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}parser->cats=0;parser->dumps(my_kty);]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=void
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [void]
-------
Text=cgc_nyan()
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_nyan()]
-------
Text={inti;char*c;charbuf[1024]={0};charnyan_cat[]="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n";if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}parser->dumps(my_kty);if(parser->cats<3)return;cgc_fdprintf(STDOUT,"%s",nyan_cat);c=buf;for(i=0;i<cgc_array_length(parser->nyan_says);++i){kty_item_t*item=cgc_array_get(parser->nyan_says,i);cgc_strcpy(c,item->item.i_string.s);c+=item->item.i_string.len;}cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf);}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [inti;char*c;charbuf[1024]={0};charnyan_cat[]="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n";if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}parser->dumps(my_kty);if(parser->cats<3)return;cgc_fdprintf(STDOUT,"%s",nyan_cat);c=buf;for(i=0;i<cgc_array_length(parser->nyan_says);++i){kty_item_t*item=cgc_array_get(parser->nyan_says,i);cgc_strcpy(c,item->item.i_string.s);c+=item->item.i_string.len;}cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf);]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=void
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [void]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_quit()]
-------
Text={cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n");cgc_exit(0);}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n");cgc_exit(0);]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=void
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [void]
-------
Text=cgc_menu()
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_menu()]
-------
Text={cgc_fdprintf(STDOUT,"=======================\n");cgc_fdprintf(STDOUT," 1. Import KTY\n");cgc_fdprintf(STDOUT," 2. Print KTY\n");cgc_fdprintf(STDOUT," 3. Quit\n");cgc_fdprintf(STDOUT,"=======================\n");}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [cgc_fdprintf(STDOUT,"=======================\n");cgc_fdprintf(STDOUT," 1. Import KTY\n");cgc_fdprintf(STDOUT," 2. Print KTY\n");cgc_fdprintf(STDOUT," 3. Quit\n");cgc_fdprintf(STDOUT,"=======================\n");]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=int
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=main(intcgc_argc,char*cgc_argv[])
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [main(intcgc_argc,char*cgc_argv[])]
-------
Text={charbuf[MAX_KTY_LENGTH];charcgc_select[16];cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n");parser=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t));if(cgc_kty_init(parser)!=0){cgc_fdprintf(STDOUT,"Error!\n");cgc_quit();}cgc_menu();while(cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0){intmenu=cgc_strtol(cgc_select,NULL,10);switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}}return0;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [charbuf[MAX_KTY_LENGTH];charcgc_select[16];cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n");parser=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t));if(cgc_kty_init(parser)!=0){cgc_fdprintf(STDOUT,"Error!\n");cgc_quit();}cgc_menu();while(cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0){intmenu=cgc_strtol(cgc_select,NULL,10);switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}}return0;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=kty_parser_t*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [kty_parser_t*]
-------
Text=parser
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [parser]
-------
Text=kty_item_t*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [kty_item_t*]
-------
Text=my_kty
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [my_kty]
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=cgc_read_until(intfd,char*buf,cgc_size_tlen,chardelim)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_read_until]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ParameterTypeListContext'> [intfd,char*buf,cgc_size_tlen,chardelim]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_size_ti;char*c=buf;for(i=0;i<len;++i){cgc_size_trx;if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;if(*(c++)==delim)break;}*(c-1)='\0';returnc-buf;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 5
0 : <class 'CParser.CParser.BlockItemContext'> [cgc_size_ti;]
1 : <class 'CParser.CParser.BlockItemContext'> [char*c=buf;]
2 : <class 'CParser.CParser.BlockItemContext'> [for(i=0;i<len;++i){cgc_size_trx;if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;if(*(c++)==delim)break;}]
3 : <class 'CParser.CParser.BlockItemContext'> [*(c-1)='\0';]
4 : <class 'CParser.CParser.BlockItemContext'> [returnc-buf;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
-------
Text=cgc_import_kty(char*buf)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_import_kty]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ParameterTypeListContext'> [char*buf]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(my_kty!=NULL){cgc_free_kty_item(my_kty);my_kty=NULL;}parser->cats=0;my_kty=parser->loads(buf);if(my_kty==NULL)cgc_fdprintf(STDOUT,"Error!\n");
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 4
0 : <class 'CParser.CParser.BlockItemContext'> [if(my_kty!=NULL){cgc_free_kty_item(my_kty);my_kty=NULL;}]
1 : <class 'CParser.CParser.BlockItemContext'> [parser->cats=0;]
2 : <class 'CParser.CParser.BlockItemContext'> [my_kty=parser->loads(buf);]
3 : <class 'CParser.CParser.BlockItemContext'> [if(my_kty==NULL)cgc_fdprintf(STDOUT,"Error!\n");]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
-------
Text=cgc_print_kty()
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_print_kty]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}parser->cats=0;parser->dumps(my_kty);
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 3
0 : <class 'CParser.CParser.BlockItemContext'> [if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}]
1 : <class 'CParser.CParser.BlockItemContext'> [parser->cats=0;]
2 : <class 'CParser.CParser.BlockItemContext'> [parser->dumps(my_kty);]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
-------
Text=cgc_nyan()
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_nyan]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=inti;char*c;charbuf[1024]={0};charnyan_cat[]="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n";if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}parser->dumps(my_kty);if(parser->cats<3)return;cgc_fdprintf(STDOUT,"%s",nyan_cat);c=buf;for(i=0;i<cgc_array_length(parser->nyan_says);++i){kty_item_t*item=cgc_array_get(parser->nyan_says,i);cgc_strcpy(c,item->item.i_string.s);c+=item->item.i_string.len;}cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf);
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 11
0 : <class 'CParser.CParser.BlockItemContext'> [inti;]
1 : <class 'CParser.CParser.BlockItemContext'> [char*c;]
2 : <class 'CParser.CParser.BlockItemContext'> [charbuf[1024]={0};]
3 : <class 'CParser.CParser.BlockItemContext'> [charnyan_cat[]="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n";]
4 : <class 'CParser.CParser.BlockItemContext'> [if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}]
5 : <class 'CParser.CParser.BlockItemContext'> [parser->dumps(my_kty);]
6 : <class 'CParser.CParser.BlockItemContext'> [if(parser->cats<3)return;]
7 : <class 'CParser.CParser.BlockItemContext'> [cgc_fdprintf(STDOUT,"%s",nyan_cat);]
8 : <class 'CParser.CParser.BlockItemContext'> [c=buf;]
9 : <class 'CParser.CParser.BlockItemContext'> [for(i=0;i<cgc_array_length(parser->nyan_says);++i){kty_item_t*item=cgc_array_get(parser->nyan_says,i);cgc_strcpy(c,item->item.i_string.s);c+=item->item.i_string.len;}]
10 : <class 'CParser.CParser.BlockItemContext'> [cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf);]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_quit]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n");cgc_exit(0);
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 2
0 : <class 'CParser.CParser.BlockItemContext'> [cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n");]
1 : <class 'CParser.CParser.BlockItemContext'> [cgc_exit(0);]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
-------
Text=cgc_menu()
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_menu]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"=======================\n");cgc_fdprintf(STDOUT," 1. Import KTY\n");cgc_fdprintf(STDOUT," 2. Print KTY\n");cgc_fdprintf(STDOUT," 3. Quit\n");cgc_fdprintf(STDOUT,"=======================\n");
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 5
0 : <class 'CParser.CParser.BlockItemContext'> [cgc_fdprintf(STDOUT,"=======================\n");]
1 : <class 'CParser.CParser.BlockItemContext'> [cgc_fdprintf(STDOUT," 1. Import KTY\n");]
2 : <class 'CParser.CParser.BlockItemContext'> [cgc_fdprintf(STDOUT," 2. Print KTY\n");]
3 : <class 'CParser.CParser.BlockItemContext'> [cgc_fdprintf(STDOUT," 3. Quit\n");]
4 : <class 'CParser.CParser.BlockItemContext'> [cgc_fdprintf(STDOUT,"=======================\n");]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=main(intcgc_argc,char*cgc_argv[])
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [main]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ParameterTypeListContext'> [intcgc_argc,char*cgc_argv[]]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=charbuf[MAX_KTY_LENGTH];charcgc_select[16];cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n");parser=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t));if(cgc_kty_init(parser)!=0){cgc_fdprintf(STDOUT,"Error!\n");cgc_quit();}cgc_menu();while(cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0){intmenu=cgc_strtol(cgc_select,NULL,10);switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}}return0;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 8
0 : <class 'CParser.CParser.BlockItemContext'> [charbuf[MAX_KTY_LENGTH];]
1 : <class 'CParser.CParser.BlockItemContext'> [charcgc_select[16];]
2 : <class 'CParser.CParser.BlockItemContext'> [cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n");]
3 : <class 'CParser.CParser.BlockItemContext'> [parser=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t));]
4 : <class 'CParser.CParser.BlockItemContext'> [if(cgc_kty_init(parser)!=0){cgc_fdprintf(STDOUT,"Error!\n");cgc_quit();}]
5 : <class 'CParser.CParser.BlockItemContext'> [cgc_menu();]
6 : <class 'CParser.CParser.BlockItemContext'> [while(cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0){intmenu=cgc_strtol(cgc_select,NULL,10);switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}}]
7 : <class 'CParser.CParser.BlockItemContext'> [return0;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=kty_parser_t*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [kty_parser_t]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=parser
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [parser]
-------
Text=kty_item_t*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [kty_item_t]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=my_kty
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [my_kty]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=cgc_read_until
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_read_until]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=intfd,char*buf,cgc_size_tlen,chardelim
Type=<class 'CParser.CParser.ParameterTypeListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterListContext'> [intfd,char*buf,cgc_size_tlen,chardelim]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_size_ti;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [cgc_size_ti;]
-------
Text=char*c=buf;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [char*c=buf;]
-------
Text=for(i=0;i<len;++i){cgc_size_trx;if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;if(*(c++)==delim)break;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [for(i=0;i<len;++i){cgc_size_trx;if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;if(*(c++)==delim)break;}]
-------
Text=*(c-1)='\0';
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [*(c-1)='\0';]
-------
Text=returnc-buf;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnc-buf;]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=cgc_import_kty
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_import_kty]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*buf
Type=<class 'CParser.CParser.ParameterTypeListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterListContext'> [char*buf]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(my_kty!=NULL){cgc_free_kty_item(my_kty);my_kty=NULL;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(my_kty!=NULL){cgc_free_kty_item(my_kty);my_kty=NULL;}]
-------
Text=parser->cats=0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [parser->cats=0;]
-------
Text=my_kty=parser->loads(buf);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [my_kty=parser->loads(buf);]
-------
Text=if(my_kty==NULL)cgc_fdprintf(STDOUT,"Error!\n");
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(my_kty==NULL)cgc_fdprintf(STDOUT,"Error!\n");]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=cgc_print_kty
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_print_kty]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}]
-------
Text=parser->cats=0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [parser->cats=0;]
-------
Text=parser->dumps(my_kty);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [parser->dumps(my_kty);]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=cgc_nyan
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_nyan]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=inti;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [inti;]
-------
Text=char*c;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [char*c;]
-------
Text=charbuf[1024]={0};
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [charbuf[1024]={0};]
-------
Text=charnyan_cat[]="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n";
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [charnyan_cat[]="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n";]
-------
Text=if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}]
-------
Text=parser->dumps(my_kty);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [parser->dumps(my_kty);]
-------
Text=if(parser->cats<3)return;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(parser->cats<3)return;]
-------
Text=cgc_fdprintf(STDOUT,"%s",nyan_cat);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_fdprintf(STDOUT,"%s",nyan_cat);]
-------
Text=c=buf;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [c=buf;]
-------
Text=for(i=0;i<cgc_array_length(parser->nyan_says);++i){kty_item_t*item=cgc_array_get(parser->nyan_says,i);cgc_strcpy(c,item->item.i_string.s);c+=item->item.i_string.len;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [for(i=0;i<cgc_array_length(parser->nyan_says);++i){kty_item_t*item=cgc_array_get(parser->nyan_says,i);cgc_strcpy(c,item->item.i_string.s);c+=item->item.i_string.len;}]
-------
Text=cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf);]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=cgc_quit
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_quit]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n");
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n");]
-------
Text=cgc_exit(0);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_exit(0);]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=cgc_menu
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_menu]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"=======================\n");
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_fdprintf(STDOUT,"=======================\n");]
-------
Text=cgc_fdprintf(STDOUT," 1. Import KTY\n");
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_fdprintf(STDOUT," 1. Import KTY\n");]
-------
Text=cgc_fdprintf(STDOUT," 2. Print KTY\n");
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_fdprintf(STDOUT," 2. Print KTY\n");]
-------
Text=cgc_fdprintf(STDOUT," 3. Quit\n");
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_fdprintf(STDOUT," 3. Quit\n");]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n");
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_fdprintf(STDOUT,"=======================\n");]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=main
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [main]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=intcgc_argc,char*cgc_argv[]
Type=<class 'CParser.CParser.ParameterTypeListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterListContext'> [intcgc_argc,char*cgc_argv[]]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=charbuf[MAX_KTY_LENGTH];
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [charbuf[MAX_KTY_LENGTH];]
-------
Text=charcgc_select[16];
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [charcgc_select[16];]
-------
Text=cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n");
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n");]
-------
Text=parser=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [parser=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t));]
-------
Text=if(cgc_kty_init(parser)!=0){cgc_fdprintf(STDOUT,"Error!\n");cgc_quit();}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(cgc_kty_init(parser)!=0){cgc_fdprintf(STDOUT,"Error!\n");cgc_quit();}]
-------
Text=cgc_menu();
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_menu();]
-------
Text=while(cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0){intmenu=cgc_strtol(cgc_select,NULL,10);switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [while(cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0){intmenu=cgc_strtol(cgc_select,NULL,10);switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}}]
-------
Text=return0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [return0;]
-------
Text=kty_parser_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [kty_parser_t]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=parser
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [parser]
-------
Text=kty_item_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [kty_item_t]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=my_kty
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [my_kty]
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_read_until
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=intfd,char*buf,cgc_size_tlen,chardelim
Type=<class 'CParser.CParser.ParameterListContext'>
Child Count = 7
0 : <class 'CParser.CParser.ParameterDeclarationContext'> [intfd]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.ParameterDeclarationContext'> [char*buf]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.ParameterDeclarationContext'> [cgc_size_tlen]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
6 : <class 'CParser.CParser.ParameterDeclarationContext'> [chardelim]
-------
Text=cgc_size_ti;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [cgc_size_ti]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=char*c=buf;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [char*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [c=buf]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=for(i=0;i<len;++i){cgc_size_trx;if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;if(*(c++)==delim)break;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.IterationStatementContext'> [for(i=0;i<len;++i){cgc_size_trx;if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;if(*(c++)==delim)break;}]
-------
Text=*(c-1)='\0';
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [*(c-1)='\0';]
-------
Text=returnc-buf;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnc-buf;]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_import_kty
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*buf
Type=<class 'CParser.CParser.ParameterListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterDeclarationContext'> [char*buf]
-------
Text=if(my_kty!=NULL){cgc_free_kty_item(my_kty);my_kty=NULL;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(my_kty!=NULL){cgc_free_kty_item(my_kty);my_kty=NULL;}]
-------
Text=parser->cats=0;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [parser->cats=0;]
-------
Text=my_kty=parser->loads(buf);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [my_kty=parser->loads(buf);]
-------
Text=if(my_kty==NULL)cgc_fdprintf(STDOUT,"Error!\n");
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(my_kty==NULL)cgc_fdprintf(STDOUT,"Error!\n");]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_print_kty
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}]
-------
Text=parser->cats=0;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [parser->cats=0;]
-------
Text=parser->dumps(my_kty);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [parser->dumps(my_kty);]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_nyan
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=inti;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [inti]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=char*c;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [char*c]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=charbuf[1024]={0};
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [char]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [buf[1024]={0}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=charnyan_cat[]="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n";
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [char]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [nyan_cat[]="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}]
-------
Text=parser->dumps(my_kty);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [parser->dumps(my_kty);]
-------
Text=if(parser->cats<3)return;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(parser->cats<3)return;]
-------
Text=cgc_fdprintf(STDOUT,"%s",nyan_cat);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_fdprintf(STDOUT,"%s",nyan_cat);]
-------
Text=c=buf;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [c=buf;]
-------
Text=for(i=0;i<cgc_array_length(parser->nyan_says);++i){kty_item_t*item=cgc_array_get(parser->nyan_says,i);cgc_strcpy(c,item->item.i_string.s);c+=item->item.i_string.len;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.IterationStatementContext'> [for(i=0;i<cgc_array_length(parser->nyan_says);++i){kty_item_t*item=cgc_array_get(parser->nyan_says,i);cgc_strcpy(c,item->item.i_string.s);c+=item->item.i_string.len;}]
-------
Text=cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf);]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_quit
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n");
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n");]
-------
Text=cgc_exit(0);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_exit(0);]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_menu
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"=======================\n");
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_fdprintf(STDOUT,"=======================\n");]
-------
Text=cgc_fdprintf(STDOUT," 1. Import KTY\n");
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_fdprintf(STDOUT," 1. Import KTY\n");]
-------
Text=cgc_fdprintf(STDOUT," 2. Print KTY\n");
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_fdprintf(STDOUT," 2. Print KTY\n");]
-------
Text=cgc_fdprintf(STDOUT," 3. Quit\n");
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_fdprintf(STDOUT," 3. Quit\n");]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n");
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_fdprintf(STDOUT,"=======================\n");]
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=main
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=intcgc_argc,char*cgc_argv[]
Type=<class 'CParser.CParser.ParameterListContext'>
Child Count = 3
0 : <class 'CParser.CParser.ParameterDeclarationContext'> [intcgc_argc]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.ParameterDeclarationContext'> [char*cgc_argv[]]
-------
Text=charbuf[MAX_KTY_LENGTH];
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [char]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [buf[MAX_KTY_LENGTH]]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=charcgc_select[16];
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [char]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [cgc_select[16]]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n");
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n");]
-------
Text=parser=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [parser=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t));]
-------
Text=if(cgc_kty_init(parser)!=0){cgc_fdprintf(STDOUT,"Error!\n");cgc_quit();}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(cgc_kty_init(parser)!=0){cgc_fdprintf(STDOUT,"Error!\n");cgc_quit();}]
-------
Text=cgc_menu();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_menu();]
-------
Text=while(cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0){intmenu=cgc_strtol(cgc_select,NULL,10);switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.IterationStatementContext'> [while(cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0){intmenu=cgc_strtol(cgc_select,NULL,10);switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}}]
-------
Text=return0;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [return0;]
-------
Text=kty_parser_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [kty_parser_t]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=parser
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=kty_item_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [kty_item_t]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=my_kty
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=intfd
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [int]
1 : <class 'CParser.CParser.DeclaratorContext'> [fd]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*buf
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [char*]
1 : <class 'CParser.CParser.DeclaratorContext'> [buf]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_size_tlen
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [cgc_size_t]
1 : <class 'CParser.CParser.DeclaratorContext'> [len]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=chardelim
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [char]
1 : <class 'CParser.CParser.DeclaratorContext'> [delim]
-------
Text=cgc_size_ti
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [cgc_size_t]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [i]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char*]
-------
Text=c=buf
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [c=buf]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=for(i=0;i<len;++i){cgc_size_trx;if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;if(*(c++)==delim)break;}
Type=<class 'CParser.CParser.IterationStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [for]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ForConditionContext'> [i=0;i<len;++i]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{cgc_size_trx;if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;if(*(c++)==delim)break;}]
-------
Text=*(c-1)='\0';
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [*(c-1)='\0']
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=returnc-buf;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [c-buf]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=char*buf
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [char*]
1 : <class 'CParser.CParser.DeclaratorContext'> [buf]
-------
Text=if(my_kty!=NULL){cgc_free_kty_item(my_kty);my_kty=NULL;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [my_kty!=NULL]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{cgc_free_kty_item(my_kty);my_kty=NULL;}]
-------
Text=parser->cats=0;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [parser->cats=0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=my_kty=parser->loads(buf);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [my_kty=parser->loads(buf)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(my_kty==NULL)cgc_fdprintf(STDOUT,"Error!\n");
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [my_kty==NULL]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [cgc_fdprintf(STDOUT,"Error!\n");]
-------
Text=if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [my_kty==NULL]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{cgc_fdprintf(STDOUT,"Error!\n");return;}]
-------
Text=parser->cats=0;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [parser->cats=0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=parser->dumps(my_kty);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [parser->dumps(my_kty)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=inti
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [i]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*c
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char*]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [c]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=buf[1024]={0}
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [buf[1024]={0}]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=nyan_cat[]="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [nyan_cat[]="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(my_kty==NULL){cgc_fdprintf(STDOUT,"Error!\n");return;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [my_kty==NULL]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{cgc_fdprintf(STDOUT,"Error!\n");return;}]
-------
Text=parser->dumps(my_kty);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [parser->dumps(my_kty)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(parser->cats<3)return;
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [parser->cats<3]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [return;]
-------
Text=cgc_fdprintf(STDOUT,"%s",nyan_cat);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_fdprintf(STDOUT,"%s",nyan_cat)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=c=buf;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [c=buf]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=for(i=0;i<cgc_array_length(parser->nyan_says);++i){kty_item_t*item=cgc_array_get(parser->nyan_says,i);cgc_strcpy(c,item->item.i_string.s);c+=item->item.i_string.len;}
Type=<class 'CParser.CParser.IterationStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [for]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ForConditionContext'> [i=0;i<cgc_array_length(parser->nyan_says);++i]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{kty_item_t*item=cgc_array_get(parser->nyan_says,i);cgc_strcpy(c,item->item.i_string.s);c+=item->item.i_string.len;}]
-------
Text=cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n");
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_exit(0);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_exit(0)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n");
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_fdprintf(STDOUT," 1. Import KTY\n");
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_fdprintf(STDOUT," 1. Import KTY\n")]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_fdprintf(STDOUT," 2. Print KTY\n");
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_fdprintf(STDOUT," 2. Print KTY\n")]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_fdprintf(STDOUT," 3. Quit\n");
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_fdprintf(STDOUT," 3. Quit\n")]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n");
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=intcgc_argc
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [int]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_argc]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*cgc_argv[]
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [char*]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_argv[]]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=buf[MAX_KTY_LENGTH]
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [buf[MAX_KTY_LENGTH]]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=cgc_select[16]
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [cgc_select[16]]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n");
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=parser=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [parser=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(cgc_kty_init(parser)!=0){cgc_fdprintf(STDOUT,"Error!\n");cgc_quit();}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [cgc_kty_init(parser)!=0]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{cgc_fdprintf(STDOUT,"Error!\n");cgc_quit();}]
-------
Text=cgc_menu();
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_menu()]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=while(cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0){intmenu=cgc_strtol(cgc_select,NULL,10);switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}}
Type=<class 'CParser.CParser.IterationStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [while]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{intmenu=cgc_strtol(cgc_select,NULL,10);switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}}]
-------
Text=return0;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=kty_parser_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=kty_item_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=fd
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [fd]
-------
Text=char*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char*]
-------
Text=buf
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [buf]
-------
Text=cgc_size_t
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [cgc_size_t]
-------
Text=len
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [len]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=delim
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [delim]
-------
Text=cgc_size_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [cgc_size_t]
-------
Text=i
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [i]
-------
Text=char*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=c=buf
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [c]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [buf]
-------
Text=for
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=i=0;i<len;++i
Type=<class 'CParser.CParser.ForConditionContext'>
Child Count = 5
0 : <class 'CParser.CParser.ExpressionContext'> [i=0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
2 : <class 'CParser.CParser.ForExpressionContext'> [i<len]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
4 : <class 'CParser.CParser.ForExpressionContext'> [++i]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={cgc_size_trx;if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;if(*(c++)==delim)break;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{cgc_size_trx;if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;if(*(c++)==delim)break;}]
-------
Text=*(c-1)='\0'
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [*(c-1)='\0']
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=c-buf
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [c-buf]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char*]
-------
Text=buf
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [buf]
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=my_kty!=NULL
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [my_kty!=NULL]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={cgc_free_kty_item(my_kty);my_kty=NULL;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{cgc_free_kty_item(my_kty);my_kty=NULL;}]
-------
Text=parser->cats=0
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [parser->cats=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=my_kty=parser->loads(buf)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [my_kty=parser->loads(buf)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [my_kty==NULL]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"Error!\n");
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_fdprintf(STDOUT,"Error!\n");]
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [my_kty==NULL]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={cgc_fdprintf(STDOUT,"Error!\n");return;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{cgc_fdprintf(STDOUT,"Error!\n");return;}]
-------
Text=parser->cats=0
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [parser->cats=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [parser->dumps(my_kty)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=i
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [i]
-------
Text=char*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=c
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [c]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=buf[1024]={0}
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [buf[1024]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [{0}]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=nyan_cat[]="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [nyan_cat[]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> ["\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"]
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [my_kty==NULL]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={cgc_fdprintf(STDOUT,"Error!\n");return;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{cgc_fdprintf(STDOUT,"Error!\n");return;}]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [parser->dumps(my_kty)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=parser->cats<3
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [parser->cats<3]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [return;]
-------
Text=cgc_fdprintf(STDOUT,"%s",nyan_cat)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_fdprintf(STDOUT,"%s",nyan_cat)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=c=buf
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [c=buf]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=for
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=i=0;i<cgc_array_length(parser->nyan_says);++i
Type=<class 'CParser.CParser.ForConditionContext'>
Child Count = 5
0 : <class 'CParser.CParser.ExpressionContext'> [i=0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
2 : <class 'CParser.CParser.ForExpressionContext'> [i<cgc_array_length(parser->nyan_says)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
4 : <class 'CParser.CParser.ForExpressionContext'> [++i]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={kty_item_t*item=cgc_array_get(parser->nyan_says,i);cgc_strcpy(c,item->item.i_string.s);c+=item->item.i_string.len;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{kty_item_t*item=cgc_array_get(parser->nyan_says,i);cgc_strcpy(c,item->item.i_string.s);c+=item->item.i_string.len;}]
-------
Text=cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_exit(0)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_exit(0)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT," 1. Import KTY\n")
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_fdprintf(STDOUT," 1. Import KTY\n")]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT," 2. Print KTY\n")
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_fdprintf(STDOUT," 2. Print KTY\n")]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT," 3. Quit\n")
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_fdprintf(STDOUT," 3. Quit\n")]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=cgc_argc
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_argc]
-------
Text=char*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char*]
-------
Text=cgc_argv[]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_argv[]]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=buf[MAX_KTY_LENGTH]
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclaratorContext'> [buf[MAX_KTY_LENGTH]]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=cgc_select[16]
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclaratorContext'> [cgc_select[16]]
-------
Text=cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=parser=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [parser=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_kty_init(parser)!=0
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_kty_init(parser)!=0]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={cgc_fdprintf(STDOUT,"Error!\n");cgc_quit();}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{cgc_fdprintf(STDOUT,"Error!\n");cgc_quit();}]
-------
Text=cgc_menu()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_menu()]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=while
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={intmenu=cgc_strtol(cgc_select,NULL,10);switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{intmenu=cgc_strtol(cgc_select,NULL,10);switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}}]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=fd
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [fd]
-------
Text=char*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=buf
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [buf]
-------
Text=cgc_size_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [cgc_size_t]
-------
Text=len
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [len]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=delim
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [delim]
-------
Text=cgc_size_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [cgc_size_t]
-------
Text=i
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [i]
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=c
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [c]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buf
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [buf]
-------
Text=i=0
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [i=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=i<len
Type=<class 'CParser.CParser.ForExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [i<len]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=++i
Type=<class 'CParser.CParser.ForExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [++i]
-------
Text={cgc_size_trx;if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;if(*(c++)==delim)break;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [cgc_size_trx;if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;if(*(c++)==delim)break;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=*(c-1)='\0'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [*(c-1)]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\0']
-------
Text=c-buf
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [c-buf]
-------
Text=char*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=buf
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [buf]
-------
Text=my_kty!=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [my_kty!=NULL]
-------
Text={cgc_free_kty_item(my_kty);my_kty=NULL;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [cgc_free_kty_item(my_kty);my_kty=NULL;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=parser->cats=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [parser->cats]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=my_kty=parser->loads(buf)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [my_kty]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [parser->loads(buf)]
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [my_kty==NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n");
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [my_kty==NULL]
-------
Text={cgc_fdprintf(STDOUT,"Error!\n");return;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [cgc_fdprintf(STDOUT,"Error!\n");return;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=parser->cats=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [parser->cats]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [parser->dumps(my_kty)]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=i
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [i]
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=c
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [c]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=buf[1024]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [buf[1024]]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={0}
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.InitializerListContext'> [0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=nyan_cat[]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [nyan_cat[]]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ["\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"]
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [my_kty==NULL]
-------
Text={cgc_fdprintf(STDOUT,"Error!\n");return;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [cgc_fdprintf(STDOUT,"Error!\n");return;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [parser->dumps(my_kty)]
-------
Text=parser->cats<3
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [parser->cats<3]
-------
Text=return;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_fdprintf(STDOUT,"%s",nyan_cat)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_fdprintf(STDOUT,"%s",nyan_cat)]
-------
Text=c=buf
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [c]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [buf]
-------
Text=i=0
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [i=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=i<cgc_array_length(parser->nyan_says)
Type=<class 'CParser.CParser.ForExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [i<cgc_array_length(parser->nyan_says)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=++i
Type=<class 'CParser.CParser.ForExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [++i]
-------
Text={kty_item_t*item=cgc_array_get(parser->nyan_says,i);cgc_strcpy(c,item->item.i_string.s);c+=item->item.i_string.len;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [kty_item_t*item=cgc_array_get(parser->nyan_says,i);cgc_strcpy(c,item->item.i_string.s);c+=item->item.i_string.len;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)]
-------
Text=cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")]
-------
Text=cgc_exit(0)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_exit(0)]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=cgc_fdprintf(STDOUT," 1. Import KTY\n")
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_fdprintf(STDOUT," 1. Import KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 2. Print KTY\n")
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_fdprintf(STDOUT," 2. Print KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 3. Quit\n")
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_fdprintf(STDOUT," 3. Quit\n")]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=cgc_argc
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_argc]
-------
Text=char*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=cgc_argv[]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_argv]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=buf[MAX_KTY_LENGTH]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [buf[MAX_KTY_LENGTH]]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=cgc_select[16]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_select[16]]
-------
Text=cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")]
-------
Text=parser=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [parser]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))]
-------
Text=cgc_kty_init(parser)!=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_kty_init(parser)!=0]
-------
Text={cgc_fdprintf(STDOUT,"Error!\n");cgc_quit();}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [cgc_fdprintf(STDOUT,"Error!\n");cgc_quit();]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=cgc_menu()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_menu()]
-------
Text=cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0]
-------
Text={intmenu=cgc_strtol(cgc_select,NULL,10);switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [intmenu=cgc_strtol(cgc_select,NULL,10);switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=fd
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=buf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_size_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [cgc_size_t]
-------
Text=len
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=delim
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_size_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_size_t]
-------
Text=i
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [i]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=c
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [c]
-------
Text=buf
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [buf]
-------
Text=i=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [i]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=i<len
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [i<len]
-------
Text=++i
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [++i]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_size_trx;if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;if(*(c++)==delim)break;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 3
0 : <class 'CParser.CParser.BlockItemContext'> [cgc_size_trx;]
1 : <class 'CParser.CParser.BlockItemContext'> [if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;]
2 : <class 'CParser.CParser.BlockItemContext'> [if(*(c++)==delim)break;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*(c-1)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [*]
1 : <class 'CParser.CParser.CastExpressionContext'> [(c-1)]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text='\0'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\0']
-------
Text=c-buf
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [c-buf]
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=buf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=my_kty!=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [my_kty!=NULL]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_free_kty_item(my_kty);my_kty=NULL;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 2
0 : <class 'CParser.CParser.BlockItemContext'> [cgc_free_kty_item(my_kty);]
1 : <class 'CParser.CParser.BlockItemContext'> [my_kty=NULL;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=parser->cats
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [parser->cats]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=my_kty
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [my_kty]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=parser->loads(buf)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [parser->loads(buf)]
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [my_kty==NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [my_kty==NULL]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"Error!\n");return;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 2
0 : <class 'CParser.CParser.BlockItemContext'> [cgc_fdprintf(STDOUT,"Error!\n");]
1 : <class 'CParser.CParser.BlockItemContext'> [return;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=parser->cats
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [parser->cats]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [parser->dumps(my_kty)]
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=i
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [i]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=c
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [c]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buf[1024]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [buf]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [1024]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=nyan_cat[]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [nyan_cat]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ["\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"]
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [my_kty==NULL]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"Error!\n");return;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 2
0 : <class 'CParser.CParser.BlockItemContext'> [cgc_fdprintf(STDOUT,"Error!\n");]
1 : <class 'CParser.CParser.BlockItemContext'> [return;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [parser->dumps(my_kty)]
-------
Text=parser->cats<3
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [parser->cats<3]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"%s",nyan_cat)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_fdprintf(STDOUT,"%s",nyan_cat)]
-------
Text=c
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [c]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=buf
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [buf]
-------
Text=i=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [i]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=i<cgc_array_length(parser->nyan_says)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [i<cgc_array_length(parser->nyan_says)]
-------
Text=++i
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [++i]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=kty_item_t*item=cgc_array_get(parser->nyan_says,i);cgc_strcpy(c,item->item.i_string.s);c+=item->item.i_string.len;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 3
0 : <class 'CParser.CParser.BlockItemContext'> [kty_item_t*item=cgc_array_get(parser->nyan_says,i);]
1 : <class 'CParser.CParser.BlockItemContext'> [cgc_strcpy(c,item->item.i_string.s);]
2 : <class 'CParser.CParser.BlockItemContext'> [c+=item->item.i_string.len;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)]
-------
Text=cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")]
-------
Text=cgc_exit(0)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_exit(0)]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=cgc_fdprintf(STDOUT," 1. Import KTY\n")
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_fdprintf(STDOUT," 1. Import KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 2. Print KTY\n")
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_fdprintf(STDOUT," 2. Print KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 3. Quit\n")
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_fdprintf(STDOUT," 3. Quit\n")]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=cgc_argc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=cgc_argv
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_argv]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buf[MAX_KTY_LENGTH]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [buf]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [MAX_KTY_LENGTH]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_select[16]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_select]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [16]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text=cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")]
-------
Text=parser
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [parser]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))]
-------
Text=cgc_kty_init(parser)!=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_kty_init(parser)!=0]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"Error!\n");cgc_quit();
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 2
0 : <class 'CParser.CParser.BlockItemContext'> [cgc_fdprintf(STDOUT,"Error!\n");]
1 : <class 'CParser.CParser.BlockItemContext'> [cgc_quit();]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_menu()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_menu()]
-------
Text=cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=intmenu=cgc_strtol(cgc_select,NULL,10);switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 2
0 : <class 'CParser.CParser.BlockItemContext'> [intmenu=cgc_strtol(cgc_select,NULL,10);]
1 : <class 'CParser.CParser.BlockItemContext'> [switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=cgc_size_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_size_t]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_size_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=i
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=c
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buf
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [buf]
-------
Text=i
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [i]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=i<len
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [i<len]
-------
Text=++i
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [++i]
-------
Text=cgc_size_trx;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [cgc_size_trx;]
-------
Text=if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;]
-------
Text=if(*(c++)==delim)break;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(*(c++)==delim)break;]
-------
Text=*
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=(c-1)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [(c-1)]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\0'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\0']
-------
Text=c-buf
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [c-buf]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=my_kty!=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [my_kty!=NULL]
-------
Text=cgc_free_kty_item(my_kty);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [cgc_free_kty_item(my_kty);]
-------
Text=my_kty=NULL;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [my_kty=NULL;]
-------
Text=parser->cats
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [parser]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cats]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=my_kty
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [my_kty]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=parser->loads(buf)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [parser->loads(buf)]
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [my_kty==NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [my_kty==NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n");
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_fdprintf(STDOUT,"Error!\n");]
-------
Text=return;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [return;]
-------
Text=parser->cats
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [parser]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cats]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [parser->dumps(my_kty)]
-------
Text=i
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=c
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buf
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [buf]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1024
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [1024]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=nyan_cat
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [nyan_cat]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ["\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"]
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [my_kty==NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n");
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_fdprintf(STDOUT,"Error!\n");]
-------
Text=return;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [return;]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [parser->dumps(my_kty)]
-------
Text=parser->cats<3
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [parser->cats<3]
-------
Text=cgc_fdprintf(STDOUT,"%s",nyan_cat)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_fdprintf(STDOUT,"%s",nyan_cat)]
-------
Text=c
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [c]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buf
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [buf]
-------
Text=i
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [i]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=i<cgc_array_length(parser->nyan_says)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [i<cgc_array_length(parser->nyan_says)]
-------
Text=++i
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [++i]
-------
Text=kty_item_t*item=cgc_array_get(parser->nyan_says,i);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [kty_item_t*item=cgc_array_get(parser->nyan_says,i);]
-------
Text=cgc_strcpy(c,item->item.i_string.s);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_strcpy(c,item->item.i_string.s);]
-------
Text=c+=item->item.i_string.len;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [c+=item->item.i_string.len;]
-------
Text=cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)]
-------
Text=cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")]
-------
Text=cgc_exit(0)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_exit(0)]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=cgc_fdprintf(STDOUT," 1. Import KTY\n")
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_fdprintf(STDOUT," 1. Import KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 2. Print KTY\n")
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_fdprintf(STDOUT," 2. Print KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 3. Quit\n")
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_fdprintf(STDOUT," 3. Quit\n")]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=cgc_argv
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buf
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [buf]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=MAX_KTY_LENGTH
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [MAX_KTY_LENGTH]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_select
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_select]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=16
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [16]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")]
-------
Text=parser
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [parser]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))]
-------
Text=cgc_kty_init(parser)!=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_kty_init(parser)!=0]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n");
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_fdprintf(STDOUT,"Error!\n");]
-------
Text=cgc_quit();
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_quit();]
-------
Text=cgc_menu()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_menu()]
-------
Text=cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0]
-------
Text=intmenu=cgc_strtol(cgc_select,NULL,10);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [intmenu=cgc_strtol(cgc_select,NULL,10);]
-------
Text=switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_size_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buf
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [buf]
-------
Text=i
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [i]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=i<len
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [i<len]
-------
Text=++i
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [++i]
-------
Text=cgc_size_trx;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [cgc_size_trx]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;]
-------
Text=if(*(c++)==delim)break;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(*(c++)==delim)break;]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(c-1)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [(c-1)]
-------
Text='\0'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\0']
-------
Text=c-buf
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [c-buf]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=my_kty!=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [my_kty!=NULL]
-------
Text=cgc_free_kty_item(my_kty);
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [cgc_free_kty_item]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [(my_kty)]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=my_kty=NULL;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [my_kty=NULL;]
-------
Text=parser
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [parser]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cats
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=my_kty
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [my_kty]
-------
Text=parser->loads(buf)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [parser->loads(buf)]
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [my_kty==NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [my_kty==NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n");
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_fdprintf(STDOUT,"Error!\n");]
-------
Text=return;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [return;]
-------
Text=parser
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [parser]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cats
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [parser->dumps(my_kty)]
-------
Text=buf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1024
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [1024]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=nyan_cat
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ["\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"]
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [my_kty==NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n");
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_fdprintf(STDOUT,"Error!\n");]
-------
Text=return;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [return;]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [parser->dumps(my_kty)]
-------
Text=parser->cats<3
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [parser->cats<3]
-------
Text=cgc_fdprintf(STDOUT,"%s",nyan_cat)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT,"%s",nyan_cat)]
-------
Text=c
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [c]
-------
Text=buf
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [buf]
-------
Text=i
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [i]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=i<cgc_array_length(parser->nyan_says)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [i<cgc_array_length(parser->nyan_says)]
-------
Text=++i
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [++i]
-------
Text=kty_item_t*item=cgc_array_get(parser->nyan_says,i);
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [kty_item_t*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [item=cgc_array_get(parser->nyan_says,i)]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_strcpy(c,item->item.i_string.s);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_strcpy(c,item->item.i_string.s);]
-------
Text=c+=item->item.i_string.len;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [c+=item->item.i_string.len;]
-------
Text=cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)]
-------
Text=cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")]
-------
Text=cgc_exit(0)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_exit(0)]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=cgc_fdprintf(STDOUT," 1. Import KTY\n")
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT," 1. Import KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 2. Print KTY\n")
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT," 2. Print KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 3. Quit\n")
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT," 3. Quit\n")]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=MAX_KTY_LENGTH
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [MAX_KTY_LENGTH]
-------
Text=cgc_select
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=16
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [16]
-------
Text=cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")]
-------
Text=parser
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [parser]
-------
Text=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))]
-------
Text=cgc_kty_init(parser)!=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_kty_init(parser)!=0]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n");
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_fdprintf(STDOUT,"Error!\n");]
-------
Text=cgc_quit();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_quit();]
-------
Text=cgc_menu()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_menu()]
-------
Text=cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0]
-------
Text=intmenu=cgc_strtol(cgc_select,NULL,10);
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [int]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [menu=cgc_strtol(cgc_select,NULL,10)]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=buf
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [buf]
-------
Text=i
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [i]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=i<len
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [i<len]
-------
Text=++i
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [++i]
-------
Text=cgc_size_trx
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [cgc_size_t]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [rx]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(cgc_receive(fd,c,1,&rx)!=0||rx==0)return-1;
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [cgc_receive(fd,c,1,&rx)!=0||rx==0]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [return-1;]
-------
Text=if(*(c++)==delim)break;
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [*(c++)==delim]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [break;]
-------
Text=(c-1)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(c-1)]
-------
Text='\0'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\0']
-------
Text=c-buf
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [c-buf]
-------
Text=my_kty!=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [my_kty!=NULL]
-------
Text=cgc_free_kty_item
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [cgc_free_kty_item]
-------
Text=(my_kty)
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [(my_kty)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=my_kty=NULL;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [my_kty=NULL]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=parser
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=my_kty
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=parser->loads(buf)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [parser->loads(buf)]
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [my_kty==NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [my_kty==NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n");
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=return;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=parser
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [parser->dumps(my_kty)]
-------
Text=1024
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [1024]
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ["\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"]
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [my_kty==NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n");
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=return;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [parser->dumps(my_kty)]
-------
Text=parser->cats<3
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [parser->cats<3]
-------
Text=cgc_fdprintf(STDOUT,"%s",nyan_cat)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT,"%s",nyan_cat)]
-------
Text=c
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buf
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [buf]
-------
Text=i
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [i]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=i<cgc_array_length(parser->nyan_says)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [i<cgc_array_length(parser->nyan_says)]
-------
Text=++i
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [++i]
-------
Text=kty_item_t*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [kty_item_t*]
-------
Text=item=cgc_array_get(parser->nyan_says,i)
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [item=cgc_array_get(parser->nyan_says,i)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_strcpy(c,item->item.i_string.s);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_strcpy(c,item->item.i_string.s)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=c+=item->item.i_string.len;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [c+=item->item.i_string.len]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)]
-------
Text=cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")]
-------
Text=cgc_exit(0)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_exit(0)]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=cgc_fdprintf(STDOUT," 1. Import KTY\n")
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT," 1. Import KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 2. Print KTY\n")
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT," 2. Print KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 3. Quit\n")
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT," 3. Quit\n")]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=MAX_KTY_LENGTH
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [MAX_KTY_LENGTH]
-------
Text=16
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [16]
-------
Text=cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")]
-------
Text=parser
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))]
-------
Text=cgc_kty_init(parser)!=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_kty_init(parser)!=0]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n");
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_quit();
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_quit()]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_menu()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_menu()]
-------
Text=cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0]
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=menu=cgc_strtol(cgc_select,NULL,10)
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [menu=cgc_strtol(cgc_select,NULL,10)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=switch(menu){case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [switch]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [menu]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=buf
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [buf]
-------
Text=i
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=i<len
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [i<len]
-------
Text=++i
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [++i]
-------
Text=cgc_size_t
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [cgc_size_t]
-------
Text=rx
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [rx]
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_receive(fd,c,1,&rx)!=0||rx==0
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_receive(fd,c,1,&rx)!=0||rx==0]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return-1;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [return-1;]
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*(c++)==delim
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [*(c++)==delim]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=break;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [break;]
-------
Text=(c-1)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [c-1]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text='\0'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\0']
-------
Text=c-buf
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [c-buf]
-------
Text=my_kty!=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [my_kty!=NULL]
-------
Text=cgc_free_kty_item
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [cgc_free_kty_item]
-------
Text=(my_kty)
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclaratorContext'> [(my_kty)]
-------
Text=my_kty=NULL
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [my_kty=NULL]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=parser->loads(buf)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [parser->loads(buf)]
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [my_kty==NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [my_kty==NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [parser->dumps(my_kty)]
-------
Text=1024
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [1024]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ["\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"]
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [my_kty==NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [parser->dumps(my_kty)]
-------
Text=parser->cats<3
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [parser->cats<3]
-------
Text=cgc_fdprintf(STDOUT,"%s",nyan_cat)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_fdprintf(STDOUT,"%s",nyan_cat)]
-------
Text=buf
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [buf]
-------
Text=i
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=i<cgc_array_length(parser->nyan_says)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [i<cgc_array_length(parser->nyan_says)]
-------
Text=++i
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [++i]
-------
Text=kty_item_t*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [kty_item_t*]
-------
Text=item=cgc_array_get(parser->nyan_says,i)
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [item]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [cgc_array_get(parser->nyan_says,i)]
-------
Text=cgc_strcpy(c,item->item.i_string.s)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_strcpy(c,item->item.i_string.s)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=c+=item->item.i_string.len
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [c+=item->item.i_string.len]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)]
-------
Text=cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")]
-------
Text=cgc_exit(0)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_exit(0)]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=cgc_fdprintf(STDOUT," 1. Import KTY\n")
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_fdprintf(STDOUT," 1. Import KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 2. Print KTY\n")
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_fdprintf(STDOUT," 2. Print KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 3. Quit\n")
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_fdprintf(STDOUT," 3. Quit\n")]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=MAX_KTY_LENGTH
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [MAX_KTY_LENGTH]
-------
Text=16
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [16]
-------
Text=cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")]
-------
Text=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))]
-------
Text=cgc_kty_init(parser)!=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_kty_init(parser)!=0]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_quit()]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_menu()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_menu()]
-------
Text=cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0]
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=menu=cgc_strtol(cgc_select,NULL,10)
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [menu]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [cgc_strtol(cgc_select,NULL,10)]
-------
Text=switch
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=menu
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [menu]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=buf
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [buf]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=i<len
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [i<len]
-------
Text=++i
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [++i]
-------
Text=cgc_size_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [cgc_size_t]
-------
Text=rx
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [rx]
-------
Text=cgc_receive(fd,c,1,&rx)!=0||rx==0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_receive(fd,c,1,&rx)!=0||rx==0]
-------
Text=return-1;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [-1]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=*(c++)==delim
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [*(c++)==delim]
-------
Text=break;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [break]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=c-1
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [c-1]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\0'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\0']
-------
Text=c-buf
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [c-buf]
-------
Text=my_kty!=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [my_kty!=NULL]
-------
Text=cgc_free_kty_item
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [cgc_free_kty_item]
-------
Text=(my_kty)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [(my_kty)]
-------
Text=my_kty=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [my_kty]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=parser->loads(buf)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [parser->loads(buf)]
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [my_kty==NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [my_kty==NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [parser->dumps(my_kty)]
-------
Text=1024
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [1024]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ["\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"]
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [my_kty==NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [parser->dumps(my_kty)]
-------
Text=parser->cats<3
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [parser->cats<3]
-------
Text=cgc_fdprintf(STDOUT,"%s",nyan_cat)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_fdprintf(STDOUT,"%s",nyan_cat)]
-------
Text=buf
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [buf]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=i<cgc_array_length(parser->nyan_says)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [i<cgc_array_length(parser->nyan_says)]
-------
Text=++i
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [++i]
-------
Text=kty_item_t*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [kty_item_t]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=item
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [item]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_array_get(parser->nyan_says,i)
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_array_get(parser->nyan_says,i)]
-------
Text=cgc_strcpy(c,item->item.i_string.s)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_strcpy(c,item->item.i_string.s)]
-------
Text=c+=item->item.i_string.len
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [c]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [+=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [item->item.i_string.len]
-------
Text=cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)]
-------
Text=cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")]
-------
Text=cgc_exit(0)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_exit(0)]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=cgc_fdprintf(STDOUT," 1. Import KTY\n")
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_fdprintf(STDOUT," 1. Import KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 2. Print KTY\n")
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_fdprintf(STDOUT," 2. Print KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 3. Quit\n")
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_fdprintf(STDOUT," 3. Quit\n")]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=MAX_KTY_LENGTH
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [MAX_KTY_LENGTH]
-------
Text=16
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [16]
-------
Text=cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")]
-------
Text=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))]
-------
Text=cgc_kty_init(parser)!=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_kty_init(parser)!=0]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_quit()]
-------
Text=cgc_menu()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_menu()]
-------
Text=cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=menu
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [menu]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_strtol(cgc_select,NULL,10)
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_strtol(cgc_select,NULL,10)]
-------
Text=menu
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [menu]
-------
Text={case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=buf
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [buf]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=i<len
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [i<len]
-------
Text=++i
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [++i]
-------
Text=cgc_size_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_size_t]
-------
Text=rx
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [rx]
-------
Text=cgc_receive(fd,c,1,&rx)!=0||rx==0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_receive(fd,c,1,&rx)!=0||rx==0]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-1
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [-1]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*(c++)==delim
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [*(c++)==delim]
-------
Text=break
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=c-1
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [c-1]
-------
Text='\0'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\0']
-------
Text=c-buf
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [c-buf]
-------
Text=my_kty!=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [my_kty]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [!=]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=cgc_free_kty_item
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_free_kty_item]
-------
Text=(my_kty)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.DeclaratorContext'> [my_kty]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=my_kty
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [my_kty]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=parser->loads(buf)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [parser->loads(buf)]
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [my_kty]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [my_kty]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [parser->dumps(my_kty)]
-------
Text=1024
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [1024]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ["\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"]
-------
Text=my_kty==NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [my_kty]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [parser->dumps(my_kty)]
-------
Text=parser->cats<3
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [parser->cats<3]
-------
Text=cgc_fdprintf(STDOUT,"%s",nyan_cat)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_fdprintf(STDOUT,"%s",nyan_cat)]
-------
Text=buf
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [buf]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=i<cgc_array_length(parser->nyan_says)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [i<cgc_array_length(parser->nyan_says)]
-------
Text=++i
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [++i]
-------
Text=kty_item_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [kty_item_t]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=item
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [item]
-------
Text=cgc_array_get(parser->nyan_says,i)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_array_get(parser->nyan_says,i)]
-------
Text=cgc_strcpy(c,item->item.i_string.s)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_strcpy(c,item->item.i_string.s)]
-------
Text=c
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [c]
-------
Text=+=
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [+=]
-------
Text=item->item.i_string.len
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [item->item.i_string.len]
-------
Text=cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)]
-------
Text=cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")]
-------
Text=cgc_exit(0)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_exit(0)]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=cgc_fdprintf(STDOUT," 1. Import KTY\n")
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_fdprintf(STDOUT," 1. Import KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 2. Print KTY\n")
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_fdprintf(STDOUT," 2. Print KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 3. Quit\n")
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_fdprintf(STDOUT," 3. Quit\n")]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=MAX_KTY_LENGTH
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [MAX_KTY_LENGTH]
-------
Text=16
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [16]
-------
Text=cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")]
-------
Text=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))]
-------
Text=cgc_kty_init(parser)!=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_kty_init(parser)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [!=]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_quit()]
-------
Text=cgc_menu()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_menu()]
-------
Text=cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0]
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=menu
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [menu]
-------
Text=cgc_strtol(cgc_select,NULL,10)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_strtol(cgc_select,NULL,10)]
-------
Text=menu
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [menu]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");break;case2:cgc_print_kty();break;case3:cgc_quit();break;case777:cgc_nyan();break;default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");break;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 10
0 : <class 'CParser.CParser.BlockItemContext'> [case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");]
1 : <class 'CParser.CParser.BlockItemContext'> [break;]
2 : <class 'CParser.CParser.BlockItemContext'> [case2:cgc_print_kty();]
3 : <class 'CParser.CParser.BlockItemContext'> [break;]
4 : <class 'CParser.CParser.BlockItemContext'> [case3:cgc_quit();]
5 : <class 'CParser.CParser.BlockItemContext'> [break;]
6 : <class 'CParser.CParser.BlockItemContext'> [case777:cgc_nyan();]
7 : <class 'CParser.CParser.BlockItemContext'> [break;]
8 : <class 'CParser.CParser.BlockItemContext'> [default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");]
9 : <class 'CParser.CParser.BlockItemContext'> [break;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=buf
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [buf]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=i<len
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [i<len]
-------
Text=++i
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [++i]
-------
Text=cgc_size_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=rx
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_receive(fd,c,1,&rx)!=0||rx==0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_receive(fd,c,1,&rx)!=0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [||]
2 : <class 'CParser.CParser.LogicalAndExpressionContext'> [rx==0]
-------
Text=-1
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [-1]
-------
Text=*(c++)==delim
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [*(c++)==delim]
-------
Text=c-1
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [c-1]
-------
Text='\0'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\0']
-------
Text=c-buf
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [c-buf]
-------
Text=my_kty
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [my_kty]
-------
Text=!=
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=cgc_free_kty_item
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=my_kty
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [my_kty]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=my_kty
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [my_kty]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=parser->loads(buf)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [parser->loads(buf)]
-------
Text=my_kty
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [my_kty]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=my_kty
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [my_kty]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [parser->dumps(my_kty)]
-------
Text=1024
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [1024]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ["\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"]
-------
Text=my_kty
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [my_kty]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [parser->dumps(my_kty)]
-------
Text=parser->cats<3
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.ShiftExpressionContext'> [parser->cats]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [<]
2 : <class 'CParser.CParser.ShiftExpressionContext'> [3]
-------
Text=cgc_fdprintf(STDOUT,"%s",nyan_cat)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_fdprintf(STDOUT,"%s",nyan_cat)]
-------
Text=buf
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [buf]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=i<cgc_array_length(parser->nyan_says)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [i<cgc_array_length(parser->nyan_says)]
-------
Text=++i
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [++i]
-------
Text=kty_item_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [kty_item_t]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=item
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_array_get(parser->nyan_says,i)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_array_get(parser->nyan_says,i)]
-------
Text=cgc_strcpy(c,item->item.i_string.s)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_strcpy(c,item->item.i_string.s)]
-------
Text=c
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [c]
-------
Text=+=
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=item->item.i_string.len
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [item->item.i_string.len]
-------
Text=cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)]
-------
Text=cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")]
-------
Text=cgc_exit(0)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_exit(0)]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=cgc_fdprintf(STDOUT," 1. Import KTY\n")
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_fdprintf(STDOUT," 1. Import KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 2. Print KTY\n")
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_fdprintf(STDOUT," 2. Print KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 3. Quit\n")
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_fdprintf(STDOUT," 3. Quit\n")]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=MAX_KTY_LENGTH
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [MAX_KTY_LENGTH]
-------
Text=16
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [16]
-------
Text=cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")]
-------
Text=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))]
-------
Text=cgc_kty_init(parser)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_kty_init(parser)]
-------
Text=!=
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_quit()]
-------
Text=cgc_menu()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_menu()]
-------
Text=cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')>0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [>]
2 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=menu
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_strtol(cgc_select,NULL,10)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_strtol(cgc_select,NULL,10)]
-------
Text=menu
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [menu]
-------
Text=case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");]
-------
Text=break;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [break;]
-------
Text=case2:cgc_print_kty();
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [case2:cgc_print_kty();]
-------
Text=break;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [break;]
-------
Text=case3:cgc_quit();
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [case3:cgc_quit();]
-------
Text=break;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [break;]
-------
Text=case777:cgc_nyan();
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [case777:cgc_nyan();]
-------
Text=break;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [break;]
-------
Text=default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");]
-------
Text=break;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [break;]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=buf
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [buf]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=i<len
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.ShiftExpressionContext'> [i]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [<]
2 : <class 'CParser.CParser.ShiftExpressionContext'> [len]
-------
Text=++i
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [++i]
-------
Text=cgc_receive(fd,c,1,&rx)!=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_receive(fd,c,1,&rx)!=0]
-------
Text=||
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=rx==0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [rx==0]
-------
Text=-1
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [-1]
-------
Text=*(c++)==delim
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [*(c++)==delim]
-------
Text=c-1
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [c-1]
-------
Text='\0'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\0']
-------
Text=c-buf
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [c-buf]
-------
Text=my_kty
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=my_kty
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [my_kty]
-------
Text=my_kty
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=parser->loads(buf)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [parser->loads(buf)]
-------
Text=my_kty
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=my_kty
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [parser->dumps(my_kty)]
-------
Text=1024
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [1024]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ["\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"]
-------
Text=my_kty
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [parser->dumps(my_kty)]
-------
Text=parser->cats
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [parser->cats]
-------
Text=<
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=3
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [3]
-------
Text=cgc_fdprintf(STDOUT,"%s",nyan_cat)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_fdprintf(STDOUT,"%s",nyan_cat)]
-------
Text=buf
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [buf]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=i<cgc_array_length(parser->nyan_says)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.ShiftExpressionContext'> [i]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [<]
2 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_array_length(parser->nyan_says)]
-------
Text=++i
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [++i]
-------
Text=kty_item_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_array_get(parser->nyan_says,i)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_array_get(parser->nyan_says,i)]
-------
Text=cgc_strcpy(c,item->item.i_string.s)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_strcpy(c,item->item.i_string.s)]
-------
Text=c
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [c]
-------
Text=item->item.i_string.len
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [item->item.i_string.len]
-------
Text=cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)]
-------
Text=cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")]
-------
Text=cgc_exit(0)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_exit(0)]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=cgc_fdprintf(STDOUT," 1. Import KTY\n")
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_fdprintf(STDOUT," 1. Import KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 2. Print KTY\n")
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_fdprintf(STDOUT," 2. Print KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 3. Quit\n")
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_fdprintf(STDOUT," 3. Quit\n")]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=MAX_KTY_LENGTH
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [MAX_KTY_LENGTH]
-------
Text=16
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [16]
-------
Text=cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")]
-------
Text=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))]
-------
Text=cgc_kty_init(parser)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_kty_init(parser)]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_quit()]
-------
Text=cgc_menu()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_menu()]
-------
Text=cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')]
-------
Text=>
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=cgc_strtol(cgc_select,NULL,10)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_strtol(cgc_select,NULL,10)]
-------
Text=menu
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [menu]
-------
Text=case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.LabeledStatementContext'> [case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");]
-------
Text=break;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [break;]
-------
Text=case2:cgc_print_kty();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.LabeledStatementContext'> [case2:cgc_print_kty();]
-------
Text=break;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [break;]
-------
Text=case3:cgc_quit();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.LabeledStatementContext'> [case3:cgc_quit();]
-------
Text=break;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [break;]
-------
Text=case777:cgc_nyan();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.LabeledStatementContext'> [case777:cgc_nyan();]
-------
Text=break;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [break;]
-------
Text=default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.LabeledStatementContext'> [default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");]
-------
Text=break;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [break;]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=buf
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [buf]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=i
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [i]
-------
Text=<
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=len
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [len]
-------
Text=++i
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [++i]
-------
Text=cgc_receive(fd,c,1,&rx)!=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_receive(fd,c,1,&rx)!=0]
-------
Text=rx==0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [rx==0]
-------
Text=-1
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [-1]
-------
Text=*(c++)==delim
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [*(c++)==delim]
-------
Text=c-1
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [c-1]
-------
Text='\0'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\0']
-------
Text=c-buf
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [c]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [-]
2 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [buf]
-------
Text=my_kty
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=my_kty
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=my_kty
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=parser->loads(buf)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [parser->loads(buf)]
-------
Text=my_kty
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=my_kty
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [parser->dumps(my_kty)]
-------
Text=1024
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [1024]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ["\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"]
-------
Text=my_kty
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [parser->dumps(my_kty)]
-------
Text=parser->cats
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [parser->cats]
-------
Text=3
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [3]
-------
Text=cgc_fdprintf(STDOUT,"%s",nyan_cat)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_fdprintf(STDOUT,"%s",nyan_cat)]
-------
Text=buf
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [buf]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=i
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [i]
-------
Text=<
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_array_length(parser->nyan_says)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_array_length(parser->nyan_says)]
-------
Text=++i
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [++i]
-------
Text=cgc_array_get(parser->nyan_says,i)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_array_get(parser->nyan_says,i)]
-------
Text=cgc_strcpy(c,item->item.i_string.s)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_strcpy(c,item->item.i_string.s)]
-------
Text=c
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=item->item.i_string.len
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [item->item.i_string.len]
-------
Text=cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)]
-------
Text=cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")]
-------
Text=cgc_exit(0)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_exit(0)]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=cgc_fdprintf(STDOUT," 1. Import KTY\n")
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_fdprintf(STDOUT," 1. Import KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 2. Print KTY\n")
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_fdprintf(STDOUT," 2. Print KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 3. Quit\n")
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_fdprintf(STDOUT," 3. Quit\n")]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=MAX_KTY_LENGTH
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [MAX_KTY_LENGTH]
-------
Text=16
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [16]
-------
Text=cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")]
-------
Text=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))]
-------
Text=cgc_kty_init(parser)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_kty_init(parser)]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_quit()]
-------
Text=cgc_menu()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_menu()]
-------
Text=cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=cgc_strtol(cgc_select,NULL,10)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_strtol(cgc_select,NULL,10)]
-------
Text=menu
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [menu]
-------
Text=case1:if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");
Type=<class 'CParser.CParser.LabeledStatementContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [case]
1 : <class 'CParser.CParser.ConstantExpressionContext'> [1]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [:]
3 : <class 'CParser.CParser.StatementContext'> [if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");]
-------
Text=break;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [break]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=case2:cgc_print_kty();
Type=<class 'CParser.CParser.LabeledStatementContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [case]
1 : <class 'CParser.CParser.ConstantExpressionContext'> [2]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [:]
3 : <class 'CParser.CParser.StatementContext'> [cgc_print_kty();]
-------
Text=break;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [break]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=case3:cgc_quit();
Type=<class 'CParser.CParser.LabeledStatementContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [case]
1 : <class 'CParser.CParser.ConstantExpressionContext'> [3]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [:]
3 : <class 'CParser.CParser.StatementContext'> [cgc_quit();]
-------
Text=break;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [break]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=case777:cgc_nyan();
Type=<class 'CParser.CParser.LabeledStatementContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [case]
1 : <class 'CParser.CParser.ConstantExpressionContext'> [777]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [:]
3 : <class 'CParser.CParser.StatementContext'> [cgc_nyan();]
-------
Text=break;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [break]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=default:cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");
Type=<class 'CParser.CParser.LabeledStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [default]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [:]
2 : <class 'CParser.CParser.StatementContext'> [cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");]
-------
Text=break;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [break]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=buf
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [buf]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=i
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [i]
-------
Text=len
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [len]
-------
Text=++i
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [++i]
-------
Text=cgc_receive(fd,c,1,&rx)!=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_receive(fd,c,1,&rx)!=0]
-------
Text=rx==0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [rx==0]
-------
Text=-1
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [-1]
-------
Text=*(c++)==delim
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [*(c++)==delim]
-------
Text=c-1
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [c-1]
-------
Text='\0'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\0']
-------
Text=c
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [c]
-------
Text=-
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buf
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [buf]
-------
Text=my_kty
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=parser->loads(buf)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [parser->loads(buf)]
-------
Text=my_kty
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=my_kty
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [parser->dumps(my_kty)]
-------
Text=1024
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [1024]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ["\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"]
-------
Text=my_kty
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [parser->dumps(my_kty)]
-------
Text=parser->cats
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [parser->cats]
-------
Text=3
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [3]
-------
Text=cgc_fdprintf(STDOUT,"%s",nyan_cat)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_fdprintf(STDOUT,"%s",nyan_cat)]
-------
Text=buf
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [buf]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=i
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [i]
-------
Text=cgc_array_length(parser->nyan_says)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_array_length(parser->nyan_says)]
-------
Text=++i
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [++i]
-------
Text=cgc_array_get(parser->nyan_says,i)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_array_get(parser->nyan_says,i)]
-------
Text=cgc_strcpy(c,item->item.i_string.s)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_strcpy(c,item->item.i_string.s)]
-------
Text=item->item.i_string.len
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [item->item.i_string.len]
-------
Text=cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)]
-------
Text=cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")]
-------
Text=cgc_exit(0)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_exit(0)]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=cgc_fdprintf(STDOUT," 1. Import KTY\n")
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_fdprintf(STDOUT," 1. Import KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 2. Print KTY\n")
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_fdprintf(STDOUT," 2. Print KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 3. Quit\n")
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_fdprintf(STDOUT," 3. Quit\n")]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=MAX_KTY_LENGTH
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [MAX_KTY_LENGTH]
-------
Text=16
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [16]
-------
Text=cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")]
-------
Text=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))]
-------
Text=cgc_kty_init(parser)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_kty_init(parser)]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_quit()]
-------
Text=cgc_menu()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_menu()]
-------
Text=cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=cgc_strtol(cgc_select,NULL,10)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_strtol(cgc_select,NULL,10)]
-------
Text=menu
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [menu]
-------
Text=case
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.ConstantExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [1]
-------
Text=:
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");]
-------
Text=break
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=case
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=2
Type=<class 'CParser.CParser.ConstantExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [2]
-------
Text=:
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_print_kty();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_print_kty();]
-------
Text=break
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=case
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=3
Type=<class 'CParser.CParser.ConstantExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [3]
-------
Text=:
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_quit();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_quit();]
-------
Text=break
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=case
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=777
Type=<class 'CParser.CParser.ConstantExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [777]
-------
Text=:
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_nyan();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_nyan();]
-------
Text=break
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=default
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=:
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");]
-------
Text=break
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=buf
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [buf]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=i
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [i]
-------
Text=len
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [len]
-------
Text=++i
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [++i]
-------
Text=cgc_receive(fd,c,1,&rx)!=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_receive(fd,c,1,&rx)!=0]
-------
Text=rx==0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [rx==0]
-------
Text=-1
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [-1]
-------
Text=*(c++)==delim
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [*(c++)==delim]
-------
Text=c-1
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [c-1]
-------
Text='\0'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\0']
-------
Text=c
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [c]
-------
Text=buf
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [buf]
-------
Text=my_kty
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=parser->loads(buf)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [parser->loads(buf)]
-------
Text=my_kty
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=my_kty
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [parser->dumps(my_kty)]
-------
Text=1024
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [1024]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ["\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"]
-------
Text=my_kty
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [parser->dumps(my_kty)]
-------
Text=parser->cats
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [parser->cats]
-------
Text=3
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [3]
-------
Text=cgc_fdprintf(STDOUT,"%s",nyan_cat)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_fdprintf(STDOUT,"%s",nyan_cat)]
-------
Text=buf
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [buf]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=i
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [i]
-------
Text=cgc_array_length(parser->nyan_says)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_array_length(parser->nyan_says)]
-------
Text=++i
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [++i]
-------
Text=cgc_array_get(parser->nyan_says,i)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_array_get(parser->nyan_says,i)]
-------
Text=cgc_strcpy(c,item->item.i_string.s)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_strcpy(c,item->item.i_string.s)]
-------
Text=item->item.i_string.len
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [item->item.i_string.len]
-------
Text=cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)]
-------
Text=cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")]
-------
Text=cgc_exit(0)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_exit(0)]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=cgc_fdprintf(STDOUT," 1. Import KTY\n")
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_fdprintf(STDOUT," 1. Import KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 2. Print KTY\n")
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_fdprintf(STDOUT," 2. Print KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 3. Quit\n")
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_fdprintf(STDOUT," 3. Quit\n")]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=MAX_KTY_LENGTH
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [MAX_KTY_LENGTH]
-------
Text=16
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [16]
-------
Text=cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")]
-------
Text=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))]
-------
Text=cgc_kty_init(parser)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_kty_init(parser)]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_quit()]
-------
Text=cgc_menu()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_menu()]
-------
Text=cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=cgc_strtol(cgc_select,NULL,10)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_strtol(cgc_select,NULL,10)]
-------
Text=menu
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [menu]
-------
Text=1
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [1]
-------
Text=if(cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0)cgc_import_kty(buf);elsecgc_fdprintf(STDOUT,"Error!\n");
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [cgc_import_kty(buf);]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [cgc_fdprintf(STDOUT,"Error!\n");]
-------
Text=2
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [2]
-------
Text=cgc_print_kty();
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_print_kty()]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=3
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [3]
-------
Text=cgc_quit();
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_quit()]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=777
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [777]
-------
Text=cgc_nyan();
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_nyan()]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n");
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=buf
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [buf]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=i
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [i]
-------
Text=len
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [len]
-------
Text=++i
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [++i]
-------
Text=cgc_receive(fd,c,1,&rx)!=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_receive(fd,c,1,&rx)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [!=]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=rx==0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [rx]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=-1
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [-1]
-------
Text=*(c++)==delim
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [*(c++)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [delim]
-------
Text=c-1
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [c-1]
-------
Text='\0'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\0']
-------
Text=c
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [c]
-------
Text=buf
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [buf]
-------
Text=my_kty
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=parser->loads(buf)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [parser->loads(buf)]
-------
Text=my_kty
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=my_kty
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [parser->dumps(my_kty)]
-------
Text=1024
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [1024]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ["\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"]
-------
Text=my_kty
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [parser->dumps(my_kty)]
-------
Text=parser->cats
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [parser->cats]
-------
Text=3
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [3]
-------
Text=cgc_fdprintf(STDOUT,"%s",nyan_cat)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_fdprintf(STDOUT,"%s",nyan_cat)]
-------
Text=buf
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [buf]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=i
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [i]
-------
Text=cgc_array_length(parser->nyan_says)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_array_length(parser->nyan_says)]
-------
Text=++i
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [++i]
-------
Text=cgc_array_get(parser->nyan_says,i)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_array_get(parser->nyan_says,i)]
-------
Text=cgc_strcpy(c,item->item.i_string.s)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_strcpy(c,item->item.i_string.s)]
-------
Text=item->item.i_string.len
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [item->item.i_string.len]
-------
Text=cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)]
-------
Text=cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")]
-------
Text=cgc_exit(0)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_exit(0)]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=cgc_fdprintf(STDOUT," 1. Import KTY\n")
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_fdprintf(STDOUT," 1. Import KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 2. Print KTY\n")
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_fdprintf(STDOUT," 2. Print KTY\n")]
-------
Text=cgc_fdprintf(STDOUT," 3. Quit\n")
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_fdprintf(STDOUT," 3. Quit\n")]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_fdprintf(STDOUT,"=======================\n")]
-------
Text=MAX_KTY_LENGTH
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [MAX_KTY_LENGTH]
-------
Text=16
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [16]
-------
Text=cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")]
-------
Text=(kty_parser_t*)cgc_malloc(sizeof(kty_parser_t))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [kty_parser_t*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [cgc_malloc(sizeof(kty_parser_t))]
-------
Text=cgc_kty_init(parser)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_kty_init(parser)]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_quit()]
-------
Text=cgc_menu()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_menu()]
-------
Text=cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=cgc_strtol(cgc_select,NULL,10)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_strtol(cgc_select,NULL,10)]
-------
Text=menu
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [menu]
-------
Text=1
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [1]
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_import_kty(buf);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_import_kty(buf);]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"Error!\n");
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_fdprintf(STDOUT,"Error!\n");]
-------
Text=2
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [2]
-------
Text=cgc_print_kty()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_print_kty()]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=3
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [3]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_quit()]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=777
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [777]
-------
Text=cgc_nyan()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_nyan()]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=buf
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [buf]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=i
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [i]
-------
Text=len
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [len]
-------
Text=++i
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [++]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [i]
-------
Text=cgc_receive(fd,c,1,&rx)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_receive(fd,c,1,&rx)]
-------
Text=!=
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=rx
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [rx]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=-1
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [-1]
-------
Text=*(c++)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [*(c++)]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=delim
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [delim]
-------
Text=c-1
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [c-1]
-------
Text='\0'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\0']
-------
Text=c
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [c]
-------
Text=buf
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [buf]
-------
Text=my_kty
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=parser->loads(buf)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [parser->loads(buf)]
-------
Text=my_kty
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=my_kty
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 6
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [parser]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [dumps]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
4 : <class 'CParser.CParser.ArgumentExpressionListContext'> [my_kty]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=1024
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1024]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ["\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"]
-------
Text=my_kty
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=parser->dumps(my_kty)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 6
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [parser]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [dumps]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
4 : <class 'CParser.CParser.ArgumentExpressionListContext'> [my_kty]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=parser->cats
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [parser]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cats]
-------
Text=3
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [3]
-------
Text=cgc_fdprintf(STDOUT,"%s",nyan_cat)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_fdprintf]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDOUT,"%s",nyan_cat]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=buf
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [buf]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=i
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [i]
-------
Text=cgc_array_length(parser->nyan_says)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_array_length(parser->nyan_says)]
-------
Text=++i
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [++]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [i]
-------
Text=cgc_array_get(parser->nyan_says,i)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_array_get(parser->nyan_says,i)]
-------
Text=cgc_strcpy(c,item->item.i_string.s)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_strcpy(c,item->item.i_string.s)]
-------
Text=item->item.i_string.len
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [item->item.i_string.len]
-------
Text=cgc_fdprintf(STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_fdprintf]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_fdprintf(STDOUT,"\n\n=^.^=// Bye!\n\n")
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_fdprintf]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDOUT,"\n\n=^.^=// Bye!\n\n"]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_exit(0)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_exit]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [0]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_fdprintf]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDOUT,"=======================\n"]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_fdprintf(STDOUT," 1. Import KTY\n")
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_fdprintf]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDOUT," 1. Import KTY\n"]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_fdprintf(STDOUT," 2. Print KTY\n")
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_fdprintf]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDOUT," 2. Print KTY\n"]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_fdprintf(STDOUT," 3. Quit\n")
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_fdprintf]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDOUT," 3. Quit\n"]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_fdprintf(STDOUT,"=======================\n")
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_fdprintf]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDOUT,"=======================\n"]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=MAX_KTY_LENGTH
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [MAX_KTY_LENGTH]
-------
Text=16
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [16]
-------
Text=cgc_fdprintf(STDOUT,"KTY Pretty Printer v0.1\n")
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_fdprintf]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDOUT,"KTY Pretty Printer v0.1\n"]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=kty_parser_t*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [kty_parser_t*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_malloc(sizeof(kty_parser_t))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_malloc(sizeof(kty_parser_t))]
-------
Text=cgc_kty_init(parser)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_kty_init]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [parser]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_quit()]
-------
Text=cgc_menu()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_menu]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_read_until(STDIN,cgc_select,sizeof(cgc_select),'\n')
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_read_until]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDIN,cgc_select,sizeof(cgc_select),'\n']
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=cgc_strtol(cgc_select,NULL,10)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_strtol(cgc_select,NULL,10)]
-------
Text=menu
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [menu]
-------
Text=1
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [1]
-------
Text=cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0]
-------
Text=cgc_import_kty(buf);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_import_kty(buf)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n");
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=2
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [2]
-------
Text=cgc_print_kty()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_print_kty()]
-------
Text=3
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [3]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_quit()]
-------
Text=777
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [777]
-------
Text=cgc_nyan()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_nyan()]
-------
Text=cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=buf
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [buf]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=i
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [i]
-------
Text=len
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [len]
-------
Text=++
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=i
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [i]
-------
Text=cgc_receive(fd,c,1,&rx)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_receive(fd,c,1,&rx)]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=rx
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [rx]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=-1
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [-1]
-------
Text=*(c++)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [*(c++)]
-------
Text=delim
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [delim]
-------
Text=c-1
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [c-1]
-------
Text='\0'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\0']
-------
Text=c
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [c]
-------
Text=buf
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [buf]
-------
Text=my_kty
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=parser->loads(buf)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 6
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [parser]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [loads]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
4 : <class 'CParser.CParser.ArgumentExpressionListContext'> [buf]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=my_kty
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=my_kty
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=parser
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [parser]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=dumps
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=my_kty
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [my_kty]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1024
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1024]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ["\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"]
-------
Text=my_kty
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [my_kty]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=parser
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [parser]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=dumps
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=my_kty
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [my_kty]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=parser
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [parser]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cats
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=3
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [3]
-------
Text=cgc_fdprintf
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_fdprintf]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT,"%s",nyan_cat
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDOUT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> ["%s"]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [nyan_cat]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buf
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [buf]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=i
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [i]
-------
Text=cgc_array_length(parser->nyan_says)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_array_length]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [parser->nyan_says]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=++
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=i
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [i]
-------
Text=cgc_array_get(parser->nyan_says,i)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_array_get(parser->nyan_says,i)]
-------
Text=cgc_strcpy(c,item->item.i_string.s)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_strcpy(c,item->item.i_string.s)]
-------
Text=item->item.i_string.len
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [item->item.i_string.len]
-------
Text=cgc_fdprintf
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_fdprintf]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT,"NYAN SAYS...\n\"\n%s\n\"",buf
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDOUT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> ["NYAN SAYS...\n\"\n%s\n\""]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [buf]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_fdprintf]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT,"\n\n=^.^=// Bye!\n\n"
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDOUT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> ["\n\n=^.^=// Bye!\n\n"]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_exit
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_exit]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [0]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_fdprintf]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT,"=======================\n"
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDOUT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> ["=======================\n"]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_fdprintf]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT," 1. Import KTY\n"
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDOUT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [" 1. Import KTY\n"]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_fdprintf]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT," 2. Print KTY\n"
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDOUT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [" 2. Print KTY\n"]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_fdprintf]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT," 3. Quit\n"
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDOUT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [" 3. Quit\n"]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_fdprintf]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT,"=======================\n"
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDOUT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> ["=======================\n"]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=MAX_KTY_LENGTH
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [MAX_KTY_LENGTH]
-------
Text=16
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [16]
-------
Text=cgc_fdprintf
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_fdprintf]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT,"KTY Pretty Printer v0.1\n"
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDOUT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> ["KTY Pretty Printer v0.1\n"]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=kty_parser_t*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [kty_parser_t*]
-------
Text=cgc_malloc(sizeof(kty_parser_t))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_malloc(sizeof(kty_parser_t))]
-------
Text=cgc_kty_init
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_kty_init]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=parser
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [parser]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_quit()]
-------
Text=cgc_menu
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_menu]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_read_until
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_read_until]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN,cgc_select,sizeof(cgc_select),'\n'
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 7
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDIN]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [cgc_select]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(cgc_select)]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
6 : <class 'CParser.CParser.PassignmentExpressionContext'> ['\n']
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=cgc_strtol(cgc_select,NULL,10)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_strtol(cgc_select,NULL,10)]
-------
Text=menu
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [menu]
-------
Text=1
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [1]
-------
Text=cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0]
-------
Text=cgc_import_kty(buf)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_import_kty(buf)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=2
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [2]
-------
Text=cgc_print_kty()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_print_kty()]
-------
Text=3
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [3]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_quit()]
-------
Text=777
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [777]
-------
Text=cgc_nyan()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_nyan()]
-------
Text=cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=buf
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [buf]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=i
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [i]
-------
Text=len
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [len]
-------
Text=i
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [i]
-------
Text=cgc_receive(fd,c,1,&rx)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_receive(fd,c,1,&rx)]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=rx
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [rx]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=-1
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [-1]
-------
Text=*(c++)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [*(c++)]
-------
Text=delim
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [delim]
-------
Text=c-1
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [c-1]
-------
Text='\0'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\0']
-------
Text=c
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=my_kty
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=parser
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [parser]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=loads
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buf
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [buf]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=my_kty
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_fdprintf]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDOUT,"Error!\n"]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=my_kty
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=parser
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=my_kty
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [my_kty]
-------
Text=1024
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1024]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ["\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"]
-------
Text=my_kty
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=parser
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=my_kty
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [my_kty]
-------
Text=parser
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=3
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDOUT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="%s"
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ["%s"]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=nyan_cat
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [nyan_cat]
-------
Text=buf
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [buf]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=i
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [i]
-------
Text=cgc_array_length
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_array_length]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [parser->nyan_says]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=i
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [i]
-------
Text=cgc_array_get(parser->nyan_says,i)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_array_get(parser->nyan_says,i)]
-------
Text=cgc_strcpy(c,item->item.i_string.s)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_strcpy(c,item->item.i_string.s)]
-------
Text=item->item.i_string.len
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [item->item.i_string.len]
-------
Text=cgc_fdprintf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDOUT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="NYAN SAYS...\n\"\n%s\n\""
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ["NYAN SAYS...\n\"\n%s\n\""]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buf
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [buf]
-------
Text=cgc_fdprintf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDOUT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="\n\n=^.^=// Bye!\n\n"
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ["\n\n=^.^=// Bye!\n\n"]
-------
Text=cgc_exit
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=cgc_fdprintf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDOUT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="=======================\n"
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ["=======================\n"]
-------
Text=cgc_fdprintf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDOUT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=" 1. Import KTY\n"
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [" 1. Import KTY\n"]
-------
Text=cgc_fdprintf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDOUT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=" 2. Print KTY\n"
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [" 2. Print KTY\n"]
-------
Text=cgc_fdprintf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDOUT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=" 3. Quit\n"
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [" 3. Quit\n"]
-------
Text=cgc_fdprintf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDOUT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="=======================\n"
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ["=======================\n"]
-------
Text=MAX_KTY_LENGTH
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [MAX_KTY_LENGTH]
-------
Text=16
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [16]
-------
Text=cgc_fdprintf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDOUT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="KTY Pretty Printer v0.1\n"
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ["KTY Pretty Printer v0.1\n"]
-------
Text=kty_parser_t*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [kty_parser_t]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=cgc_malloc(sizeof(kty_parser_t))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_malloc]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [sizeof(kty_parser_t)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_kty_init
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=parser
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [parser]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_quit()]
-------
Text=cgc_menu
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_read_until
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDIN]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_select
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [cgc_select]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(cgc_select)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(cgc_select)]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\n'
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\n']
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_strtol(cgc_select,NULL,10)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_strtol(cgc_select,NULL,10)]
-------
Text=menu
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [menu]
-------
Text=1
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [1]
-------
Text=cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0]
-------
Text=cgc_import_kty(buf)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_import_kty(buf)]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=2
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [2]
-------
Text=cgc_print_kty()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_print_kty()]
-------
Text=3
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [3]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_quit()]
-------
Text=777
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [777]
-------
Text=cgc_nyan()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_nyan()]
-------
Text=cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=i
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=len
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=i
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_receive(fd,c,1,&rx)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_receive(fd,c,1,&rx)]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=rx
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [rx]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=-1
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [-1]
-------
Text=*(c++)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [*(c++)]
-------
Text=delim
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [delim]
-------
Text=c-1
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [c]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [-]
2 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [1]
-------
Text='\0'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=parser
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buf
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [buf]
-------
Text=cgc_fdprintf
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_fdprintf]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT,"Error!\n"
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDOUT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> ["Error!\n"]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=my_kty
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [my_kty]
-------
Text=1024
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1024]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text="\n\n\
+      o     +              o\n\
    +             o     +       +\n\
o          +\n\
    o  +           +        +\n\
+        o     o       +        o\n\
-_-_-_-_-_-_-_,------,      o\n\
_-_-_-_-_-_-_-|   /\\_/\\\n\
-_-_-_-_-_-_-~|__( ^ .^)  +     +\n\
_-_-_-_-_-_-_-\"\"  \"\"\n\
+      o         o   +       o\n\
    +         +\n\
o        o         o      o     +\n\
    o           +\n\
+      +     o        o      +\n\n"
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=my_kty
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [my_kty]
-------
Text=STDOUT
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDOUT]
-------
Text="%s"
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ["%s"]
-------
Text=nyan_cat
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [nyan_cat]
-------
Text=buf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=i
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_array_length
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [parser->nyan_says]
-------
Text=i
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_array_get(parser->nyan_says,i)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_array_get(parser->nyan_says,i)]
-------
Text=cgc_strcpy(c,item->item.i_string.s)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_strcpy(c,item->item.i_string.s)]
-------
Text=item->item.i_string.len
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [item->item.i_string.len]
-------
Text=STDOUT
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDOUT]
-------
Text="NYAN SAYS...\n\"\n%s\n\""
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ["NYAN SAYS...\n\"\n%s\n\""]
-------
Text=buf
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [buf]
-------
Text=STDOUT
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDOUT]
-------
Text="\n\n=^.^=// Bye!\n\n"
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ["\n\n=^.^=// Bye!\n\n"]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=STDOUT
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDOUT]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ["=======================\n"]
-------
Text=STDOUT
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDOUT]
-------
Text=" 1. Import KTY\n"
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [" 1. Import KTY\n"]
-------
Text=STDOUT
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDOUT]
-------
Text=" 2. Print KTY\n"
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [" 2. Print KTY\n"]
-------
Text=STDOUT
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDOUT]
-------
Text=" 3. Quit\n"
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [" 3. Quit\n"]
-------
Text=STDOUT
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDOUT]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ["=======================\n"]
-------
Text=MAX_KTY_LENGTH
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [MAX_KTY_LENGTH]
-------
Text=16
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [16]
-------
Text=STDOUT
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDOUT]
-------
Text="KTY Pretty Printer v0.1\n"
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ["KTY Pretty Printer v0.1\n"]
-------
Text=kty_parser_t
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [kty_parser_t]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=cgc_malloc
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_malloc]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(kty_parser_t)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(kty_parser_t)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=parser
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [parser]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_quit()]
-------
Text=STDIN
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDIN]
-------
Text=cgc_select
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [cgc_select]
-------
Text=sizeof(cgc_select)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(cgc_select)]
-------
Text='\n'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\n']
-------
Text=cgc_strtol(cgc_select,NULL,10)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_strtol(cgc_select,NULL,10)]
-------
Text=menu
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [menu]
-------
Text=1
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [1]
-------
Text=cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0]
-------
Text=cgc_import_kty(buf)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_import_kty(buf)]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=2
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [2]
-------
Text=cgc_print_kty()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_print_kty()]
-------
Text=3
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [3]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_quit()]
-------
Text=777
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [777]
-------
Text=cgc_nyan()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_nyan()]
-------
Text=cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_receive(fd,c,1,&rx)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_receive(fd,c,1,&rx)]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=rx
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [rx]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=-1
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [-1]
-------
Text=*(c++)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [*(c++)]
-------
Text=delim
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [delim]
-------
Text=c
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [c]
-------
Text=-
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [1]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=buf
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [buf]
-------
Text=cgc_fdprintf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDOUT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="Error!\n"
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ["Error!\n"]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=my_kty
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [my_kty]
-------
Text=1024
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=my_kty
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [my_kty]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDOUT]
-------
Text="%s"
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ["%s"]
-------
Text=nyan_cat
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [nyan_cat]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [parser->nyan_says]
-------
Text=cgc_array_get(parser->nyan_says,i)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_array_get(parser->nyan_says,i)]
-------
Text=cgc_strcpy(c,item->item.i_string.s)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_strcpy(c,item->item.i_string.s)]
-------
Text=item->item.i_string.len
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [item->item.i_string.len]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDOUT]
-------
Text="NYAN SAYS...\n\"\n%s\n\""
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ["NYAN SAYS...\n\"\n%s\n\""]
-------
Text=buf
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [buf]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDOUT]
-------
Text="\n\n=^.^=// Bye!\n\n"
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ["\n\n=^.^=// Bye!\n\n"]
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDOUT]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ["=======================\n"]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDOUT]
-------
Text=" 1. Import KTY\n"
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [" 1. Import KTY\n"]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDOUT]
-------
Text=" 2. Print KTY\n"
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [" 2. Print KTY\n"]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDOUT]
-------
Text=" 3. Quit\n"
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [" 3. Quit\n"]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDOUT]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ["=======================\n"]
-------
Text=MAX_KTY_LENGTH
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=16
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDOUT]
-------
Text="KTY Pretty Printer v0.1\n"
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ["KTY Pretty Printer v0.1\n"]
-------
Text=kty_parser_t
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [kty_parser_t]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_malloc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(kty_parser_t)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(kty_parser_t)]
-------
Text=parser
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [parser]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_quit()]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDIN]
-------
Text=cgc_select
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [cgc_select]
-------
Text=sizeof(cgc_select)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(cgc_select)]
-------
Text='\n'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\n']
-------
Text=cgc_strtol(cgc_select,NULL,10)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_strtol(cgc_select,NULL,10)]
-------
Text=menu
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [menu]
-------
Text=1
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [1]
-------
Text=cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0]
-------
Text=cgc_import_kty(buf)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_import_kty(buf)]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=2
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [2]
-------
Text=cgc_print_kty()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_print_kty()]
-------
Text=3
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [3]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_quit()]
-------
Text=777
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [777]
-------
Text=cgc_nyan()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_nyan()]
-------
Text=cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")]
-------
Text=cgc_receive(fd,c,1,&rx)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_receive(fd,c,1,&rx)]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=rx
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [rx]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=-1
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [-1]
-------
Text=*(c++)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [*]
1 : <class 'CParser.CParser.CastExpressionContext'> [(c++)]
-------
Text=delim
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [delim]
-------
Text=c
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [c]
-------
Text=1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=buf
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [buf]
-------
Text=STDOUT
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDOUT]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ["Error!\n"]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=my_kty
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [my_kty]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=my_kty
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [my_kty]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDOUT]
-------
Text="%s"
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ["%s"]
-------
Text=nyan_cat
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [nyan_cat]
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [parser->nyan_says]
-------
Text=cgc_array_get(parser->nyan_says,i)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_array_get(parser->nyan_says,i)]
-------
Text=cgc_strcpy(c,item->item.i_string.s)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_strcpy(c,item->item.i_string.s)]
-------
Text=item->item.i_string.len
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [item->item.i_string.len]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDOUT]
-------
Text="NYAN SAYS...\n\"\n%s\n\""
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ["NYAN SAYS...\n\"\n%s\n\""]
-------
Text=buf
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [buf]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDOUT]
-------
Text="\n\n=^.^=// Bye!\n\n"
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ["\n\n=^.^=// Bye!\n\n"]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDOUT]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ["=======================\n"]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDOUT]
-------
Text=" 1. Import KTY\n"
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [" 1. Import KTY\n"]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDOUT]
-------
Text=" 2. Print KTY\n"
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [" 2. Print KTY\n"]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDOUT]
-------
Text=" 3. Quit\n"
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [" 3. Quit\n"]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDOUT]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ["=======================\n"]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDOUT]
-------
Text="KTY Pretty Printer v0.1\n"
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ["KTY Pretty Printer v0.1\n"]
-------
Text=kty_parser_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(kty_parser_t)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(kty_parser_t)]
-------
Text=parser
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [parser]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_quit()]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDIN]
-------
Text=cgc_select
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_select]
-------
Text=sizeof(cgc_select)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(cgc_select)]
-------
Text='\n'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\n']
-------
Text=cgc_strtol(cgc_select,NULL,10)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_strtol(cgc_select,NULL,10)]
-------
Text=menu
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [menu]
-------
Text=1
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [1]
-------
Text=cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0]
-------
Text=cgc_import_kty(buf)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_import_kty(buf)]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=2
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [2]
-------
Text=cgc_print_kty()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_print_kty()]
-------
Text=3
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [3]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_quit()]
-------
Text=777
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [777]
-------
Text=cgc_nyan()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_nyan()]
-------
Text=cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")]
-------
Text=cgc_receive(fd,c,1,&rx)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_receive]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [fd,c,1,&rx]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=rx
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [rx]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=-1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [-1]
-------
Text=*
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=(c++)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [(c++)]
-------
Text=delim
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [delim]
-------
Text=c
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [c]
-------
Text=1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=buf
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [buf]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDOUT]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ["Error!\n"]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_fdprintf]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDOUT,"Error!\n"]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=my_kty
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_fdprintf]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDOUT,"Error!\n"]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=my_kty
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="%s"
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ["%s"]
-------
Text=nyan_cat
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [parser->nyan_says]
-------
Text=cgc_array_get(parser->nyan_says,i)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_array_get(parser->nyan_says,i)]
-------
Text=cgc_strcpy(c,item->item.i_string.s)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_strcpy]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [c,item->item.i_string.s]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=item->item.i_string.len
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [item->item.i_string.len]
-------
Text=STDOUT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="NYAN SAYS...\n\"\n%s\n\""
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ["NYAN SAYS...\n\"\n%s\n\""]
-------
Text=buf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="\n\n=^.^=// Bye!\n\n"
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ["\n\n=^.^=// Bye!\n\n"]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=STDOUT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="=======================\n"
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ["=======================\n"]
-------
Text=STDOUT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=" 1. Import KTY\n"
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [" 1. Import KTY\n"]
-------
Text=STDOUT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=" 2. Print KTY\n"
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [" 2. Print KTY\n"]
-------
Text=STDOUT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=" 3. Quit\n"
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [" 3. Quit\n"]
-------
Text=STDOUT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="=======================\n"
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ["=======================\n"]
-------
Text=STDOUT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="KTY Pretty Printer v0.1\n"
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ["KTY Pretty Printer v0.1\n"]
-------
Text=sizeof(kty_parser_t)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(kty_parser_t)]
-------
Text=parser
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_fdprintf]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDOUT,"Error!\n"]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_quit]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=STDIN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_select
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(cgc_select)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(cgc_select)]
-------
Text='\n'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\n']
-------
Text=cgc_strtol(cgc_select,NULL,10)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_strtol(cgc_select,NULL,10)]
-------
Text=menu
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [menu]
-------
Text=1
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [1]
-------
Text=cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0]
-------
Text=cgc_import_kty(buf)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_import_kty(buf)]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=2
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [2]
-------
Text=cgc_print_kty()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_print_kty()]
-------
Text=3
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [3]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_quit()]
-------
Text=777
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [777]
-------
Text=cgc_nyan()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_nyan()]
-------
Text=cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")]
-------
Text=cgc_receive
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_receive]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=fd,c,1,&rx
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 7
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [fd]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [c]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [1]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
6 : <class 'CParser.CParser.PassignmentExpressionContext'> [&rx]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=rx
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [rx]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=-1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [-]
1 : <class 'CParser.CParser.CastExpressionContext'> [1]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(c++)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [(c++)]
-------
Text=delim
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [delim]
-------
Text=c
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [c]
-------
Text=1
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=buf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDOUT]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ["Error!\n"]
-------
Text=cgc_fdprintf
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_fdprintf]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT,"Error!\n"
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDOUT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> ["Error!\n"]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_fdprintf]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT,"Error!\n"
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDOUT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> ["Error!\n"]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="%s"
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ["%s"]
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [parser->nyan_says]
-------
Text=cgc_array_get(parser->nyan_says,i)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_array_get]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [parser->nyan_says,i]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_strcpy
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_strcpy]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=c,item->item.i_string.s
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [c]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [item->item.i_string.s]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=item->item.i_string.len
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 7
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [item]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [item]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [.]
4 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [i_string]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [.]
6 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [len]
-------
Text="NYAN SAYS...\n\"\n%s\n\""
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ["NYAN SAYS...\n\"\n%s\n\""]
-------
Text="\n\n=^.^=// Bye!\n\n"
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ["\n\n=^.^=// Bye!\n\n"]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ["=======================\n"]
-------
Text=" 1. Import KTY\n"
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [" 1. Import KTY\n"]
-------
Text=" 2. Print KTY\n"
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [" 2. Print KTY\n"]
-------
Text=" 3. Quit\n"
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [" 3. Quit\n"]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ["=======================\n"]
-------
Text="KTY Pretty Printer v0.1\n"
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ["KTY Pretty Printer v0.1\n"]
-------
Text=sizeof(kty_parser_t)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(kty_parser_t)]
-------
Text=cgc_fdprintf
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_fdprintf]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT,"Error!\n"
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDOUT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> ["Error!\n"]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_quit
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_quit]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(cgc_select)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(cgc_select)]
-------
Text='\n'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\n']
-------
Text=cgc_strtol(cgc_select,NULL,10)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_strtol]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [cgc_select,NULL,10]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=menu
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [menu]
-------
Text=1
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [1]
-------
Text=cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0]
-------
Text=cgc_import_kty(buf)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_import_kty(buf)]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=2
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [2]
-------
Text=cgc_print_kty()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_print_kty()]
-------
Text=3
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [3]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_quit()]
-------
Text=777
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [777]
-------
Text=cgc_nyan()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_nyan()]
-------
Text=cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")]
-------
Text=cgc_receive
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=fd
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [fd]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=c
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [c]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [1]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&rx
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [&rx]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=rx
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [-]
-------
Text=1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1]
-------
Text=(c++)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(c++)]
-------
Text=delim
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=c
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [c]
-------
Text=1
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=STDOUT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="Error!\n"
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ["Error!\n"]
-------
Text=cgc_fdprintf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDOUT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="Error!\n"
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ["Error!\n"]
-------
Text=cgc_fdprintf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDOUT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="Error!\n"
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ["Error!\n"]
-------
Text="%s"
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ["%s"]
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [parser->nyan_says]
-------
Text=cgc_array_get
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_array_get]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=parser->nyan_says,i
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [parser->nyan_says]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [i]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_strcpy
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=c
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [c]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=item->item.i_string.s
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [item->item.i_string.s]
-------
Text=item
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [item]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=item
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=.
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=i_string
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=.
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=len
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="NYAN SAYS...\n\"\n%s\n\""
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ["NYAN SAYS...\n\"\n%s\n\""]
-------
Text="\n\n=^.^=// Bye!\n\n"
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ["\n\n=^.^=// Bye!\n\n"]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ["=======================\n"]
-------
Text=" 1. Import KTY\n"
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [" 1. Import KTY\n"]
-------
Text=" 2. Print KTY\n"
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [" 2. Print KTY\n"]
-------
Text=" 3. Quit\n"
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [" 3. Quit\n"]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ["=======================\n"]
-------
Text="KTY Pretty Printer v0.1\n"
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ["KTY Pretty Printer v0.1\n"]
-------
Text=sizeof(kty_parser_t)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(kty_parser_t)]
-------
Text=cgc_fdprintf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDOUT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="Error!\n"
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ["Error!\n"]
-------
Text=cgc_quit
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(cgc_select)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(cgc_select)]
-------
Text='\n'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\n']
-------
Text=cgc_strtol
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_strtol]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_select,NULL,10
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [cgc_select]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [NULL]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [10]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=menu
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [1]
-------
Text=cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')>0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [>]
2 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=cgc_import_kty(buf)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_import_kty(buf)]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=2
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [2]
-------
Text=cgc_print_kty()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_print_kty()]
-------
Text=3
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [3]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_quit()]
-------
Text=777
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [777]
-------
Text=cgc_nyan()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_nyan()]
-------
Text=cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")]
-------
Text=fd
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [fd]
-------
Text=c
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [c]
-------
Text=1
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [1]
-------
Text=&rx
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [&rx]
-------
Text=-
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1]
-------
Text=(c++)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [c++]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=c
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="Error!\n"
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ["Error!\n"]
-------
Text=STDOUT
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDOUT]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ["Error!\n"]
-------
Text=STDOUT
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDOUT]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ["Error!\n"]
-------
Text="%s"
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ["%s"]
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [parser->nyan_says]
-------
Text=cgc_array_get
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [parser->nyan_says]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=i
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [i]
-------
Text=c
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [c]
-------
Text=item->item.i_string.s
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [item->item.i_string.s]
-------
Text=item
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="NYAN SAYS...\n\"\n%s\n\""
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ["NYAN SAYS...\n\"\n%s\n\""]
-------
Text="\n\n=^.^=// Bye!\n\n"
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ["\n\n=^.^=// Bye!\n\n"]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ["=======================\n"]
-------
Text=" 1. Import KTY\n"
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [" 1. Import KTY\n"]
-------
Text=" 2. Print KTY\n"
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [" 2. Print KTY\n"]
-------
Text=" 3. Quit\n"
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [" 3. Quit\n"]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ["=======================\n"]
-------
Text="KTY Pretty Printer v0.1\n"
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ["KTY Pretty Printer v0.1\n"]
-------
Text=sizeof(kty_parser_t)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(kty_parser_t)]
-------
Text=STDOUT
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDOUT]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ["Error!\n"]
-------
Text=sizeof(cgc_select)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(cgc_select)]
-------
Text='\n'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\n']
-------
Text=cgc_strtol
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_select
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [cgc_select]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [NULL]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=10
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [10]
-------
Text=1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1]
-------
Text=cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')]
-------
Text=>
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=cgc_import_kty(buf)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_import_kty(buf)]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=2
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [2]
-------
Text=cgc_print_kty()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_print_kty()]
-------
Text=3
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [3]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_quit()]
-------
Text=777
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [777]
-------
Text=cgc_nyan()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_nyan()]
-------
Text=cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")]
-------
Text=fd
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [fd]
-------
Text=c
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [c]
-------
Text=1
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [1]
-------
Text=&rx
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [&rx]
-------
Text=1
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=c++
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [c++]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="Error!\n"
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ["Error!\n"]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDOUT]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ["Error!\n"]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDOUT]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ["Error!\n"]
-------
Text="%s"
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ["%s"]
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [parser->nyan_says]
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [parser->nyan_says]
-------
Text=i
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [i]
-------
Text=c
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [c]
-------
Text=item->item.i_string.s
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [item->item.i_string.s]
-------
Text="NYAN SAYS...\n\"\n%s\n\""
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ["NYAN SAYS...\n\"\n%s\n\""]
-------
Text="\n\n=^.^=// Bye!\n\n"
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ["\n\n=^.^=// Bye!\n\n"]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ["=======================\n"]
-------
Text=" 1. Import KTY\n"
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [" 1. Import KTY\n"]
-------
Text=" 2. Print KTY\n"
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [" 2. Print KTY\n"]
-------
Text=" 3. Quit\n"
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [" 3. Quit\n"]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ["=======================\n"]
-------
Text="KTY Pretty Printer v0.1\n"
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ["KTY Pretty Printer v0.1\n"]
-------
Text=sizeof(kty_parser_t)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(kty_parser_t)]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDOUT]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ["Error!\n"]
-------
Text=sizeof(cgc_select)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(cgc_select)]
-------
Text='\n'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\n']
-------
Text=cgc_select
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [cgc_select]
-------
Text=NULL
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [NULL]
-------
Text=10
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [10]
-------
Text=1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1]
-------
Text=cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=cgc_import_kty(buf)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_import_kty(buf)]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=2
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [2]
-------
Text=cgc_print_kty()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_print_kty()]
-------
Text=3
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [3]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_quit()]
-------
Text=777
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [777]
-------
Text=cgc_nyan()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_nyan()]
-------
Text=cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")]
-------
Text=fd
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [fd]
-------
Text=c
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [c]
-------
Text=1
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [1]
-------
Text=&rx
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [&rx]
-------
Text=1
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1]
-------
Text=c++
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [c++]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ["Error!\n"]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDOUT]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ["Error!\n"]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDOUT]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ["Error!\n"]
-------
Text="%s"
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ["%s"]
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [parser->nyan_says]
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [parser->nyan_says]
-------
Text=i
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [i]
-------
Text=c
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [c]
-------
Text=item->item.i_string.s
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [item->item.i_string.s]
-------
Text="NYAN SAYS...\n\"\n%s\n\""
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ["NYAN SAYS...\n\"\n%s\n\""]
-------
Text="\n\n=^.^=// Bye!\n\n"
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ["\n\n=^.^=// Bye!\n\n"]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ["=======================\n"]
-------
Text=" 1. Import KTY\n"
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [" 1. Import KTY\n"]
-------
Text=" 2. Print KTY\n"
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [" 2. Print KTY\n"]
-------
Text=" 3. Quit\n"
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [" 3. Quit\n"]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ["=======================\n"]
-------
Text="KTY Pretty Printer v0.1\n"
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ["KTY Pretty Printer v0.1\n"]
-------
Text=sizeof(kty_parser_t)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(kty_parser_t)]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDOUT]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ["Error!\n"]
-------
Text=sizeof(cgc_select)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(cgc_select)]
-------
Text='\n'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\n']
-------
Text=cgc_select
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [cgc_select]
-------
Text=NULL
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [NULL]
-------
Text=10
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [10]
-------
Text=1
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1]
-------
Text=cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=cgc_import_kty(buf)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_import_kty(buf)]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=2
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [2]
-------
Text=cgc_print_kty()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_print_kty()]
-------
Text=3
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [3]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_quit()]
-------
Text=777
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [777]
-------
Text=cgc_nyan()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_nyan()]
-------
Text=cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")]
-------
Text=fd
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=c
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [1]
-------
Text=&rx
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [&rx]
-------
Text=1
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=c++
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [c++]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ["Error!\n"]
-------
Text=STDOUT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="Error!\n"
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ["Error!\n"]
-------
Text=STDOUT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="Error!\n"
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ["Error!\n"]
-------
Text="%s"
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ["%s"]
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [parser->nyan_says]
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [parser->nyan_says]
-------
Text=i
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [i]
-------
Text=c
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=item->item.i_string.s
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [item->item.i_string.s]
-------
Text="NYAN SAYS...\n\"\n%s\n\""
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ["NYAN SAYS...\n\"\n%s\n\""]
-------
Text="\n\n=^.^=// Bye!\n\n"
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ["\n\n=^.^=// Bye!\n\n"]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ["=======================\n"]
-------
Text=" 1. Import KTY\n"
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [" 1. Import KTY\n"]
-------
Text=" 2. Print KTY\n"
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [" 2. Print KTY\n"]
-------
Text=" 3. Quit\n"
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [" 3. Quit\n"]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ["=======================\n"]
-------
Text="KTY Pretty Printer v0.1\n"
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ["KTY Pretty Printer v0.1\n"]
-------
Text=sizeof(kty_parser_t)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(kty_parser_t)]
-------
Text=STDOUT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="Error!\n"
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ["Error!\n"]
-------
Text=sizeof(cgc_select)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(cgc_select)]
-------
Text='\n'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\n']
-------
Text=cgc_select
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_select]
-------
Text=NULL
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=10
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [10]
-------
Text=1
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1]
-------
Text=cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=cgc_import_kty(buf)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_import_kty(buf)]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=2
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [2]
-------
Text=cgc_print_kty()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_print_kty()]
-------
Text=3
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [3]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_quit()]
-------
Text=777
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [777]
-------
Text=cgc_nyan()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_nyan()]
-------
Text=cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")]
-------
Text=1
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [1]
-------
Text=&rx
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [&rx]
-------
Text=c++
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [c++]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ["Error!\n"]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ["Error!\n"]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ["Error!\n"]
-------
Text="%s"
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ["%s"]
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [parser->nyan_says]
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [parser->nyan_says]
-------
Text=i
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=item->item.i_string.s
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [item->item.i_string.s]
-------
Text="NYAN SAYS...\n\"\n%s\n\""
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ["NYAN SAYS...\n\"\n%s\n\""]
-------
Text="\n\n=^.^=// Bye!\n\n"
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ["\n\n=^.^=// Bye!\n\n"]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ["=======================\n"]
-------
Text=" 1. Import KTY\n"
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [" 1. Import KTY\n"]
-------
Text=" 2. Print KTY\n"
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [" 2. Print KTY\n"]
-------
Text=" 3. Quit\n"
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [" 3. Quit\n"]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ["=======================\n"]
-------
Text="KTY Pretty Printer v0.1\n"
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ["KTY Pretty Printer v0.1\n"]
-------
Text=sizeof(kty_parser_t)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(kty_parser_t)]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ["Error!\n"]
-------
Text=sizeof(cgc_select)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(cgc_select)]
-------
Text='\n'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\n']
-------
Text=cgc_select
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=10
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [10]
-------
Text=1
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=cgc_import_kty(buf)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_import_kty(buf)]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=2
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_print_kty()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_print_kty()]
-------
Text=3
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_quit()]
-------
Text=777
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_nyan()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_nyan()]
-------
Text=cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")]
-------
Text=1
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [1]
-------
Text=&rx
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [&rx]
-------
Text=c++
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [c++]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ["Error!\n"]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ["Error!\n"]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ["Error!\n"]
-------
Text="%s"
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ["%s"]
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [parser->nyan_says]
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [parser->nyan_says]
-------
Text=item->item.i_string.s
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [item->item.i_string.s]
-------
Text="NYAN SAYS...\n\"\n%s\n\""
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ["NYAN SAYS...\n\"\n%s\n\""]
-------
Text="\n\n=^.^=// Bye!\n\n"
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ["\n\n=^.^=// Bye!\n\n"]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ["=======================\n"]
-------
Text=" 1. Import KTY\n"
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [" 1. Import KTY\n"]
-------
Text=" 2. Print KTY\n"
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [" 2. Print KTY\n"]
-------
Text=" 3. Quit\n"
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [" 3. Quit\n"]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ["=======================\n"]
-------
Text="KTY Pretty Printer v0.1\n"
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ["KTY Pretty Printer v0.1\n"]
-------
Text=sizeof(kty_parser_t)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(kty_parser_t)]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ["Error!\n"]
-------
Text=sizeof(cgc_select)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(cgc_select)]
-------
Text='\n'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\n']
-------
Text=10
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [10]
-------
Text=cgc_read_until(STDIN,buf,MAX_KTY_LENGTH,'\x00')
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_read_until]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDIN,buf,MAX_KTY_LENGTH,'\x00']
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=cgc_import_kty(buf)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_import_kty(buf)]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=cgc_print_kty()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_print_kty]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_quit()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_quit]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_nyan()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_nyan]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_fdprintf(STDOUT,"Invalid menu. Try again.\n")
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_fdprintf]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDOUT,"Invalid menu. Try again.\n"]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=1
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [1]
-------
Text=&rx
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [&rx]
-------
Text=c++
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [c++]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ["Error!\n"]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ["Error!\n"]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ["Error!\n"]
-------
Text="%s"
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ["%s"]
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [parser->nyan_says]
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [parser->nyan_says]
-------
Text=item->item.i_string.s
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [item->item.i_string.s]
-------
Text="NYAN SAYS...\n\"\n%s\n\""
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ["NYAN SAYS...\n\"\n%s\n\""]
-------
Text="\n\n=^.^=// Bye!\n\n"
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ["\n\n=^.^=// Bye!\n\n"]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ["=======================\n"]
-------
Text=" 1. Import KTY\n"
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [" 1. Import KTY\n"]
-------
Text=" 2. Print KTY\n"
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [" 2. Print KTY\n"]
-------
Text=" 3. Quit\n"
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [" 3. Quit\n"]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ["=======================\n"]
-------
Text="KTY Pretty Printer v0.1\n"
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ["KTY Pretty Printer v0.1\n"]
-------
Text=sizeof(kty_parser_t)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(kty_parser_t)]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ["Error!\n"]
-------
Text=sizeof(cgc_select)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(cgc_select)]
-------
Text='\n'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\n']
-------
Text=10
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [10]
-------
Text=cgc_read_until
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_read_until]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN,buf,MAX_KTY_LENGTH,'\x00'
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 7
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDIN]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [buf]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [MAX_KTY_LENGTH]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
6 : <class 'CParser.CParser.PassignmentExpressionContext'> ['\x00']
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=cgc_import_kty(buf)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_import_kty(buf)]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_fdprintf(STDOUT,"Error!\n")]
-------
Text=cgc_print_kty
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_print_kty]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_quit
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_quit]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_nyan
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_nyan]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_fdprintf]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT,"Invalid menu. Try again.\n"
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDOUT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> ["Invalid menu. Try again.\n"]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [1]
-------
Text=&rx
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [&rx]
-------
Text=c++
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [c++]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ["Error!\n"]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ["Error!\n"]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ["Error!\n"]
-------
Text="%s"
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ["%s"]
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [parser->nyan_says]
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [parser->nyan_says]
-------
Text=item->item.i_string.s
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [item->item.i_string.s]
-------
Text="NYAN SAYS...\n\"\n%s\n\""
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ["NYAN SAYS...\n\"\n%s\n\""]
-------
Text="\n\n=^.^=// Bye!\n\n"
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ["\n\n=^.^=// Bye!\n\n"]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ["=======================\n"]
-------
Text=" 1. Import KTY\n"
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [" 1. Import KTY\n"]
-------
Text=" 2. Print KTY\n"
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [" 2. Print KTY\n"]
-------
Text=" 3. Quit\n"
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [" 3. Quit\n"]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ["=======================\n"]
-------
Text="KTY Pretty Printer v0.1\n"
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ["KTY Pretty Printer v0.1\n"]
-------
Text=sizeof(kty_parser_t)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(kty_parser_t)]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ["Error!\n"]
-------
Text=sizeof(cgc_select)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(cgc_select)]
-------
Text='\n'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\n']
-------
Text=10
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [10]
-------
Text=cgc_read_until
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDIN]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buf
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [buf]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=MAX_KTY_LENGTH
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [MAX_KTY_LENGTH]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x00'
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\x00']
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_import_kty(buf)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_import_kty]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [buf]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_fdprintf(STDOUT,"Error!\n")
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_fdprintf]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDOUT,"Error!\n"]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_print_kty
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_quit
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_nyan
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDOUT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="Invalid menu. Try again.\n"
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ["Invalid menu. Try again.\n"]
-------
Text=1
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [1]
-------
Text=&rx
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [&rx]
-------
Text=c++
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [c++]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ["Error!\n"]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ["Error!\n"]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ["Error!\n"]
-------
Text="%s"
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ["%s"]
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [parser->nyan_says]
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [parser->nyan_says]
-------
Text=item->item.i_string.s
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [item->item.i_string.s]
-------
Text="NYAN SAYS...\n\"\n%s\n\""
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ["NYAN SAYS...\n\"\n%s\n\""]
-------
Text="\n\n=^.^=// Bye!\n\n"
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ["\n\n=^.^=// Bye!\n\n"]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ["=======================\n"]
-------
Text=" 1. Import KTY\n"
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [" 1. Import KTY\n"]
-------
Text=" 2. Print KTY\n"
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [" 2. Print KTY\n"]
-------
Text=" 3. Quit\n"
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [" 3. Quit\n"]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ["=======================\n"]
-------
Text="KTY Pretty Printer v0.1\n"
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ["KTY Pretty Printer v0.1\n"]
-------
Text=sizeof(kty_parser_t)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(kty_parser_t)]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ["Error!\n"]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(cgc_select)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(cgc_select)]
-------
Text='\n'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\n']
-------
Text=10
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [10]
-------
Text=STDIN
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDIN]
-------
Text=buf
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [buf]
-------
Text=MAX_KTY_LENGTH
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [MAX_KTY_LENGTH]
-------
Text='\x00'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\x00']
-------
Text=cgc_import_kty
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_import_kty]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buf
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [buf]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_fdprintf
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_fdprintf]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT,"Error!\n"
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDOUT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> ["Error!\n"]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDOUT]
-------
Text="Invalid menu. Try again.\n"
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ["Invalid menu. Try again.\n"]
-------
Text=1
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [1]
-------
Text=&rx
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [&rx]
-------
Text=c++
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [c++]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ["Error!\n"]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ["Error!\n"]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ["Error!\n"]
-------
Text="%s"
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ["%s"]
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [parser]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [nyan_says]
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [parser->nyan_says]
-------
Text=item->item.i_string.s
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [item->item.i_string.s]
-------
Text="NYAN SAYS...\n\"\n%s\n\""
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ["NYAN SAYS...\n\"\n%s\n\""]
-------
Text="\n\n=^.^=// Bye!\n\n"
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ["\n\n=^.^=// Bye!\n\n"]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ["=======================\n"]
-------
Text=" 1. Import KTY\n"
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [" 1. Import KTY\n"]
-------
Text=" 2. Print KTY\n"
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [" 2. Print KTY\n"]
-------
Text=" 3. Quit\n"
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [" 3. Quit\n"]
-------
Text="=======================\n"
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ["=======================\n"]
-------
Text="KTY Pretty Printer v0.1\n"
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ["KTY Pretty Printer v0.1\n"]
-------
Text=sizeof(kty_parser_t)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(kty_parser_t)]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ["Error!\n"]
-------
Text=(cgc_select)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [cgc_select]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text='\n'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\n']
-------
Text=10
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [10]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDIN]
-------
Text=buf
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [buf]
-------
Text=MAX_KTY_LENGTH
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [MAX_KTY_LENGTH]
-------
Text='\x00'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\x00']
-------
Text=cgc_import_kty
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buf
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [buf]
-------
Text=cgc_fdprintf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDOUT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="Error!\n"
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ["Error!\n"]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDOUT]
-------
Text="Invalid menu. Try again.\n"
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ["Invalid menu. Try again.\n"]
-------
Text=1
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [1]
-------
Text=&rx
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [&rx]
-------
Text=c++
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [c++]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ["Error!\n"]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ["Error!\n"]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ["Error!\n"]
-------
Text="%s"
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=parser
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [parser]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=nyan_says
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [parser->nyan_says]
-------
Text=item->item.i_string.s
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [item->item.i_string.s]
-------
Text="NYAN SAYS...\n\"\n%s\n\""
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="\n\n=^.^=// Bye!\n\n"
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="=======================\n"
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=" 1. Import KTY\n"
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=" 2. Print KTY\n"
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=" 3. Quit\n"
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="=======================\n"
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="KTY Pretty Printer v0.1\n"
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(kty_parser_t)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(kty_parser_t)]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ["Error!\n"]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_select
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_select]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\n'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=10
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [10]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDIN]
-------
Text=buf
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [buf]
-------
Text=MAX_KTY_LENGTH
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [MAX_KTY_LENGTH]
-------
Text='\x00'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\x00']
-------
Text=buf
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [buf]
-------
Text=STDOUT
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDOUT]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ["Error!\n"]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDOUT]
-------
Text="Invalid menu. Try again.\n"
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ["Invalid menu. Try again.\n"]
-------
Text=1
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [1]
-------
Text=&rx
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [&rx]
-------
Text=c++
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [c++]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ["Error!\n"]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ["Error!\n"]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ["Error!\n"]
-------
Text=parser
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [parser->nyan_says]
-------
Text=item->item.i_string.s
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [item->item.i_string.s]
-------
Text=(kty_parser_t)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [kty_parser_t]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ["Error!\n"]
-------
Text=cgc_select
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_select]
-------
Text=10
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [10]
-------
Text=STDIN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=MAX_KTY_LENGTH
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x00'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\x00']
-------
Text=buf
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [buf]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDOUT]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ["Error!\n"]
-------
Text=STDOUT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="Invalid menu. Try again.\n"
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ["Invalid menu. Try again.\n"]
-------
Text=1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1]
-------
Text=&rx
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&rx]
-------
Text=c++
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [c++]
-------
Text="Error!\n"
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="Error!\n"
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ["Error!\n"]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ["Error!\n"]
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [parser->nyan_says]
-------
Text=item->item.i_string.s
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [item->item.i_string.s]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=kty_parser_t
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [kty_parser_t]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="Error!\n"
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ["Error!\n"]
-------
Text=cgc_select
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_select]
-------
Text=10
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [10]
-------
Text='\x00'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\x00']
-------
Text=buf
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [buf]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDOUT]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ["Error!\n"]
-------
Text="Invalid menu. Try again.\n"
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ["Invalid menu. Try again.\n"]
-------
Text=1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1]
-------
Text=&rx
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [rx]
-------
Text=c++
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [c++]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ["Error!\n"]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ["Error!\n"]
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [parser->nyan_says]
-------
Text=item->item.i_string.s
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [item->item.i_string.s]
-------
Text=kty_parser_t
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [kty_parser_t]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ["Error!\n"]
-------
Text=cgc_select
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_select]
-------
Text=10
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [10]
-------
Text='\x00'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\x00']
-------
Text=buf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="Error!\n"
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ["Error!\n"]
-------
Text="Invalid menu. Try again.\n"
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ["Invalid menu. Try again.\n"]
-------
Text=1
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=rx
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [rx]
-------
Text=c++
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [c++]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ["Error!\n"]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ["Error!\n"]
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [parser->nyan_says]
-------
Text=item->item.i_string.s
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 7
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [item]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [item]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [.]
4 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [i_string]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [.]
6 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [s]
-------
Text=kty_parser_t
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [kty_parser_t]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ["Error!\n"]
-------
Text=cgc_select
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_select]
-------
Text=10
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [10]
-------
Text='\x00'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\x00']
-------
Text="Error!\n"
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ["Error!\n"]
-------
Text="Invalid menu. Try again.\n"
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ["Invalid menu. Try again.\n"]
-------
Text=1
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=rx
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [rx]
-------
Text=c++
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [c++]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ["Error!\n"]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ["Error!\n"]
-------
Text=parser->nyan_says
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [parser]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [nyan_says]
-------
Text=item
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [item]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=item
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=.
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=i_string
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=.
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=s
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=kty_parser_t
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [kty_parser_t]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ["Error!\n"]
-------
Text=cgc_select
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_select]
-------
Text=10
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [10]
-------
Text='\x00'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\x00']
-------
Text="Error!\n"
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ["Error!\n"]
-------
Text="Invalid menu. Try again.\n"
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ["Invalid menu. Try again.\n"]
-------
Text=1
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=rx
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [rx]
-------
Text=c++
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [c]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [++]
-------
Text="Error!\n"
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="Error!\n"
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=parser
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [parser]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=nyan_says
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=item
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=kty_parser_t
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [kty_parser_t]
-------
Text="Error!\n"
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_select
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_select]
-------
Text=10
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [10]
-------
Text='\x00'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\x00']
-------
Text="Error!\n"
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ["Error!\n"]
-------
Text="Invalid menu. Try again.\n"
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ["Invalid menu. Try again.\n"]
-------
Text=rx
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [rx]
-------
Text=c
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [c]
-------
Text=++
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=parser
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=kty_parser_t
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [kty_parser_t]
-------
Text=cgc_select
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_select]
-------
Text=10
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x00'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\x00']
-------
Text="Error!\n"
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ["Error!\n"]
-------
Text="Invalid menu. Try again.\n"
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ["Invalid menu. Try again.\n"]
-------
Text=rx
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=c
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=kty_parser_t
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [kty_parser_t]
-------
Text=cgc_select
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_select]
-------
Text='\x00'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\x00']
-------
Text="Error!\n"
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ["Error!\n"]
-------
Text="Invalid menu. Try again.\n"
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ["Invalid menu. Try again.\n"]
-------
Text=kty_parser_t
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [kty_parser_t]
-------
Text=cgc_select
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_select]
-------
Text='\x00'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\x00']
-------
Text="Error!\n"
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ["Error!\n"]
-------
Text="Invalid menu. Try again.\n"
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ["Invalid menu. Try again.\n"]
-------
Text=kty_parser_t
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [kty_parser_t]
-------
Text=cgc_select
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_select]
-------
Text='\x00'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\x00']
-------
Text="Error!\n"
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ["Error!\n"]
-------
Text="Invalid menu. Try again.\n"
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ["Invalid menu. Try again.\n"]
-------
Text=kty_parser_t
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [kty_parser_t]
-------
Text=cgc_select
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_select]
-------
Text='\x00'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\x00']
-------
Text="Error!\n"
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ["Error!\n"]
-------
Text="Invalid menu. Try again.\n"
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ["Invalid menu. Try again.\n"]
-------
Text=kty_parser_t
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [kty_parser_t]
-------
Text=cgc_select
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_select]
-------
Text='\x00'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\x00']
-------
Text="Error!\n"
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ["Error!\n"]
-------
Text="Invalid menu. Try again.\n"
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ["Invalid menu. Try again.\n"]
-------
Text=kty_parser_t
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [kty_parser_t]
-------
Text=cgc_select
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_select]
-------
Text='\x00'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\x00']
-------
Text="Error!\n"
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ["Error!\n"]
-------
Text="Invalid menu. Try again.\n"
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ["Invalid menu. Try again.\n"]
-------
Text=kty_parser_t
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [kty_parser_t]
-------
Text=cgc_select
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_select]
-------
Text='\x00'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text="Error!\n"
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ["Error!\n"]
-------
Text="Invalid menu. Try again.\n"
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=kty_parser_t
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [kty_parser_t]
-------
Text=cgc_select
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_select]
-------
Text="Error!\n"
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ["Error!\n"]
-------
Text=kty_parser_t
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [kty_parser_t]
-------
Text=cgc_select
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_select]
-------
Text="Error!\n"
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=kty_parser_t
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [kty_parser_t]
-------
Text=cgc_select
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=kty_parser_t
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [kty_parser_t]
-------
Text=kty_parser_t
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
