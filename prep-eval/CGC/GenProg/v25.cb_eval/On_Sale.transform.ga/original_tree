Text=staticconstcharCMD_BUY[4]={'\xBE','\x0E','\xBE','\x0E'};staticconstcharCMD_CHECK[4]={'\xC4','\xEC','\x4E','\xEE'};staticconstcharCMD_ADD[4]={'\xAD','\xDD','\xAD','\xDD'};staticconstcharCMD_RM[4]={'\xDE','\xAD','\xDE','\xAD'};staticconstcharCMD_UPDATE[4]={'\x04','\xD4','\x7E','\x00'};staticconstcharCMD_ONSALE[4]={'\x54','\x13','\x54','\x13'};staticconstcharCMD_NOSALE[4]={'\x0F','\x0F','\x0F','\x0F'};staticconstcharCMD_LIST[4]={'\x11','\x44','\x11','\x44'};staticconstcharCMD_QUIT[4]={'\xFF','\xFF','\xFF','\xFF'};staticconstcharDESC_TERM[2]={'\xED','\0'};staticconstcharBUY_TERM[4]={'\xBB','\xBB','\xBB','\xBB'};staticconstcharBUY_MORE[4]={'\xBD','\xBD','\xBD','\xBD'};Inventoryinv;unsignedintcgc_update_serial=0;staticunsignedintcgc_get_next_update_serial(void){unsignedintbase=*(unsignedint*)FLAG_PAGE;unsignedintnext_update_serial=base+cgc_update_serial;cgc_update_serial++;returnnext_update_serial;}staticunsignedcharcgc_prod_has_bc(constvoid*product,void*barcode){Product*p=(Product*)product;unsignedchar*bc=(unsignedchar*)barcode;if(0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)){returnTRUE;}returnFALSE;}staticProduct*cgc_get_product_by_barcode(charbc[]){structnode*np=NULL;np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);if(NULL==np)returnNULL;elsereturn(Product*)np->data;}staticintcgc_do_buy(void){Product*p=NULL;Product*p_copy=NULL;charbuy_status[4];charbc[BARCODE_SZ]={0};doublecost=0.0;structlistbuy_list;cgc_list_init(&buy_list,cgc_free);RECV(STDIN,buy_status,sizeof(buy_status));while(0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))){RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p){cgc_list_destroy(&buy_list);return-1;}p_copy=cgc_malloc(sizeof(Product));MALLOC_OK(p_copy);cgc_memcpy(p_copy,p,sizeof(Product));cgc_list_insert_at_end(&buy_list,p_copy);cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);RECV(STDIN,buy_status,sizeof(buy_status));}if(0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))){cgc_list_destroy(&buy_list);return-1;}SEND(STDOUT,(char*)&cost,sizeof(cost));cgc_list_destroy(&buy_list);returnSUCCESS;}staticintcgc_do_check(void){Product*p=NULL;charbc[BARCODE_SZ]={0};floatsale_price=0.0;unsignedintd_len=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);returnSUCCESS;}staticintcgc_do_add(void){Product*p=NULL;Product*p2=NULL;intbytes_recvd=0;p=cgc_malloc(sizeof(Product));MALLOC_OK(p);p->sfn=onsale_fn[0];p->update_serial=0;RECV(STDIN,(char*)p->barcode,BARCODE_SZ);p2=cgc_get_product_by_barcode((char*)p->barcode);if(NULL!=p2){cgc_free(p);return-1;}RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));RECV(STDIN,(char*)&p->cost,sizeof(float));bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product));if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);p->desc[bytes_recvd-1]='\0';cgc_list_insert_at_end(&inv,p);returnSUCCESS;}staticintcgc_do_rm(void){Product*p=NULL;charbc[BARCODE_SZ]={0};structnode*np=NULL;RECV(STDIN,bc,BARCODE_SZ);np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);if(NULL==np)return-1;cgc_list_remove_node(&inv,np);cgc_list_destroy_node(&inv,&np);returnSUCCESS;}staticintcgc_do_update(void){intbytes_recvd=0;Product*p=NULL;unsignedint(*desc_copy)(void*dst,constvoid*src,unsignedintcnt)=cgc_memcpy;charbc[BARCODE_SZ]={0};chardesc_buf[MAX_DESC_LEN]={0};RECV(STDIN,(char*)bc,BARCODE_SZ);p=cgc_get_product_by_barcode((char*)bc);if(NULL==p){return-1;}RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));RECV(STDIN,(char*)&p->cost,sizeof(float));bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product));if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);desc_buf[bytes_recvd-1]='\0';desc_copy(p->desc,desc_buf,MAX_DESC_LEN);p->update_serial=cgc_get_next_update_serial();returnSUCCESS;}staticintcgc_do_onsale(void){Product*p=NULL;charbc[BARCODE_SZ]={0};unsignedintsale_percent=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint));if(100<=sale_percent)return-1;p->sfn=onsale_fn[sale_percent];returnSUCCESS;}staticintcgc_do_nosale(void){Product*p=NULL;charbc[BARCODE_SZ]={0};unsignedintsale_percent=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;p->sfn=onsale_fn[0];returnSUCCESS;}staticintcgc_do_list(void){Product*p=NULL;charoptions[4]={0};unsignedintcount=cgc_list_length(&inv);unsignedintd_len=0;floatsale_price=0.0;structnode*cur=cgc_list_head_node(&inv);structnode*end=cgc_list_end_marker(&inv);RECV(STDIN,options,sizeof(options));if(0==count)return-1;while((NULL!=cur)&&(cur!=end)){p=(Product*)cur->data;SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}cur=cgc_list_next_node(cur);}returnSUCCESS;}voidcgc_setup(void){cgc_list_init(&inv,cgc_free);cgc_load_inventory(&inv);}shortcgc_process_cmd(void){charcmd[4];shortret=0;RECV(STDIN,cmd,sizeof(cmd));if(0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))){ret=cgc_do_buy();}elseif(0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))){ret=cgc_do_check();}elseif(0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))){ret=cgc_do_add();}elseif(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}returnret;}
Type=<class 'CParser.CParser.TranslationUnitContext'>
Child Count = 27
0 : <class 'CParser.CParser.ExternalDeclarationContext'> [staticconstcharCMD_BUY[4]={'\xBE','\x0E','\xBE','\x0E'};]
1 : <class 'CParser.CParser.ExternalDeclarationContext'> [staticconstcharCMD_CHECK[4]={'\xC4','\xEC','\x4E','\xEE'};]
2 : <class 'CParser.CParser.ExternalDeclarationContext'> [staticconstcharCMD_ADD[4]={'\xAD','\xDD','\xAD','\xDD'};]
3 : <class 'CParser.CParser.ExternalDeclarationContext'> [staticconstcharCMD_RM[4]={'\xDE','\xAD','\xDE','\xAD'};]
4 : <class 'CParser.CParser.ExternalDeclarationContext'> [staticconstcharCMD_UPDATE[4]={'\x04','\xD4','\x7E','\x00'};]
5 : <class 'CParser.CParser.ExternalDeclarationContext'> [staticconstcharCMD_ONSALE[4]={'\x54','\x13','\x54','\x13'};]
6 : <class 'CParser.CParser.ExternalDeclarationContext'> [staticconstcharCMD_NOSALE[4]={'\x0F','\x0F','\x0F','\x0F'};]
7 : <class 'CParser.CParser.ExternalDeclarationContext'> [staticconstcharCMD_LIST[4]={'\x11','\x44','\x11','\x44'};]
8 : <class 'CParser.CParser.ExternalDeclarationContext'> [staticconstcharCMD_QUIT[4]={'\xFF','\xFF','\xFF','\xFF'};]
9 : <class 'CParser.CParser.ExternalDeclarationContext'> [staticconstcharDESC_TERM[2]={'\xED','\0'};]
10 : <class 'CParser.CParser.ExternalDeclarationContext'> [staticconstcharBUY_TERM[4]={'\xBB','\xBB','\xBB','\xBB'};]
11 : <class 'CParser.CParser.ExternalDeclarationContext'> [staticconstcharBUY_MORE[4]={'\xBD','\xBD','\xBD','\xBD'};]
12 : <class 'CParser.CParser.ExternalDeclarationContext'> [Inventoryinv;]
13 : <class 'CParser.CParser.ExternalDeclarationContext'> [unsignedintcgc_update_serial=0;]
14 : <class 'CParser.CParser.ExternalDeclarationContext'> [staticunsignedintcgc_get_next_update_serial(void){unsignedintbase=*(unsignedint*)FLAG_PAGE;unsignedintnext_update_serial=base+cgc_update_serial;cgc_update_serial++;returnnext_update_serial;}]
15 : <class 'CParser.CParser.ExternalDeclarationContext'> [staticunsignedcharcgc_prod_has_bc(constvoid*product,void*barcode){Product*p=(Product*)product;unsignedchar*bc=(unsignedchar*)barcode;if(0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)){returnTRUE;}returnFALSE;}]
16 : <class 'CParser.CParser.ExternalDeclarationContext'> [staticProduct*cgc_get_product_by_barcode(charbc[]){structnode*np=NULL;np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);if(NULL==np)returnNULL;elsereturn(Product*)np->data;}]
17 : <class 'CParser.CParser.ExternalDeclarationContext'> [staticintcgc_do_buy(void){Product*p=NULL;Product*p_copy=NULL;charbuy_status[4];charbc[BARCODE_SZ]={0};doublecost=0.0;structlistbuy_list;cgc_list_init(&buy_list,cgc_free);RECV(STDIN,buy_status,sizeof(buy_status));while(0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))){RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p){cgc_list_destroy(&buy_list);return-1;}p_copy=cgc_malloc(sizeof(Product));MALLOC_OK(p_copy);cgc_memcpy(p_copy,p,sizeof(Product));cgc_list_insert_at_end(&buy_list,p_copy);cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);RECV(STDIN,buy_status,sizeof(buy_status));}if(0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))){cgc_list_destroy(&buy_list);return-1;}SEND(STDOUT,(char*)&cost,sizeof(cost));cgc_list_destroy(&buy_list);returnSUCCESS;}]
18 : <class 'CParser.CParser.ExternalDeclarationContext'> [staticintcgc_do_check(void){Product*p=NULL;charbc[BARCODE_SZ]={0};floatsale_price=0.0;unsignedintd_len=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);returnSUCCESS;}]
19 : <class 'CParser.CParser.ExternalDeclarationContext'> [staticintcgc_do_add(void){Product*p=NULL;Product*p2=NULL;intbytes_recvd=0;p=cgc_malloc(sizeof(Product));MALLOC_OK(p);p->sfn=onsale_fn[0];p->update_serial=0;RECV(STDIN,(char*)p->barcode,BARCODE_SZ);p2=cgc_get_product_by_barcode((char*)p->barcode);if(NULL!=p2){cgc_free(p);return-1;}RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));RECV(STDIN,(char*)&p->cost,sizeof(float));bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product));if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);p->desc[bytes_recvd-1]='\0';cgc_list_insert_at_end(&inv,p);returnSUCCESS;}]
20 : <class 'CParser.CParser.ExternalDeclarationContext'> [staticintcgc_do_rm(void){Product*p=NULL;charbc[BARCODE_SZ]={0};structnode*np=NULL;RECV(STDIN,bc,BARCODE_SZ);np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);if(NULL==np)return-1;cgc_list_remove_node(&inv,np);cgc_list_destroy_node(&inv,&np);returnSUCCESS;}]
21 : <class 'CParser.CParser.ExternalDeclarationContext'> [staticintcgc_do_update(void){intbytes_recvd=0;Product*p=NULL;unsignedint(*desc_copy)(void*dst,constvoid*src,unsignedintcnt)=cgc_memcpy;charbc[BARCODE_SZ]={0};chardesc_buf[MAX_DESC_LEN]={0};RECV(STDIN,(char*)bc,BARCODE_SZ);p=cgc_get_product_by_barcode((char*)bc);if(NULL==p){return-1;}RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));RECV(STDIN,(char*)&p->cost,sizeof(float));bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product));if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);desc_buf[bytes_recvd-1]='\0';desc_copy(p->desc,desc_buf,MAX_DESC_LEN);p->update_serial=cgc_get_next_update_serial();returnSUCCESS;}]
22 : <class 'CParser.CParser.ExternalDeclarationContext'> [staticintcgc_do_onsale(void){Product*p=NULL;charbc[BARCODE_SZ]={0};unsignedintsale_percent=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint));if(100<=sale_percent)return-1;p->sfn=onsale_fn[sale_percent];returnSUCCESS;}]
23 : <class 'CParser.CParser.ExternalDeclarationContext'> [staticintcgc_do_nosale(void){Product*p=NULL;charbc[BARCODE_SZ]={0};unsignedintsale_percent=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;p->sfn=onsale_fn[0];returnSUCCESS;}]
24 : <class 'CParser.CParser.ExternalDeclarationContext'> [staticintcgc_do_list(void){Product*p=NULL;charoptions[4]={0};unsignedintcount=cgc_list_length(&inv);unsignedintd_len=0;floatsale_price=0.0;structnode*cur=cgc_list_head_node(&inv);structnode*end=cgc_list_end_marker(&inv);RECV(STDIN,options,sizeof(options));if(0==count)return-1;while((NULL!=cur)&&(cur!=end)){p=(Product*)cur->data;SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}cur=cgc_list_next_node(cur);}returnSUCCESS;}]
25 : <class 'CParser.CParser.ExternalDeclarationContext'> [voidcgc_setup(void){cgc_list_init(&inv,cgc_free);cgc_load_inventory(&inv);}]
26 : <class 'CParser.CParser.ExternalDeclarationContext'> [shortcgc_process_cmd(void){charcmd[4];shortret=0;RECV(STDIN,cmd,sizeof(cmd));if(0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))){ret=cgc_do_buy();}elseif(0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))){ret=cgc_do_check();}elseif(0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))){ret=cgc_do_add();}elseif(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}returnret;}]
-------
Text=<EOF>
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=staticconstcharCMD_BUY[4]={'\xBE','\x0E','\xBE','\x0E'};
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [staticconstcharCMD_BUY[4]={'\xBE','\x0E','\xBE','\x0E'};]
-------
Text=staticconstcharCMD_CHECK[4]={'\xC4','\xEC','\x4E','\xEE'};
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [staticconstcharCMD_CHECK[4]={'\xC4','\xEC','\x4E','\xEE'};]
-------
Text=staticconstcharCMD_ADD[4]={'\xAD','\xDD','\xAD','\xDD'};
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [staticconstcharCMD_ADD[4]={'\xAD','\xDD','\xAD','\xDD'};]
-------
Text=staticconstcharCMD_RM[4]={'\xDE','\xAD','\xDE','\xAD'};
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [staticconstcharCMD_RM[4]={'\xDE','\xAD','\xDE','\xAD'};]
-------
Text=staticconstcharCMD_UPDATE[4]={'\x04','\xD4','\x7E','\x00'};
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [staticconstcharCMD_UPDATE[4]={'\x04','\xD4','\x7E','\x00'};]
-------
Text=staticconstcharCMD_ONSALE[4]={'\x54','\x13','\x54','\x13'};
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [staticconstcharCMD_ONSALE[4]={'\x54','\x13','\x54','\x13'};]
-------
Text=staticconstcharCMD_NOSALE[4]={'\x0F','\x0F','\x0F','\x0F'};
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [staticconstcharCMD_NOSALE[4]={'\x0F','\x0F','\x0F','\x0F'};]
-------
Text=staticconstcharCMD_LIST[4]={'\x11','\x44','\x11','\x44'};
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [staticconstcharCMD_LIST[4]={'\x11','\x44','\x11','\x44'};]
-------
Text=staticconstcharCMD_QUIT[4]={'\xFF','\xFF','\xFF','\xFF'};
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [staticconstcharCMD_QUIT[4]={'\xFF','\xFF','\xFF','\xFF'};]
-------
Text=staticconstcharDESC_TERM[2]={'\xED','\0'};
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [staticconstcharDESC_TERM[2]={'\xED','\0'};]
-------
Text=staticconstcharBUY_TERM[4]={'\xBB','\xBB','\xBB','\xBB'};
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [staticconstcharBUY_TERM[4]={'\xBB','\xBB','\xBB','\xBB'};]
-------
Text=staticconstcharBUY_MORE[4]={'\xBD','\xBD','\xBD','\xBD'};
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [staticconstcharBUY_MORE[4]={'\xBD','\xBD','\xBD','\xBD'};]
-------
Text=Inventoryinv;
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [Inventoryinv;]
-------
Text=unsignedintcgc_update_serial=0;
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [unsignedintcgc_update_serial=0;]
-------
Text=staticunsignedintcgc_get_next_update_serial(void){unsignedintbase=*(unsignedint*)FLAG_PAGE;unsignedintnext_update_serial=base+cgc_update_serial;cgc_update_serial++;returnnext_update_serial;}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [staticunsignedintcgc_get_next_update_serial(void){unsignedintbase=*(unsignedint*)FLAG_PAGE;unsignedintnext_update_serial=base+cgc_update_serial;cgc_update_serial++;returnnext_update_serial;}]
-------
Text=staticunsignedcharcgc_prod_has_bc(constvoid*product,void*barcode){Product*p=(Product*)product;unsignedchar*bc=(unsignedchar*)barcode;if(0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)){returnTRUE;}returnFALSE;}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [staticunsignedcharcgc_prod_has_bc(constvoid*product,void*barcode){Product*p=(Product*)product;unsignedchar*bc=(unsignedchar*)barcode;if(0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)){returnTRUE;}returnFALSE;}]
-------
Text=staticProduct*cgc_get_product_by_barcode(charbc[]){structnode*np=NULL;np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);if(NULL==np)returnNULL;elsereturn(Product*)np->data;}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [staticProduct*cgc_get_product_by_barcode(charbc[]){structnode*np=NULL;np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);if(NULL==np)returnNULL;elsereturn(Product*)np->data;}]
-------
Text=staticintcgc_do_buy(void){Product*p=NULL;Product*p_copy=NULL;charbuy_status[4];charbc[BARCODE_SZ]={0};doublecost=0.0;structlistbuy_list;cgc_list_init(&buy_list,cgc_free);RECV(STDIN,buy_status,sizeof(buy_status));while(0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))){RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p){cgc_list_destroy(&buy_list);return-1;}p_copy=cgc_malloc(sizeof(Product));MALLOC_OK(p_copy);cgc_memcpy(p_copy,p,sizeof(Product));cgc_list_insert_at_end(&buy_list,p_copy);cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);RECV(STDIN,buy_status,sizeof(buy_status));}if(0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))){cgc_list_destroy(&buy_list);return-1;}SEND(STDOUT,(char*)&cost,sizeof(cost));cgc_list_destroy(&buy_list);returnSUCCESS;}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [staticintcgc_do_buy(void){Product*p=NULL;Product*p_copy=NULL;charbuy_status[4];charbc[BARCODE_SZ]={0};doublecost=0.0;structlistbuy_list;cgc_list_init(&buy_list,cgc_free);RECV(STDIN,buy_status,sizeof(buy_status));while(0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))){RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p){cgc_list_destroy(&buy_list);return-1;}p_copy=cgc_malloc(sizeof(Product));MALLOC_OK(p_copy);cgc_memcpy(p_copy,p,sizeof(Product));cgc_list_insert_at_end(&buy_list,p_copy);cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);RECV(STDIN,buy_status,sizeof(buy_status));}if(0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))){cgc_list_destroy(&buy_list);return-1;}SEND(STDOUT,(char*)&cost,sizeof(cost));cgc_list_destroy(&buy_list);returnSUCCESS;}]
-------
Text=staticintcgc_do_check(void){Product*p=NULL;charbc[BARCODE_SZ]={0};floatsale_price=0.0;unsignedintd_len=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);returnSUCCESS;}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [staticintcgc_do_check(void){Product*p=NULL;charbc[BARCODE_SZ]={0};floatsale_price=0.0;unsignedintd_len=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);returnSUCCESS;}]
-------
Text=staticintcgc_do_add(void){Product*p=NULL;Product*p2=NULL;intbytes_recvd=0;p=cgc_malloc(sizeof(Product));MALLOC_OK(p);p->sfn=onsale_fn[0];p->update_serial=0;RECV(STDIN,(char*)p->barcode,BARCODE_SZ);p2=cgc_get_product_by_barcode((char*)p->barcode);if(NULL!=p2){cgc_free(p);return-1;}RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));RECV(STDIN,(char*)&p->cost,sizeof(float));bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product));if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);p->desc[bytes_recvd-1]='\0';cgc_list_insert_at_end(&inv,p);returnSUCCESS;}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [staticintcgc_do_add(void){Product*p=NULL;Product*p2=NULL;intbytes_recvd=0;p=cgc_malloc(sizeof(Product));MALLOC_OK(p);p->sfn=onsale_fn[0];p->update_serial=0;RECV(STDIN,(char*)p->barcode,BARCODE_SZ);p2=cgc_get_product_by_barcode((char*)p->barcode);if(NULL!=p2){cgc_free(p);return-1;}RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));RECV(STDIN,(char*)&p->cost,sizeof(float));bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product));if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);p->desc[bytes_recvd-1]='\0';cgc_list_insert_at_end(&inv,p);returnSUCCESS;}]
-------
Text=staticintcgc_do_rm(void){Product*p=NULL;charbc[BARCODE_SZ]={0};structnode*np=NULL;RECV(STDIN,bc,BARCODE_SZ);np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);if(NULL==np)return-1;cgc_list_remove_node(&inv,np);cgc_list_destroy_node(&inv,&np);returnSUCCESS;}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [staticintcgc_do_rm(void){Product*p=NULL;charbc[BARCODE_SZ]={0};structnode*np=NULL;RECV(STDIN,bc,BARCODE_SZ);np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);if(NULL==np)return-1;cgc_list_remove_node(&inv,np);cgc_list_destroy_node(&inv,&np);returnSUCCESS;}]
-------
Text=staticintcgc_do_update(void){intbytes_recvd=0;Product*p=NULL;unsignedint(*desc_copy)(void*dst,constvoid*src,unsignedintcnt)=cgc_memcpy;charbc[BARCODE_SZ]={0};chardesc_buf[MAX_DESC_LEN]={0};RECV(STDIN,(char*)bc,BARCODE_SZ);p=cgc_get_product_by_barcode((char*)bc);if(NULL==p){return-1;}RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));RECV(STDIN,(char*)&p->cost,sizeof(float));bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product));if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);desc_buf[bytes_recvd-1]='\0';desc_copy(p->desc,desc_buf,MAX_DESC_LEN);p->update_serial=cgc_get_next_update_serial();returnSUCCESS;}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [staticintcgc_do_update(void){intbytes_recvd=0;Product*p=NULL;unsignedint(*desc_copy)(void*dst,constvoid*src,unsignedintcnt)=cgc_memcpy;charbc[BARCODE_SZ]={0};chardesc_buf[MAX_DESC_LEN]={0};RECV(STDIN,(char*)bc,BARCODE_SZ);p=cgc_get_product_by_barcode((char*)bc);if(NULL==p){return-1;}RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));RECV(STDIN,(char*)&p->cost,sizeof(float));bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product));if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);desc_buf[bytes_recvd-1]='\0';desc_copy(p->desc,desc_buf,MAX_DESC_LEN);p->update_serial=cgc_get_next_update_serial();returnSUCCESS;}]
-------
Text=staticintcgc_do_onsale(void){Product*p=NULL;charbc[BARCODE_SZ]={0};unsignedintsale_percent=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint));if(100<=sale_percent)return-1;p->sfn=onsale_fn[sale_percent];returnSUCCESS;}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [staticintcgc_do_onsale(void){Product*p=NULL;charbc[BARCODE_SZ]={0};unsignedintsale_percent=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint));if(100<=sale_percent)return-1;p->sfn=onsale_fn[sale_percent];returnSUCCESS;}]
-------
Text=staticintcgc_do_nosale(void){Product*p=NULL;charbc[BARCODE_SZ]={0};unsignedintsale_percent=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;p->sfn=onsale_fn[0];returnSUCCESS;}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [staticintcgc_do_nosale(void){Product*p=NULL;charbc[BARCODE_SZ]={0};unsignedintsale_percent=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;p->sfn=onsale_fn[0];returnSUCCESS;}]
-------
Text=staticintcgc_do_list(void){Product*p=NULL;charoptions[4]={0};unsignedintcount=cgc_list_length(&inv);unsignedintd_len=0;floatsale_price=0.0;structnode*cur=cgc_list_head_node(&inv);structnode*end=cgc_list_end_marker(&inv);RECV(STDIN,options,sizeof(options));if(0==count)return-1;while((NULL!=cur)&&(cur!=end)){p=(Product*)cur->data;SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}cur=cgc_list_next_node(cur);}returnSUCCESS;}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [staticintcgc_do_list(void){Product*p=NULL;charoptions[4]={0};unsignedintcount=cgc_list_length(&inv);unsignedintd_len=0;floatsale_price=0.0;structnode*cur=cgc_list_head_node(&inv);structnode*end=cgc_list_end_marker(&inv);RECV(STDIN,options,sizeof(options));if(0==count)return-1;while((NULL!=cur)&&(cur!=end)){p=(Product*)cur->data;SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}cur=cgc_list_next_node(cur);}returnSUCCESS;}]
-------
Text=voidcgc_setup(void){cgc_list_init(&inv,cgc_free);cgc_load_inventory(&inv);}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [voidcgc_setup(void){cgc_list_init(&inv,cgc_free);cgc_load_inventory(&inv);}]
-------
Text=shortcgc_process_cmd(void){charcmd[4];shortret=0;RECV(STDIN,cmd,sizeof(cmd));if(0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))){ret=cgc_do_buy();}elseif(0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))){ret=cgc_do_check();}elseif(0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))){ret=cgc_do_add();}elseif(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}returnret;}
Type=<class 'CParser.CParser.ExternalDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.FunctionDefinitionContext'> [shortcgc_process_cmd(void){charcmd[4];shortret=0;RECV(STDIN,cmd,sizeof(cmd));if(0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))){ret=cgc_do_buy();}elseif(0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))){ret=cgc_do_check();}elseif(0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))){ret=cgc_do_add();}elseif(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}returnret;}]
-------
Text=staticconstcharCMD_BUY[4]={'\xBE','\x0E','\xBE','\x0E'};
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [staticconstchar]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [CMD_BUY[4]={'\xBE','\x0E','\xBE','\x0E'}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=staticconstcharCMD_CHECK[4]={'\xC4','\xEC','\x4E','\xEE'};
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [staticconstchar]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [CMD_CHECK[4]={'\xC4','\xEC','\x4E','\xEE'}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=staticconstcharCMD_ADD[4]={'\xAD','\xDD','\xAD','\xDD'};
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [staticconstchar]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [CMD_ADD[4]={'\xAD','\xDD','\xAD','\xDD'}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=staticconstcharCMD_RM[4]={'\xDE','\xAD','\xDE','\xAD'};
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [staticconstchar]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [CMD_RM[4]={'\xDE','\xAD','\xDE','\xAD'}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=staticconstcharCMD_UPDATE[4]={'\x04','\xD4','\x7E','\x00'};
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [staticconstchar]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [CMD_UPDATE[4]={'\x04','\xD4','\x7E','\x00'}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=staticconstcharCMD_ONSALE[4]={'\x54','\x13','\x54','\x13'};
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [staticconstchar]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [CMD_ONSALE[4]={'\x54','\x13','\x54','\x13'}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=staticconstcharCMD_NOSALE[4]={'\x0F','\x0F','\x0F','\x0F'};
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [staticconstchar]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [CMD_NOSALE[4]={'\x0F','\x0F','\x0F','\x0F'}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=staticconstcharCMD_LIST[4]={'\x11','\x44','\x11','\x44'};
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [staticconstchar]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [CMD_LIST[4]={'\x11','\x44','\x11','\x44'}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=staticconstcharCMD_QUIT[4]={'\xFF','\xFF','\xFF','\xFF'};
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [staticconstchar]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [CMD_QUIT[4]={'\xFF','\xFF','\xFF','\xFF'}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=staticconstcharDESC_TERM[2]={'\xED','\0'};
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [staticconstchar]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [DESC_TERM[2]={'\xED','\0'}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=staticconstcharBUY_TERM[4]={'\xBB','\xBB','\xBB','\xBB'};
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [staticconstchar]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [BUY_TERM[4]={'\xBB','\xBB','\xBB','\xBB'}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=staticconstcharBUY_MORE[4]={'\xBD','\xBD','\xBD','\xBD'};
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [staticconstchar]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [BUY_MORE[4]={'\xBD','\xBD','\xBD','\xBD'}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=Inventoryinv;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [Inventoryinv]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=unsignedintcgc_update_serial=0;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [unsignedint]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [cgc_update_serial=0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=staticunsignedintcgc_get_next_update_serial(void){unsignedintbase=*(unsignedint*)FLAG_PAGE;unsignedintnext_update_serial=base+cgc_update_serial;cgc_update_serial++;returnnext_update_serial;}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [staticunsignedint]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_get_next_update_serial(void)]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{unsignedintbase=*(unsignedint*)FLAG_PAGE;unsignedintnext_update_serial=base+cgc_update_serial;cgc_update_serial++;returnnext_update_serial;}]
-------
Text=staticunsignedcharcgc_prod_has_bc(constvoid*product,void*barcode){Product*p=(Product*)product;unsignedchar*bc=(unsignedchar*)barcode;if(0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)){returnTRUE;}returnFALSE;}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [staticunsignedchar]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_prod_has_bc(constvoid*product,void*barcode)]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{Product*p=(Product*)product;unsignedchar*bc=(unsignedchar*)barcode;if(0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)){returnTRUE;}returnFALSE;}]
-------
Text=staticProduct*cgc_get_product_by_barcode(charbc[]){structnode*np=NULL;np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);if(NULL==np)returnNULL;elsereturn(Product*)np->data;}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [staticProduct*]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_get_product_by_barcode(charbc[])]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{structnode*np=NULL;np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);if(NULL==np)returnNULL;elsereturn(Product*)np->data;}]
-------
Text=staticintcgc_do_buy(void){Product*p=NULL;Product*p_copy=NULL;charbuy_status[4];charbc[BARCODE_SZ]={0};doublecost=0.0;structlistbuy_list;cgc_list_init(&buy_list,cgc_free);RECV(STDIN,buy_status,sizeof(buy_status));while(0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))){RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p){cgc_list_destroy(&buy_list);return-1;}p_copy=cgc_malloc(sizeof(Product));MALLOC_OK(p_copy);cgc_memcpy(p_copy,p,sizeof(Product));cgc_list_insert_at_end(&buy_list,p_copy);cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);RECV(STDIN,buy_status,sizeof(buy_status));}if(0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))){cgc_list_destroy(&buy_list);return-1;}SEND(STDOUT,(char*)&cost,sizeof(cost));cgc_list_destroy(&buy_list);returnSUCCESS;}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [staticint]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_do_buy(void)]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{Product*p=NULL;Product*p_copy=NULL;charbuy_status[4];charbc[BARCODE_SZ]={0};doublecost=0.0;structlistbuy_list;cgc_list_init(&buy_list,cgc_free);RECV(STDIN,buy_status,sizeof(buy_status));while(0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))){RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p){cgc_list_destroy(&buy_list);return-1;}p_copy=cgc_malloc(sizeof(Product));MALLOC_OK(p_copy);cgc_memcpy(p_copy,p,sizeof(Product));cgc_list_insert_at_end(&buy_list,p_copy);cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);RECV(STDIN,buy_status,sizeof(buy_status));}if(0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))){cgc_list_destroy(&buy_list);return-1;}SEND(STDOUT,(char*)&cost,sizeof(cost));cgc_list_destroy(&buy_list);returnSUCCESS;}]
-------
Text=staticintcgc_do_check(void){Product*p=NULL;charbc[BARCODE_SZ]={0};floatsale_price=0.0;unsignedintd_len=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);returnSUCCESS;}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [staticint]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_do_check(void)]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{Product*p=NULL;charbc[BARCODE_SZ]={0};floatsale_price=0.0;unsignedintd_len=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);returnSUCCESS;}]
-------
Text=staticintcgc_do_add(void){Product*p=NULL;Product*p2=NULL;intbytes_recvd=0;p=cgc_malloc(sizeof(Product));MALLOC_OK(p);p->sfn=onsale_fn[0];p->update_serial=0;RECV(STDIN,(char*)p->barcode,BARCODE_SZ);p2=cgc_get_product_by_barcode((char*)p->barcode);if(NULL!=p2){cgc_free(p);return-1;}RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));RECV(STDIN,(char*)&p->cost,sizeof(float));bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product));if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);p->desc[bytes_recvd-1]='\0';cgc_list_insert_at_end(&inv,p);returnSUCCESS;}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [staticint]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_do_add(void)]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{Product*p=NULL;Product*p2=NULL;intbytes_recvd=0;p=cgc_malloc(sizeof(Product));MALLOC_OK(p);p->sfn=onsale_fn[0];p->update_serial=0;RECV(STDIN,(char*)p->barcode,BARCODE_SZ);p2=cgc_get_product_by_barcode((char*)p->barcode);if(NULL!=p2){cgc_free(p);return-1;}RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));RECV(STDIN,(char*)&p->cost,sizeof(float));bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product));if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);p->desc[bytes_recvd-1]='\0';cgc_list_insert_at_end(&inv,p);returnSUCCESS;}]
-------
Text=staticintcgc_do_rm(void){Product*p=NULL;charbc[BARCODE_SZ]={0};structnode*np=NULL;RECV(STDIN,bc,BARCODE_SZ);np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);if(NULL==np)return-1;cgc_list_remove_node(&inv,np);cgc_list_destroy_node(&inv,&np);returnSUCCESS;}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [staticint]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_do_rm(void)]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{Product*p=NULL;charbc[BARCODE_SZ]={0};structnode*np=NULL;RECV(STDIN,bc,BARCODE_SZ);np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);if(NULL==np)return-1;cgc_list_remove_node(&inv,np);cgc_list_destroy_node(&inv,&np);returnSUCCESS;}]
-------
Text=staticintcgc_do_update(void){intbytes_recvd=0;Product*p=NULL;unsignedint(*desc_copy)(void*dst,constvoid*src,unsignedintcnt)=cgc_memcpy;charbc[BARCODE_SZ]={0};chardesc_buf[MAX_DESC_LEN]={0};RECV(STDIN,(char*)bc,BARCODE_SZ);p=cgc_get_product_by_barcode((char*)bc);if(NULL==p){return-1;}RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));RECV(STDIN,(char*)&p->cost,sizeof(float));bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product));if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);desc_buf[bytes_recvd-1]='\0';desc_copy(p->desc,desc_buf,MAX_DESC_LEN);p->update_serial=cgc_get_next_update_serial();returnSUCCESS;}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [staticint]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_do_update(void)]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{intbytes_recvd=0;Product*p=NULL;unsignedint(*desc_copy)(void*dst,constvoid*src,unsignedintcnt)=cgc_memcpy;charbc[BARCODE_SZ]={0};chardesc_buf[MAX_DESC_LEN]={0};RECV(STDIN,(char*)bc,BARCODE_SZ);p=cgc_get_product_by_barcode((char*)bc);if(NULL==p){return-1;}RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));RECV(STDIN,(char*)&p->cost,sizeof(float));bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product));if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);desc_buf[bytes_recvd-1]='\0';desc_copy(p->desc,desc_buf,MAX_DESC_LEN);p->update_serial=cgc_get_next_update_serial();returnSUCCESS;}]
-------
Text=staticintcgc_do_onsale(void){Product*p=NULL;charbc[BARCODE_SZ]={0};unsignedintsale_percent=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint));if(100<=sale_percent)return-1;p->sfn=onsale_fn[sale_percent];returnSUCCESS;}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [staticint]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_do_onsale(void)]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{Product*p=NULL;charbc[BARCODE_SZ]={0};unsignedintsale_percent=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint));if(100<=sale_percent)return-1;p->sfn=onsale_fn[sale_percent];returnSUCCESS;}]
-------
Text=staticintcgc_do_nosale(void){Product*p=NULL;charbc[BARCODE_SZ]={0};unsignedintsale_percent=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;p->sfn=onsale_fn[0];returnSUCCESS;}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [staticint]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_do_nosale(void)]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{Product*p=NULL;charbc[BARCODE_SZ]={0};unsignedintsale_percent=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;p->sfn=onsale_fn[0];returnSUCCESS;}]
-------
Text=staticintcgc_do_list(void){Product*p=NULL;charoptions[4]={0};unsignedintcount=cgc_list_length(&inv);unsignedintd_len=0;floatsale_price=0.0;structnode*cur=cgc_list_head_node(&inv);structnode*end=cgc_list_end_marker(&inv);RECV(STDIN,options,sizeof(options));if(0==count)return-1;while((NULL!=cur)&&(cur!=end)){p=(Product*)cur->data;SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}cur=cgc_list_next_node(cur);}returnSUCCESS;}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [staticint]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_do_list(void)]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{Product*p=NULL;charoptions[4]={0};unsignedintcount=cgc_list_length(&inv);unsignedintd_len=0;floatsale_price=0.0;structnode*cur=cgc_list_head_node(&inv);structnode*end=cgc_list_end_marker(&inv);RECV(STDIN,options,sizeof(options));if(0==count)return-1;while((NULL!=cur)&&(cur!=end)){p=(Product*)cur->data;SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}cur=cgc_list_next_node(cur);}returnSUCCESS;}]
-------
Text=voidcgc_setup(void){cgc_list_init(&inv,cgc_free);cgc_load_inventory(&inv);}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [void]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_setup(void)]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{cgc_list_init(&inv,cgc_free);cgc_load_inventory(&inv);}]
-------
Text=shortcgc_process_cmd(void){charcmd[4];shortret=0;RECV(STDIN,cmd,sizeof(cmd));if(0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))){ret=cgc_do_buy();}elseif(0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))){ret=cgc_do_check();}elseif(0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))){ret=cgc_do_add();}elseif(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}returnret;}
Type=<class 'CParser.CParser.FunctionDefinitionContext'>
Child Count = 3
0 : <class 'CParser.CParser.FuncDeclarationSpecifiersContext'> [short]
1 : <class 'CParser.CParser.DeclaratorContext'> [cgc_process_cmd(void)]
2 : <class 'CParser.CParser.CompoundStatementContext'> [{charcmd[4];shortret=0;RECV(STDIN,cmd,sizeof(cmd));if(0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))){ret=cgc_do_buy();}elseif(0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))){ret=cgc_do_check();}elseif(0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))){ret=cgc_do_add();}elseif(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}returnret;}]
-------
Text=staticconstchar
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [static]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [const]
2 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=CMD_BUY[4]={'\xBE','\x0E','\xBE','\x0E'}
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [CMD_BUY[4]={'\xBE','\x0E','\xBE','\x0E'}]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=staticconstchar
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [static]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [const]
2 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=CMD_CHECK[4]={'\xC4','\xEC','\x4E','\xEE'}
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [CMD_CHECK[4]={'\xC4','\xEC','\x4E','\xEE'}]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=staticconstchar
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [static]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [const]
2 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=CMD_ADD[4]={'\xAD','\xDD','\xAD','\xDD'}
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [CMD_ADD[4]={'\xAD','\xDD','\xAD','\xDD'}]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=staticconstchar
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [static]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [const]
2 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=CMD_RM[4]={'\xDE','\xAD','\xDE','\xAD'}
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [CMD_RM[4]={'\xDE','\xAD','\xDE','\xAD'}]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=staticconstchar
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [static]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [const]
2 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=CMD_UPDATE[4]={'\x04','\xD4','\x7E','\x00'}
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [CMD_UPDATE[4]={'\x04','\xD4','\x7E','\x00'}]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=staticconstchar
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [static]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [const]
2 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=CMD_ONSALE[4]={'\x54','\x13','\x54','\x13'}
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [CMD_ONSALE[4]={'\x54','\x13','\x54','\x13'}]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=staticconstchar
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [static]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [const]
2 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=CMD_NOSALE[4]={'\x0F','\x0F','\x0F','\x0F'}
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [CMD_NOSALE[4]={'\x0F','\x0F','\x0F','\x0F'}]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=staticconstchar
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [static]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [const]
2 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=CMD_LIST[4]={'\x11','\x44','\x11','\x44'}
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [CMD_LIST[4]={'\x11','\x44','\x11','\x44'}]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=staticconstchar
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [static]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [const]
2 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=CMD_QUIT[4]={'\xFF','\xFF','\xFF','\xFF'}
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [CMD_QUIT[4]={'\xFF','\xFF','\xFF','\xFF'}]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=staticconstchar
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [static]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [const]
2 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=DESC_TERM[2]={'\xED','\0'}
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [DESC_TERM[2]={'\xED','\0'}]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=staticconstchar
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [static]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [const]
2 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=BUY_TERM[4]={'\xBB','\xBB','\xBB','\xBB'}
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [BUY_TERM[4]={'\xBB','\xBB','\xBB','\xBB'}]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=staticconstchar
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [static]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [const]
2 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=BUY_MORE[4]={'\xBD','\xBD','\xBD','\xBD'}
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [BUY_MORE[4]={'\xBD','\xBD','\xBD','\xBD'}]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Inventoryinv
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [Inventory]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [inv]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsignedint
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [unsignedint]
-------
Text=cgc_update_serial=0
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [cgc_update_serial=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=staticunsignedint
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 2
0 : <class 'CParser.CParser.FuncDeclarationSpecifierContext'> [static]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [unsignedint]
-------
Text=cgc_get_next_update_serial(void)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_get_next_update_serial(void)]
-------
Text={unsignedintbase=*(unsignedint*)FLAG_PAGE;unsignedintnext_update_serial=base+cgc_update_serial;cgc_update_serial++;returnnext_update_serial;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [unsignedintbase=*(unsignedint*)FLAG_PAGE;unsignedintnext_update_serial=base+cgc_update_serial;cgc_update_serial++;returnnext_update_serial;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=staticunsignedchar
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 2
0 : <class 'CParser.CParser.FuncDeclarationSpecifierContext'> [static]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [unsignedchar]
-------
Text=cgc_prod_has_bc(constvoid*product,void*barcode)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_prod_has_bc(constvoid*product,void*barcode)]
-------
Text={Product*p=(Product*)product;unsignedchar*bc=(unsignedchar*)barcode;if(0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)){returnTRUE;}returnFALSE;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [Product*p=(Product*)product;unsignedchar*bc=(unsignedchar*)barcode;if(0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)){returnTRUE;}returnFALSE;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=staticProduct*
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 2
0 : <class 'CParser.CParser.FuncDeclarationSpecifierContext'> [static]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [Product*]
-------
Text=cgc_get_product_by_barcode(charbc[])
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_get_product_by_barcode(charbc[])]
-------
Text={structnode*np=NULL;np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);if(NULL==np)returnNULL;elsereturn(Product*)np->data;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [structnode*np=NULL;np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);if(NULL==np)returnNULL;elsereturn(Product*)np->data;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=staticint
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 2
0 : <class 'CParser.CParser.FuncDeclarationSpecifierContext'> [static]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=cgc_do_buy(void)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_do_buy(void)]
-------
Text={Product*p=NULL;Product*p_copy=NULL;charbuy_status[4];charbc[BARCODE_SZ]={0};doublecost=0.0;structlistbuy_list;cgc_list_init(&buy_list,cgc_free);RECV(STDIN,buy_status,sizeof(buy_status));while(0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))){RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p){cgc_list_destroy(&buy_list);return-1;}p_copy=cgc_malloc(sizeof(Product));MALLOC_OK(p_copy);cgc_memcpy(p_copy,p,sizeof(Product));cgc_list_insert_at_end(&buy_list,p_copy);cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);RECV(STDIN,buy_status,sizeof(buy_status));}if(0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))){cgc_list_destroy(&buy_list);return-1;}SEND(STDOUT,(char*)&cost,sizeof(cost));cgc_list_destroy(&buy_list);returnSUCCESS;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [Product*p=NULL;Product*p_copy=NULL;charbuy_status[4];charbc[BARCODE_SZ]={0};doublecost=0.0;structlistbuy_list;cgc_list_init(&buy_list,cgc_free);RECV(STDIN,buy_status,sizeof(buy_status));while(0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))){RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p){cgc_list_destroy(&buy_list);return-1;}p_copy=cgc_malloc(sizeof(Product));MALLOC_OK(p_copy);cgc_memcpy(p_copy,p,sizeof(Product));cgc_list_insert_at_end(&buy_list,p_copy);cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);RECV(STDIN,buy_status,sizeof(buy_status));}if(0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))){cgc_list_destroy(&buy_list);return-1;}SEND(STDOUT,(char*)&cost,sizeof(cost));cgc_list_destroy(&buy_list);returnSUCCESS;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=staticint
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 2
0 : <class 'CParser.CParser.FuncDeclarationSpecifierContext'> [static]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=cgc_do_check(void)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_do_check(void)]
-------
Text={Product*p=NULL;charbc[BARCODE_SZ]={0};floatsale_price=0.0;unsignedintd_len=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);returnSUCCESS;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [Product*p=NULL;charbc[BARCODE_SZ]={0};floatsale_price=0.0;unsignedintd_len=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);returnSUCCESS;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=staticint
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 2
0 : <class 'CParser.CParser.FuncDeclarationSpecifierContext'> [static]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=cgc_do_add(void)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_do_add(void)]
-------
Text={Product*p=NULL;Product*p2=NULL;intbytes_recvd=0;p=cgc_malloc(sizeof(Product));MALLOC_OK(p);p->sfn=onsale_fn[0];p->update_serial=0;RECV(STDIN,(char*)p->barcode,BARCODE_SZ);p2=cgc_get_product_by_barcode((char*)p->barcode);if(NULL!=p2){cgc_free(p);return-1;}RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));RECV(STDIN,(char*)&p->cost,sizeof(float));bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product));if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);p->desc[bytes_recvd-1]='\0';cgc_list_insert_at_end(&inv,p);returnSUCCESS;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [Product*p=NULL;Product*p2=NULL;intbytes_recvd=0;p=cgc_malloc(sizeof(Product));MALLOC_OK(p);p->sfn=onsale_fn[0];p->update_serial=0;RECV(STDIN,(char*)p->barcode,BARCODE_SZ);p2=cgc_get_product_by_barcode((char*)p->barcode);if(NULL!=p2){cgc_free(p);return-1;}RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));RECV(STDIN,(char*)&p->cost,sizeof(float));bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product));if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);p->desc[bytes_recvd-1]='\0';cgc_list_insert_at_end(&inv,p);returnSUCCESS;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=staticint
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 2
0 : <class 'CParser.CParser.FuncDeclarationSpecifierContext'> [static]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=cgc_do_rm(void)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_do_rm(void)]
-------
Text={Product*p=NULL;charbc[BARCODE_SZ]={0};structnode*np=NULL;RECV(STDIN,bc,BARCODE_SZ);np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);if(NULL==np)return-1;cgc_list_remove_node(&inv,np);cgc_list_destroy_node(&inv,&np);returnSUCCESS;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [Product*p=NULL;charbc[BARCODE_SZ]={0};structnode*np=NULL;RECV(STDIN,bc,BARCODE_SZ);np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);if(NULL==np)return-1;cgc_list_remove_node(&inv,np);cgc_list_destroy_node(&inv,&np);returnSUCCESS;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=staticint
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 2
0 : <class 'CParser.CParser.FuncDeclarationSpecifierContext'> [static]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=cgc_do_update(void)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_do_update(void)]
-------
Text={intbytes_recvd=0;Product*p=NULL;unsignedint(*desc_copy)(void*dst,constvoid*src,unsignedintcnt)=cgc_memcpy;charbc[BARCODE_SZ]={0};chardesc_buf[MAX_DESC_LEN]={0};RECV(STDIN,(char*)bc,BARCODE_SZ);p=cgc_get_product_by_barcode((char*)bc);if(NULL==p){return-1;}RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));RECV(STDIN,(char*)&p->cost,sizeof(float));bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product));if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);desc_buf[bytes_recvd-1]='\0';desc_copy(p->desc,desc_buf,MAX_DESC_LEN);p->update_serial=cgc_get_next_update_serial();returnSUCCESS;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [intbytes_recvd=0;Product*p=NULL;unsignedint(*desc_copy)(void*dst,constvoid*src,unsignedintcnt)=cgc_memcpy;charbc[BARCODE_SZ]={0};chardesc_buf[MAX_DESC_LEN]={0};RECV(STDIN,(char*)bc,BARCODE_SZ);p=cgc_get_product_by_barcode((char*)bc);if(NULL==p){return-1;}RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));RECV(STDIN,(char*)&p->cost,sizeof(float));bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product));if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);desc_buf[bytes_recvd-1]='\0';desc_copy(p->desc,desc_buf,MAX_DESC_LEN);p->update_serial=cgc_get_next_update_serial();returnSUCCESS;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=staticint
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 2
0 : <class 'CParser.CParser.FuncDeclarationSpecifierContext'> [static]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=cgc_do_onsale(void)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_do_onsale(void)]
-------
Text={Product*p=NULL;charbc[BARCODE_SZ]={0};unsignedintsale_percent=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint));if(100<=sale_percent)return-1;p->sfn=onsale_fn[sale_percent];returnSUCCESS;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [Product*p=NULL;charbc[BARCODE_SZ]={0};unsignedintsale_percent=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint));if(100<=sale_percent)return-1;p->sfn=onsale_fn[sale_percent];returnSUCCESS;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=staticint
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 2
0 : <class 'CParser.CParser.FuncDeclarationSpecifierContext'> [static]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=cgc_do_nosale(void)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_do_nosale(void)]
-------
Text={Product*p=NULL;charbc[BARCODE_SZ]={0};unsignedintsale_percent=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;p->sfn=onsale_fn[0];returnSUCCESS;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [Product*p=NULL;charbc[BARCODE_SZ]={0};unsignedintsale_percent=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;p->sfn=onsale_fn[0];returnSUCCESS;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=staticint
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 2
0 : <class 'CParser.CParser.FuncDeclarationSpecifierContext'> [static]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=cgc_do_list(void)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_do_list(void)]
-------
Text={Product*p=NULL;charoptions[4]={0};unsignedintcount=cgc_list_length(&inv);unsignedintd_len=0;floatsale_price=0.0;structnode*cur=cgc_list_head_node(&inv);structnode*end=cgc_list_end_marker(&inv);RECV(STDIN,options,sizeof(options));if(0==count)return-1;while((NULL!=cur)&&(cur!=end)){p=(Product*)cur->data;SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}cur=cgc_list_next_node(cur);}returnSUCCESS;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [Product*p=NULL;charoptions[4]={0};unsignedintcount=cgc_list_length(&inv);unsignedintd_len=0;floatsale_price=0.0;structnode*cur=cgc_list_head_node(&inv);structnode*end=cgc_list_end_marker(&inv);RECV(STDIN,options,sizeof(options));if(0==count)return-1;while((NULL!=cur)&&(cur!=end)){p=(Product*)cur->data;SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}cur=cgc_list_next_node(cur);}returnSUCCESS;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=void
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [void]
-------
Text=cgc_setup(void)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_setup(void)]
-------
Text={cgc_list_init(&inv,cgc_free);cgc_load_inventory(&inv);}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [cgc_list_init(&inv,cgc_free);cgc_load_inventory(&inv);]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=short
Type=<class 'CParser.CParser.FuncDeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [short]
-------
Text=cgc_process_cmd(void)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_process_cmd(void)]
-------
Text={charcmd[4];shortret=0;RECV(STDIN,cmd,sizeof(cmd));if(0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))){ret=cgc_do_buy();}elseif(0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))){ret=cgc_do_check();}elseif(0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))){ret=cgc_do_add();}elseif(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}returnret;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [charcmd[4];shortret=0;RECV(STDIN,cmd,sizeof(cmd));if(0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))){ret=cgc_do_buy();}elseif(0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))){ret=cgc_do_check();}elseif(0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))){ret=cgc_do_add();}elseif(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}returnret;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=static
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StorageClassSpecifierContext'> [static]
-------
Text=const
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeQualifierContext'> [const]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=CMD_BUY[4]={'\xBE','\x0E','\xBE','\x0E'}
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [CMD_BUY[4]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [{'\xBE','\x0E','\xBE','\x0E'}]
-------
Text=static
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StorageClassSpecifierContext'> [static]
-------
Text=const
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeQualifierContext'> [const]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=CMD_CHECK[4]={'\xC4','\xEC','\x4E','\xEE'}
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [CMD_CHECK[4]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [{'\xC4','\xEC','\x4E','\xEE'}]
-------
Text=static
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StorageClassSpecifierContext'> [static]
-------
Text=const
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeQualifierContext'> [const]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=CMD_ADD[4]={'\xAD','\xDD','\xAD','\xDD'}
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [CMD_ADD[4]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [{'\xAD','\xDD','\xAD','\xDD'}]
-------
Text=static
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StorageClassSpecifierContext'> [static]
-------
Text=const
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeQualifierContext'> [const]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=CMD_RM[4]={'\xDE','\xAD','\xDE','\xAD'}
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [CMD_RM[4]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [{'\xDE','\xAD','\xDE','\xAD'}]
-------
Text=static
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StorageClassSpecifierContext'> [static]
-------
Text=const
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeQualifierContext'> [const]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=CMD_UPDATE[4]={'\x04','\xD4','\x7E','\x00'}
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [CMD_UPDATE[4]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [{'\x04','\xD4','\x7E','\x00'}]
-------
Text=static
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StorageClassSpecifierContext'> [static]
-------
Text=const
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeQualifierContext'> [const]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=CMD_ONSALE[4]={'\x54','\x13','\x54','\x13'}
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [CMD_ONSALE[4]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [{'\x54','\x13','\x54','\x13'}]
-------
Text=static
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StorageClassSpecifierContext'> [static]
-------
Text=const
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeQualifierContext'> [const]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=CMD_NOSALE[4]={'\x0F','\x0F','\x0F','\x0F'}
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [CMD_NOSALE[4]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [{'\x0F','\x0F','\x0F','\x0F'}]
-------
Text=static
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StorageClassSpecifierContext'> [static]
-------
Text=const
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeQualifierContext'> [const]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=CMD_LIST[4]={'\x11','\x44','\x11','\x44'}
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [CMD_LIST[4]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [{'\x11','\x44','\x11','\x44'}]
-------
Text=static
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StorageClassSpecifierContext'> [static]
-------
Text=const
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeQualifierContext'> [const]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=CMD_QUIT[4]={'\xFF','\xFF','\xFF','\xFF'}
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [CMD_QUIT[4]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [{'\xFF','\xFF','\xFF','\xFF'}]
-------
Text=static
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StorageClassSpecifierContext'> [static]
-------
Text=const
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeQualifierContext'> [const]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=DESC_TERM[2]={'\xED','\0'}
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [DESC_TERM[2]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [{'\xED','\0'}]
-------
Text=static
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StorageClassSpecifierContext'> [static]
-------
Text=const
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeQualifierContext'> [const]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=BUY_TERM[4]={'\xBB','\xBB','\xBB','\xBB'}
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [BUY_TERM[4]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [{'\xBB','\xBB','\xBB','\xBB'}]
-------
Text=static
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StorageClassSpecifierContext'> [static]
-------
Text=const
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeQualifierContext'> [const]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=BUY_MORE[4]={'\xBD','\xBD','\xBD','\xBD'}
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [BUY_MORE[4]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [{'\xBD','\xBD','\xBD','\xBD'}]
-------
Text=Inventory
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Inventory]
-------
Text=inv
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [inv]
-------
Text=unsignedint
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [unsignedint]
-------
Text=cgc_update_serial=0
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [cgc_update_serial]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=static
Type=<class 'CParser.CParser.FuncDeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StorageClassSpecifierContext'> [static]
-------
Text=unsignedint
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [unsignedint]
-------
Text=cgc_get_next_update_serial(void)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_get_next_update_serial]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ParameterTypeListContext'> [void]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsignedintbase=*(unsignedint*)FLAG_PAGE;unsignedintnext_update_serial=base+cgc_update_serial;cgc_update_serial++;returnnext_update_serial;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 4
0 : <class 'CParser.CParser.BlockItemContext'> [unsignedintbase=*(unsignedint*)FLAG_PAGE;]
1 : <class 'CParser.CParser.BlockItemContext'> [unsignedintnext_update_serial=base+cgc_update_serial;]
2 : <class 'CParser.CParser.BlockItemContext'> [cgc_update_serial++;]
3 : <class 'CParser.CParser.BlockItemContext'> [returnnext_update_serial;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=static
Type=<class 'CParser.CParser.FuncDeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StorageClassSpecifierContext'> [static]
-------
Text=unsignedchar
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [unsignedchar]
-------
Text=cgc_prod_has_bc(constvoid*product,void*barcode)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_prod_has_bc]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ParameterTypeListContext'> [constvoid*product,void*barcode]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product*p=(Product*)product;unsignedchar*bc=(unsignedchar*)barcode;if(0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)){returnTRUE;}returnFALSE;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 4
0 : <class 'CParser.CParser.BlockItemContext'> [Product*p=(Product*)product;]
1 : <class 'CParser.CParser.BlockItemContext'> [unsignedchar*bc=(unsignedchar*)barcode;]
2 : <class 'CParser.CParser.BlockItemContext'> [if(0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)){returnTRUE;}]
3 : <class 'CParser.CParser.BlockItemContext'> [returnFALSE;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=static
Type=<class 'CParser.CParser.FuncDeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StorageClassSpecifierContext'> [static]
-------
Text=Product*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product*]
-------
Text=cgc_get_product_by_barcode(charbc[])
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_get_product_by_barcode]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ParameterTypeListContext'> [charbc[]]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structnode*np=NULL;np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);if(NULL==np)returnNULL;elsereturn(Product*)np->data;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 3
0 : <class 'CParser.CParser.BlockItemContext'> [structnode*np=NULL;]
1 : <class 'CParser.CParser.BlockItemContext'> [np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);]
2 : <class 'CParser.CParser.BlockItemContext'> [if(NULL==np)returnNULL;elsereturn(Product*)np->data;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=static
Type=<class 'CParser.CParser.FuncDeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StorageClassSpecifierContext'> [static]
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=cgc_do_buy(void)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_do_buy]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ParameterTypeListContext'> [void]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product*p=NULL;Product*p_copy=NULL;charbuy_status[4];charbc[BARCODE_SZ]={0};doublecost=0.0;structlistbuy_list;cgc_list_init(&buy_list,cgc_free);RECV(STDIN,buy_status,sizeof(buy_status));while(0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))){RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p){cgc_list_destroy(&buy_list);return-1;}p_copy=cgc_malloc(sizeof(Product));MALLOC_OK(p_copy);cgc_memcpy(p_copy,p,sizeof(Product));cgc_list_insert_at_end(&buy_list,p_copy);cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);RECV(STDIN,buy_status,sizeof(buy_status));}if(0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))){cgc_list_destroy(&buy_list);return-1;}SEND(STDOUT,(char*)&cost,sizeof(cost));cgc_list_destroy(&buy_list);returnSUCCESS;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 13
0 : <class 'CParser.CParser.BlockItemContext'> [Product*p=NULL;]
1 : <class 'CParser.CParser.BlockItemContext'> [Product*p_copy=NULL;]
2 : <class 'CParser.CParser.BlockItemContext'> [charbuy_status[4];]
3 : <class 'CParser.CParser.BlockItemContext'> [charbc[BARCODE_SZ]={0};]
4 : <class 'CParser.CParser.BlockItemContext'> [doublecost=0.0;]
5 : <class 'CParser.CParser.BlockItemContext'> [structlistbuy_list;]
6 : <class 'CParser.CParser.BlockItemContext'> [cgc_list_init(&buy_list,cgc_free);]
7 : <class 'CParser.CParser.BlockItemContext'> [RECV(STDIN,buy_status,sizeof(buy_status));]
8 : <class 'CParser.CParser.BlockItemContext'> [while(0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))){RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p){cgc_list_destroy(&buy_list);return-1;}p_copy=cgc_malloc(sizeof(Product));MALLOC_OK(p_copy);cgc_memcpy(p_copy,p,sizeof(Product));cgc_list_insert_at_end(&buy_list,p_copy);cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);RECV(STDIN,buy_status,sizeof(buy_status));}]
9 : <class 'CParser.CParser.BlockItemContext'> [if(0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))){cgc_list_destroy(&buy_list);return-1;}]
10 : <class 'CParser.CParser.BlockItemContext'> [SEND(STDOUT,(char*)&cost,sizeof(cost));]
11 : <class 'CParser.CParser.BlockItemContext'> [cgc_list_destroy(&buy_list);]
12 : <class 'CParser.CParser.BlockItemContext'> [returnSUCCESS;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=static
Type=<class 'CParser.CParser.FuncDeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StorageClassSpecifierContext'> [static]
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=cgc_do_check(void)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_do_check]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ParameterTypeListContext'> [void]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product*p=NULL;charbc[BARCODE_SZ]={0};floatsale_price=0.0;unsignedintd_len=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);returnSUCCESS;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 14
0 : <class 'CParser.CParser.BlockItemContext'> [Product*p=NULL;]
1 : <class 'CParser.CParser.BlockItemContext'> [charbc[BARCODE_SZ]={0};]
2 : <class 'CParser.CParser.BlockItemContext'> [floatsale_price=0.0;]
3 : <class 'CParser.CParser.BlockItemContext'> [unsignedintd_len=0;]
4 : <class 'CParser.CParser.BlockItemContext'> [RECV(STDIN,bc,BARCODE_SZ);]
5 : <class 'CParser.CParser.BlockItemContext'> [p=cgc_get_product_by_barcode(bc);]
6 : <class 'CParser.CParser.BlockItemContext'> [if(NULL==p)return-1;]
7 : <class 'CParser.CParser.BlockItemContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));]
8 : <class 'CParser.CParser.BlockItemContext'> [sale_price=p->sfn(p->model_num,p->cost);]
9 : <class 'CParser.CParser.BlockItemContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float));]
10 : <class 'CParser.CParser.BlockItemContext'> [d_len=cgc_strlen(p->desc,'\0');]
11 : <class 'CParser.CParser.BlockItemContext'> [if(0<d_len)SEND(STDOUT,p->desc,d_len);]
12 : <class 'CParser.CParser.BlockItemContext'> [SEND(STDOUT,DESC_TERM,1);]
13 : <class 'CParser.CParser.BlockItemContext'> [returnSUCCESS;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=static
Type=<class 'CParser.CParser.FuncDeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StorageClassSpecifierContext'> [static]
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=cgc_do_add(void)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_do_add]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ParameterTypeListContext'> [void]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product*p=NULL;Product*p2=NULL;intbytes_recvd=0;p=cgc_malloc(sizeof(Product));MALLOC_OK(p);p->sfn=onsale_fn[0];p->update_serial=0;RECV(STDIN,(char*)p->barcode,BARCODE_SZ);p2=cgc_get_product_by_barcode((char*)p->barcode);if(NULL!=p2){cgc_free(p);return-1;}RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));RECV(STDIN,(char*)&p->cost,sizeof(float));bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product));if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);p->desc[bytes_recvd-1]='\0';cgc_list_insert_at_end(&inv,p);returnSUCCESS;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 17
0 : <class 'CParser.CParser.BlockItemContext'> [Product*p=NULL;]
1 : <class 'CParser.CParser.BlockItemContext'> [Product*p2=NULL;]
2 : <class 'CParser.CParser.BlockItemContext'> [intbytes_recvd=0;]
3 : <class 'CParser.CParser.BlockItemContext'> [p=cgc_malloc(sizeof(Product));]
4 : <class 'CParser.CParser.BlockItemContext'> [MALLOC_OK(p);]
5 : <class 'CParser.CParser.BlockItemContext'> [p->sfn=onsale_fn[0];]
6 : <class 'CParser.CParser.BlockItemContext'> [p->update_serial=0;]
7 : <class 'CParser.CParser.BlockItemContext'> [RECV(STDIN,(char*)p->barcode,BARCODE_SZ);]
8 : <class 'CParser.CParser.BlockItemContext'> [p2=cgc_get_product_by_barcode((char*)p->barcode);]
9 : <class 'CParser.CParser.BlockItemContext'> [if(NULL!=p2){cgc_free(p);return-1;}]
10 : <class 'CParser.CParser.BlockItemContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));]
11 : <class 'CParser.CParser.BlockItemContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float));]
12 : <class 'CParser.CParser.BlockItemContext'> [bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product));]
13 : <class 'CParser.CParser.BlockItemContext'> [if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);]
14 : <class 'CParser.CParser.BlockItemContext'> [p->desc[bytes_recvd-1]='\0';]
15 : <class 'CParser.CParser.BlockItemContext'> [cgc_list_insert_at_end(&inv,p);]
16 : <class 'CParser.CParser.BlockItemContext'> [returnSUCCESS;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=static
Type=<class 'CParser.CParser.FuncDeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StorageClassSpecifierContext'> [static]
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=cgc_do_rm(void)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_do_rm]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ParameterTypeListContext'> [void]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product*p=NULL;charbc[BARCODE_SZ]={0};structnode*np=NULL;RECV(STDIN,bc,BARCODE_SZ);np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);if(NULL==np)return-1;cgc_list_remove_node(&inv,np);cgc_list_destroy_node(&inv,&np);returnSUCCESS;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 9
0 : <class 'CParser.CParser.BlockItemContext'> [Product*p=NULL;]
1 : <class 'CParser.CParser.BlockItemContext'> [charbc[BARCODE_SZ]={0};]
2 : <class 'CParser.CParser.BlockItemContext'> [structnode*np=NULL;]
3 : <class 'CParser.CParser.BlockItemContext'> [RECV(STDIN,bc,BARCODE_SZ);]
4 : <class 'CParser.CParser.BlockItemContext'> [np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);]
5 : <class 'CParser.CParser.BlockItemContext'> [if(NULL==np)return-1;]
6 : <class 'CParser.CParser.BlockItemContext'> [cgc_list_remove_node(&inv,np);]
7 : <class 'CParser.CParser.BlockItemContext'> [cgc_list_destroy_node(&inv,&np);]
8 : <class 'CParser.CParser.BlockItemContext'> [returnSUCCESS;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=static
Type=<class 'CParser.CParser.FuncDeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StorageClassSpecifierContext'> [static]
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=cgc_do_update(void)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_do_update]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ParameterTypeListContext'> [void]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=intbytes_recvd=0;Product*p=NULL;unsignedint(*desc_copy)(void*dst,constvoid*src,unsignedintcnt)=cgc_memcpy;charbc[BARCODE_SZ]={0};chardesc_buf[MAX_DESC_LEN]={0};RECV(STDIN,(char*)bc,BARCODE_SZ);p=cgc_get_product_by_barcode((char*)bc);if(NULL==p){return-1;}RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));RECV(STDIN,(char*)&p->cost,sizeof(float));bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product));if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);desc_buf[bytes_recvd-1]='\0';desc_copy(p->desc,desc_buf,MAX_DESC_LEN);p->update_serial=cgc_get_next_update_serial();returnSUCCESS;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 16
0 : <class 'CParser.CParser.BlockItemContext'> [intbytes_recvd=0;]
1 : <class 'CParser.CParser.BlockItemContext'> [Product*p=NULL;]
2 : <class 'CParser.CParser.BlockItemContext'> [unsignedint(*desc_copy)(void*dst,constvoid*src,unsignedintcnt)=cgc_memcpy;]
3 : <class 'CParser.CParser.BlockItemContext'> [charbc[BARCODE_SZ]={0};]
4 : <class 'CParser.CParser.BlockItemContext'> [chardesc_buf[MAX_DESC_LEN]={0};]
5 : <class 'CParser.CParser.BlockItemContext'> [RECV(STDIN,(char*)bc,BARCODE_SZ);]
6 : <class 'CParser.CParser.BlockItemContext'> [p=cgc_get_product_by_barcode((char*)bc);]
7 : <class 'CParser.CParser.BlockItemContext'> [if(NULL==p){return-1;}]
8 : <class 'CParser.CParser.BlockItemContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));]
9 : <class 'CParser.CParser.BlockItemContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float));]
10 : <class 'CParser.CParser.BlockItemContext'> [bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product));]
11 : <class 'CParser.CParser.BlockItemContext'> [if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);]
12 : <class 'CParser.CParser.BlockItemContext'> [desc_buf[bytes_recvd-1]='\0';]
13 : <class 'CParser.CParser.BlockItemContext'> [desc_copy(p->desc,desc_buf,MAX_DESC_LEN);]
14 : <class 'CParser.CParser.BlockItemContext'> [p->update_serial=cgc_get_next_update_serial();]
15 : <class 'CParser.CParser.BlockItemContext'> [returnSUCCESS;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=static
Type=<class 'CParser.CParser.FuncDeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StorageClassSpecifierContext'> [static]
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=cgc_do_onsale(void)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_do_onsale]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ParameterTypeListContext'> [void]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product*p=NULL;charbc[BARCODE_SZ]={0};unsignedintsale_percent=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint));if(100<=sale_percent)return-1;p->sfn=onsale_fn[sale_percent];returnSUCCESS;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 10
0 : <class 'CParser.CParser.BlockItemContext'> [Product*p=NULL;]
1 : <class 'CParser.CParser.BlockItemContext'> [charbc[BARCODE_SZ]={0};]
2 : <class 'CParser.CParser.BlockItemContext'> [unsignedintsale_percent=0;]
3 : <class 'CParser.CParser.BlockItemContext'> [RECV(STDIN,bc,BARCODE_SZ);]
4 : <class 'CParser.CParser.BlockItemContext'> [p=cgc_get_product_by_barcode(bc);]
5 : <class 'CParser.CParser.BlockItemContext'> [if(NULL==p)return-1;]
6 : <class 'CParser.CParser.BlockItemContext'> [RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint));]
7 : <class 'CParser.CParser.BlockItemContext'> [if(100<=sale_percent)return-1;]
8 : <class 'CParser.CParser.BlockItemContext'> [p->sfn=onsale_fn[sale_percent];]
9 : <class 'CParser.CParser.BlockItemContext'> [returnSUCCESS;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=static
Type=<class 'CParser.CParser.FuncDeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StorageClassSpecifierContext'> [static]
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=cgc_do_nosale(void)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_do_nosale]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ParameterTypeListContext'> [void]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product*p=NULL;charbc[BARCODE_SZ]={0};unsignedintsale_percent=0;RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p)return-1;p->sfn=onsale_fn[0];returnSUCCESS;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 8
0 : <class 'CParser.CParser.BlockItemContext'> [Product*p=NULL;]
1 : <class 'CParser.CParser.BlockItemContext'> [charbc[BARCODE_SZ]={0};]
2 : <class 'CParser.CParser.BlockItemContext'> [unsignedintsale_percent=0;]
3 : <class 'CParser.CParser.BlockItemContext'> [RECV(STDIN,bc,BARCODE_SZ);]
4 : <class 'CParser.CParser.BlockItemContext'> [p=cgc_get_product_by_barcode(bc);]
5 : <class 'CParser.CParser.BlockItemContext'> [if(NULL==p)return-1;]
6 : <class 'CParser.CParser.BlockItemContext'> [p->sfn=onsale_fn[0];]
7 : <class 'CParser.CParser.BlockItemContext'> [returnSUCCESS;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=static
Type=<class 'CParser.CParser.FuncDeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StorageClassSpecifierContext'> [static]
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=cgc_do_list(void)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_do_list]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ParameterTypeListContext'> [void]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product*p=NULL;charoptions[4]={0};unsignedintcount=cgc_list_length(&inv);unsignedintd_len=0;floatsale_price=0.0;structnode*cur=cgc_list_head_node(&inv);structnode*end=cgc_list_end_marker(&inv);RECV(STDIN,options,sizeof(options));if(0==count)return-1;while((NULL!=cur)&&(cur!=end)){p=(Product*)cur->data;SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}cur=cgc_list_next_node(cur);}returnSUCCESS;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 11
0 : <class 'CParser.CParser.BlockItemContext'> [Product*p=NULL;]
1 : <class 'CParser.CParser.BlockItemContext'> [charoptions[4]={0};]
2 : <class 'CParser.CParser.BlockItemContext'> [unsignedintcount=cgc_list_length(&inv);]
3 : <class 'CParser.CParser.BlockItemContext'> [unsignedintd_len=0;]
4 : <class 'CParser.CParser.BlockItemContext'> [floatsale_price=0.0;]
5 : <class 'CParser.CParser.BlockItemContext'> [structnode*cur=cgc_list_head_node(&inv);]
6 : <class 'CParser.CParser.BlockItemContext'> [structnode*end=cgc_list_end_marker(&inv);]
7 : <class 'CParser.CParser.BlockItemContext'> [RECV(STDIN,options,sizeof(options));]
8 : <class 'CParser.CParser.BlockItemContext'> [if(0==count)return-1;]
9 : <class 'CParser.CParser.BlockItemContext'> [while((NULL!=cur)&&(cur!=end)){p=(Product*)cur->data;SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}cur=cgc_list_next_node(cur);}]
10 : <class 'CParser.CParser.BlockItemContext'> [returnSUCCESS;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
-------
Text=cgc_setup(void)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_setup]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ParameterTypeListContext'> [void]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_init(&inv,cgc_free);cgc_load_inventory(&inv);
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 2
0 : <class 'CParser.CParser.BlockItemContext'> [cgc_list_init(&inv,cgc_free);]
1 : <class 'CParser.CParser.BlockItemContext'> [cgc_load_inventory(&inv);]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=short
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [short]
-------
Text=cgc_process_cmd(void)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_process_cmd]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ParameterTypeListContext'> [void]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=charcmd[4];shortret=0;RECV(STDIN,cmd,sizeof(cmd));if(0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))){ret=cgc_do_buy();}elseif(0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))){ret=cgc_do_check();}elseif(0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))){ret=cgc_do_add();}elseif(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}returnret;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 5
0 : <class 'CParser.CParser.BlockItemContext'> [charcmd[4];]
1 : <class 'CParser.CParser.BlockItemContext'> [shortret=0;]
2 : <class 'CParser.CParser.BlockItemContext'> [RECV(STDIN,cmd,sizeof(cmd));]
3 : <class 'CParser.CParser.BlockItemContext'> [if(0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))){ret=cgc_do_buy();}elseif(0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))){ret=cgc_do_check();}elseif(0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))){ret=cgc_do_add();}elseif(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}]
4 : <class 'CParser.CParser.BlockItemContext'> [returnret;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=static
Type=<class 'CParser.CParser.StorageClassSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [static]
-------
Text=const
Type=<class 'CParser.CParser.TypeQualifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [const]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=CMD_BUY[4]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [CMD_BUY[4]]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={'\xBE','\x0E','\xBE','\x0E'}
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.InitializerListContext'> ['\xBE','\x0E','\xBE','\x0E']
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=static
Type=<class 'CParser.CParser.StorageClassSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [static]
-------
Text=const
Type=<class 'CParser.CParser.TypeQualifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [const]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=CMD_CHECK[4]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [CMD_CHECK[4]]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={'\xC4','\xEC','\x4E','\xEE'}
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.InitializerListContext'> ['\xC4','\xEC','\x4E','\xEE']
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=static
Type=<class 'CParser.CParser.StorageClassSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [static]
-------
Text=const
Type=<class 'CParser.CParser.TypeQualifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [const]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=CMD_ADD[4]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [CMD_ADD[4]]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={'\xAD','\xDD','\xAD','\xDD'}
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.InitializerListContext'> ['\xAD','\xDD','\xAD','\xDD']
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=static
Type=<class 'CParser.CParser.StorageClassSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [static]
-------
Text=const
Type=<class 'CParser.CParser.TypeQualifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [const]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=CMD_RM[4]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [CMD_RM[4]]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={'\xDE','\xAD','\xDE','\xAD'}
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.InitializerListContext'> ['\xDE','\xAD','\xDE','\xAD']
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=static
Type=<class 'CParser.CParser.StorageClassSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [static]
-------
Text=const
Type=<class 'CParser.CParser.TypeQualifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [const]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=CMD_UPDATE[4]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [CMD_UPDATE[4]]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={'\x04','\xD4','\x7E','\x00'}
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.InitializerListContext'> ['\x04','\xD4','\x7E','\x00']
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=static
Type=<class 'CParser.CParser.StorageClassSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [static]
-------
Text=const
Type=<class 'CParser.CParser.TypeQualifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [const]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=CMD_ONSALE[4]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [CMD_ONSALE[4]]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={'\x54','\x13','\x54','\x13'}
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.InitializerListContext'> ['\x54','\x13','\x54','\x13']
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=static
Type=<class 'CParser.CParser.StorageClassSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [static]
-------
Text=const
Type=<class 'CParser.CParser.TypeQualifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [const]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=CMD_NOSALE[4]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [CMD_NOSALE[4]]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={'\x0F','\x0F','\x0F','\x0F'}
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.InitializerListContext'> ['\x0F','\x0F','\x0F','\x0F']
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=static
Type=<class 'CParser.CParser.StorageClassSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [static]
-------
Text=const
Type=<class 'CParser.CParser.TypeQualifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [const]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=CMD_LIST[4]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [CMD_LIST[4]]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={'\x11','\x44','\x11','\x44'}
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.InitializerListContext'> ['\x11','\x44','\x11','\x44']
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=static
Type=<class 'CParser.CParser.StorageClassSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [static]
-------
Text=const
Type=<class 'CParser.CParser.TypeQualifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [const]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=CMD_QUIT[4]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [CMD_QUIT[4]]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={'\xFF','\xFF','\xFF','\xFF'}
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.InitializerListContext'> ['\xFF','\xFF','\xFF','\xFF']
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=static
Type=<class 'CParser.CParser.StorageClassSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [static]
-------
Text=const
Type=<class 'CParser.CParser.TypeQualifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [const]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=DESC_TERM[2]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [DESC_TERM[2]]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={'\xED','\0'}
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.InitializerListContext'> ['\xED','\0']
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=static
Type=<class 'CParser.CParser.StorageClassSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [static]
-------
Text=const
Type=<class 'CParser.CParser.TypeQualifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [const]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=BUY_TERM[4]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [BUY_TERM[4]]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={'\xBB','\xBB','\xBB','\xBB'}
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.InitializerListContext'> ['\xBB','\xBB','\xBB','\xBB']
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=static
Type=<class 'CParser.CParser.StorageClassSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [static]
-------
Text=const
Type=<class 'CParser.CParser.TypeQualifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [const]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=BUY_MORE[4]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [BUY_MORE[4]]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={'\xBD','\xBD','\xBD','\xBD'}
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.InitializerListContext'> ['\xBD','\xBD','\xBD','\xBD']
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=Inventory
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [Inventory]
-------
Text=inv
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [inv]
-------
Text=unsignedint
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [unsigned]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=cgc_update_serial
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cgc_update_serial]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=static
Type=<class 'CParser.CParser.StorageClassSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [static]
-------
Text=unsignedint
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [unsigned]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=cgc_get_next_update_serial
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_get_next_update_serial]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.ParameterTypeListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterListContext'> [void]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsignedintbase=*(unsignedint*)FLAG_PAGE;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [unsignedintbase=*(unsignedint*)FLAG_PAGE;]
-------
Text=unsignedintnext_update_serial=base+cgc_update_serial;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [unsignedintnext_update_serial=base+cgc_update_serial;]
-------
Text=cgc_update_serial++;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_update_serial++;]
-------
Text=returnnext_update_serial;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnnext_update_serial;]
-------
Text=static
Type=<class 'CParser.CParser.StorageClassSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [static]
-------
Text=unsignedchar
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [unsigned]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=cgc_prod_has_bc
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_prod_has_bc]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=constvoid*product,void*barcode
Type=<class 'CParser.CParser.ParameterTypeListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterListContext'> [constvoid*product,void*barcode]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product*p=(Product*)product;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [Product*p=(Product*)product;]
-------
Text=unsignedchar*bc=(unsignedchar*)barcode;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [unsignedchar*bc=(unsignedchar*)barcode;]
-------
Text=if(0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)){returnTRUE;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)){returnTRUE;}]
-------
Text=returnFALSE;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnFALSE;]
-------
Text=static
Type=<class 'CParser.CParser.StorageClassSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [static]
-------
Text=Product*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=cgc_get_product_by_barcode
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_get_product_by_barcode]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=charbc[]
Type=<class 'CParser.CParser.ParameterTypeListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterListContext'> [charbc[]]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structnode*np=NULL;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [structnode*np=NULL;]
-------
Text=np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);]
-------
Text=if(NULL==np)returnNULL;elsereturn(Product*)np->data;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(NULL==np)returnNULL;elsereturn(Product*)np->data;]
-------
Text=static
Type=<class 'CParser.CParser.StorageClassSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [static]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=cgc_do_buy
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_do_buy]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.ParameterTypeListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterListContext'> [void]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product*p=NULL;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [Product*p=NULL;]
-------
Text=Product*p_copy=NULL;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [Product*p_copy=NULL;]
-------
Text=charbuy_status[4];
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [charbuy_status[4];]
-------
Text=charbc[BARCODE_SZ]={0};
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [charbc[BARCODE_SZ]={0};]
-------
Text=doublecost=0.0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [doublecost=0.0;]
-------
Text=structlistbuy_list;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [structlistbuy_list;]
-------
Text=cgc_list_init(&buy_list,cgc_free);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_list_init(&buy_list,cgc_free);]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [RECV(STDIN,buy_status,sizeof(buy_status));]
-------
Text=while(0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))){RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p){cgc_list_destroy(&buy_list);return-1;}p_copy=cgc_malloc(sizeof(Product));MALLOC_OK(p_copy);cgc_memcpy(p_copy,p,sizeof(Product));cgc_list_insert_at_end(&buy_list,p_copy);cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);RECV(STDIN,buy_status,sizeof(buy_status));}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [while(0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))){RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p){cgc_list_destroy(&buy_list);return-1;}p_copy=cgc_malloc(sizeof(Product));MALLOC_OK(p_copy);cgc_memcpy(p_copy,p,sizeof(Product));cgc_list_insert_at_end(&buy_list,p_copy);cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);RECV(STDIN,buy_status,sizeof(buy_status));}]
-------
Text=if(0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))){cgc_list_destroy(&buy_list);return-1;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))){cgc_list_destroy(&buy_list);return-1;}]
-------
Text=SEND(STDOUT,(char*)&cost,sizeof(cost));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [SEND(STDOUT,(char*)&cost,sizeof(cost));]
-------
Text=cgc_list_destroy(&buy_list);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_list_destroy(&buy_list);]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnSUCCESS;]
-------
Text=static
Type=<class 'CParser.CParser.StorageClassSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [static]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=cgc_do_check
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_do_check]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.ParameterTypeListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterListContext'> [void]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product*p=NULL;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [Product*p=NULL;]
-------
Text=charbc[BARCODE_SZ]={0};
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [charbc[BARCODE_SZ]={0};]
-------
Text=floatsale_price=0.0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [floatsale_price=0.0;]
-------
Text=unsignedintd_len=0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [unsignedintd_len=0;]
-------
Text=RECV(STDIN,bc,BARCODE_SZ);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [RECV(STDIN,bc,BARCODE_SZ);]
-------
Text=p=cgc_get_product_by_barcode(bc);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [p=cgc_get_product_by_barcode(bc);]
-------
Text=if(NULL==p)return-1;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(NULL==p)return-1;]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));]
-------
Text=sale_price=p->sfn(p->model_num,p->cost);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [sale_price=p->sfn(p->model_num,p->cost);]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float));]
-------
Text=d_len=cgc_strlen(p->desc,'\0');
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [d_len=cgc_strlen(p->desc,'\0');]
-------
Text=if(0<d_len)SEND(STDOUT,p->desc,d_len);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(0<d_len)SEND(STDOUT,p->desc,d_len);]
-------
Text=SEND(STDOUT,DESC_TERM,1);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [SEND(STDOUT,DESC_TERM,1);]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnSUCCESS;]
-------
Text=static
Type=<class 'CParser.CParser.StorageClassSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [static]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=cgc_do_add
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_do_add]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.ParameterTypeListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterListContext'> [void]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product*p=NULL;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [Product*p=NULL;]
-------
Text=Product*p2=NULL;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [Product*p2=NULL;]
-------
Text=intbytes_recvd=0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [intbytes_recvd=0;]
-------
Text=p=cgc_malloc(sizeof(Product));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [p=cgc_malloc(sizeof(Product));]
-------
Text=MALLOC_OK(p);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [MALLOC_OK(p);]
-------
Text=p->sfn=onsale_fn[0];
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [p->sfn=onsale_fn[0];]
-------
Text=p->update_serial=0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [p->update_serial=0;]
-------
Text=RECV(STDIN,(char*)p->barcode,BARCODE_SZ);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [RECV(STDIN,(char*)p->barcode,BARCODE_SZ);]
-------
Text=p2=cgc_get_product_by_barcode((char*)p->barcode);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [p2=cgc_get_product_by_barcode((char*)p->barcode);]
-------
Text=if(NULL!=p2){cgc_free(p);return-1;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(NULL!=p2){cgc_free(p);return-1;}]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float));]
-------
Text=bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product));]
-------
Text=if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);]
-------
Text=p->desc[bytes_recvd-1]='\0';
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [p->desc[bytes_recvd-1]='\0';]
-------
Text=cgc_list_insert_at_end(&inv,p);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_list_insert_at_end(&inv,p);]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnSUCCESS;]
-------
Text=static
Type=<class 'CParser.CParser.StorageClassSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [static]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=cgc_do_rm
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_do_rm]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.ParameterTypeListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterListContext'> [void]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product*p=NULL;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [Product*p=NULL;]
-------
Text=charbc[BARCODE_SZ]={0};
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [charbc[BARCODE_SZ]={0};]
-------
Text=structnode*np=NULL;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [structnode*np=NULL;]
-------
Text=RECV(STDIN,bc,BARCODE_SZ);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [RECV(STDIN,bc,BARCODE_SZ);]
-------
Text=np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);]
-------
Text=if(NULL==np)return-1;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(NULL==np)return-1;]
-------
Text=cgc_list_remove_node(&inv,np);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_list_remove_node(&inv,np);]
-------
Text=cgc_list_destroy_node(&inv,&np);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_list_destroy_node(&inv,&np);]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnSUCCESS;]
-------
Text=static
Type=<class 'CParser.CParser.StorageClassSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [static]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=cgc_do_update
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_do_update]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.ParameterTypeListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterListContext'> [void]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=intbytes_recvd=0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [intbytes_recvd=0;]
-------
Text=Product*p=NULL;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [Product*p=NULL;]
-------
Text=unsignedint(*desc_copy)(void*dst,constvoid*src,unsignedintcnt)=cgc_memcpy;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [unsignedint(*desc_copy)(void*dst,constvoid*src,unsignedintcnt)=cgc_memcpy;]
-------
Text=charbc[BARCODE_SZ]={0};
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [charbc[BARCODE_SZ]={0};]
-------
Text=chardesc_buf[MAX_DESC_LEN]={0};
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [chardesc_buf[MAX_DESC_LEN]={0};]
-------
Text=RECV(STDIN,(char*)bc,BARCODE_SZ);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [RECV(STDIN,(char*)bc,BARCODE_SZ);]
-------
Text=p=cgc_get_product_by_barcode((char*)bc);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [p=cgc_get_product_by_barcode((char*)bc);]
-------
Text=if(NULL==p){return-1;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(NULL==p){return-1;}]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float));]
-------
Text=bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product));]
-------
Text=if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);]
-------
Text=desc_buf[bytes_recvd-1]='\0';
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [desc_buf[bytes_recvd-1]='\0';]
-------
Text=desc_copy(p->desc,desc_buf,MAX_DESC_LEN);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [desc_copy(p->desc,desc_buf,MAX_DESC_LEN);]
-------
Text=p->update_serial=cgc_get_next_update_serial();
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [p->update_serial=cgc_get_next_update_serial();]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnSUCCESS;]
-------
Text=static
Type=<class 'CParser.CParser.StorageClassSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [static]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=cgc_do_onsale
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_do_onsale]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.ParameterTypeListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterListContext'> [void]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product*p=NULL;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [Product*p=NULL;]
-------
Text=charbc[BARCODE_SZ]={0};
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [charbc[BARCODE_SZ]={0};]
-------
Text=unsignedintsale_percent=0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [unsignedintsale_percent=0;]
-------
Text=RECV(STDIN,bc,BARCODE_SZ);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [RECV(STDIN,bc,BARCODE_SZ);]
-------
Text=p=cgc_get_product_by_barcode(bc);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [p=cgc_get_product_by_barcode(bc);]
-------
Text=if(NULL==p)return-1;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(NULL==p)return-1;]
-------
Text=RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint));]
-------
Text=if(100<=sale_percent)return-1;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(100<=sale_percent)return-1;]
-------
Text=p->sfn=onsale_fn[sale_percent];
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [p->sfn=onsale_fn[sale_percent];]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnSUCCESS;]
-------
Text=static
Type=<class 'CParser.CParser.StorageClassSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [static]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=cgc_do_nosale
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_do_nosale]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.ParameterTypeListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterListContext'> [void]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product*p=NULL;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [Product*p=NULL;]
-------
Text=charbc[BARCODE_SZ]={0};
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [charbc[BARCODE_SZ]={0};]
-------
Text=unsignedintsale_percent=0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [unsignedintsale_percent=0;]
-------
Text=RECV(STDIN,bc,BARCODE_SZ);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [RECV(STDIN,bc,BARCODE_SZ);]
-------
Text=p=cgc_get_product_by_barcode(bc);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [p=cgc_get_product_by_barcode(bc);]
-------
Text=if(NULL==p)return-1;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(NULL==p)return-1;]
-------
Text=p->sfn=onsale_fn[0];
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [p->sfn=onsale_fn[0];]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnSUCCESS;]
-------
Text=static
Type=<class 'CParser.CParser.StorageClassSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [static]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=cgc_do_list
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_do_list]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.ParameterTypeListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterListContext'> [void]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product*p=NULL;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [Product*p=NULL;]
-------
Text=charoptions[4]={0};
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [charoptions[4]={0};]
-------
Text=unsignedintcount=cgc_list_length(&inv);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [unsignedintcount=cgc_list_length(&inv);]
-------
Text=unsignedintd_len=0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [unsignedintd_len=0;]
-------
Text=floatsale_price=0.0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [floatsale_price=0.0;]
-------
Text=structnode*cur=cgc_list_head_node(&inv);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [structnode*cur=cgc_list_head_node(&inv);]
-------
Text=structnode*end=cgc_list_end_marker(&inv);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [structnode*end=cgc_list_end_marker(&inv);]
-------
Text=RECV(STDIN,options,sizeof(options));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [RECV(STDIN,options,sizeof(options));]
-------
Text=if(0==count)return-1;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(0==count)return-1;]
-------
Text=while((NULL!=cur)&&(cur!=end)){p=(Product*)cur->data;SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}cur=cgc_list_next_node(cur);}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [while((NULL!=cur)&&(cur!=end)){p=(Product*)cur->data;SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}cur=cgc_list_next_node(cur);}]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnSUCCESS;]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=cgc_setup
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_setup]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.ParameterTypeListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterListContext'> [void]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_init(&inv,cgc_free);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_list_init(&inv,cgc_free);]
-------
Text=cgc_load_inventory(&inv);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_load_inventory(&inv);]
-------
Text=short
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [short]
-------
Text=cgc_process_cmd
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_process_cmd]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.ParameterTypeListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterListContext'> [void]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=charcmd[4];
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [charcmd[4];]
-------
Text=shortret=0;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [shortret=0;]
-------
Text=RECV(STDIN,cmd,sizeof(cmd));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [RECV(STDIN,cmd,sizeof(cmd));]
-------
Text=if(0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))){ret=cgc_do_buy();}elseif(0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))){ret=cgc_do_check();}elseif(0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))){ret=cgc_do_add();}elseif(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))){ret=cgc_do_buy();}elseif(0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))){ret=cgc_do_check();}elseif(0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))){ret=cgc_do_add();}elseif(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}]
-------
Text=returnret;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnret;]
-------
Text=static
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=const
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_BUY[4]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [CMD_BUY]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [4]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xBE','\x0E','\xBE','\x0E'
Type=<class 'CParser.CParser.InitializerListContext'>
Child Count = 7
0 : <class 'CParser.CParser.InitializerContext'> ['\xBE']
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.InitializerContext'> ['\x0E']
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.InitializerContext'> ['\xBE']
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
6 : <class 'CParser.CParser.InitializerContext'> ['\x0E']
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=static
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=const
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_CHECK[4]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [CMD_CHECK]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [4]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xC4','\xEC','\x4E','\xEE'
Type=<class 'CParser.CParser.InitializerListContext'>
Child Count = 7
0 : <class 'CParser.CParser.InitializerContext'> ['\xC4']
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.InitializerContext'> ['\xEC']
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.InitializerContext'> ['\x4E']
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
6 : <class 'CParser.CParser.InitializerContext'> ['\xEE']
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=static
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=const
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_ADD[4]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [CMD_ADD]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [4]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xAD','\xDD','\xAD','\xDD'
Type=<class 'CParser.CParser.InitializerListContext'>
Child Count = 7
0 : <class 'CParser.CParser.InitializerContext'> ['\xAD']
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.InitializerContext'> ['\xDD']
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.InitializerContext'> ['\xAD']
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
6 : <class 'CParser.CParser.InitializerContext'> ['\xDD']
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=static
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=const
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_RM[4]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [CMD_RM]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [4]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xDE','\xAD','\xDE','\xAD'
Type=<class 'CParser.CParser.InitializerListContext'>
Child Count = 7
0 : <class 'CParser.CParser.InitializerContext'> ['\xDE']
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.InitializerContext'> ['\xAD']
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.InitializerContext'> ['\xDE']
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
6 : <class 'CParser.CParser.InitializerContext'> ['\xAD']
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=static
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=const
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_UPDATE[4]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [CMD_UPDATE]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [4]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x04','\xD4','\x7E','\x00'
Type=<class 'CParser.CParser.InitializerListContext'>
Child Count = 7
0 : <class 'CParser.CParser.InitializerContext'> ['\x04']
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.InitializerContext'> ['\xD4']
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.InitializerContext'> ['\x7E']
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
6 : <class 'CParser.CParser.InitializerContext'> ['\x00']
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=static
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=const
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_ONSALE[4]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [CMD_ONSALE]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [4]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x54','\x13','\x54','\x13'
Type=<class 'CParser.CParser.InitializerListContext'>
Child Count = 7
0 : <class 'CParser.CParser.InitializerContext'> ['\x54']
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.InitializerContext'> ['\x13']
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.InitializerContext'> ['\x54']
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
6 : <class 'CParser.CParser.InitializerContext'> ['\x13']
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=static
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=const
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_NOSALE[4]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [CMD_NOSALE]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [4]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x0F','\x0F','\x0F','\x0F'
Type=<class 'CParser.CParser.InitializerListContext'>
Child Count = 7
0 : <class 'CParser.CParser.InitializerContext'> ['\x0F']
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.InitializerContext'> ['\x0F']
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.InitializerContext'> ['\x0F']
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
6 : <class 'CParser.CParser.InitializerContext'> ['\x0F']
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=static
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=const
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_LIST[4]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [CMD_LIST]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [4]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x11','\x44','\x11','\x44'
Type=<class 'CParser.CParser.InitializerListContext'>
Child Count = 7
0 : <class 'CParser.CParser.InitializerContext'> ['\x11']
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.InitializerContext'> ['\x44']
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.InitializerContext'> ['\x11']
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
6 : <class 'CParser.CParser.InitializerContext'> ['\x44']
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=static
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=const
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_QUIT[4]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [CMD_QUIT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [4]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xFF','\xFF','\xFF','\xFF'
Type=<class 'CParser.CParser.InitializerListContext'>
Child Count = 7
0 : <class 'CParser.CParser.InitializerContext'> ['\xFF']
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.InitializerContext'> ['\xFF']
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.InitializerContext'> ['\xFF']
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
6 : <class 'CParser.CParser.InitializerContext'> ['\xFF']
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=static
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=const
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=DESC_TERM[2]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [DESC_TERM]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [2]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xED','\0'
Type=<class 'CParser.CParser.InitializerListContext'>
Child Count = 3
0 : <class 'CParser.CParser.InitializerContext'> ['\xED']
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.InitializerContext'> ['\0']
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=static
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=const
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BUY_TERM[4]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [BUY_TERM]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [4]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xBB','\xBB','\xBB','\xBB'
Type=<class 'CParser.CParser.InitializerListContext'>
Child Count = 7
0 : <class 'CParser.CParser.InitializerContext'> ['\xBB']
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.InitializerContext'> ['\xBB']
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.InitializerContext'> ['\xBB']
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
6 : <class 'CParser.CParser.InitializerContext'> ['\xBB']
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=static
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=const
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BUY_MORE[4]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [BUY_MORE]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [4]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xBD','\xBD','\xBD','\xBD'
Type=<class 'CParser.CParser.InitializerListContext'>
Child Count = 7
0 : <class 'CParser.CParser.InitializerContext'> ['\xBD']
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.InitializerContext'> ['\xBD']
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.InitializerContext'> ['\xBD']
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
6 : <class 'CParser.CParser.InitializerContext'> ['\xBD']
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Inventory
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [Inventory]
-------
Text=inv
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [inv]
-------
Text=unsigned
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_update_serial
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_update_serial]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=static
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsigned
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_next_update_serial
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.ParameterListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterDeclarationContext'> [void]
-------
Text=unsignedintbase=*(unsignedint*)FLAG_PAGE;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [unsignedint]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [base=*(unsignedint*)FLAG_PAGE]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=unsignedintnext_update_serial=base+cgc_update_serial;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [unsignedint]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [next_update_serial=base+cgc_update_serial]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_update_serial++;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_update_serial++;]
-------
Text=returnnext_update_serial;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnnext_update_serial;]
-------
Text=static
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsigned
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_prod_has_bc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=constvoid*product,void*barcode
Type=<class 'CParser.CParser.ParameterListContext'>
Child Count = 3
0 : <class 'CParser.CParser.ParameterDeclarationContext'> [constvoid*product]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.ParameterDeclarationContext'> [void*barcode]
-------
Text=Product*p=(Product*)product;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [Product*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [p=(Product*)product]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=unsignedchar*bc=(unsignedchar*)barcode;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [unsignedchar*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [bc=(unsignedchar*)barcode]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)){returnTRUE;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)){returnTRUE;}]
-------
Text=returnFALSE;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnFALSE;]
-------
Text=static
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [Product]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=cgc_get_product_by_barcode
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=charbc[]
Type=<class 'CParser.CParser.ParameterListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterDeclarationContext'> [charbc[]]
-------
Text=structnode*np=NULL;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [structnode*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [np=NULL]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);]
-------
Text=if(NULL==np)returnNULL;elsereturn(Product*)np->data;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(NULL==np)returnNULL;elsereturn(Product*)np->data;]
-------
Text=static
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_buy
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.ParameterListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterDeclarationContext'> [void]
-------
Text=Product*p=NULL;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [Product*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [p=NULL]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=Product*p_copy=NULL;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [Product*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [p_copy=NULL]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=charbuy_status[4];
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [char]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [buy_status[4]]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=charbc[BARCODE_SZ]={0};
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [char]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [bc[BARCODE_SZ]={0}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=doublecost=0.0;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [double]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [cost=0.0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=structlistbuy_list;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [structlistbuy_list]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_list_init(&buy_list,cgc_free);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_list_init(&buy_list,cgc_free);]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [RECV(STDIN,buy_status,sizeof(buy_status));]
-------
Text=while(0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))){RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p){cgc_list_destroy(&buy_list);return-1;}p_copy=cgc_malloc(sizeof(Product));MALLOC_OK(p_copy);cgc_memcpy(p_copy,p,sizeof(Product));cgc_list_insert_at_end(&buy_list,p_copy);cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);RECV(STDIN,buy_status,sizeof(buy_status));}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.IterationStatementContext'> [while(0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))){RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p){cgc_list_destroy(&buy_list);return-1;}p_copy=cgc_malloc(sizeof(Product));MALLOC_OK(p_copy);cgc_memcpy(p_copy,p,sizeof(Product));cgc_list_insert_at_end(&buy_list,p_copy);cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);RECV(STDIN,buy_status,sizeof(buy_status));}]
-------
Text=if(0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))){cgc_list_destroy(&buy_list);return-1;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))){cgc_list_destroy(&buy_list);return-1;}]
-------
Text=SEND(STDOUT,(char*)&cost,sizeof(cost));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [SEND(STDOUT,(char*)&cost,sizeof(cost));]
-------
Text=cgc_list_destroy(&buy_list);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_list_destroy(&buy_list);]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnSUCCESS;]
-------
Text=static
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_check
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.ParameterListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterDeclarationContext'> [void]
-------
Text=Product*p=NULL;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [Product*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [p=NULL]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=charbc[BARCODE_SZ]={0};
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [char]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [bc[BARCODE_SZ]={0}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=floatsale_price=0.0;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [float]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [sale_price=0.0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=unsignedintd_len=0;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [unsignedint]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [d_len=0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=RECV(STDIN,bc,BARCODE_SZ);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [RECV(STDIN,bc,BARCODE_SZ);]
-------
Text=p=cgc_get_product_by_barcode(bc);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [p=cgc_get_product_by_barcode(bc);]
-------
Text=if(NULL==p)return-1;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(NULL==p)return-1;]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));]
-------
Text=sale_price=p->sfn(p->model_num,p->cost);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [sale_price=p->sfn(p->model_num,p->cost);]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float));]
-------
Text=d_len=cgc_strlen(p->desc,'\0');
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [d_len=cgc_strlen(p->desc,'\0');]
-------
Text=if(0<d_len)SEND(STDOUT,p->desc,d_len);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0<d_len)SEND(STDOUT,p->desc,d_len);]
-------
Text=SEND(STDOUT,DESC_TERM,1);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [SEND(STDOUT,DESC_TERM,1);]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnSUCCESS;]
-------
Text=static
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_add
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.ParameterListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterDeclarationContext'> [void]
-------
Text=Product*p=NULL;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [Product*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [p=NULL]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=Product*p2=NULL;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [Product*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [p2=NULL]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=intbytes_recvd=0;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [int]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [bytes_recvd=0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=p=cgc_malloc(sizeof(Product));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [p=cgc_malloc(sizeof(Product));]
-------
Text=MALLOC_OK(p);
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [MALLOC_OK]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [(p)]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=p->sfn=onsale_fn[0];
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [p->sfn=onsale_fn[0];]
-------
Text=p->update_serial=0;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [p->update_serial=0;]
-------
Text=RECV(STDIN,(char*)p->barcode,BARCODE_SZ);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [RECV(STDIN,(char*)p->barcode,BARCODE_SZ);]
-------
Text=p2=cgc_get_product_by_barcode((char*)p->barcode);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [p2=cgc_get_product_by_barcode((char*)p->barcode);]
-------
Text=if(NULL!=p2){cgc_free(p);return-1;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(NULL!=p2){cgc_free(p);return-1;}]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float));]
-------
Text=bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product));]
-------
Text=if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);]
-------
Text=p->desc[bytes_recvd-1]='\0';
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [p->desc[bytes_recvd-1]='\0';]
-------
Text=cgc_list_insert_at_end(&inv,p);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_list_insert_at_end(&inv,p);]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnSUCCESS;]
-------
Text=static
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_rm
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.ParameterListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterDeclarationContext'> [void]
-------
Text=Product*p=NULL;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [Product*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [p=NULL]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=charbc[BARCODE_SZ]={0};
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [char]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [bc[BARCODE_SZ]={0}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=structnode*np=NULL;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [structnode*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [np=NULL]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=RECV(STDIN,bc,BARCODE_SZ);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [RECV(STDIN,bc,BARCODE_SZ);]
-------
Text=np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);]
-------
Text=if(NULL==np)return-1;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(NULL==np)return-1;]
-------
Text=cgc_list_remove_node(&inv,np);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_list_remove_node(&inv,np);]
-------
Text=cgc_list_destroy_node(&inv,&np);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_list_destroy_node(&inv,&np);]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnSUCCESS;]
-------
Text=static
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_update
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.ParameterListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterDeclarationContext'> [void]
-------
Text=intbytes_recvd=0;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [int]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [bytes_recvd=0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=Product*p=NULL;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [Product*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [p=NULL]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=unsignedint(*desc_copy)(void*dst,constvoid*src,unsignedintcnt)=cgc_memcpy;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [unsignedint]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [(*desc_copy)(void*dst,constvoid*src,unsignedintcnt)=cgc_memcpy]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=charbc[BARCODE_SZ]={0};
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [char]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [bc[BARCODE_SZ]={0}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=chardesc_buf[MAX_DESC_LEN]={0};
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [char]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [desc_buf[MAX_DESC_LEN]={0}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=RECV(STDIN,(char*)bc,BARCODE_SZ);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [RECV(STDIN,(char*)bc,BARCODE_SZ);]
-------
Text=p=cgc_get_product_by_barcode((char*)bc);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [p=cgc_get_product_by_barcode((char*)bc);]
-------
Text=if(NULL==p){return-1;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(NULL==p){return-1;}]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float));]
-------
Text=bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product));]
-------
Text=if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);]
-------
Text=desc_buf[bytes_recvd-1]='\0';
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [desc_buf[bytes_recvd-1]='\0';]
-------
Text=desc_copy(p->desc,desc_buf,MAX_DESC_LEN);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [desc_copy(p->desc,desc_buf,MAX_DESC_LEN);]
-------
Text=p->update_serial=cgc_get_next_update_serial();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [p->update_serial=cgc_get_next_update_serial();]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnSUCCESS;]
-------
Text=static
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_onsale
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.ParameterListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterDeclarationContext'> [void]
-------
Text=Product*p=NULL;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [Product*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [p=NULL]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=charbc[BARCODE_SZ]={0};
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [char]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [bc[BARCODE_SZ]={0}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=unsignedintsale_percent=0;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [unsignedint]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [sale_percent=0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=RECV(STDIN,bc,BARCODE_SZ);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [RECV(STDIN,bc,BARCODE_SZ);]
-------
Text=p=cgc_get_product_by_barcode(bc);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [p=cgc_get_product_by_barcode(bc);]
-------
Text=if(NULL==p)return-1;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(NULL==p)return-1;]
-------
Text=RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint));]
-------
Text=if(100<=sale_percent)return-1;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(100<=sale_percent)return-1;]
-------
Text=p->sfn=onsale_fn[sale_percent];
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [p->sfn=onsale_fn[sale_percent];]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnSUCCESS;]
-------
Text=static
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_nosale
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.ParameterListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterDeclarationContext'> [void]
-------
Text=Product*p=NULL;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [Product*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [p=NULL]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=charbc[BARCODE_SZ]={0};
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [char]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [bc[BARCODE_SZ]={0}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=unsignedintsale_percent=0;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [unsignedint]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [sale_percent=0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=RECV(STDIN,bc,BARCODE_SZ);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [RECV(STDIN,bc,BARCODE_SZ);]
-------
Text=p=cgc_get_product_by_barcode(bc);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [p=cgc_get_product_by_barcode(bc);]
-------
Text=if(NULL==p)return-1;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(NULL==p)return-1;]
-------
Text=p->sfn=onsale_fn[0];
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [p->sfn=onsale_fn[0];]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnSUCCESS;]
-------
Text=static
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_list
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.ParameterListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterDeclarationContext'> [void]
-------
Text=Product*p=NULL;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [Product*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [p=NULL]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=charoptions[4]={0};
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [char]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [options[4]={0}]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=unsignedintcount=cgc_list_length(&inv);
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [unsignedint]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [count=cgc_list_length(&inv)]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=unsignedintd_len=0;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [unsignedint]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [d_len=0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=floatsale_price=0.0;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [float]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [sale_price=0.0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=structnode*cur=cgc_list_head_node(&inv);
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [structnode*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [cur=cgc_list_head_node(&inv)]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=structnode*end=cgc_list_end_marker(&inv);
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [structnode*]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [end=cgc_list_end_marker(&inv)]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=RECV(STDIN,options,sizeof(options));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [RECV(STDIN,options,sizeof(options));]
-------
Text=if(0==count)return-1;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0==count)return-1;]
-------
Text=while((NULL!=cur)&&(cur!=end)){p=(Product*)cur->data;SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}cur=cgc_list_next_node(cur);}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.IterationStatementContext'> [while((NULL!=cur)&&(cur!=end)){p=(Product*)cur->data;SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}cur=cgc_list_next_node(cur);}]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnSUCCESS;]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_setup
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.ParameterListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterDeclarationContext'> [void]
-------
Text=cgc_list_init(&inv,cgc_free);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_list_init(&inv,cgc_free);]
-------
Text=cgc_load_inventory(&inv);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_load_inventory(&inv);]
-------
Text=short
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_process_cmd
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.ParameterListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterDeclarationContext'> [void]
-------
Text=charcmd[4];
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [char]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [cmd[4]]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=shortret=0;
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [short]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [ret=0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=RECV(STDIN,cmd,sizeof(cmd));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [RECV(STDIN,cmd,sizeof(cmd));]
-------
Text=if(0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))){ret=cgc_do_buy();}elseif(0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))){ret=cgc_do_check();}elseif(0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))){ret=cgc_do_add();}elseif(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))){ret=cgc_do_buy();}elseif(0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))){ret=cgc_do_check();}elseif(0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))){ret=cgc_do_add();}elseif(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}]
-------
Text=returnret;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnret;]
-------
Text=CMD_BUY
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_BUY]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [4]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xBE'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xBE']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x0E'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\x0E']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xBE'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xBE']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x0E'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\x0E']
-------
Text=CMD_CHECK
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_CHECK]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [4]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xC4'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xC4']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xEC'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xEC']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x4E'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\x4E']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xEE'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xEE']
-------
Text=CMD_ADD
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_ADD]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [4]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xAD'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xAD']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xDD'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xDD']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xAD'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xAD']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xDD'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xDD']
-------
Text=CMD_RM
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_RM]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [4]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xDE'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xDE']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xAD'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xAD']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xDE'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xDE']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xAD'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xAD']
-------
Text=CMD_UPDATE
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_UPDATE]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [4]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x04'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\x04']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xD4'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xD4']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x7E'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\x7E']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x00'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\x00']
-------
Text=CMD_ONSALE
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_ONSALE]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [4]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x54'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\x54']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x13'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\x13']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x54'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\x54']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x13'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\x13']
-------
Text=CMD_NOSALE
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_NOSALE]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [4]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x0F'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\x0F']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x0F'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\x0F']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x0F'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\x0F']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x0F'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\x0F']
-------
Text=CMD_LIST
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_LIST]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [4]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x11'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\x11']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x44'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\x44']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x11'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\x11']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x44'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\x44']
-------
Text=CMD_QUIT
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_QUIT]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [4]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xFF'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xFF']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xFF'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xFF']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xFF'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xFF']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xFF'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xFF']
-------
Text=DESC_TERM
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [DESC_TERM]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=2
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [2]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xED'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xED']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\0'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\0']
-------
Text=BUY_TERM
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [BUY_TERM]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [4]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xBB'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xBB']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xBB'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xBB']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xBB'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xBB']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xBB'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xBB']
-------
Text=BUY_MORE
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [BUY_MORE]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [4]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xBD'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xBD']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xBD'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xBD']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xBD'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xBD']
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xBD'
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\xBD']
-------
Text=Inventory
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=inv
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_update_serial
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=void
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifiers2Context'> [void]
-------
Text=unsignedint
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [unsignedint]
-------
Text=base=*(unsignedint*)FLAG_PAGE
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [base=*(unsignedint*)FLAG_PAGE]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsignedint
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [unsignedint]
-------
Text=next_update_serial=base+cgc_update_serial
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [next_update_serial=base+cgc_update_serial]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_update_serial++;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_update_serial++]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=returnnext_update_serial;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [next_update_serial]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=constvoid*product
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [constvoid*]
1 : <class 'CParser.CParser.DeclaratorContext'> [product]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*barcode
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [void*]
1 : <class 'CParser.CParser.DeclaratorContext'> [barcode]
-------
Text=Product*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [Product*]
-------
Text=p=(Product*)product
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [p=(Product*)product]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsignedchar*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [unsignedchar*]
-------
Text=bc=(unsignedchar*)barcode
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [bc=(unsignedchar*)barcode]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)){returnTRUE;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{returnTRUE;}]
-------
Text=returnFALSE;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [FALSE]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=Product
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [Product]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=charbc[]
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [char]
1 : <class 'CParser.CParser.DeclaratorContext'> [bc[]]
-------
Text=structnode*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [structnode*]
-------
Text=np=NULL
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [np=NULL]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(NULL==np)returnNULL;elsereturn(Product*)np->data;
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [NULL==np]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [returnNULL;]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [return(Product*)np->data;]
-------
Text=void
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifiers2Context'> [void]
-------
Text=Product*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [Product*]
-------
Text=p=NULL
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [p=NULL]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [Product*]
-------
Text=p_copy=NULL
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [p_copy=NULL]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=buy_status[4]
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [buy_status[4]]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=bc[BARCODE_SZ]={0}
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [bc[BARCODE_SZ]={0}]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=double
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [double]
-------
Text=cost=0.0
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [cost=0.0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structlistbuy_list
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [structlist]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [buy_list]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_init(&buy_list,cgc_free);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_list_init(&buy_list,cgc_free)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=while(0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))){RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p){cgc_list_destroy(&buy_list);return-1;}p_copy=cgc_malloc(sizeof(Product));MALLOC_OK(p_copy);cgc_memcpy(p_copy,p,sizeof(Product));cgc_list_insert_at_end(&buy_list,p_copy);cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);RECV(STDIN,buy_status,sizeof(buy_status));}
Type=<class 'CParser.CParser.IterationStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [while]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p){cgc_list_destroy(&buy_list);return-1;}p_copy=cgc_malloc(sizeof(Product));MALLOC_OK(p_copy);cgc_memcpy(p_copy,p,sizeof(Product));cgc_list_insert_at_end(&buy_list,p_copy);cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);RECV(STDIN,buy_status,sizeof(buy_status));}]
-------
Text=if(0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))){cgc_list_destroy(&buy_list);return-1;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{cgc_list_destroy(&buy_list);return-1;}]
-------
Text=SEND(STDOUT,(char*)&cost,sizeof(cost));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [SEND(STDOUT,(char*)&cost,sizeof(cost))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_list_destroy(&buy_list);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_list_destroy(&buy_list)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [SUCCESS]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=void
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifiers2Context'> [void]
-------
Text=Product*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [Product*]
-------
Text=p=NULL
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [p=NULL]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=bc[BARCODE_SZ]={0}
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [bc[BARCODE_SZ]={0}]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=float
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [float]
-------
Text=sale_price=0.0
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [sale_price=0.0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsignedint
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [unsignedint]
-------
Text=d_len=0
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [d_len=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV(STDIN,bc,BARCODE_SZ);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=p=cgc_get_product_by_barcode(bc);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [p=cgc_get_product_by_barcode(bc)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(NULL==p)return-1;
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [NULL==p]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [return-1;]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=sale_price=p->sfn(p->model_num,p->cost);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [sale_price=p->sfn(p->model_num,p->cost)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=d_len=cgc_strlen(p->desc,'\0');
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [d_len=cgc_strlen(p->desc,'\0')]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(0<d_len)SEND(STDOUT,p->desc,d_len);
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0<d_len]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [SEND(STDOUT,p->desc,d_len);]
-------
Text=SEND(STDOUT,DESC_TERM,1);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [SUCCESS]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=void
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifiers2Context'> [void]
-------
Text=Product*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [Product*]
-------
Text=p=NULL
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [p=NULL]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [Product*]
-------
Text=p2=NULL
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [p2=NULL]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=bytes_recvd=0
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [bytes_recvd=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p=cgc_malloc(sizeof(Product));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [p=cgc_malloc(sizeof(Product))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=MALLOC_OK
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [MALLOC_OK]
-------
Text=(p)
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [(p)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->sfn=onsale_fn[0];
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [p->sfn=onsale_fn[0]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=p->update_serial=0;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [p->update_serial=0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=RECV(STDIN,(char*)p->barcode,BARCODE_SZ);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [RECV(STDIN,(char*)p->barcode,BARCODE_SZ)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=p2=cgc_get_product_by_barcode((char*)p->barcode);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [p2=cgc_get_product_by_barcode((char*)p->barcode)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(NULL!=p2){cgc_free(p);return-1;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [NULL!=p2]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{cgc_free(p);return-1;}]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0>=bytes_recvd]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [cgc__terminate(ERRNO_RECV);]
-------
Text=p->desc[bytes_recvd-1]='\0';
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [p->desc[bytes_recvd-1]='\0']
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_list_insert_at_end(&inv,p);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_list_insert_at_end(&inv,p)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [SUCCESS]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=void
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifiers2Context'> [void]
-------
Text=Product*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [Product*]
-------
Text=p=NULL
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [p=NULL]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=bc[BARCODE_SZ]={0}
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [bc[BARCODE_SZ]={0}]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structnode*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [structnode*]
-------
Text=np=NULL
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [np=NULL]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV(STDIN,bc,BARCODE_SZ);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(NULL==np)return-1;
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [NULL==np]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [return-1;]
-------
Text=cgc_list_remove_node(&inv,np);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_list_remove_node(&inv,np)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_list_destroy_node(&inv,&np);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_list_destroy_node(&inv,&np)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [SUCCESS]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=void
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifiers2Context'> [void]
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [int]
-------
Text=bytes_recvd=0
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [bytes_recvd=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [Product*]
-------
Text=p=NULL
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [p=NULL]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsignedint
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [unsignedint]
-------
Text=(*desc_copy)(void*dst,constvoid*src,unsignedintcnt)=cgc_memcpy
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [(*desc_copy)(void*dst,constvoid*src,unsignedintcnt)=cgc_memcpy]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=bc[BARCODE_SZ]={0}
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [bc[BARCODE_SZ]={0}]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=desc_buf[MAX_DESC_LEN]={0}
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [desc_buf[MAX_DESC_LEN]={0}]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV(STDIN,(char*)bc,BARCODE_SZ);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [RECV(STDIN,(char*)bc,BARCODE_SZ)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=p=cgc_get_product_by_barcode((char*)bc);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [p=cgc_get_product_by_barcode((char*)bc)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(NULL==p){return-1;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [NULL==p]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{return-1;}]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(0>=bytes_recvd)cgc__terminate(ERRNO_RECV);
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0>=bytes_recvd]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [cgc__terminate(ERRNO_RECV);]
-------
Text=desc_buf[bytes_recvd-1]='\0';
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [desc_buf[bytes_recvd-1]='\0']
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=desc_copy(p->desc,desc_buf,MAX_DESC_LEN);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [desc_copy(p->desc,desc_buf,MAX_DESC_LEN)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=p->update_serial=cgc_get_next_update_serial();
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [p->update_serial=cgc_get_next_update_serial()]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [SUCCESS]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=void
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifiers2Context'> [void]
-------
Text=Product*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [Product*]
-------
Text=p=NULL
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [p=NULL]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=bc[BARCODE_SZ]={0}
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [bc[BARCODE_SZ]={0}]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsignedint
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [unsignedint]
-------
Text=sale_percent=0
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [sale_percent=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV(STDIN,bc,BARCODE_SZ);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=p=cgc_get_product_by_barcode(bc);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [p=cgc_get_product_by_barcode(bc)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(NULL==p)return-1;
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [NULL==p]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [return-1;]
-------
Text=RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(100<=sale_percent)return-1;
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [100<=sale_percent]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [return-1;]
-------
Text=p->sfn=onsale_fn[sale_percent];
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [p->sfn=onsale_fn[sale_percent]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [SUCCESS]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=void
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifiers2Context'> [void]
-------
Text=Product*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [Product*]
-------
Text=p=NULL
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [p=NULL]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=bc[BARCODE_SZ]={0}
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [bc[BARCODE_SZ]={0}]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsignedint
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [unsignedint]
-------
Text=sale_percent=0
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [sale_percent=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV(STDIN,bc,BARCODE_SZ);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=p=cgc_get_product_by_barcode(bc);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [p=cgc_get_product_by_barcode(bc)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(NULL==p)return-1;
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [NULL==p]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [return-1;]
-------
Text=p->sfn=onsale_fn[0];
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [p->sfn=onsale_fn[0]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [SUCCESS]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=void
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifiers2Context'> [void]
-------
Text=Product*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [Product*]
-------
Text=p=NULL
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [p=NULL]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=options[4]={0}
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [options[4]={0}]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsignedint
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [unsignedint]
-------
Text=count=cgc_list_length(&inv)
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [count=cgc_list_length(&inv)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsignedint
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [unsignedint]
-------
Text=d_len=0
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [d_len=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=float
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [float]
-------
Text=sale_price=0.0
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [sale_price=0.0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structnode*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [structnode*]
-------
Text=cur=cgc_list_head_node(&inv)
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [cur=cgc_list_head_node(&inv)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structnode*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [structnode*]
-------
Text=end=cgc_list_end_marker(&inv)
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [end=cgc_list_end_marker(&inv)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV(STDIN,options,sizeof(options));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [RECV(STDIN,options,sizeof(options))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(0==count)return-1;
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0==count]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [return-1;]
-------
Text=while((NULL!=cur)&&(cur!=end)){p=(Product*)cur->data;SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}cur=cgc_list_next_node(cur);}
Type=<class 'CParser.CParser.IterationStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [while]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [(NULL!=cur)&&(cur!=end)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{p=(Product*)cur->data;SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}cur=cgc_list_next_node(cur);}]
-------
Text=returnSUCCESS;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [SUCCESS]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=void
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifiers2Context'> [void]
-------
Text=cgc_list_init(&inv,cgc_free);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_list_init(&inv,cgc_free)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_load_inventory(&inv);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_load_inventory(&inv)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=void
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifiers2Context'> [void]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=cmd[4]
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [cmd[4]]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=short
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [short]
-------
Text=ret=0
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [ret=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV(STDIN,cmd,sizeof(cmd));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [RECV(STDIN,cmd,sizeof(cmd))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))){ret=cgc_do_buy();}elseif(0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))){ret=cgc_do_check();}elseif(0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))){ret=cgc_do_add();}elseif(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{ret=cgc_do_buy();}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [if(0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))){ret=cgc_do_check();}elseif(0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))){ret=cgc_do_add();}elseif(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}]
-------
Text=returnret;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [ret]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=CMD_BUY
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [4]
-------
Text='\xBE'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\x0E']
-------
Text='\xBE'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\x0E']
-------
Text=CMD_CHECK
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [4]
-------
Text='\xC4'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xC4']
-------
Text='\xEC'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xEC']
-------
Text='\x4E'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\x4E']
-------
Text='\xEE'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xEE']
-------
Text=CMD_ADD
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [4]
-------
Text='\xAD'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xDD']
-------
Text='\xAD'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xDD']
-------
Text=CMD_RM
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [4]
-------
Text='\xDE'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xAD']
-------
Text='\xDE'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xAD']
-------
Text=CMD_UPDATE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [4]
-------
Text='\x04'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\x04']
-------
Text='\xD4'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xD4']
-------
Text='\x7E'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\x7E']
-------
Text='\x00'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\x00']
-------
Text=CMD_ONSALE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [4]
-------
Text='\x54'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\x13']
-------
Text='\x54'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\x13']
-------
Text=CMD_NOSALE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [4]
-------
Text='\x0F'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\x0F']
-------
Text=CMD_LIST
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [4]
-------
Text='\x11'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\x44']
-------
Text='\x11'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\x44']
-------
Text=CMD_QUIT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [4]
-------
Text='\xFF'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xFF']
-------
Text=DESC_TERM
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=2
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [2]
-------
Text='\xED'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xED']
-------
Text='\0'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\0']
-------
Text=BUY_TERM
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [4]
-------
Text='\xBB'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xBB']
-------
Text=BUY_MORE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [4]
-------
Text='\xBD'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\xBD']
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifiers2Context'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [void]
-------
Text=unsignedint
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [unsignedint]
-------
Text=base=*(unsignedint*)FLAG_PAGE
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [base]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [*(unsignedint*)FLAG_PAGE]
-------
Text=unsignedint
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [unsignedint]
-------
Text=next_update_serial=base+cgc_update_serial
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [next_update_serial]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [base+cgc_update_serial]
-------
Text=cgc_update_serial++
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_update_serial++]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=next_update_serial
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [next_update_serial]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=constvoid*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [const]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [void*]
-------
Text=product
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [product]
-------
Text=void*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [void*]
-------
Text=barcode
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [barcode]
-------
Text=Product*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product*]
-------
Text=p=(Product*)product
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [(Product*)product]
-------
Text=unsignedchar*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [unsignedchar*]
-------
Text=bc=(unsignedchar*)barcode
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [bc]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [(unsignedchar*)barcode]
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={returnTRUE;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{returnTRUE;}]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=FALSE
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [FALSE]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [char]
-------
Text=bc[]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [bc[]]
-------
Text=structnode*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structnode*]
-------
Text=np=NULL
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [np]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [NULL]
-------
Text=np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL==np
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL==np]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returnNULL;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnNULL;]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return(Product*)np->data;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [return(Product*)np->data;]
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifiers2Context'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [void]
-------
Text=Product*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product*]
-------
Text=p=NULL
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [NULL]
-------
Text=Product*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product*]
-------
Text=p_copy=NULL
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [p_copy]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [NULL]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=buy_status[4]
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclaratorContext'> [buy_status[4]]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=bc[BARCODE_SZ]={0}
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [bc[BARCODE_SZ]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [{0}]
-------
Text=double
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [double]
-------
Text=cost=0.0
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [cost]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [0.0]
-------
Text=structlist
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structlist]
-------
Text=buy_list
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [buy_list]
-------
Text=cgc_list_init(&buy_list,cgc_free)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_list_init(&buy_list,cgc_free)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=while
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p){cgc_list_destroy(&buy_list);return-1;}p_copy=cgc_malloc(sizeof(Product));MALLOC_OK(p_copy);cgc_memcpy(p_copy,p,sizeof(Product));cgc_list_insert_at_end(&buy_list,p_copy);cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);RECV(STDIN,buy_status,sizeof(buy_status));}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p){cgc_list_destroy(&buy_list);return-1;}p_copy=cgc_malloc(sizeof(Product));MALLOC_OK(p_copy);cgc_memcpy(p_copy,p,sizeof(Product));cgc_list_insert_at_end(&buy_list,p_copy);cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);RECV(STDIN,buy_status,sizeof(buy_status));}]
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={cgc_list_destroy(&buy_list);return-1;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{cgc_list_destroy(&buy_list);return-1;}]
-------
Text=SEND(STDOUT,(char*)&cost,sizeof(cost))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SEND(STDOUT,(char*)&cost,sizeof(cost))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SUCCESS]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifiers2Context'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [void]
-------
Text=Product*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product*]
-------
Text=p=NULL
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [NULL]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=bc[BARCODE_SZ]={0}
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [bc[BARCODE_SZ]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [{0}]
-------
Text=float
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [float]
-------
Text=sale_price=0.0
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [sale_price]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [0.0]
-------
Text=unsignedint
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [unsignedint]
-------
Text=d_len=0
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [d_len]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p=cgc_get_product_by_barcode(bc)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL==p
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL==p]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return-1;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [return-1;]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sale_price=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sale_price=p->sfn(p->model_num,p->cost)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=d_len=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [d_len=cgc_strlen(p->desc,'\0')]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0<d_len
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0<d_len]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SEND(STDOUT,p->desc,d_len);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [SEND(STDOUT,p->desc,d_len);]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SUCCESS]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifiers2Context'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [void]
-------
Text=Product*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product*]
-------
Text=p=NULL
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [NULL]
-------
Text=Product*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product*]
-------
Text=p2=NULL
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [p2]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [NULL]
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=bytes_recvd=0
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [bytes_recvd]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=p=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p=cgc_malloc(sizeof(Product))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=MALLOC_OK
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [MALLOC_OK]
-------
Text=(p)
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclaratorContext'> [(p)]
-------
Text=p->sfn=onsale_fn[0]
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p->sfn=onsale_fn[0]]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->update_serial=0
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p->update_serial=0]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV(STDIN,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [RECV(STDIN,(char*)p->barcode,BARCODE_SZ)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p2=cgc_get_product_by_barcode((char*)p->barcode)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p2=cgc_get_product_by_barcode((char*)p->barcode)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL!=p2
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL!=p2]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={cgc_free(p);return-1;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{cgc_free(p);return-1;}]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0>=bytes_recvd
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0>=bytes_recvd]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc__terminate(ERRNO_RECV);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc__terminate(ERRNO_RECV);]
-------
Text=p->desc[bytes_recvd-1]='\0'
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p->desc[bytes_recvd-1]='\0']
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_insert_at_end(&inv,p)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_list_insert_at_end(&inv,p)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SUCCESS]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifiers2Context'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [void]
-------
Text=Product*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product*]
-------
Text=p=NULL
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [NULL]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=bc[BARCODE_SZ]={0}
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [bc[BARCODE_SZ]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [{0}]
-------
Text=structnode*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structnode*]
-------
Text=np=NULL
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [np]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [NULL]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL==np
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL==np]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return-1;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [return-1;]
-------
Text=cgc_list_remove_node(&inv,np)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_list_remove_node(&inv,np)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_destroy_node(&inv,&np)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_list_destroy_node(&inv,&np)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SUCCESS]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifiers2Context'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [void]
-------
Text=int
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [int]
-------
Text=bytes_recvd=0
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [bytes_recvd]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=Product*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product*]
-------
Text=p=NULL
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [NULL]
-------
Text=unsignedint
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [unsignedint]
-------
Text=(*desc_copy)(void*dst,constvoid*src,unsignedintcnt)=cgc_memcpy
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [(*desc_copy)(void*dst,constvoid*src,unsignedintcnt)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [cgc_memcpy]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=bc[BARCODE_SZ]={0}
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [bc[BARCODE_SZ]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [{0}]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=desc_buf[MAX_DESC_LEN]={0}
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [desc_buf[MAX_DESC_LEN]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [{0}]
-------
Text=RECV(STDIN,(char*)bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [RECV(STDIN,(char*)bc,BARCODE_SZ)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p=cgc_get_product_by_barcode((char*)bc)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p=cgc_get_product_by_barcode((char*)bc)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL==p
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL==p]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={return-1;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{return-1;}]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0>=bytes_recvd
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0>=bytes_recvd]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc__terminate(ERRNO_RECV);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc__terminate(ERRNO_RECV);]
-------
Text=desc_buf[bytes_recvd-1]='\0'
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [desc_buf[bytes_recvd-1]='\0']
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=desc_copy(p->desc,desc_buf,MAX_DESC_LEN)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [desc_copy(p->desc,desc_buf,MAX_DESC_LEN)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->update_serial=cgc_get_next_update_serial()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p->update_serial=cgc_get_next_update_serial()]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SUCCESS]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifiers2Context'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [void]
-------
Text=Product*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product*]
-------
Text=p=NULL
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [NULL]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=bc[BARCODE_SZ]={0}
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [bc[BARCODE_SZ]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [{0}]
-------
Text=unsignedint
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [unsignedint]
-------
Text=sale_percent=0
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [sale_percent]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p=cgc_get_product_by_barcode(bc)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL==p
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL==p]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return-1;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [return-1;]
-------
Text=RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=100<=sale_percent
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [100<=sale_percent]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return-1;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [return-1;]
-------
Text=p->sfn=onsale_fn[sale_percent]
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p->sfn=onsale_fn[sale_percent]]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SUCCESS]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifiers2Context'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [void]
-------
Text=Product*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product*]
-------
Text=p=NULL
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [NULL]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=bc[BARCODE_SZ]={0}
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [bc[BARCODE_SZ]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [{0}]
-------
Text=unsignedint
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [unsignedint]
-------
Text=sale_percent=0
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [sale_percent]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p=cgc_get_product_by_barcode(bc)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL==p
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL==p]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return-1;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [return-1;]
-------
Text=p->sfn=onsale_fn[0]
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p->sfn=onsale_fn[0]]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SUCCESS]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifiers2Context'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [void]
-------
Text=Product*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product*]
-------
Text=p=NULL
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [NULL]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=options[4]={0}
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [options[4]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [{0}]
-------
Text=unsignedint
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [unsignedint]
-------
Text=count=cgc_list_length(&inv)
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [count]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [cgc_list_length(&inv)]
-------
Text=unsignedint
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [unsignedint]
-------
Text=d_len=0
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [d_len]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=float
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [float]
-------
Text=sale_price=0.0
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [sale_price]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [0.0]
-------
Text=structnode*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structnode*]
-------
Text=cur=cgc_list_head_node(&inv)
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [cur]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [cgc_list_head_node(&inv)]
-------
Text=structnode*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structnode*]
-------
Text=end=cgc_list_end_marker(&inv)
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [end]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [cgc_list_end_marker(&inv)]
-------
Text=RECV(STDIN,options,sizeof(options))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [RECV(STDIN,options,sizeof(options))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==count
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0==count]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return-1;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [return-1;]
-------
Text=while
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(NULL!=cur)&&(cur!=end)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(NULL!=cur)&&(cur!=end)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={p=(Product*)cur->data;SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}cur=cgc_list_next_node(cur);}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{p=(Product*)cur->data;SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}cur=cgc_list_next_node(cur);}]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SUCCESS]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifiers2Context'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [void]
-------
Text=cgc_list_init(&inv,cgc_free)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_list_init(&inv,cgc_free)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_load_inventory(&inv)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_load_inventory(&inv)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifiers2Context'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [void]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=cmd[4]
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclaratorContext'> [cmd[4]]
-------
Text=short
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [short]
-------
Text=ret=0
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclaratorContext'> [ret]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
2 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=RECV(STDIN,cmd,sizeof(cmd))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [RECV(STDIN,cmd,sizeof(cmd))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={ret=cgc_do_buy();}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{ret=cgc_do_buy();}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))){ret=cgc_do_check();}elseif(0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))){ret=cgc_do_add();}elseif(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))){ret=cgc_do_check();}elseif(0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))){ret=cgc_do_add();}elseif(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ret]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [4]
-------
Text='\xBE'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\x0E']
-------
Text='\xBE'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\x0E']
-------
Text=4
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [4]
-------
Text='\xC4'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xC4']
-------
Text='\xEC'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xEC']
-------
Text='\x4E'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\x4E']
-------
Text='\xEE'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xEE']
-------
Text=4
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [4]
-------
Text='\xAD'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xDD']
-------
Text='\xAD'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xDD']
-------
Text=4
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [4]
-------
Text='\xDE'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xAD']
-------
Text='\xDE'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xAD']
-------
Text=4
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [4]
-------
Text='\x04'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\x04']
-------
Text='\xD4'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xD4']
-------
Text='\x7E'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\x7E']
-------
Text='\x00'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\x00']
-------
Text=4
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [4]
-------
Text='\x54'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\x13']
-------
Text='\x54'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\x13']
-------
Text=4
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [4]
-------
Text='\x0F'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\x0F']
-------
Text=4
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [4]
-------
Text='\x11'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\x44']
-------
Text='\x11'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\x44']
-------
Text=4
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [4]
-------
Text='\xFF'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xFF']
-------
Text=2
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [2]
-------
Text='\xED'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xED']
-------
Text='\0'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\0']
-------
Text=4
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [4]
-------
Text='\xBB'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xBB']
-------
Text=4
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [4]
-------
Text='\xBD'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\xBD']
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
-------
Text=unsignedint
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [unsigned]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=base
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [base]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*(unsignedint*)FLAG_PAGE
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [*(unsignedint*)FLAG_PAGE]
-------
Text=unsignedint
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [unsigned]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=next_update_serial
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [next_update_serial]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=base+cgc_update_serial
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [base+cgc_update_serial]
-------
Text=cgc_update_serial++
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_update_serial++]
-------
Text=next_update_serial
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [next_update_serial]
-------
Text=const
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeQualifierContext'> [const]
-------
Text=void*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void*]
-------
Text=product
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [product]
-------
Text=void*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void*]
-------
Text=barcode
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [barcode]
-------
Text=Product*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=p
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [p]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(Product*)product
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(Product*)product]
-------
Text=unsignedchar*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [unsignedchar]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=bc
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [bc]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(unsignedchar*)barcode
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(unsignedchar*)barcode]
-------
Text=0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)]
-------
Text={returnTRUE;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [returnTRUE;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=FALSE
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [FALSE]
-------
Text=char
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
-------
Text=bc[]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [bc]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text=structnode*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structnode]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=np
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [np]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL]
-------
Text=np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [np]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL==np
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL==np]
-------
Text=returnNULL;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [NULL]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=return(Product*)np->data;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [(Product*)np->data]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
-------
Text=Product*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=p
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [p]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL]
-------
Text=Product*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=p_copy
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [p_copy]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=buy_status[4]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [buy_status[4]]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=bc[BARCODE_SZ]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [bc[BARCODE_SZ]]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={0}
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.InitializerListContext'> [0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=double
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [double]
-------
Text=cost
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cost]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0.0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0.0]
-------
Text=structlist
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StructOrUnionSpecifierContext'> [structlist]
-------
Text=buy_list
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [buy_list]
-------
Text=cgc_list_init(&buy_list,cgc_free)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_list_init(&buy_list,cgc_free)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))]
-------
Text={RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p){cgc_list_destroy(&buy_list);return-1;}p_copy=cgc_malloc(sizeof(Product));MALLOC_OK(p_copy);cgc_memcpy(p_copy,p,sizeof(Product));cgc_list_insert_at_end(&buy_list,p_copy);cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);RECV(STDIN,buy_status,sizeof(buy_status));}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p){cgc_list_destroy(&buy_list);return-1;}p_copy=cgc_malloc(sizeof(Product));MALLOC_OK(p_copy);cgc_memcpy(p_copy,p,sizeof(Product));cgc_list_insert_at_end(&buy_list,p_copy);cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);RECV(STDIN,buy_status,sizeof(buy_status));]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))]
-------
Text={cgc_list_destroy(&buy_list);return-1;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [cgc_list_destroy(&buy_list);return-1;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=SEND(STDOUT,(char*)&cost,sizeof(cost))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SEND(STDOUT,(char*)&cost,sizeof(cost))]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SUCCESS]
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
-------
Text=Product*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=p
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [p]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=bc[BARCODE_SZ]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [bc[BARCODE_SZ]]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={0}
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.InitializerListContext'> [0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=float
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [float]
-------
Text=sale_price
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [sale_price]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0.0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0.0]
-------
Text=unsignedint
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [unsigned]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=d_len
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [d_len]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=p=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL==p]
-------
Text=return-1;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [-1]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=sale_price=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sale_price]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=d_len=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [d_len]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0<d_len
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0<d_len]
-------
Text=SEND(STDOUT,p->desc,d_len);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SUCCESS]
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
-------
Text=Product*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=p
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [p]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL]
-------
Text=Product*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=p2
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [p2]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [bytes_recvd]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=p=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=MALLOC_OK
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [MALLOC_OK]
-------
Text=(p)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [(p)]
-------
Text=p->sfn=onsale_fn[0]
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->sfn]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [onsale_fn[0]]
-------
Text=p->update_serial=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->update_serial]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [RECV(STDIN,(char*)p->barcode,BARCODE_SZ)]
-------
Text=p2=cgc_get_product_by_barcode((char*)p->barcode)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p2]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_get_product_by_barcode((char*)p->barcode)]
-------
Text=NULL!=p2
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL!=p2]
-------
Text={cgc_free(p);return-1;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [cgc_free(p);return-1;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [bytes_recvd]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))]
-------
Text=0>=bytes_recvd
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0>=bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc__terminate(ERRNO_RECV)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=p->desc[bytes_recvd-1]='\0'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->desc[bytes_recvd-1]]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\0']
-------
Text=cgc_list_insert_at_end(&inv,p)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_list_insert_at_end(&inv,p)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SUCCESS]
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
-------
Text=Product*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=p
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [p]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=bc[BARCODE_SZ]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [bc[BARCODE_SZ]]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={0}
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.InitializerListContext'> [0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=structnode*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structnode]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=np
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [np]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=np=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [np]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL==np
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL==np]
-------
Text=return-1;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [-1]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_list_remove_node(&inv,np)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_list_remove_node(&inv,np)]
-------
Text=cgc_list_destroy_node(&inv,&np)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_list_destroy_node(&inv,&np)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SUCCESS]
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
-------
Text=int
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [bytes_recvd]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=Product*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=p
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [p]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL]
-------
Text=unsignedint
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [unsigned]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=(*desc_copy)(void*dst,constvoid*src,unsignedintcnt)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [(*desc_copy)(void*dst,constvoid*src,unsignedintcnt)]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcpy
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_memcpy]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=bc[BARCODE_SZ]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [bc[BARCODE_SZ]]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={0}
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.InitializerListContext'> [0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=desc_buf[MAX_DESC_LEN]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [desc_buf[MAX_DESC_LEN]]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={0}
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.InitializerListContext'> [0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=RECV(STDIN,(char*)bc,BARCODE_SZ)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [RECV(STDIN,(char*)bc,BARCODE_SZ)]
-------
Text=p=cgc_get_product_by_barcode((char*)bc)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_get_product_by_barcode((char*)bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL==p]
-------
Text={return-1;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [return-1;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=bytes_recvd=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [bytes_recvd]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))]
-------
Text=0>=bytes_recvd
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0>=bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc__terminate(ERRNO_RECV)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=desc_buf[bytes_recvd-1]='\0'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [desc_buf[bytes_recvd-1]]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\0']
-------
Text=desc_copy(p->desc,desc_buf,MAX_DESC_LEN)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [desc_copy(p->desc,desc_buf,MAX_DESC_LEN)]
-------
Text=p->update_serial=cgc_get_next_update_serial()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->update_serial]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_get_next_update_serial()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SUCCESS]
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
-------
Text=Product*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=p
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [p]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=bc[BARCODE_SZ]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [bc[BARCODE_SZ]]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={0}
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.InitializerListContext'> [0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=unsignedint
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [unsigned]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=sale_percent
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [sale_percent]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=p=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL==p]
-------
Text=return-1;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [-1]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))]
-------
Text=100<=sale_percent
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [100<=sale_percent]
-------
Text=return-1;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [-1]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=p->sfn=onsale_fn[sale_percent]
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->sfn]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [onsale_fn[sale_percent]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SUCCESS]
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
-------
Text=Product*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=p
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [p]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=bc[BARCODE_SZ]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [bc[BARCODE_SZ]]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={0}
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.InitializerListContext'> [0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=unsignedint
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [unsigned]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=sale_percent
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [sale_percent]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=p=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL==p]
-------
Text=return-1;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [-1]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=p->sfn=onsale_fn[0]
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->sfn]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [onsale_fn[0]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SUCCESS]
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
-------
Text=Product*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=p
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [p]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=options[4]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [options[4]]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={0}
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.InitializerListContext'> [0]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=unsignedint
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [unsigned]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=count
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [count]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_length(&inv)
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_list_length(&inv)]
-------
Text=unsignedint
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [unsigned]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=d_len
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [d_len]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=float
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [float]
-------
Text=sale_price
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [sale_price]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0.0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0.0]
-------
Text=structnode*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structnode]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=cur
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cur]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_head_node(&inv)
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_list_head_node(&inv)]
-------
Text=structnode*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [structnode]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=end
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [end]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_end_marker(&inv)
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_list_end_marker(&inv)]
-------
Text=RECV(STDIN,options,sizeof(options))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [RECV(STDIN,options,sizeof(options))]
-------
Text=0==count
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0==count]
-------
Text=return-1;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [-1]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=(NULL!=cur)&&(cur!=end)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(NULL!=cur)&&(cur!=end)]
-------
Text={p=(Product*)cur->data;SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}cur=cgc_list_next_node(cur);}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [p=(Product*)cur->data;SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}cur=cgc_list_next_node(cur);]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SUCCESS]
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
-------
Text=cgc_list_init(&inv,cgc_free)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_list_init(&inv,cgc_free)]
-------
Text=cgc_load_inventory(&inv)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_load_inventory(&inv)]
-------
Text=void
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=cmd[4]
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cmd[4]]
-------
Text=short
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [short]
-------
Text=ret
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [ret]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=RECV(STDIN,cmd,sizeof(cmd))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [RECV(STDIN,cmd,sizeof(cmd))]
-------
Text=0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))]
-------
Text={ret=cgc_do_buy();}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [ret=cgc_do_buy();]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=if(0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))){ret=cgc_do_check();}elseif(0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))){ret=cgc_do_add();}elseif(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{ret=cgc_do_check();}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [if(0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))){ret=cgc_do_add();}elseif(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}]
-------
Text=ret
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [ret]
-------
Text=4
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [4]
-------
Text='\xBE'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\x0E']
-------
Text='\xBE'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\x0E']
-------
Text=4
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [4]
-------
Text='\xC4'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xC4']
-------
Text='\xEC'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xEC']
-------
Text='\x4E'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\x4E']
-------
Text='\xEE'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xEE']
-------
Text=4
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [4]
-------
Text='\xAD'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xDD']
-------
Text='\xAD'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xDD']
-------
Text=4
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [4]
-------
Text='\xDE'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xAD']
-------
Text='\xDE'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xAD']
-------
Text=4
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [4]
-------
Text='\x04'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\x04']
-------
Text='\xD4'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xD4']
-------
Text='\x7E'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\x7E']
-------
Text='\x00'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\x00']
-------
Text=4
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [4]
-------
Text='\x54'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\x13']
-------
Text='\x54'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\x13']
-------
Text=4
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [4]
-------
Text='\x0F'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\x0F']
-------
Text=4
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [4]
-------
Text='\x11'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\x44']
-------
Text='\x11'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\x44']
-------
Text=4
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [4]
-------
Text='\xFF'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xFF']
-------
Text=2
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [2]
-------
Text='\xED'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xED']
-------
Text='\0'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\0']
-------
Text=4
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [4]
-------
Text='\xBB'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xBB']
-------
Text=4
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [4]
-------
Text='\xBD'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\xBD']
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=unsigned
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=base
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [base]
-------
Text=*(unsignedint*)FLAG_PAGE
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [*(unsignedint*)FLAG_PAGE]
-------
Text=unsigned
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=next_update_serial
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [next_update_serial]
-------
Text=base+cgc_update_serial
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [base+cgc_update_serial]
-------
Text=cgc_update_serial++
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_update_serial++]
-------
Text=next_update_serial
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [next_update_serial]
-------
Text=const
Type=<class 'CParser.CParser.TypeQualifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [const]
-------
Text=void*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=product
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=barcode
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [Product]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=p
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=(Product*)product
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(Product*)product]
-------
Text=unsignedchar
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [unsigned]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=bc
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bc]
-------
Text=(unsignedchar*)barcode
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(unsignedchar*)barcode]
-------
Text=0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=returnTRUE;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [returnTRUE;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=FALSE
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [FALSE]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=bc
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bc]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structnode
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StructOrUnionSpecifierContext'> [structnode]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=np
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [np]
-------
Text=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL]
-------
Text=np
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [np]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL==np
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL==np]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(Product*)np->data
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(Product*)np->data]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=Product
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [Product]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=p
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL]
-------
Text=Product
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [Product]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=p_copy
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p_copy]
-------
Text=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_status[4]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [buy_status]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [4]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc[BARCODE_SZ]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [bc]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [BARCODE_SZ]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=double
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cost
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cost]
-------
Text=0.0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0.0]
-------
Text=structlist
Type=<class 'CParser.CParser.StructOrUnionSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.StructOrUnionContext'> [struct]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [list]
-------
Text=buy_list
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [buy_list]
-------
Text=cgc_list_init(&buy_list,cgc_free)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_list_init(&buy_list,cgc_free)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV(STDIN,bc,BARCODE_SZ);p=cgc_get_product_by_barcode(bc);if(NULL==p){cgc_list_destroy(&buy_list);return-1;}p_copy=cgc_malloc(sizeof(Product));MALLOC_OK(p_copy);cgc_memcpy(p_copy,p,sizeof(Product));cgc_list_insert_at_end(&buy_list,p_copy);cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);RECV(STDIN,buy_status,sizeof(buy_status));
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 9
0 : <class 'CParser.CParser.BlockItemContext'> [RECV(STDIN,bc,BARCODE_SZ);]
1 : <class 'CParser.CParser.BlockItemContext'> [p=cgc_get_product_by_barcode(bc);]
2 : <class 'CParser.CParser.BlockItemContext'> [if(NULL==p){cgc_list_destroy(&buy_list);return-1;}]
3 : <class 'CParser.CParser.BlockItemContext'> [p_copy=cgc_malloc(sizeof(Product));]
4 : <class 'CParser.CParser.BlockItemContext'> [MALLOC_OK(p_copy);]
5 : <class 'CParser.CParser.BlockItemContext'> [cgc_memcpy(p_copy,p,sizeof(Product));]
6 : <class 'CParser.CParser.BlockItemContext'> [cgc_list_insert_at_end(&buy_list,p_copy);]
7 : <class 'CParser.CParser.BlockItemContext'> [cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);]
8 : <class 'CParser.CParser.BlockItemContext'> [RECV(STDIN,buy_status,sizeof(buy_status));]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_destroy(&buy_list);return-1;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 2
0 : <class 'CParser.CParser.BlockItemContext'> [cgc_list_destroy(&buy_list);]
1 : <class 'CParser.CParser.BlockItemContext'> [return-1;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SEND(STDOUT,(char*)&cost,sizeof(cost))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SEND(STDOUT,(char*)&cost,sizeof(cost))]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SUCCESS]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=Product
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [Product]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=p
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc[BARCODE_SZ]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [bc]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [BARCODE_SZ]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=float
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sale_price
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sale_price]
-------
Text=0.0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0.0]
-------
Text=unsigned
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=d_len
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [d_len]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=p
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL==p]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-1
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [-1]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=sale_price
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [sale_price]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=d_len
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [d_len]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0<d_len
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0<d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SUCCESS]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=Product
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [Product]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=p
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL]
-------
Text=Product
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [Product]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=p2
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p2]
-------
Text=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL]
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bytes_recvd]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=p
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=MALLOC_OK
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [MALLOC_OK]
-------
Text=(p)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.DeclaratorContext'> [p]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=p->sfn
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->sfn]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [onsale_fn[0]]
-------
Text=p->update_serial
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->update_serial]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [RECV(STDIN,(char*)p->barcode,BARCODE_SZ)]
-------
Text=p2
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p2]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_get_product_by_barcode((char*)p->barcode)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_get_product_by_barcode((char*)p->barcode)]
-------
Text=NULL!=p2
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL!=p2]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_free(p);return-1;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 2
0 : <class 'CParser.CParser.BlockItemContext'> [cgc_free(p);]
1 : <class 'CParser.CParser.BlockItemContext'> [return-1;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [bytes_recvd]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))]
-------
Text=0>=bytes_recvd
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0>=bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->desc[bytes_recvd-1]
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->desc[bytes_recvd-1]]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text='\0'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\0']
-------
Text=cgc_list_insert_at_end(&inv,p)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_list_insert_at_end(&inv,p)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SUCCESS]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=Product
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [Product]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=p
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc[BARCODE_SZ]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [bc]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [BARCODE_SZ]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structnode
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StructOrUnionSpecifierContext'> [structnode]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=np
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [np]
-------
Text=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=np
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [np]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL==np
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL==np]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-1
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [-1]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_remove_node(&inv,np)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_list_remove_node(&inv,np)]
-------
Text=cgc_list_destroy_node(&inv,&np)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_list_destroy_node(&inv,&np)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SUCCESS]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bytes_recvd]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [Product]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=p
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL]
-------
Text=unsigned
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(*desc_copy)(void*dst,constvoid*src,unsignedintcnt)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [(*desc_copy)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ParameterTypeListContext'> [void*dst,constvoid*src,unsignedintcnt]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_memcpy
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_memcpy]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc[BARCODE_SZ]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [bc]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [BARCODE_SZ]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=desc_buf[MAX_DESC_LEN]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [desc_buf]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [MAX_DESC_LEN]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV(STDIN,(char*)bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [RECV(STDIN,(char*)bc,BARCODE_SZ)]
-------
Text=p
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_get_product_by_barcode((char*)bc)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_get_product_by_barcode((char*)bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL==p]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return-1;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [return-1;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [bytes_recvd]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))]
-------
Text=0>=bytes_recvd
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0>=bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=desc_buf[bytes_recvd-1]
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [desc_buf[bytes_recvd-1]]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text='\0'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\0']
-------
Text=desc_copy(p->desc,desc_buf,MAX_DESC_LEN)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [desc_copy(p->desc,desc_buf,MAX_DESC_LEN)]
-------
Text=p->update_serial
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->update_serial]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_get_next_update_serial()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_get_next_update_serial()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SUCCESS]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=Product
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [Product]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=p
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc[BARCODE_SZ]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [bc]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [BARCODE_SZ]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsigned
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sale_percent
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sale_percent]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=p
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL==p]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-1
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [-1]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))]
-------
Text=100<=sale_percent
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [100<=sale_percent]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-1
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [-1]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->sfn
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->sfn]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=onsale_fn[sale_percent]
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [onsale_fn[sale_percent]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SUCCESS]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=Product
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [Product]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=p
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc[BARCODE_SZ]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [bc]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [BARCODE_SZ]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsigned
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sale_percent
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sale_percent]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=p
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL==p]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-1
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [-1]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->sfn
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->sfn]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [onsale_fn[0]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SUCCESS]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=Product
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [Product]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=p
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=options[4]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [options]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [4]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitializerContext'> [0]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsigned
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=cgc_list_length(&inv)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_list_length(&inv)]
-------
Text=unsigned
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=d_len
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [d_len]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=float
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sale_price
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sale_price]
-------
Text=0.0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0.0]
-------
Text=structnode
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StructOrUnionSpecifierContext'> [structnode]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=cur
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cur]
-------
Text=cgc_list_head_node(&inv)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_list_head_node(&inv)]
-------
Text=structnode
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.StructOrUnionSpecifierContext'> [structnode]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=end
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [end]
-------
Text=cgc_list_end_marker(&inv)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_list_end_marker(&inv)]
-------
Text=RECV(STDIN,options,sizeof(options))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [RECV(STDIN,options,sizeof(options))]
-------
Text=0==count
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0==count]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-1
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [-1]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(NULL!=cur)&&(cur!=end)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(NULL!=cur)&&(cur!=end)]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p=(Product*)cur->data;SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}cur=cgc_list_next_node(cur);
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 7
0 : <class 'CParser.CParser.BlockItemContext'> [p=(Product*)cur->data;]
1 : <class 'CParser.CParser.BlockItemContext'> [SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);]
2 : <class 'CParser.CParser.BlockItemContext'> [if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}]
3 : <class 'CParser.CParser.BlockItemContext'> [if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}]
4 : <class 'CParser.CParser.BlockItemContext'> [if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}]
5 : <class 'CParser.CParser.BlockItemContext'> [if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}]
6 : <class 'CParser.CParser.BlockItemContext'> [cur=cgc_list_next_node(cur);]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SUCCESS]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=cgc_list_init(&inv,cgc_free)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_list_init(&inv,cgc_free)]
-------
Text=cgc_load_inventory(&inv)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_load_inventory(&inv)]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cmd[4]
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 4
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cmd]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [4]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text=short
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ret]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=RECV(STDIN,cmd,sizeof(cmd))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [RECV(STDIN,cmd,sizeof(cmd))]
-------
Text=0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret=cgc_do_buy();
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [ret=cgc_do_buy();]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={ret=cgc_do_check();}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{ret=cgc_do_check();}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))){ret=cgc_do_add();}elseif(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))){ret=cgc_do_add();}elseif(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}]
-------
Text=ret
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [ret]
-------
Text=4
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [4]
-------
Text='\xBE'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\x0E']
-------
Text='\xBE'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\x0E']
-------
Text=4
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [4]
-------
Text='\xC4'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xC4']
-------
Text='\xEC'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xEC']
-------
Text='\x4E'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\x4E']
-------
Text='\xEE'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xEE']
-------
Text=4
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [4]
-------
Text='\xAD'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xDD']
-------
Text='\xAD'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xDD']
-------
Text=4
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [4]
-------
Text='\xDE'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xAD']
-------
Text='\xDE'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xAD']
-------
Text=4
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [4]
-------
Text='\x04'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\x04']
-------
Text='\xD4'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xD4']
-------
Text='\x7E'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\x7E']
-------
Text='\x00'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\x00']
-------
Text=4
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [4]
-------
Text='\x54'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\x13']
-------
Text='\x54'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\x13']
-------
Text=4
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [4]
-------
Text='\x0F'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\x0F']
-------
Text=4
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [4]
-------
Text='\x11'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\x44']
-------
Text='\x11'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\x44']
-------
Text=4
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [4]
-------
Text='\xFF'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xFF']
-------
Text=2
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [2]
-------
Text='\xED'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xED']
-------
Text='\0'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\0']
-------
Text=4
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [4]
-------
Text='\xBB'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xBB']
-------
Text=4
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [4]
-------
Text='\xBD'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\xBD']
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=base
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*(unsignedint*)FLAG_PAGE
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [*(unsignedint*)FLAG_PAGE]
-------
Text=next_update_serial
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=base+cgc_update_serial
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [base+cgc_update_serial]
-------
Text=cgc_update_serial++
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_update_serial++]
-------
Text=next_update_serial
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [next_update_serial]
-------
Text=const
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=Product
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [Product]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(Product*)product
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(Product*)product]
-------
Text=unsigned
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(unsignedchar*)barcode
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(unsignedchar*)barcode]
-------
Text=0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)]
-------
Text=returnTRUE;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [returnTRUE;]
-------
Text=FALSE
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [FALSE]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=structnode
Type=<class 'CParser.CParser.StructOrUnionSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.StructOrUnionContext'> [struct]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [node]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=np
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL]
-------
Text=np
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [np]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL==np
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL==np]
-------
Text=NULL
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL]
-------
Text=(Product*)np->data
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(Product*)np->data]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [Product]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL]
-------
Text=Product
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [Product]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p_copy
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL]
-------
Text=buy_status
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [buy_status]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [4]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bc]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [BARCODE_SZ]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=cost
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0.0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0.0]
-------
Text=struct
Type=<class 'CParser.CParser.StructOrUnionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [struct]
-------
Text=list
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_list
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_init(&buy_list,cgc_free)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_list_init(&buy_list,cgc_free)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))]
-------
Text=RECV(STDIN,bc,BARCODE_SZ);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [RECV(STDIN,bc,BARCODE_SZ);]
-------
Text=p=cgc_get_product_by_barcode(bc);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [p=cgc_get_product_by_barcode(bc);]
-------
Text=if(NULL==p){cgc_list_destroy(&buy_list);return-1;}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(NULL==p){cgc_list_destroy(&buy_list);return-1;}]
-------
Text=p_copy=cgc_malloc(sizeof(Product));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [p_copy=cgc_malloc(sizeof(Product));]
-------
Text=MALLOC_OK(p_copy);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [MALLOC_OK(p_copy);]
-------
Text=cgc_memcpy(p_copy,p,sizeof(Product));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_memcpy(p_copy,p,sizeof(Product));]
-------
Text=cgc_list_insert_at_end(&buy_list,p_copy);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_list_insert_at_end(&buy_list,p_copy);]
-------
Text=cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [RECV(STDIN,buy_status,sizeof(buy_status));]
-------
Text=0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))]
-------
Text=cgc_list_destroy(&buy_list);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_list_destroy(&buy_list);]
-------
Text=return-1;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [return-1;]
-------
Text=SEND(STDOUT,(char*)&cost,sizeof(cost))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SEND(STDOUT,(char*)&cost,sizeof(cost))]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SUCCESS]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [Product]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL]
-------
Text=bc
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bc]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [BARCODE_SZ]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=sale_price
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0.0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0.0]
-------
Text=d_len
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=p
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL==p]
-------
Text=-1
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [-1]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=sale_price
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [sale_price]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=d_len
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [d_len]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0<d_len
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0<d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SUCCESS]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [Product]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL]
-------
Text=Product
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [Product]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p2
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL]
-------
Text=bytes_recvd
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=p
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=MALLOC_OK
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [p]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->sfn
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sfn]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [onsale_fn[0]]
-------
Text=p->update_serial
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [update_serial]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [RECV(STDIN,(char*)p->barcode,BARCODE_SZ)]
-------
Text=p2
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p2]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_product_by_barcode((char*)p->barcode)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_get_product_by_barcode((char*)p->barcode)]
-------
Text=NULL!=p2
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL!=p2]
-------
Text=cgc_free(p);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationContext'> [cgc_free(p);]
-------
Text=return-1;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [return-1;]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [bytes_recvd]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))]
-------
Text=0>=bytes_recvd
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0>=bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=p->desc[bytes_recvd-1]
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 6
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [desc]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
4 : <class 'CParser.CParser.ExpressionContext'> [bytes_recvd-1]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\0'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\0']
-------
Text=cgc_list_insert_at_end(&inv,p)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_list_insert_at_end(&inv,p)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SUCCESS]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [Product]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL]
-------
Text=bc
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bc]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [BARCODE_SZ]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=structnode
Type=<class 'CParser.CParser.StructOrUnionSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.StructOrUnionContext'> [struct]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [node]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=np
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=np
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [np]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL==np
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL==np]
-------
Text=-1
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [-1]
-------
Text=cgc_list_remove_node(&inv,np)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_list_remove_node(&inv,np)]
-------
Text=cgc_list_destroy_node(&inv,&np)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_list_destroy_node(&inv,&np)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SUCCESS]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_recvd
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [Product]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL]
-------
Text=(*desc_copy)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.DeclaratorContext'> [*desc_copy]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*dst,constvoid*src,unsignedintcnt
Type=<class 'CParser.CParser.ParameterTypeListContext'>
Child Count = 1
0 : <class 'CParser.CParser.ParameterListContext'> [void*dst,constvoid*src,unsignedintcnt]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcpy
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_memcpy]
-------
Text=bc
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bc]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [BARCODE_SZ]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=desc_buf
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [desc_buf]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=MAX_DESC_LEN
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [MAX_DESC_LEN]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)bc,BARCODE_SZ)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [RECV(STDIN,(char*)bc,BARCODE_SZ)]
-------
Text=p
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_product_by_barcode((char*)bc)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_get_product_by_barcode((char*)bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL==p]
-------
Text=return-1;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [return-1;]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [bytes_recvd]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))]
-------
Text=0>=bytes_recvd
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0>=bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=desc_buf[bytes_recvd-1]
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [desc_buf]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.ExpressionContext'> [bytes_recvd-1]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\0'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\0']
-------
Text=desc_copy(p->desc,desc_buf,MAX_DESC_LEN)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [desc_copy(p->desc,desc_buf,MAX_DESC_LEN)]
-------
Text=p->update_serial
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [update_serial]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_next_update_serial()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_get_next_update_serial()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SUCCESS]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [Product]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL]
-------
Text=bc
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bc]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [BARCODE_SZ]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=sale_percent
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=p
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL==p]
-------
Text=-1
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))]
-------
Text=100<=sale_percent
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [100<=sale_percent]
-------
Text=-1
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [-1]
-------
Text=p->sfn
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sfn]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=onsale_fn[sale_percent]
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [onsale_fn[sale_percent]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SUCCESS]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [Product]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL]
-------
Text=bc
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bc]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [BARCODE_SZ]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=sale_percent
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=p
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL==p]
-------
Text=-1
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [-1]
-------
Text=p->sfn
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sfn]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [onsale_fn[0]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SUCCESS]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [Product]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL]
-------
Text=options
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [options]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [4]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InitializerContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_length(&inv)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_list_length(&inv)]
-------
Text=d_len
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=sale_price
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0.0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0.0]
-------
Text=structnode
Type=<class 'CParser.CParser.StructOrUnionSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.StructOrUnionContext'> [struct]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [node]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cur
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_head_node(&inv)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_list_head_node(&inv)]
-------
Text=structnode
Type=<class 'CParser.CParser.StructOrUnionSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.StructOrUnionContext'> [struct]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [node]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=end
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_end_marker(&inv)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_list_end_marker(&inv)]
-------
Text=RECV(STDIN,options,sizeof(options))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [RECV(STDIN,options,sizeof(options))]
-------
Text=0==count
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0==count]
-------
Text=-1
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [-1]
-------
Text=(NULL!=cur)&&(cur!=end)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(NULL!=cur)&&(cur!=end)]
-------
Text=p=(Product*)cur->data;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [p=(Product*)cur->data;]
-------
Text=SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);]
-------
Text=if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}]
-------
Text=if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}]
-------
Text=if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}]
-------
Text=if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}]
-------
Text=cur=cgc_list_next_node(cur);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cur=cgc_list_next_node(cur);]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SUCCESS]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_init(&inv,cgc_free)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_list_init(&inv,cgc_free)]
-------
Text=cgc_load_inventory(&inv)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_load_inventory(&inv)]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cmd
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cmd]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [4]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=RECV(STDIN,cmd,sizeof(cmd))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [RECV(STDIN,cmd,sizeof(cmd))]
-------
Text=0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))]
-------
Text=ret=cgc_do_buy();
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [ret=cgc_do_buy();]
-------
Text=0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))]
-------
Text={ret=cgc_do_check();}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [ret=cgc_do_check();]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=if(0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))){ret=cgc_do_add();}elseif(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{ret=cgc_do_add();}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [if(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}]
-------
Text=ret
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [ret]
-------
Text=4
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [4]
-------
Text='\xBE'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\x0E']
-------
Text='\xBE'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\x0E']
-------
Text=4
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [4]
-------
Text='\xC4'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xC4']
-------
Text='\xEC'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xEC']
-------
Text='\x4E'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\x4E']
-------
Text='\xEE'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xEE']
-------
Text=4
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [4]
-------
Text='\xAD'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xDD']
-------
Text='\xAD'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xDD']
-------
Text=4
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [4]
-------
Text='\xDE'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xAD']
-------
Text='\xDE'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xAD']
-------
Text=4
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [4]
-------
Text='\x04'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\x04']
-------
Text='\xD4'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xD4']
-------
Text='\x7E'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\x7E']
-------
Text='\x00'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\x00']
-------
Text=4
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [4]
-------
Text='\x54'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\x13']
-------
Text='\x54'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\x13']
-------
Text=4
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [4]
-------
Text='\x0F'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\x0F']
-------
Text=4
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [4]
-------
Text='\x11'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\x44']
-------
Text='\x11'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\x44']
-------
Text=4
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [4]
-------
Text='\xFF'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xFF']
-------
Text=2
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [2]
-------
Text='\xED'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xED']
-------
Text='\0'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\0']
-------
Text=4
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [4]
-------
Text='\xBB'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xBB']
-------
Text=4
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [4]
-------
Text='\xBD'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\xBD']
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=*(unsignedint*)FLAG_PAGE
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [*(unsignedint*)FLAG_PAGE]
-------
Text=base+cgc_update_serial
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [base+cgc_update_serial]
-------
Text=cgc_update_serial++
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_update_serial++]
-------
Text=next_update_serial
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [next_update_serial]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(Product*)product
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(Product*)product]
-------
Text=(unsignedchar*)barcode
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(unsignedchar*)barcode]
-------
Text=0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)]
-------
Text=returnTRUE;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [returnTRUE;]
-------
Text=FALSE
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [FALSE]
-------
Text=struct
Type=<class 'CParser.CParser.StructOrUnionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [struct]
-------
Text=node
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL]
-------
Text=np
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [np]
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL==np
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL==np]
-------
Text=NULL
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL]
-------
Text=(Product*)np->data
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(Product*)np->data]
-------
Text=Product
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL]
-------
Text=Product
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL]
-------
Text=buy_status
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [4]
-------
Text=bc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0.0]
-------
Text=struct
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_init(&buy_list,cgc_free)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_list_init(&buy_list,cgc_free)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))]
-------
Text=RECV(STDIN,bc,BARCODE_SZ);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [RECV(STDIN,bc,BARCODE_SZ);]
-------
Text=p=cgc_get_product_by_barcode(bc);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [p=cgc_get_product_by_barcode(bc);]
-------
Text=if(NULL==p){cgc_list_destroy(&buy_list);return-1;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(NULL==p){cgc_list_destroy(&buy_list);return-1;}]
-------
Text=p_copy=cgc_malloc(sizeof(Product));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [p_copy=cgc_malloc(sizeof(Product));]
-------
Text=MALLOC_OK(p_copy);
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [MALLOC_OK]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [(p_copy)]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_memcpy(p_copy,p,sizeof(Product));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_memcpy(p_copy,p,sizeof(Product));]
-------
Text=cgc_list_insert_at_end(&buy_list,p_copy);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_list_insert_at_end(&buy_list,p_copy);]
-------
Text=cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [RECV(STDIN,buy_status,sizeof(buy_status));]
-------
Text=0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))]
-------
Text=cgc_list_destroy(&buy_list);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_list_destroy(&buy_list);]
-------
Text=return-1;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [return-1;]
-------
Text=SEND(STDOUT,(char*)&cost,sizeof(cost))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SEND(STDOUT,(char*)&cost,sizeof(cost))]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SUCCESS]
-------
Text=Product
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL]
-------
Text=bc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0.0]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL==p]
-------
Text=-1
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [-1]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=sale_price
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sale_price]
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=d_len
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [d_len]
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0<d_len
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0<d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SUCCESS]
-------
Text=Product
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL]
-------
Text=Product
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=p
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sfn
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [onsale_fn[0]]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=update_serial
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [RECV(STDIN,(char*)p->barcode,BARCODE_SZ)]
-------
Text=p2
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p2]
-------
Text=cgc_get_product_by_barcode((char*)p->barcode)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_get_product_by_barcode((char*)p->barcode)]
-------
Text=NULL!=p2
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL!=p2]
-------
Text=cgc_free(p);
Type=<class 'CParser.CParser.DeclarationContext'>
Child Count = 3
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [cgc_free]
1 : <class 'CParser.CParser.InitDeclaratorListContext'> [(p)]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=return-1;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [return-1;]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bytes_recvd]
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))]
-------
Text=0>=bytes_recvd
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0>=bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=desc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_recvd-1
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [bytes_recvd-1]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\0'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\0']
-------
Text=cgc_list_insert_at_end(&inv,p)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_list_insert_at_end(&inv,p)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SUCCESS]
-------
Text=Product
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL]
-------
Text=bc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=struct
Type=<class 'CParser.CParser.StructOrUnionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [struct]
-------
Text=node
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=np
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [np]
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL==np
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL==np]
-------
Text=-1
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [-1]
-------
Text=cgc_list_remove_node(&inv,np)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_list_remove_node(&inv,np)]
-------
Text=cgc_list_destroy_node(&inv,&np)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_list_destroy_node(&inv,&np)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=Product
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*desc_copy
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 2
0 : <class 'CParser.CParser.PointerContext'> [*]
1 : <class 'CParser.CParser.DirectDeclaratorContext'> [desc_copy]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*dst,constvoid*src,unsignedintcnt
Type=<class 'CParser.CParser.ParameterListContext'>
Child Count = 5
0 : <class 'CParser.CParser.ParameterDeclarationContext'> [void*dst]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.ParameterDeclarationContext'> [constvoid*src]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.ParameterDeclarationContext'> [unsignedintcnt]
-------
Text=cgc_memcpy
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_memcpy]
-------
Text=bc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=desc_buf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=MAX_DESC_LEN
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [MAX_DESC_LEN]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)bc,BARCODE_SZ)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [RECV(STDIN,(char*)bc,BARCODE_SZ)]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=cgc_get_product_by_barcode((char*)bc)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_get_product_by_barcode((char*)bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL==p]
-------
Text=return-1;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [return-1;]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bytes_recvd]
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))]
-------
Text=0>=bytes_recvd
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0>=bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=desc_buf
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [desc_buf]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_recvd-1
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [bytes_recvd-1]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\0'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\0']
-------
Text=desc_copy(p->desc,desc_buf,MAX_DESC_LEN)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [desc_copy(p->desc,desc_buf,MAX_DESC_LEN)]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=update_serial
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_next_update_serial()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_get_next_update_serial()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SUCCESS]
-------
Text=Product
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL]
-------
Text=bc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL==p]
-------
Text=-1
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))]
-------
Text=100<=sale_percent
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [100<=sale_percent]
-------
Text=-1
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [-1]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sfn
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=onsale_fn[sale_percent]
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [onsale_fn[sale_percent]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SUCCESS]
-------
Text=Product
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL]
-------
Text=bc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL==p]
-------
Text=-1
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [-1]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sfn
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [onsale_fn[0]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SUCCESS]
-------
Text=Product
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL]
-------
Text=options
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=cgc_list_length(&inv)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_list_length(&inv)]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0.0]
-------
Text=struct
Type=<class 'CParser.CParser.StructOrUnionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [struct]
-------
Text=node
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_head_node(&inv)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_list_head_node(&inv)]
-------
Text=struct
Type=<class 'CParser.CParser.StructOrUnionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [struct]
-------
Text=node
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_end_marker(&inv)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_list_end_marker(&inv)]
-------
Text=RECV(STDIN,options,sizeof(options))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [RECV(STDIN,options,sizeof(options))]
-------
Text=0==count
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0==count]
-------
Text=-1
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [-1]
-------
Text=(NULL!=cur)&&(cur!=end)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(NULL!=cur)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&&]
2 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(cur!=end)]
-------
Text=p=(Product*)cur->data;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [p=(Product*)cur->data;]
-------
Text=SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);]
-------
Text=if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}]
-------
Text=if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}]
-------
Text=if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}]
-------
Text=if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}]
-------
Text=cur=cgc_list_next_node(cur);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cur=cgc_list_next_node(cur);]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SUCCESS]
-------
Text=cgc_list_init(&inv,cgc_free)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_list_init(&inv,cgc_free)]
-------
Text=cgc_load_inventory(&inv)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_load_inventory(&inv)]
-------
Text=cmd
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=RECV(STDIN,cmd,sizeof(cmd))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [RECV(STDIN,cmd,sizeof(cmd))]
-------
Text=0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))]
-------
Text=ret=cgc_do_buy();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [ret=cgc_do_buy();]
-------
Text=0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret=cgc_do_check();
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [ret=cgc_do_check();]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={ret=cgc_do_add();}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{ret=cgc_do_add();}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}]
-------
Text=ret
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [ret]
-------
Text=4
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [4]
-------
Text='\xBE'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\x0E']
-------
Text='\xBE'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\x0E']
-------
Text=4
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [4]
-------
Text='\xC4'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xC4']
-------
Text='\xEC'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xEC']
-------
Text='\x4E'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\x4E']
-------
Text='\xEE'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xEE']
-------
Text=4
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [4]
-------
Text='\xAD'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xDD']
-------
Text='\xAD'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xDD']
-------
Text=4
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [4]
-------
Text='\xDE'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xAD']
-------
Text='\xDE'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xAD']
-------
Text=4
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [4]
-------
Text='\x04'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\x04']
-------
Text='\xD4'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xD4']
-------
Text='\x7E'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\x7E']
-------
Text='\x00'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\x00']
-------
Text=4
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [4]
-------
Text='\x54'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\x13']
-------
Text='\x54'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\x13']
-------
Text=4
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [4]
-------
Text='\x0F'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\x0F']
-------
Text=4
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [4]
-------
Text='\x11'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\x44']
-------
Text='\x11'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\x44']
-------
Text=4
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [4]
-------
Text='\xFF'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xFF']
-------
Text=2
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [2]
-------
Text='\xED'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xED']
-------
Text='\0'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\0']
-------
Text=4
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [4]
-------
Text='\xBB'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xBB']
-------
Text=4
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [4]
-------
Text='\xBD'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\xBD']
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=*(unsignedint*)FLAG_PAGE
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [*(unsignedint*)FLAG_PAGE]
-------
Text=base+cgc_update_serial
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [base+cgc_update_serial]
-------
Text=cgc_update_serial++
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_update_serial++]
-------
Text=next_update_serial
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [next_update_serial]
-------
Text=(Product*)product
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(Product*)product]
-------
Text=(unsignedchar*)barcode
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(unsignedchar*)barcode]
-------
Text=0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)]
-------
Text=returnTRUE;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [TRUE]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=FALSE
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [FALSE]
-------
Text=struct
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL]
-------
Text=np
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL==np
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL==np]
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL]
-------
Text=(Product*)np->data
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(Product*)np->data]
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL]
-------
Text=4
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [4]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0.0]
-------
Text=cgc_list_init(&buy_list,cgc_free)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_list_init(&buy_list,cgc_free)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))]
-------
Text=RECV(STDIN,bc,BARCODE_SZ);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=p=cgc_get_product_by_barcode(bc);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [p=cgc_get_product_by_barcode(bc)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(NULL==p){cgc_list_destroy(&buy_list);return-1;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [NULL==p]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{cgc_list_destroy(&buy_list);return-1;}]
-------
Text=p_copy=cgc_malloc(sizeof(Product));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [p_copy=cgc_malloc(sizeof(Product))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=MALLOC_OK
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [MALLOC_OK]
-------
Text=(p_copy)
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [(p_copy)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcpy(p_copy,p,sizeof(Product));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_memcpy(p_copy,p,sizeof(Product))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cgc_list_insert_at_end(&buy_list,p_copy);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_list_insert_at_end(&buy_list,p_copy)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cost+=p_copy->sfn(p_copy->model_num,p_copy->cost);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cost+=p_copy->sfn(p_copy->model_num,p_copy->cost)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))]
-------
Text=cgc_list_destroy(&buy_list);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_list_destroy(&buy_list)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=return-1;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [-1]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=SEND(STDOUT,(char*)&cost,sizeof(cost))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SEND(STDOUT,(char*)&cost,sizeof(cost))]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0.0]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL==p]
-------
Text=-1
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [-1]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=sale_price
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=d_len
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0<d_len
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0<d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [onsale_fn[0]]
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [RECV(STDIN,(char*)p->barcode,BARCODE_SZ)]
-------
Text=p2
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_product_by_barcode((char*)p->barcode)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_get_product_by_barcode((char*)p->barcode)]
-------
Text=NULL!=p2
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL!=p2]
-------
Text=cgc_free
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [cgc_free]
-------
Text=(p)
Type=<class 'CParser.CParser.InitDeclaratorListContext'>
Child Count = 1
0 : <class 'CParser.CParser.InitDeclaratorContext'> [(p)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return-1;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [-1]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=bytes_recvd
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))]
-------
Text=0>=bytes_recvd
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0>=bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_recvd-1
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [bytes_recvd-1]
-------
Text='\0'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\0']
-------
Text=cgc_list_insert_at_end(&inv,p)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_list_insert_at_end(&inv,p)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=struct
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=np
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL==np
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL==np]
-------
Text=-1
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [-1]
-------
Text=cgc_list_remove_node(&inv,np)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_list_remove_node(&inv,np)]
-------
Text=cgc_list_destroy_node(&inv,&np)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_list_destroy_node(&inv,&np)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=desc_copy
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [desc_copy]
-------
Text=void*dst
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [void*]
1 : <class 'CParser.CParser.DeclaratorContext'> [dst]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=constvoid*src
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [constvoid*]
1 : <class 'CParser.CParser.DeclaratorContext'> [src]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsignedintcnt
Type=<class 'CParser.CParser.ParameterDeclarationContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifiersContext'> [unsignedint]
1 : <class 'CParser.CParser.DeclaratorContext'> [cnt]
-------
Text=cgc_memcpy
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_memcpy]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=MAX_DESC_LEN
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [MAX_DESC_LEN]
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)bc,BARCODE_SZ)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [RECV(STDIN,(char*)bc,BARCODE_SZ)]
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_product_by_barcode((char*)bc)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_get_product_by_barcode((char*)bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL==p]
-------
Text=return-1;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [-1]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=bytes_recvd
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))]
-------
Text=0>=bytes_recvd
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0>=bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=desc_buf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_recvd-1
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [bytes_recvd-1]
-------
Text='\0'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\0']
-------
Text=desc_copy(p->desc,desc_buf,MAX_DESC_LEN)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [desc_copy(p->desc,desc_buf,MAX_DESC_LEN)]
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_next_update_serial()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_get_next_update_serial()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL==p]
-------
Text=-1
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))]
-------
Text=100<=sale_percent
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [100<=sale_percent]
-------
Text=-1
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [-1]
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=onsale_fn[sale_percent]
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [onsale_fn[sale_percent]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL==p]
-------
Text=-1
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [-1]
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [onsale_fn[0]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL]
-------
Text=4
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=cgc_list_length(&inv)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_list_length(&inv)]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0.0]
-------
Text=struct
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_head_node(&inv)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_list_head_node(&inv)]
-------
Text=struct
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_end_marker(&inv)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_list_end_marker(&inv)]
-------
Text=RECV(STDIN,options,sizeof(options))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [RECV(STDIN,options,sizeof(options))]
-------
Text=0==count
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0==count]
-------
Text=-1
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [-1]
-------
Text=(NULL!=cur)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(NULL!=cur)]
-------
Text=&&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(cur!=end)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(cur!=end)]
-------
Text=p=(Product*)cur->data;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [p=(Product*)cur->data]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=SEND(STDOUT,(char*)p->barcode,BARCODE_SZ);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(0==options[0]%2){SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0==options[0]%2]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}]
-------
Text=if(0!=options[1]%2){SEND(STDOUT,(char*)&p->cost,sizeof(float));}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0!=options[1]%2]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{SEND(STDOUT,(char*)&p->cost,sizeof(float));}]
-------
Text=if(0==options[2]%2){sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0==options[2]%2]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}]
-------
Text=if(0!=options[3]%2){d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0!=options[3]%2]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}]
-------
Text=cur=cgc_list_next_node(cur);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cur=cgc_list_next_node(cur)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SUCCESS]
-------
Text=cgc_list_init(&inv,cgc_free)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_list_init(&inv,cgc_free)]
-------
Text=cgc_load_inventory(&inv)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_load_inventory(&inv)]
-------
Text=4
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=RECV(STDIN,cmd,sizeof(cmd))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [RECV(STDIN,cmd,sizeof(cmd))]
-------
Text=0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))]
-------
Text=ret=cgc_do_buy();
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [ret=cgc_do_buy()]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))]
-------
Text=ret=cgc_do_check();
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [ret=cgc_do_check();]
-------
Text=0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))]
-------
Text={ret=cgc_do_add();}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [ret=cgc_do_add();]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=if(0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))){ret=cgc_do_rm();}elseif(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{ret=cgc_do_rm();}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [if(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}]
-------
Text=ret
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [ret]
-------
Text=4
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [4]
-------
Text='\xBE'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\x0E']
-------
Text='\xBE'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\x0E']
-------
Text=4
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [4]
-------
Text='\xC4'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xC4']
-------
Text='\xEC'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xEC']
-------
Text='\x4E'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\x4E']
-------
Text='\xEE'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xEE']
-------
Text=4
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [4]
-------
Text='\xAD'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xDD']
-------
Text='\xAD'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xDD']
-------
Text=4
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [4]
-------
Text='\xDE'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xAD']
-------
Text='\xDE'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xAD']
-------
Text=4
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [4]
-------
Text='\x04'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\x04']
-------
Text='\xD4'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xD4']
-------
Text='\x7E'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\x7E']
-------
Text='\x00'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\x00']
-------
Text=4
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [4]
-------
Text='\x54'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\x13']
-------
Text='\x54'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\x13']
-------
Text=4
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [4]
-------
Text='\x0F'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\x0F']
-------
Text=4
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [4]
-------
Text='\x11'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\x44']
-------
Text='\x11'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\x44']
-------
Text=4
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [4]
-------
Text='\xFF'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xFF']
-------
Text=2
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [2]
-------
Text='\xED'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xED']
-------
Text='\0'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\0']
-------
Text=4
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [4]
-------
Text='\xBB'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xBB']
-------
Text=4
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [4]
-------
Text='\xBD'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\xBD']
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=*(unsignedint*)FLAG_PAGE
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [*(unsignedint*)FLAG_PAGE]
-------
Text=base+cgc_update_serial
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [base+cgc_update_serial]
-------
Text=cgc_update_serial++
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_update_serial++]
-------
Text=next_update_serial
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [next_update_serial]
-------
Text=(Product*)product
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(Product*)product]
-------
Text=(unsignedchar*)barcode
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(unsignedchar*)barcode]
-------
Text=0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=TRUE
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [TRUE]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=FALSE
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [FALSE]
-------
Text=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL]
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL==np
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL==np]
-------
Text=NULL
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL]
-------
Text=(Product*)np->data
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(Product*)np->data]
-------
Text=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL]
-------
Text=4
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [4]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0.0]
-------
Text=cgc_list_init(&buy_list,cgc_free)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_list_init(&buy_list,cgc_free)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p=cgc_get_product_by_barcode(bc)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL==p
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL==p]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={cgc_list_destroy(&buy_list);return-1;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{cgc_list_destroy(&buy_list);return-1;}]
-------
Text=p_copy=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p_copy=cgc_malloc(sizeof(Product))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=MALLOC_OK
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [MALLOC_OK]
-------
Text=(p_copy)
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclaratorContext'> [(p_copy)]
-------
Text=cgc_memcpy(p_copy,p,sizeof(Product))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_memcpy(p_copy,p,sizeof(Product))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_insert_at_end(&buy_list,p_copy)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_list_insert_at_end(&buy_list,p_copy)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cost+=p_copy->sfn(p_copy->model_num,p_copy->cost)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cost+=p_copy->sfn(p_copy->model_num,p_copy->cost)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-1
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [-1]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SEND(STDOUT,(char*)&cost,sizeof(cost))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SEND(STDOUT,(char*)&cost,sizeof(cost))]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0.0]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL==p]
-------
Text=-1
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [-1]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0<d_len
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0<d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [onsale_fn[0]]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [RECV(STDIN,(char*)p->barcode,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode((char*)p->barcode)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_get_product_by_barcode((char*)p->barcode)]
-------
Text=NULL!=p2
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL!=p2]
-------
Text=cgc_free
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [cgc_free]
-------
Text=(p)
Type=<class 'CParser.CParser.InitDeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclaratorContext'> [(p)]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-1
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [-1]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))]
-------
Text=0>=bytes_recvd
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0>=bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=bytes_recvd-1
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [bytes_recvd-1]
-------
Text='\0'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\0']
-------
Text=cgc_list_insert_at_end(&inv,p)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_list_insert_at_end(&inv,p)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL==np
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL==np]
-------
Text=-1
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [-1]
-------
Text=cgc_list_remove_node(&inv,np)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_list_remove_node(&inv,np)]
-------
Text=cgc_list_destroy_node(&inv,&np)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_list_destroy_node(&inv,&np)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=desc_copy
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [void*]
-------
Text=dst
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [dst]
-------
Text=constvoid*
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 2
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [const]
1 : <class 'CParser.CParser.DeclarationSpecifierContext'> [void*]
-------
Text=src
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [src]
-------
Text=unsignedint
Type=<class 'CParser.CParser.DeclarationSpecifiersContext'>
Child Count = 1
0 : <class 'CParser.CParser.DeclarationSpecifierContext'> [unsignedint]
-------
Text=cnt
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [cnt]
-------
Text=cgc_memcpy
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_memcpy]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=MAX_DESC_LEN
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [MAX_DESC_LEN]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [RECV(STDIN,(char*)bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode((char*)bc)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_get_product_by_barcode((char*)bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL==p]
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-1
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [-1]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))]
-------
Text=0>=bytes_recvd
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0>=bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=bytes_recvd-1
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [bytes_recvd-1]
-------
Text='\0'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\0']
-------
Text=desc_copy(p->desc,desc_buf,MAX_DESC_LEN)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [desc_copy(p->desc,desc_buf,MAX_DESC_LEN)]
-------
Text=cgc_get_next_update_serial()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_get_next_update_serial()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL==p]
-------
Text=-1
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))]
-------
Text=100<=sale_percent
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [100<=sale_percent]
-------
Text=-1
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [-1]
-------
Text=onsale_fn[sale_percent]
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [onsale_fn[sale_percent]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL==p]
-------
Text=-1
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [-1]
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [onsale_fn[0]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL]
-------
Text=4
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=cgc_list_length(&inv)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_list_length(&inv)]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0.0]
-------
Text=cgc_list_head_node(&inv)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_list_head_node(&inv)]
-------
Text=cgc_list_end_marker(&inv)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_list_end_marker(&inv)]
-------
Text=RECV(STDIN,options,sizeof(options))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [RECV(STDIN,options,sizeof(options))]
-------
Text=0==count
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0==count]
-------
Text=-1
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [-1]
-------
Text=(NULL!=cur)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(NULL!=cur)]
-------
Text=(cur!=end)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(cur!=end)]
-------
Text=p=(Product*)cur->data
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p=(Product*)cur->data]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==options[0]%2
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0==options[0]%2]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}]
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0!=options[1]%2
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0!=options[1]%2]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={SEND(STDOUT,(char*)&p->cost,sizeof(float));}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{SEND(STDOUT,(char*)&p->cost,sizeof(float));}]
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==options[2]%2
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0==options[2]%2]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}]
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0!=options[3]%2
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0!=options[3]%2]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}]
-------
Text=cur=cgc_list_next_node(cur)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cur=cgc_list_next_node(cur)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SUCCESS]
-------
Text=cgc_list_init(&inv,cgc_free)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_list_init(&inv,cgc_free)]
-------
Text=cgc_load_inventory(&inv)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_load_inventory(&inv)]
-------
Text=4
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=RECV(STDIN,cmd,sizeof(cmd))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [RECV(STDIN,cmd,sizeof(cmd))]
-------
Text=0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))]
-------
Text=ret=cgc_do_buy()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ret=cgc_do_buy()]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))]
-------
Text=ret=cgc_do_check();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [ret=cgc_do_check();]
-------
Text=0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret=cgc_do_add();
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [ret=cgc_do_add();]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={ret=cgc_do_rm();}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{ret=cgc_do_rm();}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}]
-------
Text=ret
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [ret]
-------
Text=4
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [4]
-------
Text='\xBE'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\x0E']
-------
Text='\xBE'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\x0E']
-------
Text=4
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [4]
-------
Text='\xC4'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xC4']
-------
Text='\xEC'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xEC']
-------
Text='\x4E'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\x4E']
-------
Text='\xEE'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xEE']
-------
Text=4
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [4]
-------
Text='\xAD'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xDD']
-------
Text='\xAD'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xDD']
-------
Text=4
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [4]
-------
Text='\xDE'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xAD']
-------
Text='\xDE'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xAD']
-------
Text=4
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [4]
-------
Text='\x04'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\x04']
-------
Text='\xD4'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xD4']
-------
Text='\x7E'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\x7E']
-------
Text='\x00'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\x00']
-------
Text=4
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [4]
-------
Text='\x54'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\x13']
-------
Text='\x54'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\x13']
-------
Text=4
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [4]
-------
Text='\x0F'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\x0F']
-------
Text=4
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [4]
-------
Text='\x11'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\x44']
-------
Text='\x11'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\x44']
-------
Text=4
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [4]
-------
Text='\xFF'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xFF']
-------
Text=2
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [2]
-------
Text='\xED'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xED']
-------
Text='\0'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\0']
-------
Text=4
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [4]
-------
Text='\xBB'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xBB']
-------
Text=4
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [4]
-------
Text='\xBD'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\xBD']
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=*(unsignedint*)FLAG_PAGE
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [*(unsignedint*)FLAG_PAGE]
-------
Text=base+cgc_update_serial
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [base+cgc_update_serial]
-------
Text=cgc_update_serial++
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_update_serial++]
-------
Text=next_update_serial
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [next_update_serial]
-------
Text=(Product*)product
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(Product*)product]
-------
Text=(unsignedchar*)barcode
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(unsignedchar*)barcode]
-------
Text=0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)]
-------
Text=TRUE
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [TRUE]
-------
Text=FALSE
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [FALSE]
-------
Text=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL]
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL==np
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL==np]
-------
Text=NULL
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL]
-------
Text=(Product*)np->data
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(Product*)np->data]
-------
Text=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL]
-------
Text=4
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [4]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0.0]
-------
Text=cgc_list_init(&buy_list,cgc_free)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_list_init(&buy_list,cgc_free)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=p=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL==p]
-------
Text={cgc_list_destroy(&buy_list);return-1;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [cgc_list_destroy(&buy_list);return-1;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=p_copy=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p_copy]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=MALLOC_OK
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [MALLOC_OK]
-------
Text=(p_copy)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [(p_copy)]
-------
Text=cgc_memcpy(p_copy,p,sizeof(Product))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_memcpy(p_copy,p,sizeof(Product))]
-------
Text=cgc_list_insert_at_end(&buy_list,p_copy)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_list_insert_at_end(&buy_list,p_copy)]
-------
Text=cost+=p_copy->sfn(p_copy->model_num,p_copy->cost)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cost]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [+=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [p_copy->sfn(p_copy->model_num,p_copy->cost)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [-1]
-------
Text=SEND(STDOUT,(char*)&cost,sizeof(cost))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SEND(STDOUT,(char*)&cost,sizeof(cost))]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0.0]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL==p]
-------
Text=-1
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [-1]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0<d_len
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0<d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [onsale_fn[0]]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [RECV(STDIN,(char*)p->barcode,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode((char*)p->barcode)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_get_product_by_barcode((char*)p->barcode)]
-------
Text=NULL!=p2
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL!=p2]
-------
Text=cgc_free
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [cgc_free]
-------
Text=(p)
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [(p)]
-------
Text=-1
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))]
-------
Text=0>=bytes_recvd
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0>=bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=bytes_recvd-1
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [bytes_recvd-1]
-------
Text='\0'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\0']
-------
Text=cgc_list_insert_at_end(&inv,p)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_list_insert_at_end(&inv,p)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL==np
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL==np]
-------
Text=-1
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [-1]
-------
Text=cgc_list_remove_node(&inv,np)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_list_remove_node(&inv,np)]
-------
Text=cgc_list_destroy_node(&inv,&np)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_list_destroy_node(&inv,&np)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL]
-------
Text=void*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void*]
-------
Text=dst
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [dst]
-------
Text=const
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeQualifierContext'> [const]
-------
Text=void*
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void*]
-------
Text=src
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [src]
-------
Text=unsignedint
Type=<class 'CParser.CParser.DeclarationSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [unsignedint]
-------
Text=cnt
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cnt]
-------
Text=cgc_memcpy
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_memcpy]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=MAX_DESC_LEN
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [MAX_DESC_LEN]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)bc,BARCODE_SZ)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [RECV(STDIN,(char*)bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode((char*)bc)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_get_product_by_barcode((char*)bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL==p]
-------
Text=-1
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))]
-------
Text=0>=bytes_recvd
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0>=bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=bytes_recvd-1
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [bytes_recvd-1]
-------
Text='\0'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\0']
-------
Text=desc_copy(p->desc,desc_buf,MAX_DESC_LEN)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [desc_copy(p->desc,desc_buf,MAX_DESC_LEN)]
-------
Text=cgc_get_next_update_serial()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_get_next_update_serial()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL==p]
-------
Text=-1
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))]
-------
Text=100<=sale_percent
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [100<=sale_percent]
-------
Text=-1
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [-1]
-------
Text=onsale_fn[sale_percent]
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [onsale_fn[sale_percent]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL==p]
-------
Text=-1
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [-1]
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [onsale_fn[0]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL]
-------
Text=4
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=cgc_list_length(&inv)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_list_length(&inv)]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0.0]
-------
Text=cgc_list_head_node(&inv)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_list_head_node(&inv)]
-------
Text=cgc_list_end_marker(&inv)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_list_end_marker(&inv)]
-------
Text=RECV(STDIN,options,sizeof(options))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [RECV(STDIN,options,sizeof(options))]
-------
Text=0==count
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0==count]
-------
Text=-1
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [-1]
-------
Text=(NULL!=cur)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(NULL!=cur)]
-------
Text=(cur!=end)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(cur!=end)]
-------
Text=p=(Product*)cur->data
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [(Product*)cur->data]
-------
Text=SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)]
-------
Text=0==options[0]%2
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0==options[0]%2]
-------
Text={SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=0!=options[1]%2
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0!=options[1]%2]
-------
Text={SEND(STDOUT,(char*)&p->cost,sizeof(float));}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [SEND(STDOUT,(char*)&p->cost,sizeof(float));]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=0==options[2]%2
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0==options[2]%2]
-------
Text={sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=0!=options[3]%2
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0!=options[3]%2]
-------
Text={d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=cur=cgc_list_next_node(cur)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cur]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_list_next_node(cur)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SUCCESS]
-------
Text=cgc_list_init(&inv,cgc_free)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_list_init(&inv,cgc_free)]
-------
Text=cgc_load_inventory(&inv)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_load_inventory(&inv)]
-------
Text=4
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=RECV(STDIN,cmd,sizeof(cmd))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [RECV(STDIN,cmd,sizeof(cmd))]
-------
Text=0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))]
-------
Text=ret=cgc_do_buy()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ret]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_do_buy()]
-------
Text=0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))]
-------
Text=ret=cgc_do_check();
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [ret=cgc_do_check()]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))]
-------
Text=ret=cgc_do_add();
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [ret=cgc_do_add();]
-------
Text=0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))]
-------
Text={ret=cgc_do_rm();}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [ret=cgc_do_rm();]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=if(0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))){ret=cgc_do_update();}elseif(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{ret=cgc_do_update();}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [if(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}]
-------
Text=ret
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [ret]
-------
Text=4
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [4]
-------
Text='\xBE'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\x0E']
-------
Text='\xBE'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\x0E']
-------
Text=4
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [4]
-------
Text='\xC4'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xC4']
-------
Text='\xEC'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xEC']
-------
Text='\x4E'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\x4E']
-------
Text='\xEE'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xEE']
-------
Text=4
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [4]
-------
Text='\xAD'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xDD']
-------
Text='\xAD'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xDD']
-------
Text=4
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [4]
-------
Text='\xDE'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xAD']
-------
Text='\xDE'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xAD']
-------
Text=4
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [4]
-------
Text='\x04'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\x04']
-------
Text='\xD4'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xD4']
-------
Text='\x7E'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\x7E']
-------
Text='\x00'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\x00']
-------
Text=4
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [4]
-------
Text='\x54'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\x13']
-------
Text='\x54'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\x13']
-------
Text=4
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [4]
-------
Text='\x0F'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\x0F']
-------
Text=4
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [4]
-------
Text='\x11'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\x44']
-------
Text='\x11'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\x44']
-------
Text=4
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [4]
-------
Text='\xFF'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xFF']
-------
Text=2
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [2]
-------
Text='\xED'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xED']
-------
Text='\0'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\0']
-------
Text=4
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [4]
-------
Text='\xBB'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xBB']
-------
Text=4
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [4]
-------
Text='\xBD'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\xBD']
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=*(unsignedint*)FLAG_PAGE
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [*(unsignedint*)FLAG_PAGE]
-------
Text=base+cgc_update_serial
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [base+cgc_update_serial]
-------
Text=cgc_update_serial++
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_update_serial++]
-------
Text=next_update_serial
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [next_update_serial]
-------
Text=(Product*)product
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(Product*)product]
-------
Text=(unsignedchar*)barcode
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(unsignedchar*)barcode]
-------
Text=0==cgc_memcmp(p->barcode,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_memcmp(p->barcode,bc,BARCODE_SZ)]
-------
Text=TRUE
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [TRUE]
-------
Text=FALSE
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [FALSE]
-------
Text=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL]
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL==np
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [np]
-------
Text=NULL
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL]
-------
Text=(Product*)np->data
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(Product*)np->data]
-------
Text=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL]
-------
Text=4
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [4]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0.0]
-------
Text=cgc_list_init(&buy_list,cgc_free)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_list_init(&buy_list,cgc_free)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=0==cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=p
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL==p]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_destroy(&buy_list);return-1;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 2
0 : <class 'CParser.CParser.BlockItemContext'> [cgc_list_destroy(&buy_list);]
1 : <class 'CParser.CParser.BlockItemContext'> [return-1;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p_copy
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p_copy]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=MALLOC_OK
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [MALLOC_OK]
-------
Text=(p_copy)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.DeclaratorContext'> [p_copy]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_memcpy(p_copy,p,sizeof(Product))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_memcpy(p_copy,p,sizeof(Product))]
-------
Text=cgc_list_insert_at_end(&buy_list,p_copy)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_list_insert_at_end(&buy_list,p_copy)]
-------
Text=cost
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cost]
-------
Text=+=
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [+=]
-------
Text=p_copy->sfn(p_copy->model_num,p_copy->cost)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [p_copy->sfn(p_copy->model_num,p_copy->cost)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=0!=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [!=]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [-1]
-------
Text=SEND(STDOUT,(char*)&cost,sizeof(cost))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SEND(STDOUT,(char*)&cost,sizeof(cost))]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0.0]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [-1]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0<d_len
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0<d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [onsale_fn[0]]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [RECV(STDIN,(char*)p->barcode,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode((char*)p->barcode)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_get_product_by_barcode((char*)p->barcode)]
-------
Text=NULL!=p2
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [!=]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [p2]
-------
Text=cgc_free
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_free]
-------
Text=(p)
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.DeclaratorContext'> [p]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=-1
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))]
-------
Text=0>=bytes_recvd
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0>=bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=bytes_recvd-1
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [bytes_recvd-1]
-------
Text='\0'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\0']
-------
Text=cgc_list_insert_at_end(&inv,p)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_list_insert_at_end(&inv,p)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL==np
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [np]
-------
Text=-1
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [-1]
-------
Text=cgc_list_remove_node(&inv,np)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_list_remove_node(&inv,np)]
-------
Text=cgc_list_destroy_node(&inv,&np)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_list_destroy_node(&inv,&np)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL]
-------
Text=void*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=dst
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=const
Type=<class 'CParser.CParser.TypeQualifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [const]
-------
Text=void*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=src
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsignedint
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [unsigned]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=cnt
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcpy
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_memcpy]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=MAX_DESC_LEN
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [MAX_DESC_LEN]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)bc,BARCODE_SZ)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [RECV(STDIN,(char*)bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode((char*)bc)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_get_product_by_barcode((char*)bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))]
-------
Text=0>=bytes_recvd
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0>=bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=bytes_recvd-1
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [bytes_recvd-1]
-------
Text='\0'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\0']
-------
Text=desc_copy(p->desc,desc_buf,MAX_DESC_LEN)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [desc_copy(p->desc,desc_buf,MAX_DESC_LEN)]
-------
Text=cgc_get_next_update_serial()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_get_next_update_serial()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))]
-------
Text=100<=sale_percent
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [100<=sale_percent]
-------
Text=-1
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [-1]
-------
Text=onsale_fn[sale_percent]
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [onsale_fn[sale_percent]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [-1]
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [onsale_fn[0]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL]
-------
Text=4
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=cgc_list_length(&inv)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_list_length(&inv)]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0.0]
-------
Text=cgc_list_head_node(&inv)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_list_head_node(&inv)]
-------
Text=cgc_list_end_marker(&inv)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_list_end_marker(&inv)]
-------
Text=RECV(STDIN,options,sizeof(options))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [RECV(STDIN,options,sizeof(options))]
-------
Text=0==count
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [count]
-------
Text=-1
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [-1]
-------
Text=(NULL!=cur)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(NULL!=cur)]
-------
Text=(cur!=end)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(cur!=end)]
-------
Text=p
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=(Product*)cur->data
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(Product*)cur->data]
-------
Text=SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)]
-------
Text=0==options[0]%2
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0==options[0]%2]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0!=options[1]%2
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0!=options[1]%2]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SEND(STDOUT,(char*)&p->cost,sizeof(float));
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [SEND(STDOUT,(char*)&p->cost,sizeof(float));]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==options[2]%2
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0==options[2]%2]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sale_price=p->sfn(p->model_num,p->cost);SEND(STDOUT,(char*)&sale_price,sizeof(float));
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 2
0 : <class 'CParser.CParser.BlockItemContext'> [sale_price=p->sfn(p->model_num,p->cost);]
1 : <class 'CParser.CParser.BlockItemContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float));]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0!=options[3]%2
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0!=options[3]%2]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=d_len=cgc_strlen(p->desc,'\0');if(0<d_len)SEND(STDOUT,p->desc,d_len);SEND(STDOUT,DESC_TERM,1);
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 3
0 : <class 'CParser.CParser.BlockItemContext'> [d_len=cgc_strlen(p->desc,'\0');]
1 : <class 'CParser.CParser.BlockItemContext'> [if(0<d_len)SEND(STDOUT,p->desc,d_len);]
2 : <class 'CParser.CParser.BlockItemContext'> [SEND(STDOUT,DESC_TERM,1);]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cur
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cur]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_list_next_node(cur)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_list_next_node(cur)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SUCCESS]
-------
Text=cgc_list_init(&inv,cgc_free)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_list_init(&inv,cgc_free)]
-------
Text=cgc_load_inventory(&inv)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_load_inventory(&inv)]
-------
Text=4
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=RECV(STDIN,cmd,sizeof(cmd))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [RECV(STDIN,cmd,sizeof(cmd))]
-------
Text=0==cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))]
-------
Text=ret
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ret]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_do_buy()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_do_buy()]
-------
Text=0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))]
-------
Text=ret=cgc_do_check()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ret=cgc_do_check()]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))]
-------
Text=ret=cgc_do_add();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [ret=cgc_do_add();]
-------
Text=0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret=cgc_do_rm();
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [ret=cgc_do_rm();]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={ret=cgc_do_update();}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{ret=cgc_do_update();}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}]
-------
Text=ret
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [ret]
-------
Text=4
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [4]
-------
Text='\xBE'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\x0E']
-------
Text='\xBE'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\x0E']
-------
Text=4
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [4]
-------
Text='\xC4'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xC4']
-------
Text='\xEC'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xEC']
-------
Text='\x4E'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\x4E']
-------
Text='\xEE'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xEE']
-------
Text=4
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [4]
-------
Text='\xAD'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xDD']
-------
Text='\xAD'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xDD']
-------
Text=4
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [4]
-------
Text='\xDE'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xAD']
-------
Text='\xDE'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xAD']
-------
Text=4
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [4]
-------
Text='\x04'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\x04']
-------
Text='\xD4'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xD4']
-------
Text='\x7E'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\x7E']
-------
Text='\x00'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\x00']
-------
Text=4
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [4]
-------
Text='\x54'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\x13']
-------
Text='\x54'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\x13']
-------
Text=4
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [4]
-------
Text='\x0F'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\x0F']
-------
Text=4
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [4]
-------
Text='\x11'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\x44']
-------
Text='\x11'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\x44']
-------
Text=4
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [4]
-------
Text='\xFF'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xFF']
-------
Text=2
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [2]
-------
Text='\xED'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xED']
-------
Text='\0'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\0']
-------
Text=4
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [4]
-------
Text='\xBB'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xBB']
-------
Text=4
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [4]
-------
Text='\xBD'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\xBD']
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=*(unsignedint*)FLAG_PAGE
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [*(unsignedint*)FLAG_PAGE]
-------
Text=base+cgc_update_serial
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [base+cgc_update_serial]
-------
Text=cgc_update_serial++
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_update_serial++]
-------
Text=next_update_serial
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [next_update_serial]
-------
Text=(Product*)product
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(Product*)product]
-------
Text=(unsignedchar*)barcode
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(unsignedchar*)barcode]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcmp(p->barcode,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_memcmp(p->barcode,bc,BARCODE_SZ)]
-------
Text=TRUE
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [TRUE]
-------
Text=FALSE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [FALSE]
-------
Text=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=np
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [np]
-------
Text=NULL
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL]
-------
Text=(Product*)np->data
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(Product*)np->data]
-------
Text=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=4
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [4]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0.0]
-------
Text=cgc_list_init(&buy_list,cgc_free)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_list_init(&buy_list,cgc_free)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=p
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL==p]
-------
Text=cgc_list_destroy(&buy_list);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [cgc_list_destroy(&buy_list);]
-------
Text=return-1;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [return-1;]
-------
Text=p_copy
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p_copy]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=MALLOC_OK
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p_copy
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [p_copy]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcpy(p_copy,p,sizeof(Product))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_memcpy(p_copy,p,sizeof(Product))]
-------
Text=cgc_list_insert_at_end(&buy_list,p_copy)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_list_insert_at_end(&buy_list,p_copy)]
-------
Text=cost
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cost]
-------
Text=+=
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p_copy->sfn(p_copy->model_num,p_copy->cost)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [p_copy->sfn(p_copy->model_num,p_copy->cost)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=!=
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [-1]
-------
Text=SEND(STDOUT,(char*)&cost,sizeof(cost))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SEND(STDOUT,(char*)&cost,sizeof(cost))]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0.0]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [-1]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0<d_len
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [<]
2 : <class 'CParser.CParser.ShiftExpressionContext'> [d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [onsale_fn[0]]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [RECV(STDIN,(char*)p->barcode,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode((char*)p->barcode)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_get_product_by_barcode((char*)p->barcode)]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=!=
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p2
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [p2]
-------
Text=cgc_free
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'CParser.CParser.DeclaratorContext'>
Child Count = 1
0 : <class 'CParser.CParser.DirectDeclaratorContext'> [p]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-1
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))]
-------
Text=0>=bytes_recvd
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [>=]
2 : <class 'CParser.CParser.ShiftExpressionContext'> [bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=bytes_recvd-1
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [bytes_recvd-1]
-------
Text='\0'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\0']
-------
Text=cgc_list_insert_at_end(&inv,p)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_list_insert_at_end(&inv,p)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=np
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [np]
-------
Text=-1
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [-1]
-------
Text=cgc_list_remove_node(&inv,np)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_list_remove_node(&inv,np)]
-------
Text=cgc_list_destroy_node(&inv,&np)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_list_destroy_node(&inv,&np)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=const
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=unsigned
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcpy
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_memcpy]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=MAX_DESC_LEN
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [MAX_DESC_LEN]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)bc,BARCODE_SZ)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [RECV(STDIN,(char*)bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode((char*)bc)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_get_product_by_barcode((char*)bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))]
-------
Text=0>=bytes_recvd
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [>=]
2 : <class 'CParser.CParser.ShiftExpressionContext'> [bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=bytes_recvd-1
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [bytes_recvd-1]
-------
Text='\0'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\0']
-------
Text=desc_copy(p->desc,desc_buf,MAX_DESC_LEN)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [desc_copy(p->desc,desc_buf,MAX_DESC_LEN)]
-------
Text=cgc_get_next_update_serial()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_get_next_update_serial()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))]
-------
Text=100<=sale_percent
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.ShiftExpressionContext'> [100]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [<=]
2 : <class 'CParser.CParser.ShiftExpressionContext'> [sale_percent]
-------
Text=-1
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [-1]
-------
Text=onsale_fn[sale_percent]
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [onsale_fn[sale_percent]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [-1]
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [onsale_fn[0]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=4
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=cgc_list_length(&inv)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_list_length(&inv)]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0.0]
-------
Text=cgc_list_head_node(&inv)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_list_head_node(&inv)]
-------
Text=cgc_list_end_marker(&inv)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_list_end_marker(&inv)]
-------
Text=RECV(STDIN,options,sizeof(options))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [RECV(STDIN,options,sizeof(options))]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [count]
-------
Text=-1
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [-1]
-------
Text=(NULL!=cur)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(NULL!=cur)]
-------
Text=(cur!=end)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(cur!=end)]
-------
Text=p
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(Product*)cur->data
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(Product*)cur->data]
-------
Text=SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)]
-------
Text=0==options[0]%2
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0==options[0]%2]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));]
-------
Text=0!=options[1]%2
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0!=options[1]%2]
-------
Text=SEND(STDOUT,(char*)&p->cost,sizeof(float));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [SEND(STDOUT,(char*)&p->cost,sizeof(float));]
-------
Text=0==options[2]%2
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0==options[2]%2]
-------
Text=sale_price=p->sfn(p->model_num,p->cost);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [sale_price=p->sfn(p->model_num,p->cost);]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float));
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float));]
-------
Text=0!=options[3]%2
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0!=options[3]%2]
-------
Text=d_len=cgc_strlen(p->desc,'\0');
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [d_len=cgc_strlen(p->desc,'\0');]
-------
Text=if(0<d_len)SEND(STDOUT,p->desc,d_len);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [if(0<d_len)SEND(STDOUT,p->desc,d_len);]
-------
Text=SEND(STDOUT,DESC_TERM,1);
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [SEND(STDOUT,DESC_TERM,1);]
-------
Text=cur
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cur]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_next_node(cur)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_list_next_node(cur)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SUCCESS]
-------
Text=cgc_list_init(&inv,cgc_free)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_list_init(&inv,cgc_free)]
-------
Text=cgc_load_inventory(&inv)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_load_inventory(&inv)]
-------
Text=4
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=RECV(STDIN,cmd,sizeof(cmd))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [RECV(STDIN,cmd,sizeof(cmd))]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))]
-------
Text=ret
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ret]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_buy()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_do_buy()]
-------
Text=0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))]
-------
Text=ret=cgc_do_check()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ret]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_do_check()]
-------
Text=0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))]
-------
Text=ret=cgc_do_add();
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [ret=cgc_do_add()]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))]
-------
Text=ret=cgc_do_rm();
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [ret=cgc_do_rm();]
-------
Text=0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))]
-------
Text={ret=cgc_do_update();}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [ret=cgc_do_update();]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=if(0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))){ret=cgc_do_onsale();}elseif(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{ret=cgc_do_onsale();}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [if(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}]
-------
Text=ret
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [ret]
-------
Text=4
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [4]
-------
Text='\xBE'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\x0E']
-------
Text='\xBE'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\x0E']
-------
Text=4
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [4]
-------
Text='\xC4'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xC4']
-------
Text='\xEC'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xEC']
-------
Text='\x4E'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\x4E']
-------
Text='\xEE'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xEE']
-------
Text=4
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [4]
-------
Text='\xAD'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xDD']
-------
Text='\xAD'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xDD']
-------
Text=4
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [4]
-------
Text='\xDE'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xAD']
-------
Text='\xDE'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xAD']
-------
Text=4
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [4]
-------
Text='\x04'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\x04']
-------
Text='\xD4'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xD4']
-------
Text='\x7E'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\x7E']
-------
Text='\x00'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\x00']
-------
Text=4
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [4]
-------
Text='\x54'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\x13']
-------
Text='\x54'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\x13']
-------
Text=4
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [4]
-------
Text='\x0F'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\x0F']
-------
Text=4
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [4]
-------
Text='\x11'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\x44']
-------
Text='\x11'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\x44']
-------
Text=4
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [4]
-------
Text='\xFF'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xFF']
-------
Text=2
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [2]
-------
Text='\xED'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xED']
-------
Text='\0'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\0']
-------
Text=4
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [4]
-------
Text='\xBB'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xBB']
-------
Text=4
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [4]
-------
Text='\xBD'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\xBD']
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=*(unsignedint*)FLAG_PAGE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [*(unsignedint*)FLAG_PAGE]
-------
Text=base+cgc_update_serial
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [base+cgc_update_serial]
-------
Text=cgc_update_serial++
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_update_serial++]
-------
Text=next_update_serial
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [next_update_serial]
-------
Text=(Product*)product
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(Product*)product]
-------
Text=(unsignedchar*)barcode
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(unsignedchar*)barcode]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=cgc_memcmp(p->barcode,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_memcmp(p->barcode,bc,BARCODE_SZ)]
-------
Text=TRUE
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [TRUE]
-------
Text=FALSE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [FALSE]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=np
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [np]
-------
Text=NULL
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
-------
Text=(Product*)np->data
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(Product*)np->data]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=4
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [4]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0.0]
-------
Text=cgc_list_init(&buy_list,cgc_free)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_list_init(&buy_list,cgc_free)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL==p]
-------
Text=cgc_list_destroy(&buy_list);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [cgc_list_destroy(&buy_list);]
-------
Text=return-1;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.JumpStatementContext'> [return-1;]
-------
Text=p_copy
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p_copy]
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=p_copy
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p_copy]
-------
Text=cgc_memcpy(p_copy,p,sizeof(Product))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_memcpy(p_copy,p,sizeof(Product))]
-------
Text=cgc_list_insert_at_end(&buy_list,p_copy)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_list_insert_at_end(&buy_list,p_copy)]
-------
Text=cost
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cost]
-------
Text=p_copy->sfn(p_copy->model_num,p_copy->cost)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [p_copy->sfn(p_copy->model_num,p_copy->cost)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [-1]
-------
Text=SEND(STDOUT,(char*)&cost,sizeof(cost))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SEND(STDOUT,(char*)&cost,sizeof(cost))]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0.0]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [-1]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=<
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=d_len
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [onsale_fn[0]]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [RECV(STDIN,(char*)p->barcode,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode((char*)p->barcode)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_get_product_by_barcode((char*)p->barcode)]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=p2
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [p2]
-------
Text=p
Type=<class 'CParser.CParser.DirectDeclaratorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=>=
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=bytes_recvd-1
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [bytes_recvd-1]
-------
Text='\0'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\0']
-------
Text=cgc_list_insert_at_end(&inv,p)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_list_insert_at_end(&inv,p)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=np
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [np]
-------
Text=-1
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [-1]
-------
Text=cgc_list_remove_node(&inv,np)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_list_remove_node(&inv,np)]
-------
Text=cgc_list_destroy_node(&inv,&np)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_list_destroy_node(&inv,&np)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcpy
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_memcpy]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=MAX_DESC_LEN
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [MAX_DESC_LEN]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [RECV(STDIN,(char*)bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode((char*)bc)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_get_product_by_barcode((char*)bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=>=
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=bytes_recvd-1
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [bytes_recvd-1]
-------
Text='\0'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\0']
-------
Text=desc_copy(p->desc,desc_buf,MAX_DESC_LEN)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [desc_copy(p->desc,desc_buf,MAX_DESC_LEN)]
-------
Text=cgc_get_next_update_serial()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_get_next_update_serial()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))]
-------
Text=100
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [100]
-------
Text=<=
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sale_percent
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sale_percent]
-------
Text=-1
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [-1]
-------
Text=onsale_fn[sale_percent]
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [onsale_fn[sale_percent]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [-1]
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [onsale_fn[0]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=4
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=cgc_list_length(&inv)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_list_length(&inv)]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0.0]
-------
Text=cgc_list_head_node(&inv)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_list_head_node(&inv)]
-------
Text=cgc_list_end_marker(&inv)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_list_end_marker(&inv)]
-------
Text=RECV(STDIN,options,sizeof(options))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [RECV(STDIN,options,sizeof(options))]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [count]
-------
Text=-1
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [-1]
-------
Text=(NULL!=cur)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(NULL!=cur)]
-------
Text=(cur!=end)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(cur!=end)]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=(Product*)cur->data
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(Product*)cur->data]
-------
Text=SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)]
-------
Text=0==options[0]%2
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0==options[0]%2]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));]
-------
Text=0!=options[1]%2
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0!=options[1]%2]
-------
Text=SEND(STDOUT,(char*)&p->cost,sizeof(float));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [SEND(STDOUT,(char*)&p->cost,sizeof(float));]
-------
Text=0==options[2]%2
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0==options[2]%2]
-------
Text=sale_price=p->sfn(p->model_num,p->cost);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [sale_price=p->sfn(p->model_num,p->cost);]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float));
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float));]
-------
Text=0!=options[3]%2
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0!=options[3]%2]
-------
Text=d_len=cgc_strlen(p->desc,'\0');
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [d_len=cgc_strlen(p->desc,'\0');]
-------
Text=if(0<d_len)SEND(STDOUT,p->desc,d_len);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0<d_len)SEND(STDOUT,p->desc,d_len);]
-------
Text=SEND(STDOUT,DESC_TERM,1);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [SEND(STDOUT,DESC_TERM,1);]
-------
Text=cur
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cur]
-------
Text=cgc_list_next_node(cur)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_list_next_node(cur)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SUCCESS]
-------
Text=cgc_list_init(&inv,cgc_free)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_list_init(&inv,cgc_free)]
-------
Text=cgc_load_inventory(&inv)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_load_inventory(&inv)]
-------
Text=4
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=RECV(STDIN,cmd,sizeof(cmd))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [RECV(STDIN,cmd,sizeof(cmd))]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))]
-------
Text=ret
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ret]
-------
Text=cgc_do_buy()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_do_buy()]
-------
Text=0==cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))]
-------
Text=ret
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ret]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_do_check()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_do_check()]
-------
Text=0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))]
-------
Text=ret=cgc_do_add()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ret=cgc_do_add()]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))]
-------
Text=ret=cgc_do_rm();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [ret=cgc_do_rm();]
-------
Text=0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret=cgc_do_update();
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [ret=cgc_do_update();]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={ret=cgc_do_onsale();}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{ret=cgc_do_onsale();}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}]
-------
Text=ret
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [ret]
-------
Text=4
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [4]
-------
Text='\xBE'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\x0E']
-------
Text='\xBE'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\x0E']
-------
Text=4
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [4]
-------
Text='\xC4'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xC4']
-------
Text='\xEC'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xEC']
-------
Text='\x4E'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\x4E']
-------
Text='\xEE'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xEE']
-------
Text=4
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [4]
-------
Text='\xAD'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xDD']
-------
Text='\xAD'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xDD']
-------
Text=4
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [4]
-------
Text='\xDE'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xAD']
-------
Text='\xDE'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xAD']
-------
Text=4
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [4]
-------
Text='\x04'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\x04']
-------
Text='\xD4'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xD4']
-------
Text='\x7E'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\x7E']
-------
Text='\x00'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\x00']
-------
Text=4
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [4]
-------
Text='\x54'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\x13']
-------
Text='\x54'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\x13']
-------
Text=4
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [4]
-------
Text='\x0F'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\x0F']
-------
Text=4
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [4]
-------
Text='\x11'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\x44']
-------
Text='\x11'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\x44']
-------
Text=4
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [4]
-------
Text='\xFF'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xFF']
-------
Text=2
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [2]
-------
Text='\xED'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xED']
-------
Text='\0'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\0']
-------
Text=4
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [4]
-------
Text='\xBB'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xBB']
-------
Text=4
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [4]
-------
Text='\xBD'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\xBD']
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=*(unsignedint*)FLAG_PAGE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [*(unsignedint*)FLAG_PAGE]
-------
Text=base+cgc_update_serial
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [base+cgc_update_serial]
-------
Text=cgc_update_serial++
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_update_serial++]
-------
Text=next_update_serial
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [next_update_serial]
-------
Text=(Product*)product
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(Product*)product]
-------
Text=(unsignedchar*)barcode
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(unsignedchar*)barcode]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=cgc_memcmp(p->barcode,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_memcmp(p->barcode,bc,BARCODE_SZ)]
-------
Text=TRUE
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [TRUE]
-------
Text=FALSE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [FALSE]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=np
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [np]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=(Product*)np->data
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(Product*)np->data]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=4
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [4]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0.0]
-------
Text=cgc_list_init(&buy_list,cgc_free)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_list_init(&buy_list,cgc_free)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL==p]
-------
Text=cgc_list_destroy(&buy_list);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [cgc_list_destroy(&buy_list)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=return-1;
Type=<class 'CParser.CParser.JumpStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [return]
1 : <class 'CParser.CParser.ExpressionContext'> [-1]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=p_copy
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=p_copy
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcpy(p_copy,p,sizeof(Product))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_memcpy(p_copy,p,sizeof(Product))]
-------
Text=cgc_list_insert_at_end(&buy_list,p_copy)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_list_insert_at_end(&buy_list,p_copy)]
-------
Text=cost
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p_copy->sfn(p_copy->model_num,p_copy->cost)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [p_copy->sfn(p_copy->model_num,p_copy->cost)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [-1]
-------
Text=SEND(STDOUT,(char*)&cost,sizeof(cost))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SEND(STDOUT,(char*)&cost,sizeof(cost))]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0.0]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [-1]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=d_len
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [onsale_fn[0]]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [RECV(STDIN,(char*)p->barcode,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode((char*)p->barcode)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_get_product_by_barcode((char*)p->barcode)]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=p2
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [p2]
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-1
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=bytes_recvd-1
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [bytes_recvd-1]
-------
Text='\0'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\0']
-------
Text=cgc_list_insert_at_end(&inv,p)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_list_insert_at_end(&inv,p)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=np
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [np]
-------
Text=-1
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [-1]
-------
Text=cgc_list_remove_node(&inv,np)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_list_remove_node(&inv,np)]
-------
Text=cgc_list_destroy_node(&inv,&np)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_list_destroy_node(&inv,&np)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=cgc_memcpy
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_memcpy]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=MAX_DESC_LEN
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [MAX_DESC_LEN]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)bc,BARCODE_SZ)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [RECV(STDIN,(char*)bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode((char*)bc)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_get_product_by_barcode((char*)bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=bytes_recvd-1
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [bytes_recvd-1]
-------
Text='\0'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\0']
-------
Text=desc_copy(p->desc,desc_buf,MAX_DESC_LEN)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [desc_copy(p->desc,desc_buf,MAX_DESC_LEN)]
-------
Text=cgc_get_next_update_serial()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_get_next_update_serial()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))]
-------
Text=100
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [100]
-------
Text=sale_percent
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sale_percent]
-------
Text=-1
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [-1]
-------
Text=onsale_fn[sale_percent]
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [onsale_fn[sale_percent]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [-1]
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [onsale_fn[0]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=4
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=cgc_list_length(&inv)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_list_length(&inv)]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0.0]
-------
Text=cgc_list_head_node(&inv)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_list_head_node(&inv)]
-------
Text=cgc_list_end_marker(&inv)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_list_end_marker(&inv)]
-------
Text=RECV(STDIN,options,sizeof(options))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [RECV(STDIN,options,sizeof(options))]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [count]
-------
Text=-1
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [-1]
-------
Text=(NULL!=cur)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(NULL!=cur)]
-------
Text=(cur!=end)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(cur!=end)]
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(Product*)cur->data
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(Product*)cur->data]
-------
Text=SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)]
-------
Text=0==options[0]%2
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0==options[0]%2]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=0!=options[1]%2
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0!=options[1]%2]
-------
Text=SEND(STDOUT,(char*)&p->cost,sizeof(float));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [SEND(STDOUT,(char*)&p->cost,sizeof(float))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=0==options[2]%2
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0==options[2]%2]
-------
Text=sale_price=p->sfn(p->model_num,p->cost);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [sale_price=p->sfn(p->model_num,p->cost)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float));
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=0!=options[3]%2
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0!=options[3]%2]
-------
Text=d_len=cgc_strlen(p->desc,'\0');
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [d_len=cgc_strlen(p->desc,'\0')]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=if(0<d_len)SEND(STDOUT,p->desc,d_len);
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 5
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0<d_len]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [SEND(STDOUT,p->desc,d_len);]
-------
Text=SEND(STDOUT,DESC_TERM,1);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=cur
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_next_node(cur)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_list_next_node(cur)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SUCCESS]
-------
Text=cgc_list_init(&inv,cgc_free)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_list_init(&inv,cgc_free)]
-------
Text=cgc_load_inventory(&inv)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_load_inventory(&inv)]
-------
Text=4
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=RECV(STDIN,cmd,sizeof(cmd))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [RECV(STDIN,cmd,sizeof(cmd))]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))]
-------
Text=ret
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_buy()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_do_buy()]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))]
-------
Text=ret
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ret]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_check()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_do_check()]
-------
Text=0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))]
-------
Text=ret=cgc_do_add()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ret]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_do_add()]
-------
Text=0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))]
-------
Text=ret=cgc_do_rm();
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [ret=cgc_do_rm()]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))]
-------
Text=ret=cgc_do_update();
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [ret=cgc_do_update();]
-------
Text=0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))]
-------
Text={ret=cgc_do_onsale();}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [ret=cgc_do_onsale();]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=if(0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))){ret=cgc_do_nosale();}elseif(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{ret=cgc_do_nosale();}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [if(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}]
-------
Text=ret
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [ret]
-------
Text=4
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [4]
-------
Text='\xBE'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\x0E']
-------
Text='\xBE'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\x0E']
-------
Text=4
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [4]
-------
Text='\xC4'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xC4']
-------
Text='\xEC'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xEC']
-------
Text='\x4E'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\x4E']
-------
Text='\xEE'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xEE']
-------
Text=4
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [4]
-------
Text='\xAD'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xDD']
-------
Text='\xAD'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xDD']
-------
Text=4
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [4]
-------
Text='\xDE'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xAD']
-------
Text='\xDE'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xAD']
-------
Text=4
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [4]
-------
Text='\x04'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\x04']
-------
Text='\xD4'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xD4']
-------
Text='\x7E'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\x7E']
-------
Text='\x00'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\x00']
-------
Text=4
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [4]
-------
Text='\x54'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\x13']
-------
Text='\x54'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\x13']
-------
Text=4
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [4]
-------
Text='\x0F'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\x0F']
-------
Text=4
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [4]
-------
Text='\x11'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\x44']
-------
Text='\x11'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\x44']
-------
Text=4
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [4]
-------
Text='\xFF'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xFF']
-------
Text=2
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [2]
-------
Text='\xED'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xED']
-------
Text='\0'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\0']
-------
Text=4
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [4]
-------
Text='\xBB'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xBB']
-------
Text=4
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [4]
-------
Text='\xBD'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\xBD']
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=*(unsignedint*)FLAG_PAGE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [*(unsignedint*)FLAG_PAGE]
-------
Text=base+cgc_update_serial
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [base]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [+]
2 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_update_serial]
-------
Text=cgc_update_serial++
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_update_serial++]
-------
Text=next_update_serial
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [next_update_serial]
-------
Text=(Product*)product
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(Product*)product]
-------
Text=(unsignedchar*)barcode
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(unsignedchar*)barcode]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=cgc_memcmp(p->barcode,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_memcmp(p->barcode,bc,BARCODE_SZ)]
-------
Text=TRUE
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [TRUE]
-------
Text=FALSE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [FALSE]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=np
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [np]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=(Product*)np->data
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(Product*)np->data]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=4
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [4]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0.0]
-------
Text=cgc_list_init(&buy_list,cgc_free)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_list_init(&buy_list,cgc_free)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL==p]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=return
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-1
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [-1]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=cgc_memcpy(p_copy,p,sizeof(Product))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_memcpy(p_copy,p,sizeof(Product))]
-------
Text=cgc_list_insert_at_end(&buy_list,p_copy)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_list_insert_at_end(&buy_list,p_copy)]
-------
Text=p_copy->sfn(p_copy->model_num,p_copy->cost)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [p_copy->sfn(p_copy->model_num,p_copy->cost)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [-1]
-------
Text=SEND(STDOUT,(char*)&cost,sizeof(cost))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SEND(STDOUT,(char*)&cost,sizeof(cost))]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0.0]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [-1]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=d_len
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [onsale_fn[0]]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [RECV(STDIN,(char*)p->barcode,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode((char*)p->barcode)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_get_product_by_barcode((char*)p->barcode)]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=p2
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [p2]
-------
Text=-1
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=bytes_recvd-1
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [bytes_recvd-1]
-------
Text='\0'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\0']
-------
Text=cgc_list_insert_at_end(&inv,p)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_list_insert_at_end(&inv,p)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=np
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [np]
-------
Text=-1
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [-1]
-------
Text=cgc_list_remove_node(&inv,np)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_list_remove_node(&inv,np)]
-------
Text=cgc_list_destroy_node(&inv,&np)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_list_destroy_node(&inv,&np)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=cgc_memcpy
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_memcpy]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=MAX_DESC_LEN
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [MAX_DESC_LEN]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)bc,BARCODE_SZ)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [RECV(STDIN,(char*)bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode((char*)bc)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_get_product_by_barcode((char*)bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=bytes_recvd-1
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [bytes_recvd-1]
-------
Text='\0'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\0']
-------
Text=desc_copy(p->desc,desc_buf,MAX_DESC_LEN)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [desc_copy(p->desc,desc_buf,MAX_DESC_LEN)]
-------
Text=cgc_get_next_update_serial()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_get_next_update_serial()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))]
-------
Text=100
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [100]
-------
Text=sale_percent
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sale_percent]
-------
Text=-1
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [-1]
-------
Text=onsale_fn[sale_percent]
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [onsale_fn[sale_percent]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [-1]
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [onsale_fn[0]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=4
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=cgc_list_length(&inv)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_list_length(&inv)]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0.0]
-------
Text=cgc_list_head_node(&inv)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_list_head_node(&inv)]
-------
Text=cgc_list_end_marker(&inv)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_list_end_marker(&inv)]
-------
Text=RECV(STDIN,options,sizeof(options))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [RECV(STDIN,options,sizeof(options))]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [count]
-------
Text=-1
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [-1]
-------
Text=(NULL!=cur)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(NULL!=cur)]
-------
Text=(cur!=end)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(cur!=end)]
-------
Text=(Product*)cur->data
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(Product*)cur->data]
-------
Text=SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)]
-------
Text=0==options[0]%2
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0==options[0]%2]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0!=options[1]%2
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0!=options[1]%2]
-------
Text=SEND(STDOUT,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SEND(STDOUT,(char*)&p->cost,sizeof(float))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==options[2]%2
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0==options[2]%2]
-------
Text=sale_price=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sale_price=p->sfn(p->model_num,p->cost)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0!=options[3]%2
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0!=options[3]%2]
-------
Text=d_len=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [d_len=cgc_strlen(p->desc,'\0')]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0<d_len
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0<d_len]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SEND(STDOUT,p->desc,d_len);
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [SEND(STDOUT,p->desc,d_len);]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_next_node(cur)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_list_next_node(cur)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SUCCESS]
-------
Text=cgc_list_init(&inv,cgc_free)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_list_init(&inv,cgc_free)]
-------
Text=cgc_load_inventory(&inv)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_load_inventory(&inv)]
-------
Text=4
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=RECV(STDIN,cmd,sizeof(cmd))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [RECV(STDIN,cmd,sizeof(cmd))]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))]
-------
Text=cgc_do_buy()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_do_buy()]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))]
-------
Text=ret
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ret]
-------
Text=cgc_do_check()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_do_check()]
-------
Text=0==cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))]
-------
Text=ret
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ret]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_do_add()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_do_add()]
-------
Text=0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))]
-------
Text=ret=cgc_do_rm()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ret=cgc_do_rm()]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))]
-------
Text=ret=cgc_do_update();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [ret=cgc_do_update();]
-------
Text=0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret=cgc_do_onsale();
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [ret=cgc_do_onsale();]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={ret=cgc_do_nosale();}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{ret=cgc_do_nosale();}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}]
-------
Text=ret
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [ret]
-------
Text=4
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [4]
-------
Text='\xBE'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\x0E']
-------
Text='\xBE'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\x0E']
-------
Text=4
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [4]
-------
Text='\xC4'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xC4']
-------
Text='\xEC'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xEC']
-------
Text='\x4E'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\x4E']
-------
Text='\xEE'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xEE']
-------
Text=4
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [4]
-------
Text='\xAD'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xDD']
-------
Text='\xAD'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xDD']
-------
Text=4
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [4]
-------
Text='\xDE'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xAD']
-------
Text='\xDE'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xAD']
-------
Text=4
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [4]
-------
Text='\x04'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\x04']
-------
Text='\xD4'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xD4']
-------
Text='\x7E'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\x7E']
-------
Text='\x00'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\x00']
-------
Text=4
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [4]
-------
Text='\x54'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\x13']
-------
Text='\x54'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\x13']
-------
Text=4
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [4]
-------
Text='\x0F'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\x0F']
-------
Text=4
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [4]
-------
Text='\x11'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\x44']
-------
Text='\x11'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\x44']
-------
Text=4
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [4]
-------
Text='\xFF'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xFF']
-------
Text=2
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [2]
-------
Text='\xED'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xED']
-------
Text='\0'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\0']
-------
Text=4
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [4]
-------
Text='\xBB'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xBB']
-------
Text=4
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [4]
-------
Text='\xBD'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\xBD']
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=*(unsignedint*)FLAG_PAGE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [*(unsignedint*)FLAG_PAGE]
-------
Text=base
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [base]
-------
Text=+
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_update_serial
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_update_serial]
-------
Text=cgc_update_serial++
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_update_serial++]
-------
Text=next_update_serial
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [next_update_serial]
-------
Text=(Product*)product
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(Product*)product]
-------
Text=(unsignedchar*)barcode
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(unsignedchar*)barcode]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=cgc_memcmp(p->barcode,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_memcmp(p->barcode,bc,BARCODE_SZ)]
-------
Text=TRUE
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [TRUE]
-------
Text=FALSE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [FALSE]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=np
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [np]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=(Product*)np->data
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(Product*)np->data]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=4
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [4]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0.0]
-------
Text=cgc_list_init(&buy_list,cgc_free)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_list_init(&buy_list,cgc_free)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL==p]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [-1]
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=cgc_memcpy(p_copy,p,sizeof(Product))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_memcpy(p_copy,p,sizeof(Product))]
-------
Text=cgc_list_insert_at_end(&buy_list,p_copy)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_list_insert_at_end(&buy_list,p_copy)]
-------
Text=p_copy->sfn(p_copy->model_num,p_copy->cost)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [p_copy->sfn(p_copy->model_num,p_copy->cost)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [-1]
-------
Text=SEND(STDOUT,(char*)&cost,sizeof(cost))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SEND(STDOUT,(char*)&cost,sizeof(cost))]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0.0]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [-1]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=d_len
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [onsale_fn[0]]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [RECV(STDIN,(char*)p->barcode,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode((char*)p->barcode)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_get_product_by_barcode((char*)p->barcode)]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=p2
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p2]
-------
Text=-1
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=bytes_recvd-1
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [bytes_recvd-1]
-------
Text='\0'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\0']
-------
Text=cgc_list_insert_at_end(&inv,p)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_list_insert_at_end(&inv,p)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=np
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [np]
-------
Text=-1
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [-1]
-------
Text=cgc_list_remove_node(&inv,np)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_list_remove_node(&inv,np)]
-------
Text=cgc_list_destroy_node(&inv,&np)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_list_destroy_node(&inv,&np)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=cgc_memcpy
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_memcpy]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=MAX_DESC_LEN
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [MAX_DESC_LEN]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)bc,BARCODE_SZ)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [RECV(STDIN,(char*)bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode((char*)bc)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_get_product_by_barcode((char*)bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=bytes_recvd-1
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [bytes_recvd-1]
-------
Text='\0'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\0']
-------
Text=desc_copy(p->desc,desc_buf,MAX_DESC_LEN)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [desc_copy(p->desc,desc_buf,MAX_DESC_LEN)]
-------
Text=cgc_get_next_update_serial()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_get_next_update_serial()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))]
-------
Text=100
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [100]
-------
Text=sale_percent
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sale_percent]
-------
Text=-1
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [-1]
-------
Text=onsale_fn[sale_percent]
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [onsale_fn[sale_percent]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [-1]
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [onsale_fn[0]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=4
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=cgc_list_length(&inv)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_list_length(&inv)]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0.0]
-------
Text=cgc_list_head_node(&inv)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_list_head_node(&inv)]
-------
Text=cgc_list_end_marker(&inv)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_list_end_marker(&inv)]
-------
Text=RECV(STDIN,options,sizeof(options))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [RECV(STDIN,options,sizeof(options))]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [count]
-------
Text=-1
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [-1]
-------
Text=(NULL!=cur)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [(NULL!=cur)]
-------
Text=(cur!=end)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [(cur!=end)]
-------
Text=(Product*)cur->data
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(Product*)cur->data]
-------
Text=SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)]
-------
Text=0==options[0]%2
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0==options[0]%2]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=0!=options[1]%2
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0!=options[1]%2]
-------
Text=SEND(STDOUT,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SEND(STDOUT,(char*)&p->cost,sizeof(float))]
-------
Text=0==options[2]%2
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0==options[2]%2]
-------
Text=sale_price=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sale_price]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=0!=options[3]%2
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0!=options[3]%2]
-------
Text=d_len=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [d_len]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0<d_len
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0<d_len]
-------
Text=SEND(STDOUT,p->desc,d_len);
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=cgc_list_next_node(cur)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_list_next_node(cur)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SUCCESS]
-------
Text=cgc_list_init(&inv,cgc_free)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_list_init(&inv,cgc_free)]
-------
Text=cgc_load_inventory(&inv)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_load_inventory(&inv)]
-------
Text=4
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=RECV(STDIN,cmd,sizeof(cmd))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [RECV(STDIN,cmd,sizeof(cmd))]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))]
-------
Text=cgc_do_buy()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_do_buy()]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))]
-------
Text=ret
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_check()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_do_check()]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))]
-------
Text=ret
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ret]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_add()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_do_add()]
-------
Text=0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))]
-------
Text=ret=cgc_do_rm()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ret]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_do_rm()]
-------
Text=0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))]
-------
Text=ret=cgc_do_update();
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [ret=cgc_do_update()]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))]
-------
Text=ret=cgc_do_onsale();
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [ret=cgc_do_onsale();]
-------
Text=0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))]
-------
Text={ret=cgc_do_nosale();}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [ret=cgc_do_nosale();]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=if(0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))){ret=cgc_do_list();}elseif(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{ret=cgc_do_list();}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [if(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}]
-------
Text=ret
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ret]
-------
Text=4
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [4]
-------
Text='\xBE'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\x0E']
-------
Text='\xBE'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\x0E']
-------
Text=4
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [4]
-------
Text='\xC4'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xC4']
-------
Text='\xEC'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xEC']
-------
Text='\x4E'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\x4E']
-------
Text='\xEE'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xEE']
-------
Text=4
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [4]
-------
Text='\xAD'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xDD']
-------
Text='\xAD'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xDD']
-------
Text=4
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [4]
-------
Text='\xDE'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xAD']
-------
Text='\xDE'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xAD']
-------
Text=4
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [4]
-------
Text='\x04'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\x04']
-------
Text='\xD4'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xD4']
-------
Text='\x7E'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\x7E']
-------
Text='\x00'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\x00']
-------
Text=4
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [4]
-------
Text='\x54'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\x13']
-------
Text='\x54'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\x13']
-------
Text=4
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [4]
-------
Text='\x0F'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\x0F']
-------
Text=4
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [4]
-------
Text='\x11'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\x44']
-------
Text='\x11'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\x44']
-------
Text=4
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [4]
-------
Text='\xFF'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xFF']
-------
Text=2
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [2]
-------
Text='\xED'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xED']
-------
Text='\0'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\0']
-------
Text=4
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [4]
-------
Text='\xBB'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xBB']
-------
Text=4
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [4]
-------
Text='\xBD'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\xBD']
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*(unsignedint*)FLAG_PAGE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [*(unsignedint*)FLAG_PAGE]
-------
Text=base
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [base]
-------
Text=cgc_update_serial
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_update_serial]
-------
Text=cgc_update_serial++
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_update_serial++]
-------
Text=next_update_serial
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [next_update_serial]
-------
Text=(Product*)product
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [Product*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [product]
-------
Text=(unsignedchar*)barcode
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [unsignedchar*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [barcode]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=cgc_memcmp(p->barcode,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_memcmp(p->barcode,bc,BARCODE_SZ)]
-------
Text=TRUE
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [TRUE]
-------
Text=FALSE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [FALSE]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=np
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [np]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=(Product*)np->data
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(Product*)np->data]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=4
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [4]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0.0]
-------
Text=cgc_list_init(&buy_list,cgc_free)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_list_init(&buy_list,cgc_free)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL==p
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [p]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [-1]
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=cgc_memcpy(p_copy,p,sizeof(Product))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_memcpy(p_copy,p,sizeof(Product))]
-------
Text=cgc_list_insert_at_end(&buy_list,p_copy)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_list_insert_at_end(&buy_list,p_copy)]
-------
Text=p_copy->sfn(p_copy->model_num,p_copy->cost)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [p_copy->sfn(p_copy->model_num,p_copy->cost)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [-1]
-------
Text=SEND(STDOUT,(char*)&cost,sizeof(cost))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SEND(STDOUT,(char*)&cost,sizeof(cost))]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0.0]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [-1]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=d_len
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [onsale_fn[0]]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [RECV(STDIN,(char*)p->barcode,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode((char*)p->barcode)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_get_product_by_barcode((char*)p->barcode)]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=p2
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p2]
-------
Text=-1
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=bytes_recvd-1
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [bytes_recvd-1]
-------
Text='\0'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\0']
-------
Text=cgc_list_insert_at_end(&inv,p)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_list_insert_at_end(&inv,p)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=np
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [np]
-------
Text=-1
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [-1]
-------
Text=cgc_list_remove_node(&inv,np)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_list_remove_node(&inv,np)]
-------
Text=cgc_list_destroy_node(&inv,&np)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_list_destroy_node(&inv,&np)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=cgc_memcpy
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_memcpy]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=MAX_DESC_LEN
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [MAX_DESC_LEN]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)bc,BARCODE_SZ)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [RECV(STDIN,(char*)bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode((char*)bc)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_get_product_by_barcode((char*)bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [RECV(STDIN,(char*)&p->cost,sizeof(float))]
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=bytes_recvd-1
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [bytes_recvd-1]
-------
Text='\0'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\0']
-------
Text=desc_copy(p->desc,desc_buf,MAX_DESC_LEN)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [desc_copy(p->desc,desc_buf,MAX_DESC_LEN)]
-------
Text=cgc_get_next_update_serial()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_get_next_update_serial()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))]
-------
Text=100
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [100]
-------
Text=sale_percent
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [sale_percent]
-------
Text=-1
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [-1]
-------
Text=onsale_fn[sale_percent]
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [onsale_fn[sale_percent]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [-1]
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [onsale_fn[0]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=4
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=cgc_list_length(&inv)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_list_length(&inv)]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0.0]
-------
Text=cgc_list_head_node(&inv)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_list_head_node(&inv)]
-------
Text=cgc_list_end_marker(&inv)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_list_end_marker(&inv)]
-------
Text=RECV(STDIN,options,sizeof(options))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [RECV(STDIN,options,sizeof(options))]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [count]
-------
Text=-1
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [-1]
-------
Text=(NULL!=cur)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [(NULL!=cur)]
-------
Text=(cur!=end)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [(cur!=end)]
-------
Text=(Product*)cur->data
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(Product*)cur->data]
-------
Text=SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)]
-------
Text=0==options[0]%2
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [options[0]%2]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=0!=options[1]%2
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [!=]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [options[1]%2]
-------
Text=SEND(STDOUT,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SEND(STDOUT,(char*)&p->cost,sizeof(float))]
-------
Text=0==options[2]%2
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [options[2]%2]
-------
Text=sale_price
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [sale_price]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=0!=options[3]%2
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [!=]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [options[3]%2]
-------
Text=d_len
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [d_len]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0<d_len
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0<d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=cgc_list_next_node(cur)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_list_next_node(cur)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SUCCESS]
-------
Text=cgc_list_init(&inv,cgc_free)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_list_init(&inv,cgc_free)]
-------
Text=cgc_load_inventory(&inv)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_load_inventory(&inv)]
-------
Text=4
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=RECV(STDIN,cmd,sizeof(cmd))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [RECV(STDIN,cmd,sizeof(cmd))]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))]
-------
Text=cgc_do_buy()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_do_buy()]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))]
-------
Text=cgc_do_check()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_do_check()]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))]
-------
Text=ret
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ret]
-------
Text=cgc_do_add()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_do_add()]
-------
Text=0==cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))]
-------
Text=ret
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ret]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_do_rm()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_do_rm()]
-------
Text=0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))]
-------
Text=ret=cgc_do_update()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ret=cgc_do_update()]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))]
-------
Text=ret=cgc_do_onsale();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [ret=cgc_do_onsale();]
-------
Text=0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret=cgc_do_nosale();
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [ret=cgc_do_nosale();]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={ret=cgc_do_list();}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{ret=cgc_do_list();}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.SelectionStatementContext'> [if(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}]
-------
Text=ret
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ret]
-------
Text=4
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xBE'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\x0E']
-------
Text='\xBE'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xBE']
-------
Text='\x0E'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\x0E']
-------
Text=4
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xC4'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xC4']
-------
Text='\xEC'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xEC']
-------
Text='\x4E'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\x4E']
-------
Text='\xEE'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xEE']
-------
Text=4
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xAD'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xDD']
-------
Text='\xAD'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xAD']
-------
Text='\xDD'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xDD']
-------
Text=4
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xDE'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xAD']
-------
Text='\xDE'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xDE']
-------
Text='\xAD'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xAD']
-------
Text=4
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x04'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\x04']
-------
Text='\xD4'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xD4']
-------
Text='\x7E'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\x7E']
-------
Text='\x00'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\x00']
-------
Text=4
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x54'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\x13']
-------
Text='\x54'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\x54']
-------
Text='\x13'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\x13']
-------
Text=4
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x0F'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\x0F']
-------
Text='\x0F'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\x0F']
-------
Text=4
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x11'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\x44']
-------
Text='\x11'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\x11']
-------
Text='\x44'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\x44']
-------
Text=4
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xFF'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xFF']
-------
Text='\xFF'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xFF']
-------
Text=2
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xED'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xED']
-------
Text='\0'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\0']
-------
Text=4
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xBB'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xBB']
-------
Text='\xBB'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xBB']
-------
Text=4
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xBD'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xBD']
-------
Text='\xBD'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\xBD']
-------
Text=*(unsignedint*)FLAG_PAGE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [*]
1 : <class 'CParser.CParser.CastExpressionContext'> [(unsignedint*)FLAG_PAGE]
-------
Text=base
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [base]
-------
Text=cgc_update_serial
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_update_serial]
-------
Text=cgc_update_serial++
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_update_serial]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [++]
-------
Text=next_update_serial
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [next_update_serial]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [Product*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=product
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [product]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsignedchar*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [unsignedchar*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=barcode
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [barcode]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=cgc_memcmp(p->barcode,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_memcmp]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [p->barcode,bc,BARCODE_SZ]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=TRUE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [TRUE]
-------
Text=FALSE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [FALSE]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=np
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [np]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=(Product*)np->data
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [Product*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [np->data]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=4
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [4]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0.0]
-------
Text=cgc_list_init(&buy_list,cgc_free)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_list_init]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [&buy_list,cgc_free]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [RECV]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDIN,buy_status,sizeof(buy_status)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=cgc_memcmp(buy_status,(void*)BUY_MORE,sizeof(BUY_MORE))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_memcmp]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [buy_status,(void*)BUY_MORE,sizeof(BUY_MORE)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [p]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [-1]
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=cgc_memcpy(p_copy,p,sizeof(Product))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_memcpy(p_copy,p,sizeof(Product))]
-------
Text=cgc_list_insert_at_end(&buy_list,p_copy)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_list_insert_at_end(&buy_list,p_copy)]
-------
Text=p_copy->sfn(p_copy->model_num,p_copy->cost)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [p_copy->sfn(p_copy->model_num,p_copy->cost)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=cgc_memcmp(buy_status,(void*)BUY_TERM,sizeof(BUY_TERM))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_memcmp]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [buy_status,(void*)BUY_TERM,sizeof(BUY_TERM)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [-1]
-------
Text=SEND(STDOUT,(char*)&cost,sizeof(cost))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SEND]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDOUT,(char*)&cost,sizeof(cost)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_list_destroy]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [&buy_list]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0.0]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [RECV]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDIN,bc,BARCODE_SZ]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [-1]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SEND]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDOUT,(char*)&p->model_num,sizeof(unsignedint)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SEND]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDOUT,(char*)&sale_price,sizeof(float)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=d_len
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SEND]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDOUT,DESC_TERM,1]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [onsale_fn[0]]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [RECV]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDIN,(char*)p->barcode,BARCODE_SZ]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_get_product_by_barcode((char*)p->barcode)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_get_product_by_barcode((char*)p->barcode)]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=p2
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p2]
-------
Text=-1
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [RECV]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDIN,(char*)&p->model_num,sizeof(unsignedint)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [RECV]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDIN,(char*)&p->cost,sizeof(float)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=bytes_recvd-1
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [bytes_recvd]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [-]
2 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [1]
-------
Text='\0'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\0']
-------
Text=cgc_list_insert_at_end(&inv,p)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_list_insert_at_end]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [&inv,p]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [RECV]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDIN,bc,BARCODE_SZ]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=np
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [np]
-------
Text=-1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [-1]
-------
Text=cgc_list_remove_node(&inv,np)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_list_remove_node]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [&inv,np]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_list_destroy_node(&inv,&np)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_list_destroy_node]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [&inv,&np]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=cgc_memcpy
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_memcpy]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=MAX_DESC_LEN
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [MAX_DESC_LEN]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=RECV(STDIN,(char*)bc,BARCODE_SZ)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [RECV]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDIN,(char*)bc,BARCODE_SZ]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_get_product_by_barcode((char*)bc)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_get_product_by_barcode((char*)bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [RECV]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDIN,(char*)&p->model_num,sizeof(unsignedint)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=RECV(STDIN,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [RECV]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDIN,(char*)&p->cost,sizeof(float)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=bytes_recvd-1
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [bytes_recvd]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [-]
2 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [1]
-------
Text='\0'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\0']
-------
Text=desc_copy(p->desc,desc_buf,MAX_DESC_LEN)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [desc_copy]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [p->desc,desc_buf,MAX_DESC_LEN]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_get_next_update_serial()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_get_next_update_serial()]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [RECV]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDIN,bc,BARCODE_SZ]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [-1]
-------
Text=RECV(STDIN,(char*)&sale_percent,sizeof(unsignedint))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [RECV]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDIN,(char*)&sale_percent,sizeof(unsignedint)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=100
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [100]
-------
Text=sale_percent
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [sale_percent]
-------
Text=-1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [-1]
-------
Text=onsale_fn[sale_percent]
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [onsale_fn[sale_percent]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [RECV]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDIN,bc,BARCODE_SZ]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [-1]
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [onsale_fn[0]]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=4
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=cgc_list_length(&inv)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_list_length(&inv)]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0.0]
-------
Text=cgc_list_head_node(&inv)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_list_head_node(&inv)]
-------
Text=cgc_list_end_marker(&inv)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_list_end_marker(&inv)]
-------
Text=RECV(STDIN,options,sizeof(options))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [RECV]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDIN,options,sizeof(options)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=count
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [count]
-------
Text=-1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [-1]
-------
Text=(NULL!=cur)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(NULL!=cur)]
-------
Text=(cur!=end)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(cur!=end)]
-------
Text=(Product*)cur->data
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(Product*)cur->data]
-------
Text=SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=options[0]%2
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [options[0]%2]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=!=
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=options[1]%2
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [options[1]%2]
-------
Text=SEND(STDOUT,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SEND(STDOUT,(char*)&p->cost,sizeof(float))]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=options[2]%2
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [options[2]%2]
-------
Text=sale_price
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [sale_price]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=!=
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=options[3]%2
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [options[3]%2]
-------
Text=d_len
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [d_len]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0<d_len
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0<d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=cgc_list_next_node(cur)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_list_next_node(cur)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SUCCESS]
-------
Text=cgc_list_init(&inv,cgc_free)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_list_init]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [&inv,cgc_free]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_load_inventory(&inv)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_load_inventory]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [&inv]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=4
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=RECV(STDIN,cmd,sizeof(cmd))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [RECV]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDIN,cmd,sizeof(cmd)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_BUY,cmd,sizeof(CMD_BUY))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_memcmp]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [(void*)CMD_BUY,cmd,sizeof(CMD_BUY)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_do_buy()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_do_buy()]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))]
-------
Text=cgc_do_check()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_do_check()]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))]
-------
Text=ret
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_add()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_do_add()]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))]
-------
Text=ret
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ret]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_rm()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_do_rm()]
-------
Text=0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))]
-------
Text=ret=cgc_do_update()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ret]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_do_update()]
-------
Text=0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))]
-------
Text=ret=cgc_do_onsale();
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [ret=cgc_do_onsale()]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))]
-------
Text=ret=cgc_do_nosale();
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [ret=cgc_do_nosale();]
-------
Text=0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))]
-------
Text={ret=cgc_do_list();}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [ret=cgc_do_list();]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=if(0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))){ret=-2;}else{ret=-1;}
Type=<class 'CParser.CParser.SelectionStatementContext'>
Child Count = 7
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [if]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ExpressionContext'> [0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
4 : <class 'CParser.CParser.StatementContext'> [{ret=-2;}]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [else]
6 : <class 'CParser.CParser.StatementContext'> [{ret=-1;}]
-------
Text=ret
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ret]
-------
Text='\xBE'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x0E'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xBE'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x0E'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xC4'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xEC'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x4E'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xEE'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xAD'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xDD'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xAD'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xDD'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xDE'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xAD'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xDE'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xAD'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x04'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xD4'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x7E'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x00'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x54'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x13'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x54'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x13'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x0F'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x0F'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x0F'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x0F'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x11'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x44'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x11'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\x44'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xFF'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xFF'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xFF'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xFF'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xED'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\0'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xBB'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xBB'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xBB'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xBB'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xBD'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xBD'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xBD'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\xBD'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=(unsignedint*)FLAG_PAGE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [unsignedint*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [FLAG_PAGE]
-------
Text=base
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [base]
-------
Text=cgc_update_serial
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_update_serial]
-------
Text=cgc_update_serial
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_update_serial]
-------
Text=++
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=next_update_serial
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [next_update_serial]
-------
Text=Product*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product*]
-------
Text=product
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [product]
-------
Text=unsignedchar*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [unsignedchar*]
-------
Text=barcode
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [barcode]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=cgc_memcmp
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_memcmp]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->barcode,bc,BARCODE_SZ
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [p->barcode]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [bc]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [BARCODE_SZ]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=TRUE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [TRUE]
-------
Text=FALSE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [FALSE]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_list_find_node_with_data]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [&inv,cgc_prod_has_bc,(void*)bc]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=np
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [np]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [Product*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=np->data
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [np->data]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=4
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [4]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0.0]
-------
Text=cgc_list_init
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_list_init]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&buy_list,cgc_free
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [&buy_list]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [cgc_free]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [RECV]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN,buy_status,sizeof(buy_status)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDIN]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [buy_status]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(buy_status)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=cgc_memcmp
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_memcmp]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_status,(void*)BUY_MORE,sizeof(BUY_MORE)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [buy_status]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [(void*)BUY_MORE]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(BUY_MORE)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [p]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [-1]
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=cgc_memcpy(p_copy,p,sizeof(Product))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_memcpy(p_copy,p,sizeof(Product))]
-------
Text=cgc_list_insert_at_end(&buy_list,p_copy)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_list_insert_at_end(&buy_list,p_copy)]
-------
Text=p_copy->sfn(p_copy->model_num,p_copy->cost)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [p_copy->sfn(p_copy->model_num,p_copy->cost)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=cgc_memcmp
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_memcmp]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_status,(void*)BUY_TERM,sizeof(BUY_TERM)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [buy_status]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [(void*)BUY_TERM]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(BUY_TERM)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [-1]
-------
Text=SEND
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SEND]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT,(char*)&cost,sizeof(cost)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDOUT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [(char*)&cost]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(cost)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_destroy
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_list_destroy]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&buy_list
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [&buy_list]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0.0]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=RECV
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [RECV]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN,bc,BARCODE_SZ
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDIN]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [bc]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [BARCODE_SZ]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_get_product_by_barcode]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [bc]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [-]
1 : <class 'CParser.CParser.CastExpressionContext'> [1]
-------
Text=SEND
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SEND]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT,(char*)&p->model_num,sizeof(unsignedint)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDOUT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [(char*)&p->model_num]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(unsignedint)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 6
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sfn]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
4 : <class 'CParser.CParser.ArgumentExpressionListContext'> [p->model_num,p->cost]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=SEND
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SEND]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT,(char*)&sale_price,sizeof(float)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDOUT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [(char*)&sale_price]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(float)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_strlen]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [p->desc,'\0']
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=d_len
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SEND]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT,DESC_TERM,1
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDOUT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [DESC_TERM]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [1]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_malloc]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [sizeof(Product)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [onsale_fn]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.ExpressionContext'> [0]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=RECV
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [RECV]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN,(char*)p->barcode,BARCODE_SZ
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDIN]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [(char*)p->barcode]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [BARCODE_SZ]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_product_by_barcode((char*)p->barcode)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_get_product_by_barcode]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [(char*)p->barcode]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=p2
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p2]
-------
Text=-1
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [-1]
-------
Text=RECV
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [RECV]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN,(char*)&p->model_num,sizeof(unsignedint)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDIN]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [(char*)&p->model_num]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(unsignedint)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [RECV]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN,(char*)&p->cost,sizeof(float)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDIN]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [(char*)&p->cost]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(float)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_recv_until_delim_n]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [bytes_recvd]
-------
Text=-
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [1]
-------
Text='\0'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\0']
-------
Text=cgc_list_insert_at_end
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_list_insert_at_end]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv,p
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [&inv]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [p]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=RECV
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [RECV]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN,bc,BARCODE_SZ
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDIN]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [bc]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [BARCODE_SZ]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_find_node_with_data(&inv,cgc_prod_has_bc,(void*)bc)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_list_find_node_with_data]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [&inv,cgc_prod_has_bc,(void*)bc]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=np
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [np]
-------
Text=-1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [-]
1 : <class 'CParser.CParser.CastExpressionContext'> [1]
-------
Text=cgc_list_remove_node
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_list_remove_node]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv,np
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [&inv]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [np]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_destroy_node
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_list_destroy_node]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv,&np
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [&inv]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [&np]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SUCCESS]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=cgc_memcpy
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_memcpy]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=MAX_DESC_LEN
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [MAX_DESC_LEN]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=RECV
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [RECV]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN,(char*)bc,BARCODE_SZ
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDIN]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [(char*)bc]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [BARCODE_SZ]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_product_by_barcode((char*)bc)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_get_product_by_barcode]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [(char*)bc]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [-1]
-------
Text=RECV
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [RECV]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN,(char*)&p->model_num,sizeof(unsignedint)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDIN]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [(char*)&p->model_num]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(unsignedint)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [RECV]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN,(char*)&p->cost,sizeof(float)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDIN]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [(char*)&p->cost]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(float)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_recv_until_delim_n(STDIN,DESC_TERM[0],desc_buf,sizeof(Product))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_recv_until_delim_n]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDIN,DESC_TERM[0],desc_buf,sizeof(Product)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bytes_recvd]
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc__terminate(ERRNO_RECV)]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [bytes_recvd]
-------
Text=-
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [1]
-------
Text='\0'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\0']
-------
Text=desc_copy
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [desc_copy]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->desc,desc_buf,MAX_DESC_LEN
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [p->desc]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [desc_buf]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [MAX_DESC_LEN]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_next_update_serial()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_get_next_update_serial]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=RECV
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [RECV]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN,bc,BARCODE_SZ
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDIN]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [bc]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [BARCODE_SZ]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_get_product_by_barcode]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [bc]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [-]
1 : <class 'CParser.CParser.CastExpressionContext'> [1]
-------
Text=RECV
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [RECV]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN,(char*)&sale_percent,sizeof(unsignedint)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDIN]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [(char*)&sale_percent]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(unsignedint)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=100
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [100]
-------
Text=sale_percent
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sale_percent]
-------
Text=-1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [-]
1 : <class 'CParser.CParser.CastExpressionContext'> [1]
-------
Text=onsale_fn[sale_percent]
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [onsale_fn]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.ExpressionContext'> [sale_percent]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=RECV
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [RECV]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN,bc,BARCODE_SZ
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDIN]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [bc]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [BARCODE_SZ]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_get_product_by_barcode]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [bc]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=-1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [-]
1 : <class 'CParser.CParser.CastExpressionContext'> [1]
-------
Text=onsale_fn[0]
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [onsale_fn]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.ExpressionContext'> [0]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SUCCESS]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=4
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=cgc_list_length(&inv)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_list_length]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [&inv]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0.0]
-------
Text=cgc_list_head_node(&inv)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_list_head_node]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [&inv]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_list_end_marker(&inv)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_list_end_marker]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [&inv]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=RECV
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [RECV]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN,options,sizeof(options)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDIN]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [options]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(options)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=count
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [count]
-------
Text=-1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [-]
1 : <class 'CParser.CParser.CastExpressionContext'> [1]
-------
Text=(NULL!=cur)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [NULL!=cur]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(cur!=end)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [cur!=end]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(Product*)cur->data
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(Product*)cur->data]
-------
Text=SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=options[0]%2
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [options[0]%2]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=options[1]%2
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [options[1]%2]
-------
Text=SEND(STDOUT,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SEND(STDOUT,(char*)&p->cost,sizeof(float))]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=options[2]%2
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [options[2]%2]
-------
Text=sale_price
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sale_price]
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=options[3]%2
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [options[3]%2]
-------
Text=d_len
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [d_len]
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0<d_len
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0<d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=cgc_list_next_node(cur)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_list_next_node(cur)]
-------
Text=SUCCESS
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SUCCESS]
-------
Text=cgc_list_init
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_list_init]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv,cgc_free
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [&inv]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [cgc_free]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_load_inventory
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_load_inventory]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [&inv]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=RECV
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [RECV]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN,cmd,sizeof(cmd)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDIN]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [cmd]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(cmd)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=cgc_memcmp
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_memcmp]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_BUY,cmd,sizeof(CMD_BUY)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [(void*)CMD_BUY]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [cmd]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(CMD_BUY)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_buy()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_do_buy()]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))]
-------
Text=cgc_do_check()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_do_check()]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))]
-------
Text=cgc_do_add()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_do_add()]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))]
-------
Text=ret
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ret]
-------
Text=cgc_do_rm()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_do_rm()]
-------
Text=0==cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))]
-------
Text=ret
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ret]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_do_update()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_do_update()]
-------
Text=0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))]
-------
Text=ret=cgc_do_onsale()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ret=cgc_do_onsale()]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))]
-------
Text=ret=cgc_do_nosale();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [ret=cgc_do_nosale();]
-------
Text=0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret=cgc_do_list();
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [ret=cgc_do_list();]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=if
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={ret=-2;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{ret=-2;}]
-------
Text=else
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={ret=-1;}
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.CompoundStatementContext'> [{ret=-1;}]
-------
Text=ret
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ret]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsignedint*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [unsignedint*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=FLAG_PAGE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [FLAG_PAGE]
-------
Text=base
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [base]
-------
Text=cgc_update_serial
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_update_serial]
-------
Text=cgc_update_serial
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=next_update_serial
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=product
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [product]
-------
Text=unsignedchar*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [unsignedchar]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=barcode
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [barcode]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcmp
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->barcode
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p->barcode]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [bc]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [BARCODE_SZ]
-------
Text=TRUE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [TRUE]
-------
Text=FALSE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=cgc_list_find_node_with_data
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_list_find_node_with_data]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv,cgc_prod_has_bc,(void*)bc
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [&inv]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [cgc_prod_has_bc]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [(void*)bc]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=np
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=Product*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product*]
-------
Text=np->data
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [np->data]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=4
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [4]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0.0]
-------
Text=cgc_list_init
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&buy_list
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [&buy_list]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_free
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [cgc_free]
-------
Text=RECV
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDIN]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_status
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [buy_status]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(buy_status)]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcmp
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_status
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [buy_status]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)BUY_MORE
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(void*)BUY_MORE]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(BUY_MORE)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(BUY_MORE)]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [p]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [-1]
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=cgc_memcpy(p_copy,p,sizeof(Product))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_memcpy(p_copy,p,sizeof(Product))]
-------
Text=cgc_list_insert_at_end(&buy_list,p_copy)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_list_insert_at_end(&buy_list,p_copy)]
-------
Text=p_copy->sfn(p_copy->model_num,p_copy->cost)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [p_copy->sfn(p_copy->model_num,p_copy->cost)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcmp
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_status
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [buy_status]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)BUY_TERM
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(void*)BUY_TERM]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(BUY_TERM)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(BUY_TERM)]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [-1]
-------
Text=SEND
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDOUT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&cost
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(char*)&cost]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(cost)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(cost)]
-------
Text=cgc_list_destroy
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&buy_list
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [&buy_list]
-------
Text=SUCCESS
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0.0]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=RECV
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDIN]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [bc]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [BARCODE_SZ]
-------
Text=cgc_get_product_by_barcode
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_get_product_by_barcode]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [bc]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [-]
-------
Text=1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1]
-------
Text=SEND
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDOUT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(char*)&p->model_num]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(unsignedint)]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sfn
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->model_num,p->cost
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [p->model_num]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [p->cost]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SEND
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDOUT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(char*)&sale_price]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(float)]
-------
Text=cgc_strlen
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_strlen]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->desc,'\0'
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [p->desc]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> ['\0']
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=d_len
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SEND]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDOUT,p->desc,d_len]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=SEND
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDOUT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=DESC_TERM
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [DESC_TERM]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [1]
-------
Text=SUCCESS
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=cgc_malloc
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_malloc]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(Product)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=onsale_fn
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [onsale_fn]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=RECV
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDIN]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(char*)p->barcode]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [BARCODE_SZ]
-------
Text=cgc_get_product_by_barcode
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_get_product_by_barcode]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [(char*)p->barcode]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p2
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-1
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [-1]
-------
Text=RECV
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDIN]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(char*)&p->model_num]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(unsignedint)]
-------
Text=RECV
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDIN]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(char*)&p->cost]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(float)]
-------
Text=cgc_recv_until_delim_n
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_recv_until_delim_n]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN,DESC_TERM[0],(char*)p->desc,sizeof(Product)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 7
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDIN]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [DESC_TERM[0]]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [(char*)p->desc]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
6 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(Product)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_recvd
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc__terminate]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [ERRNO_RECV]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [bytes_recvd]
-------
Text=1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1]
-------
Text='\0'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\0']
-------
Text=cgc_list_insert_at_end
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [&inv]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [p]
-------
Text=SUCCESS
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=RECV
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDIN]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [bc]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [BARCODE_SZ]
-------
Text=cgc_list_find_node_with_data
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_list_find_node_with_data]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv,cgc_prod_has_bc,(void*)bc
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [&inv]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [cgc_prod_has_bc]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [(void*)bc]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=np
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [-]
-------
Text=1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1]
-------
Text=cgc_list_remove_node
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [&inv]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=np
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [np]
-------
Text=cgc_list_destroy_node
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [&inv]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&np
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [&np]
-------
Text=SUCCESS
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=cgc_memcpy
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_memcpy]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=MAX_DESC_LEN
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [MAX_DESC_LEN]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=RECV
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDIN]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)bc
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(char*)bc]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [BARCODE_SZ]
-------
Text=cgc_get_product_by_barcode
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_get_product_by_barcode]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)bc
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [(char*)bc]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-1
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [-1]
-------
Text=RECV
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDIN]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(char*)&p->model_num]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(unsignedint)]
-------
Text=RECV
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDIN]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(char*)&p->cost]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(float)]
-------
Text=cgc_recv_until_delim_n
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_recv_until_delim_n]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN,DESC_TERM[0],desc_buf,sizeof(Product)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 7
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDIN]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [DESC_TERM[0]]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [desc_buf]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
6 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(Product)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_recvd
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc__terminate(ERRNO_RECV)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc__terminate]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [ERRNO_RECV]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [bytes_recvd]
-------
Text=1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1]
-------
Text='\0'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\0']
-------
Text=desc_copy
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->desc
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p->desc]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=desc_buf
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [desc_buf]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=MAX_DESC_LEN
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [MAX_DESC_LEN]
-------
Text=cgc_get_next_update_serial
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_get_next_update_serial]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=RECV
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDIN]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [bc]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [BARCODE_SZ]
-------
Text=cgc_get_product_by_barcode
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_get_product_by_barcode]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [bc]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [-]
-------
Text=1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1]
-------
Text=RECV
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDIN]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&sale_percent
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(char*)&sale_percent]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(unsignedint)]
-------
Text=100
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sale_percent
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [-]
-------
Text=1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1]
-------
Text=onsale_fn
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [onsale_fn]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sale_percent
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sale_percent]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=RECV
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDIN]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [bc]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [BARCODE_SZ]
-------
Text=cgc_get_product_by_barcode
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_get_product_by_barcode]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [bc]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [-]
-------
Text=1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1]
-------
Text=onsale_fn
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [onsale_fn]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SUCCESS
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=4
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=cgc_list_length
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_list_length]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [&inv]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=0.0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0.0]
-------
Text=cgc_list_head_node
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_list_head_node]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [&inv]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_end_marker
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_list_end_marker]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [&inv]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDIN]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=options
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [options]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(options)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(options)]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=count
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [-]
-------
Text=1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL!=cur
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [NULL!=cur]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cur!=end
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cur!=end]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(Product*)cur->data
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(Product*)cur->data]
-------
Text=SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=options[0]%2
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [options[0]%2]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=options[1]%2
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [options[1]%2]
-------
Text=SEND(STDOUT,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SEND(STDOUT,(char*)&p->cost,sizeof(float))]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=options[2]%2
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [options[2]%2]
-------
Text=sale_price
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=options[3]%2
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [options[3]%2]
-------
Text=d_len
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0<d_len
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0<d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=cgc_list_next_node(cur)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_list_next_node(cur)]
-------
Text=SUCCESS
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_init
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [&inv]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_free
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [cgc_free]
-------
Text=cgc_load_inventory
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [&inv]
-------
Text=4
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [4]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=RECV
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDIN]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cmd
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [cmd]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(cmd)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(cmd)]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcmp
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_BUY
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(void*)CMD_BUY]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cmd
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [cmd]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(CMD_BUY)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(CMD_BUY)]
-------
Text=cgc_do_buy()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_do_buy()]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_CHECK,cmd,sizeof(CMD_CHECK))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_memcmp]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [(void*)CMD_CHECK,cmd,sizeof(CMD_CHECK)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_do_check()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_do_check()]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))]
-------
Text=cgc_do_add()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_do_add()]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))]
-------
Text=ret
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_rm()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_do_rm()]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))]
-------
Text=ret
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ret]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_update()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_do_update()]
-------
Text=0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))]
-------
Text=ret=cgc_do_onsale()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ret]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_do_onsale()]
-------
Text=0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))]
-------
Text=ret=cgc_do_nosale();
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [ret=cgc_do_nosale()]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))]
-------
Text=ret=cgc_do_list();
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [ret=cgc_do_list();]
-------
Text=0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))]
-------
Text={ret=-2;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [ret=-2;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text={ret=-1;}
Type=<class 'CParser.CParser.CompoundStatementContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [{]
1 : <class 'CParser.CParser.BlockItemListContext'> [ret=-1;]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [}]
-------
Text=ret
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsignedint*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [unsignedint*]
-------
Text=FLAG_PAGE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [FLAG_PAGE]
-------
Text=base
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_update_serial
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [Product]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=product
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [product]
-------
Text=unsignedchar
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [unsigned]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=barcode
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [barcode]
-------
Text=p->barcode
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [p->barcode]
-------
Text=bc
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [bc]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [BARCODE_SZ]
-------
Text=TRUE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [TRUE]
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_find_node_with_data
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [&inv]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_prod_has_bc
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [cgc_prod_has_bc]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)bc
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(void*)bc]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=Product*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=np->data
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [np]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [data]
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [4]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=0.0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&buy_list
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [&buy_list]
-------
Text=cgc_free
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [cgc_free]
-------
Text=STDIN
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDIN]
-------
Text=buy_status
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [buy_status]
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(buy_status)]
-------
Text=buy_status
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [buy_status]
-------
Text=(void*)BUY_MORE
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(void*)BUY_MORE]
-------
Text=sizeof(BUY_MORE)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(BUY_MORE)]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [p]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [-1]
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=cgc_memcpy(p_copy,p,sizeof(Product))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_memcpy(p_copy,p,sizeof(Product))]
-------
Text=cgc_list_insert_at_end(&buy_list,p_copy)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_list_insert_at_end(&buy_list,p_copy)]
-------
Text=p_copy->sfn(p_copy->model_num,p_copy->cost)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [p_copy->sfn(p_copy->model_num,p_copy->cost)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=buy_status
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [buy_status]
-------
Text=(void*)BUY_TERM
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(void*)BUY_TERM]
-------
Text=sizeof(BUY_TERM)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(BUY_TERM)]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [-1]
-------
Text=STDOUT
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDOUT]
-------
Text=(char*)&cost
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(char*)&cost]
-------
Text=sizeof(cost)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(cost)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [&buy_list]
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=0.0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDIN]
-------
Text=bc
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [bc]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [BARCODE_SZ]
-------
Text=cgc_get_product_by_barcode
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [bc]
-------
Text=-
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1]
-------
Text=STDOUT
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDOUT]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(unsignedint)]
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->model_num
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p->model_num]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->cost
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p->cost]
-------
Text=STDOUT
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDOUT]
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(char*)&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(float)]
-------
Text=cgc_strlen
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->desc
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p->desc]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\0'
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\0']
-------
Text=SEND
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SEND]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT,p->desc,d_len
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDOUT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [p->desc]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [d_len]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDOUT]
-------
Text=DESC_TERM
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [DESC_TERM]
-------
Text=1
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [1]
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_malloc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(Product)]
-------
Text=onsale_fn
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDIN]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(char*)p->barcode]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [BARCODE_SZ]
-------
Text=cgc_get_product_by_barcode
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(char*)p->barcode]
-------
Text=-1
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [-1]
-------
Text=STDIN
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDIN]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(unsignedint)]
-------
Text=STDIN
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDIN]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(float)]
-------
Text=cgc_recv_until_delim_n
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDIN]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [DESC_TERM[0]]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)p->desc
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(char*)p->desc]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(Product)]
-------
Text=cgc__terminate
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc__terminate]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERRNO_RECV
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [ERRNO_RECV]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [bytes_recvd]
-------
Text=1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1]
-------
Text='\0'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [&inv]
-------
Text=p
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [p]
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDIN]
-------
Text=bc
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [bc]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [BARCODE_SZ]
-------
Text=cgc_list_find_node_with_data
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [&inv]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_prod_has_bc
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [cgc_prod_has_bc]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)bc
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(void*)bc]
-------
Text=-
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1]
-------
Text=&inv
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [&inv]
-------
Text=np
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [np]
-------
Text=&inv
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [&inv]
-------
Text=&np
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [&np]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcpy
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=MAX_DESC_LEN
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [MAX_DESC_LEN]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=STDIN
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDIN]
-------
Text=(char*)bc
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(char*)bc]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [BARCODE_SZ]
-------
Text=cgc_get_product_by_barcode
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)bc
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(char*)bc]
-------
Text=-1
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [-1]
-------
Text=STDIN
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDIN]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(unsignedint)]
-------
Text=STDIN
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDIN]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(float)]
-------
Text=cgc_recv_until_delim_n
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDIN]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [DESC_TERM[0]]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=desc_buf
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [desc_buf]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(Product)]
-------
Text=cgc__terminate
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc__terminate]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERRNO_RECV
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [ERRNO_RECV]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [bytes_recvd]
-------
Text=1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1]
-------
Text='\0'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->desc
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [p->desc]
-------
Text=desc_buf
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [desc_buf]
-------
Text=MAX_DESC_LEN
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [MAX_DESC_LEN]
-------
Text=cgc_get_next_update_serial
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDIN]
-------
Text=bc
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [bc]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [BARCODE_SZ]
-------
Text=cgc_get_product_by_barcode
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [bc]
-------
Text=-
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1]
-------
Text=STDIN
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDIN]
-------
Text=(char*)&sale_percent
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(char*)&sale_percent]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(unsignedint)]
-------
Text=-
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1]
-------
Text=onsale_fn
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sale_percent
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sale_percent]
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDIN]
-------
Text=bc
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [bc]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [BARCODE_SZ]
-------
Text=cgc_get_product_by_barcode
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [bc]
-------
Text=-
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1]
-------
Text=onsale_fn
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [4]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=cgc_list_length
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [&inv]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0.0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_head_node
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [&inv]
-------
Text=cgc_list_end_marker
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [&inv]
-------
Text=STDIN
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDIN]
-------
Text=options
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [options]
-------
Text=sizeof(options)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(options)]
-------
Text=-
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1]
-------
Text=NULL!=cur
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [NULL!=cur]
-------
Text=cur!=end
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cur!=end]
-------
Text=(Product*)cur->data
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(Product*)cur->data]
-------
Text=SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=options[0]%2
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.CastExpressionContext'> [options[0]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [%]
2 : <class 'CParser.CParser.CastExpressionContext'> [2]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=options[1]%2
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.CastExpressionContext'> [options[1]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [%]
2 : <class 'CParser.CParser.CastExpressionContext'> [2]
-------
Text=SEND(STDOUT,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SEND(STDOUT,(char*)&p->cost,sizeof(float))]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=options[2]%2
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.CastExpressionContext'> [options[2]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [%]
2 : <class 'CParser.CParser.CastExpressionContext'> [2]
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=options[3]%2
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.CastExpressionContext'> [options[3]]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [%]
2 : <class 'CParser.CParser.CastExpressionContext'> [2]
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0<d_len
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0<d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=cgc_list_next_node(cur)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_list_next_node(cur)]
-------
Text=&inv
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [&inv]
-------
Text=cgc_free
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [cgc_free]
-------
Text=&inv
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [&inv]
-------
Text=4
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [4]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDIN]
-------
Text=cmd
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [cmd]
-------
Text=sizeof(cmd)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(cmd)]
-------
Text=(void*)CMD_BUY
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(void*)CMD_BUY]
-------
Text=cmd
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [cmd]
-------
Text=sizeof(CMD_BUY)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(CMD_BUY)]
-------
Text=cgc_do_buy()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_do_buy()]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=cgc_memcmp
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_memcmp]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_CHECK,cmd,sizeof(CMD_CHECK)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [(void*)CMD_CHECK]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [cmd]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(CMD_CHECK)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_check()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_do_check()]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))]
-------
Text=cgc_do_add()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_do_add()]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))]
-------
Text=cgc_do_rm()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_do_rm()]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))]
-------
Text=ret
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ret]
-------
Text=cgc_do_update()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_do_update()]
-------
Text=0==cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))]
-------
Text=ret
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ret]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_do_onsale()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_do_onsale()]
-------
Text=0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))]
-------
Text=ret=cgc_do_nosale()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ret=cgc_do_nosale()]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))]
-------
Text=ret=cgc_do_list();
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [ret=cgc_do_list();]
-------
Text=0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))]
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret=-2;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [ret=-2;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text={
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret=-1;
Type=<class 'CParser.CParser.BlockItemListContext'>
Child Count = 1
0 : <class 'CParser.CParser.BlockItemContext'> [ret=-1;]
-------
Text=}
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsignedint*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [unsignedint]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=FLAG_PAGE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [FLAG_PAGE]
-------
Text=Product
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [Product]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=product
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsigned
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=barcode
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->barcode
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [p->barcode]
-------
Text=bc
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [bc]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [BARCODE_SZ]
-------
Text=TRUE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [TRUE]
-------
Text=&inv
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [&inv]
-------
Text=cgc_prod_has_bc
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [cgc_prod_has_bc]
-------
Text=(void*)bc
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(void*)bc]
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [Product]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=np
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [np]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=data
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=4
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=&buy_list
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [&buy_list]
-------
Text=cgc_free
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [cgc_free]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDIN]
-------
Text=buy_status
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [buy_status]
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(buy_status)]
-------
Text=buy_status
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [buy_status]
-------
Text=(void*)BUY_MORE
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(void*)BUY_MORE]
-------
Text=sizeof(BUY_MORE)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(BUY_MORE)]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [-1]
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=cgc_memcpy(p_copy,p,sizeof(Product))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_memcpy(p_copy,p,sizeof(Product))]
-------
Text=cgc_list_insert_at_end(&buy_list,p_copy)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_list_insert_at_end(&buy_list,p_copy)]
-------
Text=p_copy->sfn(p_copy->model_num,p_copy->cost)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [p_copy->sfn(p_copy->model_num,p_copy->cost)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=buy_status
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [buy_status]
-------
Text=(void*)BUY_TERM
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(void*)BUY_TERM]
-------
Text=sizeof(BUY_TERM)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(BUY_TERM)]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [-1]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDOUT]
-------
Text=(char*)&cost
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(char*)&cost]
-------
Text=sizeof(cost)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(cost)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [&buy_list]
-------
Text=BARCODE_SZ
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDIN]
-------
Text=bc
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [bc]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [BARCODE_SZ]
-------
Text=bc
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [bc]
-------
Text=1
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDOUT]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(unsignedint)]
-------
Text=p->model_num
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [p->cost]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDOUT]
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(char*)&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(float)]
-------
Text=p->desc
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\0']
-------
Text=SEND
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDOUT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->desc
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p->desc]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=d_len
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [d_len]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDOUT]
-------
Text=DESC_TERM
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [DESC_TERM]
-------
Text=1
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [1]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(Product)]
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDIN]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(char*)p->barcode]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [BARCODE_SZ]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(char*)p->barcode]
-------
Text=-1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [-1]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDIN]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(unsignedint)]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDIN]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(float)]
-------
Text=STDIN
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDIN]
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [DESC_TERM[0]]
-------
Text=(char*)p->desc
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(char*)p->desc]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(Product)]
-------
Text=cgc__terminate
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERRNO_RECV
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [ERRNO_RECV]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [bytes_recvd]
-------
Text=1
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1]
-------
Text=&inv
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [&inv]
-------
Text=p
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [p]
-------
Text=BARCODE_SZ
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDIN]
-------
Text=bc
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [bc]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [BARCODE_SZ]
-------
Text=&inv
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [&inv]
-------
Text=cgc_prod_has_bc
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [cgc_prod_has_bc]
-------
Text=(void*)bc
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(void*)bc]
-------
Text=1
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1]
-------
Text=&inv
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [&inv]
-------
Text=np
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [np]
-------
Text=&inv
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [&inv]
-------
Text=&np
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [&np]
-------
Text=BARCODE_SZ
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=MAX_DESC_LEN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDIN]
-------
Text=(char*)bc
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(char*)bc]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [BARCODE_SZ]
-------
Text=(char*)bc
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(char*)bc]
-------
Text=-1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [-1]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDIN]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(unsignedint)]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDIN]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(float)]
-------
Text=STDIN
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDIN]
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [DESC_TERM[0]]
-------
Text=desc_buf
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [desc_buf]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(Product)]
-------
Text=cgc__terminate
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ERRNO_RECV
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [ERRNO_RECV]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [bytes_recvd]
-------
Text=1
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1]
-------
Text=p->desc
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [p->desc]
-------
Text=desc_buf
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [desc_buf]
-------
Text=MAX_DESC_LEN
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [MAX_DESC_LEN]
-------
Text=BARCODE_SZ
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDIN]
-------
Text=bc
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [bc]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [BARCODE_SZ]
-------
Text=bc
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [bc]
-------
Text=1
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDIN]
-------
Text=(char*)&sale_percent
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(char*)&sale_percent]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(unsignedint)]
-------
Text=1
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1]
-------
Text=sale_percent
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sale_percent]
-------
Text=BARCODE_SZ
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDIN]
-------
Text=bc
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [bc]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [BARCODE_SZ]
-------
Text=bc
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [bc]
-------
Text=1
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1]
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=4
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=&inv
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [&inv]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDIN]
-------
Text=options
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [options]
-------
Text=sizeof(options)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(options)]
-------
Text=1
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1]
-------
Text=NULL!=cur
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [NULL!=cur]
-------
Text=cur!=end
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cur!=end]
-------
Text=(Product*)cur->data
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(Product*)cur->data]
-------
Text=SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=options[0]
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [options[0]]
-------
Text=%
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=2
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [2]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=options[1]
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [options[1]]
-------
Text=%
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=2
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [2]
-------
Text=SEND(STDOUT,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SEND(STDOUT,(char*)&p->cost,sizeof(float))]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=options[2]
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [options[2]]
-------
Text=%
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=2
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [2]
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=options[3]
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [options[3]]
-------
Text=%
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=2
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [2]
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0<d_len
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0<d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=cgc_list_next_node(cur)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_list_next_node(cur)]
-------
Text=&inv
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [&inv]
-------
Text=cgc_free
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [cgc_free]
-------
Text=&inv
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [&inv]
-------
Text=4
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDIN]
-------
Text=cmd
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [cmd]
-------
Text=sizeof(cmd)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(cmd)]
-------
Text=(void*)CMD_BUY
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(void*)CMD_BUY]
-------
Text=cmd
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [cmd]
-------
Text=sizeof(CMD_BUY)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(CMD_BUY)]
-------
Text=cgc_do_buy()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_do_buy()]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcmp
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_CHECK
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(void*)CMD_CHECK]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cmd
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [cmd]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(CMD_CHECK)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(CMD_CHECK)]
-------
Text=cgc_do_check()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_do_check()]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_ADD,cmd,sizeof(CMD_ADD))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_memcmp]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [(void*)CMD_ADD,cmd,sizeof(CMD_ADD)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_do_add()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_do_add()]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))]
-------
Text=cgc_do_rm()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_do_rm()]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))]
-------
Text=ret
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_update()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_do_update()]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))]
-------
Text=ret
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ret]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_onsale()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_do_onsale()]
-------
Text=0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))]
-------
Text=ret=cgc_do_nosale()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ret]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_do_nosale()]
-------
Text=0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))]
-------
Text=ret=cgc_do_list();
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [ret=cgc_do_list()]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))]
-------
Text=ret=-2;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [ret=-2;]
-------
Text=ret=-1;
Type=<class 'CParser.CParser.BlockItemContext'>
Child Count = 1
0 : <class 'CParser.CParser.StatementContext'> [ret=-1;]
-------
Text=unsignedint
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [unsigned]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=FLAG_PAGE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [FLAG_PAGE]
-------
Text=Product
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->barcode
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [p->barcode]
-------
Text=bc
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bc]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [BARCODE_SZ]
-------
Text=TRUE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [TRUE]
-------
Text=&inv
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [&inv]
-------
Text=cgc_prod_has_bc
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [cgc_prod_has_bc]
-------
Text=(void*)bc
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(void*)bc]
-------
Text=Product
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [Product]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=np
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&buy_list
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [&buy_list]
-------
Text=cgc_free
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_free]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDIN]
-------
Text=buy_status
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [buy_status]
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(buy_status)]
-------
Text=buy_status
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [buy_status]
-------
Text=(void*)BUY_MORE
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(void*)BUY_MORE]
-------
Text=sizeof(BUY_MORE)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(BUY_MORE)]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [RECV(STDIN,bc,BARCODE_SZ)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [-1]
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=cgc_memcpy(p_copy,p,sizeof(Product))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_memcpy(p_copy,p,sizeof(Product))]
-------
Text=cgc_list_insert_at_end(&buy_list,p_copy)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_list_insert_at_end(&buy_list,p_copy)]
-------
Text=p_copy->sfn(p_copy->model_num,p_copy->cost)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p_copy->sfn(p_copy->model_num,p_copy->cost)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [RECV(STDIN,buy_status,sizeof(buy_status))]
-------
Text=buy_status
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [buy_status]
-------
Text=(void*)BUY_TERM
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(void*)BUY_TERM]
-------
Text=sizeof(BUY_TERM)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(BUY_TERM)]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [-]
1 : <class 'CParser.CParser.CastExpressionContext'> [1]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDOUT]
-------
Text=(char*)&cost
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(char*)&cost]
-------
Text=sizeof(cost)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(cost)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [&buy_list]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDIN]
-------
Text=bc
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bc]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [BARCODE_SZ]
-------
Text=bc
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [bc]
-------
Text=1
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDOUT]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(unsignedint)]
-------
Text=p->model_num
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [p->cost]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDOUT]
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(char*)&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(float)]
-------
Text=p->desc
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\0']
-------
Text=STDOUT
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDOUT]
-------
Text=p->desc
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [p->desc]
-------
Text=d_len
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [d_len]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDOUT]
-------
Text=DESC_TERM
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [DESC_TERM]
-------
Text=1
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [1]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(Product)]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDIN]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(char*)p->barcode]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [BARCODE_SZ]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(char*)p->barcode]
-------
Text=-1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [-]
1 : <class 'CParser.CParser.CastExpressionContext'> [1]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDIN]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(unsignedint)]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDIN]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(float)]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDIN]
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [DESC_TERM[0]]
-------
Text=(char*)p->desc
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(char*)p->desc]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(Product)]
-------
Text=ERRNO_RECV
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [ERRNO_RECV]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bytes_recvd]
-------
Text=1
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1]
-------
Text=&inv
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [&inv]
-------
Text=p
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDIN]
-------
Text=bc
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bc]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [BARCODE_SZ]
-------
Text=&inv
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [&inv]
-------
Text=cgc_prod_has_bc
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [cgc_prod_has_bc]
-------
Text=(void*)bc
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(void*)bc]
-------
Text=1
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1]
-------
Text=&inv
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [&inv]
-------
Text=np
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [np]
-------
Text=&inv
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [&inv]
-------
Text=&np
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [&np]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDIN]
-------
Text=(char*)bc
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(char*)bc]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [BARCODE_SZ]
-------
Text=(char*)bc
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(char*)bc]
-------
Text=-1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [-]
1 : <class 'CParser.CParser.CastExpressionContext'> [1]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDIN]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(unsignedint)]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDIN]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(float)]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDIN]
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [DESC_TERM[0]]
-------
Text=desc_buf
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [desc_buf]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(Product)]
-------
Text=ERRNO_RECV
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [ERRNO_RECV]
-------
Text=bytes_recvd
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bytes_recvd]
-------
Text=1
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1]
-------
Text=p->desc
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [p->desc]
-------
Text=desc_buf
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [desc_buf]
-------
Text=MAX_DESC_LEN
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [MAX_DESC_LEN]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDIN]
-------
Text=bc
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bc]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [BARCODE_SZ]
-------
Text=bc
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [bc]
-------
Text=1
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDIN]
-------
Text=(char*)&sale_percent
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(char*)&sale_percent]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(unsignedint)]
-------
Text=1
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1]
-------
Text=sale_percent
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sale_percent]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDIN]
-------
Text=bc
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bc]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [BARCODE_SZ]
-------
Text=bc
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [bc]
-------
Text=1
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [&inv]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDIN]
-------
Text=options
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [options]
-------
Text=sizeof(options)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(options)]
-------
Text=1
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1]
-------
Text=NULL!=cur
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [NULL!=cur]
-------
Text=cur!=end
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cur!=end]
-------
Text=(Product*)cur->data
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [Product*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [cur->data]
-------
Text=SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=options[0]
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [options[0]]
-------
Text=2
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [2]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=options[1]
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [options[1]]
-------
Text=2
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [2]
-------
Text=SEND(STDOUT,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SEND(STDOUT,(char*)&p->cost,sizeof(float))]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=options[2]
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [options[2]]
-------
Text=2
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [2]
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=options[3]
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [options[3]]
-------
Text=2
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [2]
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0<d_len
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0<d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=cgc_list_next_node(cur)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_list_next_node(cur)]
-------
Text=&inv
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [&inv]
-------
Text=cgc_free
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_free]
-------
Text=&inv
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [&inv]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDIN]
-------
Text=cmd
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cmd]
-------
Text=sizeof(cmd)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(cmd)]
-------
Text=(void*)CMD_BUY
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(void*)CMD_BUY]
-------
Text=cmd
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cmd]
-------
Text=sizeof(CMD_BUY)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(CMD_BUY)]
-------
Text=cgc_do_buy()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_do_buy()]
-------
Text=(void*)CMD_CHECK
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(void*)CMD_CHECK]
-------
Text=cmd
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [cmd]
-------
Text=sizeof(CMD_CHECK)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(CMD_CHECK)]
-------
Text=cgc_do_check()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_do_check()]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=cgc_memcmp
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_memcmp]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_ADD,cmd,sizeof(CMD_ADD)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [(void*)CMD_ADD]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [cmd]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(CMD_ADD)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_add()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_do_add()]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))]
-------
Text=cgc_do_rm()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_do_rm()]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))]
-------
Text=cgc_do_update()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_do_update()]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))]
-------
Text=ret
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ret]
-------
Text=cgc_do_onsale()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_do_onsale()]
-------
Text=0==cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))]
-------
Text=ret
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ret]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_do_nosale()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_do_nosale()]
-------
Text=0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))]
-------
Text=ret=cgc_do_list()
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ret=cgc_do_list()]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))]
-------
Text=ret=-2;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [ret=-2;]
-------
Text=ret=-1;
Type=<class 'CParser.CParser.StatementContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExpressionStatementContext'> [ret=-1;]
-------
Text=unsigned
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=FLAG_PAGE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->barcode
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [p->barcode]
-------
Text=bc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=TRUE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [TRUE]
-------
Text=&inv
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [&inv]
-------
Text=cgc_prod_has_bc
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_prod_has_bc]
-------
Text=(void*)bc
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(void*)bc]
-------
Text=Product
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&buy_list
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [&buy_list]
-------
Text=cgc_free
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_status
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(buy_status)]
-------
Text=buy_status
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)BUY_MORE
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(void*)BUY_MORE]
-------
Text=sizeof(BUY_MORE)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(BUY_MORE)]
-------
Text=RECV(STDIN,bc,BARCODE_SZ)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [RECV]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDIN,bc,BARCODE_SZ]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_get_product_by_barcode(bc)]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [-1]
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_malloc(sizeof(Product))]
-------
Text=cgc_memcpy(p_copy,p,sizeof(Product))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_memcpy]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [p_copy,p,sizeof(Product)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_list_insert_at_end(&buy_list,p_copy)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_list_insert_at_end]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [&buy_list,p_copy]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=p_copy->sfn(p_copy->model_num,p_copy->cost)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p_copy->sfn(p_copy->model_num,p_copy->cost)]
-------
Text=RECV(STDIN,buy_status,sizeof(buy_status))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [RECV]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDIN,buy_status,sizeof(buy_status)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=buy_status
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)BUY_TERM
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(void*)BUY_TERM]
-------
Text=sizeof(BUY_TERM)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(BUY_TERM)]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_list_destroy]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [&buy_list]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=-
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [-]
-------
Text=1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1]
-------
Text=STDOUT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&cost
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(char*)&cost]
-------
Text=sizeof(cost)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(cost)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [&buy_list]
-------
Text=STDIN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bc]
-------
Text=1
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(unsignedint)]
-------
Text=p->model_num
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [p->cost]
-------
Text=STDOUT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(char*)&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(float)]
-------
Text=p->desc
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\0']
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDOUT]
-------
Text=p->desc
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [p->desc]
-------
Text=d_len
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [d_len]
-------
Text=STDOUT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=DESC_TERM
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [1]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(Product)]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=STDIN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(char*)p->barcode]
-------
Text=BARCODE_SZ
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(char*)p->barcode]
-------
Text=-
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [-]
-------
Text=1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1]
-------
Text=STDIN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(unsignedint)]
-------
Text=STDIN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(float)]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDIN]
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [DESC_TERM[0]]
-------
Text=(char*)p->desc
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(char*)p->desc]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(Product)]
-------
Text=ERRNO_RECV
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [ERRNO_RECV]
-------
Text=bytes_recvd
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [&inv]
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [&inv]
-------
Text=cgc_prod_has_bc
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_prod_has_bc]
-------
Text=(void*)bc
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(void*)bc]
-------
Text=1
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [&inv]
-------
Text=np
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [&inv]
-------
Text=&np
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [&np]
-------
Text=STDIN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)bc
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(char*)bc]
-------
Text=BARCODE_SZ
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)bc
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(char*)bc]
-------
Text=-
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [-]
-------
Text=1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1]
-------
Text=STDIN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(unsignedint)]
-------
Text=STDIN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(float)]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDIN]
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [DESC_TERM[0]]
-------
Text=desc_buf
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [desc_buf]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(Product)]
-------
Text=ERRNO_RECV
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [ERRNO_RECV]
-------
Text=bytes_recvd
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->desc
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [p->desc]
-------
Text=desc_buf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=MAX_DESC_LEN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bc]
-------
Text=1
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&sale_percent
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(char*)&sale_percent]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(unsignedint)]
-------
Text=1
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sale_percent
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sale_percent]
-------
Text=STDIN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bc]
-------
Text=1
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=&inv
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [&inv]
-------
Text=STDIN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=options
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(options)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(options)]
-------
Text=1
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL!=cur
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [NULL!=cur]
-------
Text=cur!=end
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cur!=end]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [Product*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cur->data
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cur->data]
-------
Text=SEND(STDOUT,(char*)p->barcode,BARCODE_SZ)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SEND]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDOUT,(char*)p->barcode,BARCODE_SZ]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=options[0]
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [options]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.ExpressionContext'> [0]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text=2
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [2]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=options[1]
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [options]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.ExpressionContext'> [1]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text=2
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [2]
-------
Text=SEND(STDOUT,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SEND(STDOUT,(char*)&p->cost,sizeof(float))]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=options[2]
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [options]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.ExpressionContext'> [2]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text=2
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [2]
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=options[3]
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [options]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.ExpressionContext'> [3]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text=2
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [2]
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0<d_len
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [<]
2 : <class 'CParser.CParser.ShiftExpressionContext'> [d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=cgc_list_next_node(cur)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_list_next_node(cur)]
-------
Text=&inv
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [&inv]
-------
Text=cgc_free
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [&inv]
-------
Text=STDIN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cmd
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(cmd)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(cmd)]
-------
Text=(void*)CMD_BUY
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(void*)CMD_BUY]
-------
Text=cmd
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(CMD_BUY)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(CMD_BUY)]
-------
Text=cgc_do_buy()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_do_buy()]
-------
Text=(void*)CMD_CHECK
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(void*)CMD_CHECK]
-------
Text=cmd
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [cmd]
-------
Text=sizeof(CMD_CHECK)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(CMD_CHECK)]
-------
Text=cgc_do_check()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_do_check()]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcmp
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_ADD
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(void*)CMD_ADD]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cmd
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [cmd]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(CMD_ADD)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(CMD_ADD)]
-------
Text=cgc_do_add()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_do_add()]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_RM,cmd,sizeof(CMD_RM))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_memcmp]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [(void*)CMD_RM,cmd,sizeof(CMD_RM)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_do_rm()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_do_rm()]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))]
-------
Text=cgc_do_update()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_do_update()]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))]
-------
Text=ret
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_onsale()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_do_onsale()]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))]
-------
Text=ret
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ret]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_nosale()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_do_nosale()]
-------
Text=0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))]
-------
Text=ret=cgc_do_list()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ret]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [cgc_do_list()]
-------
Text=0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))]
-------
Text=ret=-2;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [ret=-2]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=ret=-1;
Type=<class 'CParser.CParser.ExpressionStatementContext'>
Child Count = 2
0 : <class 'CParser.CParser.ExpressionContext'> [ret=-1]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [;]
-------
Text=p->barcode
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [p->barcode]
-------
Text=TRUE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [TRUE]
-------
Text=&inv
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [&inv]
-------
Text=cgc_prod_has_bc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)bc
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(void*)bc]
-------
Text=&buy_list
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [&buy_list]
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(buy_status)]
-------
Text=(void*)BUY_MORE
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(void*)BUY_MORE]
-------
Text=sizeof(BUY_MORE)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(BUY_MORE)]
-------
Text=RECV
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [RECV]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN,bc,BARCODE_SZ
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDIN]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [bc]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [BARCODE_SZ]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_get_product_by_barcode(bc)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_get_product_by_barcode]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [bc]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [-1]
-------
Text=cgc_malloc(sizeof(Product))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_malloc]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [sizeof(Product)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_memcpy
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_memcpy]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p_copy,p,sizeof(Product)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [p_copy]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [p]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(Product)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_insert_at_end
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_list_insert_at_end]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&buy_list,p_copy
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [&buy_list]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [p_copy]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p_copy->sfn(p_copy->model_num,p_copy->cost)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 6
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p_copy]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sfn]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
4 : <class 'CParser.CParser.ArgumentExpressionListContext'> [p_copy->model_num,p_copy->cost]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=RECV
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [RECV]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN,buy_status,sizeof(buy_status)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDIN]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [buy_status]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(buy_status)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)BUY_TERM
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(void*)BUY_TERM]
-------
Text=sizeof(BUY_TERM)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(BUY_TERM)]
-------
Text=cgc_list_destroy
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_list_destroy]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&buy_list
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [&buy_list]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1]
-------
Text=(char*)&cost
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(char*)&cost]
-------
Text=sizeof(cost)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(cost)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [&buy_list]
-------
Text=bc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(unsignedint)]
-------
Text=p->model_num
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [p->cost]
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(char*)&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(float)]
-------
Text=p->desc
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\0']
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDOUT]
-------
Text=p->desc
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [p->desc]
-------
Text=d_len
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [d_len]
-------
Text=1
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [1]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(Product)]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(char*)p->barcode]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(char*)p->barcode]
-------
Text=-
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(unsignedint)]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(float)]
-------
Text=STDIN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [DESC_TERM[0]]
-------
Text=(char*)p->desc
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(char*)p->desc]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(Product)]
-------
Text=ERRNO_RECV
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ERRNO_RECV]
-------
Text=&inv
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [&inv]
-------
Text=cgc_prod_has_bc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)bc
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(void*)bc]
-------
Text=&inv
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [&inv]
-------
Text=&np
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [&np]
-------
Text=(char*)bc
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(char*)bc]
-------
Text=(char*)bc
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(char*)bc]
-------
Text=-
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(unsignedint)]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(float)]
-------
Text=STDIN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [DESC_TERM[0]]
-------
Text=desc_buf
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(Product)]
-------
Text=ERRNO_RECV
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ERRNO_RECV]
-------
Text=p->desc
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [p->desc]
-------
Text=bc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&sale_percent
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(char*)&sale_percent]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(unsignedint)]
-------
Text=sale_percent
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sale_percent]
-------
Text=bc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=&inv
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [&inv]
-------
Text=sizeof(options)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(options)]
-------
Text=NULL!=cur
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [NULL!=cur]
-------
Text=cur!=end
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cur!=end]
-------
Text=Product*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product*]
-------
Text=cur->data
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cur->data]
-------
Text=SEND
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SEND]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT,(char*)p->barcode,BARCODE_SZ
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDOUT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [(char*)p->barcode]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [BARCODE_SZ]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=options
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [options]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=2
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [2]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=options
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [options]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [1]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=2
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [2]
-------
Text=SEND(STDOUT,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SEND(STDOUT,(char*)&p->cost,sizeof(float))]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=options
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [options]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=2
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [2]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=2
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [2]
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=options
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [options]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=3
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [3]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=2
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [2]
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=<
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=d_len
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=cgc_list_next_node(cur)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_list_next_node]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [cur]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=&inv
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [&inv]
-------
Text=sizeof(cmd)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(cmd)]
-------
Text=(void*)CMD_BUY
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(void*)CMD_BUY]
-------
Text=sizeof(CMD_BUY)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(CMD_BUY)]
-------
Text=cgc_do_buy()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_do_buy]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(void*)CMD_CHECK
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(void*)CMD_CHECK]
-------
Text=cmd
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cmd]
-------
Text=sizeof(CMD_CHECK)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(CMD_CHECK)]
-------
Text=cgc_do_check()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_do_check()]
-------
Text=(void*)CMD_ADD
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(void*)CMD_ADD]
-------
Text=cmd
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [cmd]
-------
Text=sizeof(CMD_ADD)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(CMD_ADD)]
-------
Text=cgc_do_add()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_do_add()]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=cgc_memcmp
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_memcmp]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_RM,cmd,sizeof(CMD_RM)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [(void*)CMD_RM]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [cmd]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(CMD_RM)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_rm()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_do_rm()]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))]
-------
Text=cgc_do_update()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_do_update()]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))]
-------
Text=cgc_do_onsale()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_do_onsale()]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))]
-------
Text=ret
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ret]
-------
Text=cgc_do_nosale()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_do_nosale()]
-------
Text=0==cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))]
-------
Text=ret
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ret]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=cgc_do_list()
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cgc_do_list()]
-------
Text=0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))]
-------
Text=ret=-2
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ret=-2]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=ret=-1
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [ret=-1]
-------
Text=;
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->barcode
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [p->barcode]
-------
Text=TRUE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [&inv]
-------
Text=(void*)bc
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(void*)bc]
-------
Text=&buy_list
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [&buy_list]
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(buy_status)]
-------
Text=(void*)BUY_MORE
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(void*)BUY_MORE]
-------
Text=sizeof(BUY_MORE)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(BUY_MORE)]
-------
Text=RECV
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDIN]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [bc]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [BARCODE_SZ]
-------
Text=cgc_get_product_by_barcode
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_get_product_by_barcode]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [bc]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [-1]
-------
Text=cgc_malloc
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_malloc]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(Product)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcpy
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p_copy
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [p_copy]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [p]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(Product)]
-------
Text=cgc_list_insert_at_end
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&buy_list
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [&buy_list]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p_copy
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [p_copy]
-------
Text=p_copy
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p_copy]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sfn
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p_copy->model_num,p_copy->cost
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [p_copy->model_num]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [p_copy->cost]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=RECV
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDIN
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDIN]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_status
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [buy_status]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(buy_status)]
-------
Text=(void*)BUY_TERM
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(void*)BUY_TERM]
-------
Text=sizeof(BUY_TERM)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(BUY_TERM)]
-------
Text=cgc_list_destroy
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&buy_list
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [&buy_list]
-------
Text=1
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1]
-------
Text=(char*)&cost
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(char*)&cost]
-------
Text=sizeof(cost)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(cost)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [&buy_list]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(unsignedint)]
-------
Text=p->model_num
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [p->cost]
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(char*)&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(float)]
-------
Text=p->desc
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\0']
-------
Text=STDOUT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->desc
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [p->desc]
-------
Text=d_len
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [1]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(Product)]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(char*)p->barcode]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(char*)p->barcode]
-------
Text=1
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(unsignedint)]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(float)]
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [DESC_TERM[0]]
-------
Text=(char*)p->desc
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(char*)p->desc]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(Product)]
-------
Text=ERRNO_RECV
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [&inv]
-------
Text=(void*)bc
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(void*)bc]
-------
Text=&inv
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [&inv]
-------
Text=&np
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [&np]
-------
Text=(char*)bc
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(char*)bc]
-------
Text=(char*)bc
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(char*)bc]
-------
Text=1
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(unsignedint)]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(float)]
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [DESC_TERM[0]]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(Product)]
-------
Text=ERRNO_RECV
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->desc
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [p->desc]
-------
Text=(char*)&sale_percent
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(char*)&sale_percent]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(unsignedint)]
-------
Text=sale_percent
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sale_percent]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=&inv
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [&inv]
-------
Text=sizeof(options)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(options)]
-------
Text=NULL!=cur
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [NULL!=cur]
-------
Text=cur!=end
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cur!=end]
-------
Text=Product*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [Product]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=cur->data
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cur]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [data]
-------
Text=SEND
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDOUT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(char*)p->barcode]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=options
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=2
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=options
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [1]
-------
Text=2
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SEND(STDOUT,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SEND(STDOUT,(char*)&p->cost,sizeof(float))]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=options
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=2
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [2]
-------
Text=2
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=options
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=3
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [3]
-------
Text=2
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=d_len
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=cgc_list_next_node
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_list_next_node]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cur
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [cur]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [&inv]
-------
Text=sizeof(cmd)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(cmd)]
-------
Text=(void*)CMD_BUY
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(void*)CMD_BUY]
-------
Text=sizeof(CMD_BUY)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(CMD_BUY)]
-------
Text=cgc_do_buy
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_do_buy]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_CHECK
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(void*)CMD_CHECK]
-------
Text=cmd
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(CMD_CHECK)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(CMD_CHECK)]
-------
Text=cgc_do_check()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_do_check()]
-------
Text=(void*)CMD_ADD
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(void*)CMD_ADD]
-------
Text=cmd
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [cmd]
-------
Text=sizeof(CMD_ADD)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(CMD_ADD)]
-------
Text=cgc_do_add()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_do_add()]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcmp
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_RM
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(void*)CMD_RM]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cmd
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [cmd]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(CMD_RM)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(CMD_RM)]
-------
Text=cgc_do_rm()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_do_rm()]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_memcmp]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [(void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_do_update()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_do_update()]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))]
-------
Text=cgc_do_onsale()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_do_onsale()]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))]
-------
Text=ret
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_nosale()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_do_nosale()]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))]
-------
Text=ret
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ret]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_list()
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cgc_do_list()]
-------
Text=0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))]
-------
Text=ret=-2
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ret]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [-2]
-------
Text=ret=-1
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.UnaryExpressionContext'> [ret]
1 : <class 'CParser.CParser.AssignmentOperatorContext'> [=]
2 : <class 'CParser.CParser.AssignmentExpressionContext'> [-1]
-------
Text=p->barcode
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [p->barcode]
-------
Text=&inv
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [&inv]
-------
Text=(void*)bc
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(void*)bc]
-------
Text=&buy_list
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [&buy_list]
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(buy_status)]
-------
Text=(void*)BUY_MORE
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(void*)BUY_MORE]
-------
Text=sizeof(BUY_MORE)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(BUY_MORE)]
-------
Text=STDIN
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDIN]
-------
Text=bc
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [bc]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [BARCODE_SZ]
-------
Text=cgc_get_product_by_barcode
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [bc]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [-1]
-------
Text=cgc_malloc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(Product)]
-------
Text=p_copy
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [p_copy]
-------
Text=p
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [p]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(Product)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [&buy_list]
-------
Text=p_copy
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [p_copy]
-------
Text=p_copy
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p_copy->model_num
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p_copy->model_num]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p_copy->cost
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p_copy->cost]
-------
Text=STDIN
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDIN]
-------
Text=buy_status
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [buy_status]
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(buy_status)]
-------
Text=(void*)BUY_TERM
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(void*)BUY_TERM]
-------
Text=sizeof(BUY_TERM)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(BUY_TERM)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [&buy_list]
-------
Text=1
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1]
-------
Text=(char*)&cost
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(char*)&cost]
-------
Text=sizeof(cost)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(cost)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [&buy_list]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(unsignedint)]
-------
Text=p->model_num
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [p->cost]
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(char*)&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(float)]
-------
Text=p->desc
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\0']
-------
Text=p->desc
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [p->desc]
-------
Text=1
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [1]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(Product)]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(char*)p->barcode]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(char*)p->barcode]
-------
Text=1
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(unsignedint)]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(float)]
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [DESC_TERM[0]]
-------
Text=(char*)p->desc
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(char*)p->desc]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(Product)]
-------
Text=&inv
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [&inv]
-------
Text=(void*)bc
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(void*)bc]
-------
Text=&inv
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [&inv]
-------
Text=&np
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [&np]
-------
Text=(char*)bc
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(char*)bc]
-------
Text=(char*)bc
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(char*)bc]
-------
Text=1
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(unsignedint)]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(float)]
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [DESC_TERM[0]]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(Product)]
-------
Text=p->desc
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [p->desc]
-------
Text=(char*)&sale_percent
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(char*)&sale_percent]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(unsignedint)]
-------
Text=sale_percent
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sale_percent]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=&inv
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [&inv]
-------
Text=sizeof(options)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(options)]
-------
Text=NULL!=cur
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [NULL!=cur]
-------
Text=cur!=end
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cur!=end]
-------
Text=Product
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [Product]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=cur
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cur]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=data
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDOUT]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(char*)p->barcode]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=1
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [1]
-------
Text=SEND(STDOUT,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SEND(STDOUT,(char*)&p->cost,sizeof(float))]
-------
Text=2
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [2]
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=3
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [3]
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=d_len
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=cgc_list_next_node
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cur
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [cur]
-------
Text=&inv
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [&inv]
-------
Text=sizeof(cmd)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(cmd)]
-------
Text=(void*)CMD_BUY
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(void*)CMD_BUY]
-------
Text=sizeof(CMD_BUY)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(CMD_BUY)]
-------
Text=cgc_do_buy
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_CHECK
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(void*)CMD_CHECK]
-------
Text=sizeof(CMD_CHECK)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(CMD_CHECK)]
-------
Text=cgc_do_check()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_do_check]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(void*)CMD_ADD
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(void*)CMD_ADD]
-------
Text=cmd
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cmd]
-------
Text=sizeof(CMD_ADD)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(CMD_ADD)]
-------
Text=cgc_do_add()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_do_add()]
-------
Text=(void*)CMD_RM
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(void*)CMD_RM]
-------
Text=cmd
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [cmd]
-------
Text=sizeof(CMD_RM)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(CMD_RM)]
-------
Text=cgc_do_rm()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_do_rm()]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=cgc_memcmp
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_memcmp]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_UPDATE,cmd,sizeof(CMD_UPDATE)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [(void*)CMD_UPDATE]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [cmd]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(CMD_UPDATE)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_update()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_do_update()]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))]
-------
Text=cgc_do_onsale()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_do_onsale()]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))]
-------
Text=cgc_do_nosale()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_do_nosale()]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))]
-------
Text=ret
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ret]
-------
Text=cgc_do_list()
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cgc_do_list()]
-------
Text=0==cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [==]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))]
-------
Text=ret
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ret]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=-2
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [-2]
-------
Text=ret
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [ret]
-------
Text==
Type=<class 'CParser.CParser.AssignmentOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [=]
-------
Text=-1
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [-1]
-------
Text=p->barcode
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [p->barcode]
-------
Text=&inv
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [&inv]
-------
Text=(void*)bc
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(void*)bc]
-------
Text=&buy_list
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [&buy_list]
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(buy_status)]
-------
Text=(void*)BUY_MORE
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(void*)BUY_MORE]
-------
Text=sizeof(BUY_MORE)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(BUY_MORE)]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDIN]
-------
Text=bc
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [bc]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [BARCODE_SZ]
-------
Text=bc
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [bc]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [-1]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(Product)]
-------
Text=p_copy
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [p_copy]
-------
Text=p
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [p]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(Product)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [&buy_list]
-------
Text=p_copy
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [p_copy]
-------
Text=p_copy->model_num
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [p_copy->model_num]
-------
Text=p_copy->cost
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [p_copy->cost]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDIN]
-------
Text=buy_status
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [buy_status]
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(buy_status)]
-------
Text=(void*)BUY_TERM
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(void*)BUY_TERM]
-------
Text=sizeof(BUY_TERM)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(BUY_TERM)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [&buy_list]
-------
Text=1
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&cost
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(char*)&cost]
-------
Text=sizeof(cost)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(cost)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [&buy_list]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(unsignedint)]
-------
Text=p->model_num
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [p->cost]
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(char*)&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(float)]
-------
Text=p->desc
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\0']
-------
Text=p->desc
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [p->desc]
-------
Text=1
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [1]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(Product)]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(char*)p->barcode]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(char*)p->barcode]
-------
Text=1
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(unsignedint)]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(float)]
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [DESC_TERM[0]]
-------
Text=(char*)p->desc
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(char*)p->desc]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(Product)]
-------
Text=&inv
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [&inv]
-------
Text=(void*)bc
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(void*)bc]
-------
Text=&inv
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [&inv]
-------
Text=&np
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [&np]
-------
Text=(char*)bc
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(char*)bc]
-------
Text=(char*)bc
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(char*)bc]
-------
Text=1
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(unsignedint)]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(float)]
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [DESC_TERM[0]]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(Product)]
-------
Text=p->desc
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [p->desc]
-------
Text=(char*)&sale_percent
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(char*)&sale_percent]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(unsignedint)]
-------
Text=sale_percent
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sale_percent]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=&inv
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [&inv]
-------
Text=sizeof(options)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(options)]
-------
Text=NULL!=cur
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [NULL]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [!=]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [cur]
-------
Text=cur!=end
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cur]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [!=]
2 : <class 'CParser.CParser.RelationalExpressionContext'> [end]
-------
Text=Product
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [Product]
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cur
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDOUT]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(char*)p->barcode]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=1
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [1]
-------
Text=SEND(STDOUT,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SEND(STDOUT,(char*)&p->cost,sizeof(float))]
-------
Text=2
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [2]
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=3
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [3]
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=d_len
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=cur
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [cur]
-------
Text=&inv
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [&inv]
-------
Text=sizeof(cmd)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(cmd)]
-------
Text=(void*)CMD_BUY
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(void*)CMD_BUY]
-------
Text=sizeof(CMD_BUY)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(CMD_BUY)]
-------
Text=(void*)CMD_CHECK
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(void*)CMD_CHECK]
-------
Text=sizeof(CMD_CHECK)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(CMD_CHECK)]
-------
Text=cgc_do_check
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_do_check]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_ADD
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(void*)CMD_ADD]
-------
Text=cmd
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(CMD_ADD)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(CMD_ADD)]
-------
Text=cgc_do_add()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_do_add()]
-------
Text=(void*)CMD_RM
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(void*)CMD_RM]
-------
Text=cmd
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [cmd]
-------
Text=sizeof(CMD_RM)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(CMD_RM)]
-------
Text=cgc_do_rm()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_do_rm()]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcmp
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_UPDATE
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(void*)CMD_UPDATE]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cmd
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [cmd]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(CMD_UPDATE)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(CMD_UPDATE)]
-------
Text=cgc_do_update()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_do_update()]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_memcmp]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [(void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_do_onsale()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_do_onsale()]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))]
-------
Text=cgc_do_nosale()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_do_nosale()]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))]
-------
Text=ret
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_list()
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cgc_do_list()]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text===
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))]
-------
Text=ret
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ret]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-2
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [-2]
-------
Text=ret
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [ret]
-------
Text==
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-1
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [-1]
-------
Text=p->barcode
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [p->barcode]
-------
Text=&inv
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [&inv]
-------
Text=(void*)bc
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(void*)bc]
-------
Text=&buy_list
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [&buy_list]
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(buy_status)]
-------
Text=(void*)BUY_MORE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(void*)BUY_MORE]
-------
Text=sizeof(BUY_MORE)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(BUY_MORE)]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDIN]
-------
Text=bc
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bc]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [BARCODE_SZ]
-------
Text=bc
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [bc]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_list_destroy(&buy_list)]
-------
Text=-1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [-]
1 : <class 'CParser.CParser.CastExpressionContext'> [1]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(Product)]
-------
Text=p_copy
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p_copy]
-------
Text=p
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(Product)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [&buy_list]
-------
Text=p_copy
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p_copy]
-------
Text=p_copy->model_num
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [p_copy->model_num]
-------
Text=p_copy->cost
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [p_copy->cost]
-------
Text=STDIN
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDIN]
-------
Text=buy_status
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [buy_status]
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(buy_status)]
-------
Text=(void*)BUY_TERM
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(void*)BUY_TERM]
-------
Text=sizeof(BUY_TERM)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(BUY_TERM)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [&buy_list]
-------
Text=(char*)&cost
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(char*)&cost]
-------
Text=sizeof(cost)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(cost)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [&buy_list]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(unsignedint)]
-------
Text=p->model_num
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [p->cost]
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(char*)&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(float)]
-------
Text=p->desc
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\0']
-------
Text=p->desc
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [p->desc]
-------
Text=1
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [1]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(Product)]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(char*)p->barcode]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(char*)p->barcode]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(unsignedint)]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(float)]
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [DESC_TERM[0]]
-------
Text=(char*)p->desc
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(char*)p->desc]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(Product)]
-------
Text=&inv
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [&inv]
-------
Text=(void*)bc
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(void*)bc]
-------
Text=&inv
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [&inv]
-------
Text=&np
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [&np]
-------
Text=(char*)bc
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(char*)bc]
-------
Text=(char*)bc
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(char*)bc]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(unsignedint)]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(float)]
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [DESC_TERM[0]]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(Product)]
-------
Text=p->desc
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [p->desc]
-------
Text=(char*)&sale_percent
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(char*)&sale_percent]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(unsignedint)]
-------
Text=sale_percent
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sale_percent]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=&inv
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [&inv]
-------
Text=sizeof(options)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(options)]
-------
Text=NULL
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [NULL]
-------
Text=!=
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cur
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cur]
-------
Text=cur
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cur]
-------
Text=!=
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=end
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [end]
-------
Text=Product
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDOUT]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(char*)p->barcode]
-------
Text=BARCODE_SZ
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [BARCODE_SZ]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))]
-------
Text=1
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [1]
-------
Text=SEND(STDOUT,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SEND(STDOUT,(char*)&p->cost,sizeof(float))]
-------
Text=2
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [2]
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SEND(STDOUT,(char*)&sale_price,sizeof(float))]
-------
Text=3
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [3]
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=d_len
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SEND(STDOUT,DESC_TERM,1)]
-------
Text=cur
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [cur]
-------
Text=&inv
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [&inv]
-------
Text=sizeof(cmd)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(cmd)]
-------
Text=(void*)CMD_BUY
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(void*)CMD_BUY]
-------
Text=sizeof(CMD_BUY)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(CMD_BUY)]
-------
Text=(void*)CMD_CHECK
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(void*)CMD_CHECK]
-------
Text=sizeof(CMD_CHECK)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(CMD_CHECK)]
-------
Text=cgc_do_check
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_ADD
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(void*)CMD_ADD]
-------
Text=sizeof(CMD_ADD)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(CMD_ADD)]
-------
Text=cgc_do_add()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_do_add]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(void*)CMD_RM
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(void*)CMD_RM]
-------
Text=cmd
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cmd]
-------
Text=sizeof(CMD_RM)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(CMD_RM)]
-------
Text=cgc_do_rm()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_do_rm()]
-------
Text=(void*)CMD_UPDATE
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(void*)CMD_UPDATE]
-------
Text=cmd
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [cmd]
-------
Text=sizeof(CMD_UPDATE)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(CMD_UPDATE)]
-------
Text=cgc_do_update()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_do_update()]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=cgc_memcmp
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_memcmp]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_ONSALE,cmd,sizeof(CMD_ONSALE)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [(void*)CMD_ONSALE]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [cmd]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(CMD_ONSALE)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_onsale()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_do_onsale()]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))]
-------
Text=cgc_do_nosale()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_do_nosale()]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))]
-------
Text=cgc_do_list()
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cgc_do_list()]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))]
-------
Text=ret
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ret]
-------
Text=-2
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [-2]
-------
Text=ret
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [ret]
-------
Text=-1
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [-1]
-------
Text=p->barcode
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [p->barcode]
-------
Text=&inv
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [&inv]
-------
Text=(void*)bc
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(void*)bc]
-------
Text=&buy_list
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [&buy_list]
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(buy_status)]
-------
Text=(void*)BUY_MORE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(void*)BUY_MORE]
-------
Text=sizeof(BUY_MORE)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(BUY_MORE)]
-------
Text=STDIN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BARCODE_SZ
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bc]
-------
Text=cgc_list_destroy(&buy_list)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_list_destroy]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [&buy_list]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=-
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [-]
-------
Text=1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(Product)]
-------
Text=p_copy
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(Product)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [&buy_list]
-------
Text=p_copy
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p_copy->model_num
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [p_copy->model_num]
-------
Text=p_copy->cost
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [p_copy->cost]
-------
Text=STDIN
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_status
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(buy_status)]
-------
Text=(void*)BUY_TERM
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(void*)BUY_TERM]
-------
Text=sizeof(BUY_TERM)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(BUY_TERM)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [&buy_list]
-------
Text=(char*)&cost
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(char*)&cost]
-------
Text=sizeof(cost)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(cost)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [&buy_list]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(unsignedint)]
-------
Text=p->model_num
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [p->cost]
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(char*)&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(float)]
-------
Text=p->desc
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\0']
-------
Text=p->desc
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [p->desc]
-------
Text=1
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [1]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(Product)]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(char*)p->barcode]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(char*)p->barcode]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(unsignedint)]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(float)]
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [DESC_TERM[0]]
-------
Text=(char*)p->desc
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(char*)p->desc]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(Product)]
-------
Text=&inv
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [&inv]
-------
Text=(void*)bc
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(void*)bc]
-------
Text=&inv
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [&inv]
-------
Text=&np
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [&np]
-------
Text=(char*)bc
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(char*)bc]
-------
Text=(char*)bc
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(char*)bc]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(unsignedint)]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(float)]
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [DESC_TERM[0]]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(Product)]
-------
Text=p->desc
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [p->desc]
-------
Text=(char*)&sale_percent
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(char*)&sale_percent]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(unsignedint)]
-------
Text=sale_percent
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sale_percent]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=&inv
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [&inv]
-------
Text=sizeof(options)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(options)]
-------
Text=NULL
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [NULL]
-------
Text=cur
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cur]
-------
Text=cur
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cur]
-------
Text=end
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [end]
-------
Text=STDOUT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(char*)p->barcode]
-------
Text=BARCODE_SZ
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=SEND(STDOUT,(char*)&p->model_num,sizeof(unsignedint))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SEND]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDOUT,(char*)&p->model_num,sizeof(unsignedint)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=1
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [1]
-------
Text=SEND(STDOUT,(char*)&p->cost,sizeof(float))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SEND]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDOUT,(char*)&p->cost,sizeof(float)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=2
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [2]
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->sfn(p->model_num,p->cost)]
-------
Text=SEND(STDOUT,(char*)&sale_price,sizeof(float))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SEND]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDOUT,(char*)&sale_price,sizeof(float)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=3
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [3]
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_strlen(p->desc,'\0')]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=d_len
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND(STDOUT,DESC_TERM,1)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SEND]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDOUT,DESC_TERM,1]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cur
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cur]
-------
Text=&inv
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [&inv]
-------
Text=sizeof(cmd)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(cmd)]
-------
Text=(void*)CMD_BUY
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(void*)CMD_BUY]
-------
Text=sizeof(CMD_BUY)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(CMD_BUY)]
-------
Text=(void*)CMD_CHECK
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(void*)CMD_CHECK]
-------
Text=sizeof(CMD_CHECK)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(CMD_CHECK)]
-------
Text=(void*)CMD_ADD
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(void*)CMD_ADD]
-------
Text=sizeof(CMD_ADD)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(CMD_ADD)]
-------
Text=cgc_do_add
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_do_add]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_RM
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(void*)CMD_RM]
-------
Text=cmd
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(CMD_RM)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(CMD_RM)]
-------
Text=cgc_do_rm()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_do_rm()]
-------
Text=(void*)CMD_UPDATE
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(void*)CMD_UPDATE]
-------
Text=cmd
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [cmd]
-------
Text=sizeof(CMD_UPDATE)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(CMD_UPDATE)]
-------
Text=cgc_do_update()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_do_update()]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcmp
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_ONSALE
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(void*)CMD_ONSALE]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cmd
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [cmd]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(CMD_ONSALE)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(CMD_ONSALE)]
-------
Text=cgc_do_onsale()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_do_onsale()]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_memcmp]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [(void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_do_nosale()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_do_nosale()]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))]
-------
Text=cgc_do_list()
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cgc_do_list()]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))]
-------
Text=ret
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-2
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [-2]
-------
Text=ret
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-1
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [-1]
-------
Text=p->barcode
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [p->barcode]
-------
Text=&inv
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [&inv]
-------
Text=(void*)bc
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(void*)bc]
-------
Text=&buy_list
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [&buy_list]
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(buy_status)]
-------
Text=(void*)BUY_MORE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(void*)BUY_MORE]
-------
Text=sizeof(BUY_MORE)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(BUY_MORE)]
-------
Text=bc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_list_destroy
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_list_destroy]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&buy_list
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 1
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [&buy_list]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(Product)]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(Product)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [&buy_list]
-------
Text=p_copy->model_num
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [p_copy->model_num]
-------
Text=p_copy->cost
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [p_copy->cost]
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(buy_status)]
-------
Text=(void*)BUY_TERM
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(void*)BUY_TERM]
-------
Text=sizeof(BUY_TERM)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(BUY_TERM)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [&buy_list]
-------
Text=(char*)&cost
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(char*)&cost]
-------
Text=sizeof(cost)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(cost)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [&buy_list]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(unsignedint)]
-------
Text=p->model_num
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [p->cost]
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(char*)&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(float)]
-------
Text=p->desc
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\0']
-------
Text=p->desc
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [p->desc]
-------
Text=1
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [1]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(Product)]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(char*)p->barcode]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(char*)p->barcode]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(unsignedint)]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(float)]
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [DESC_TERM[0]]
-------
Text=(char*)p->desc
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(char*)p->desc]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(Product)]
-------
Text=&inv
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [&inv]
-------
Text=(void*)bc
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(void*)bc]
-------
Text=&inv
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [&inv]
-------
Text=&np
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [&np]
-------
Text=(char*)bc
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(char*)bc]
-------
Text=(char*)bc
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(char*)bc]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(unsignedint)]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(float)]
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [DESC_TERM[0]]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(Product)]
-------
Text=p->desc
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [p->desc]
-------
Text=(char*)&sale_percent
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(char*)&sale_percent]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(unsignedint)]
-------
Text=sale_percent
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sale_percent]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=&inv
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [&inv]
-------
Text=sizeof(options)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(options)]
-------
Text=NULL
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [NULL]
-------
Text=cur
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cur]
-------
Text=cur
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cur]
-------
Text=end
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [end]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(char*)p->barcode]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=SEND
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SEND]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT,(char*)&p->model_num,sizeof(unsignedint)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDOUT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [(char*)&p->model_num]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(unsignedint)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [1]
-------
Text=SEND
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SEND]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT,(char*)&p->cost,sizeof(float)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDOUT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [(char*)&p->cost]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(float)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=2
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [2]
-------
Text=p->sfn(p->model_num,p->cost)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 6
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sfn]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
4 : <class 'CParser.CParser.ArgumentExpressionListContext'> [p->model_num,p->cost]
5 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=SEND
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SEND]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT,(char*)&sale_price,sizeof(float)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDOUT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [(char*)&sale_price]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(float)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=3
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [3]
-------
Text=cgc_strlen(p->desc,'\0')
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_strlen]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [p->desc,'\0']
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=d_len
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [d_len]
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [SEND(STDOUT,p->desc,d_len)]
-------
Text=SEND
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SEND]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT,DESC_TERM,1
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDOUT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [DESC_TERM]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [1]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cur
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&inv
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [&inv]
-------
Text=sizeof(cmd)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(cmd)]
-------
Text=(void*)CMD_BUY
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(void*)CMD_BUY]
-------
Text=sizeof(CMD_BUY)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(CMD_BUY)]
-------
Text=(void*)CMD_CHECK
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(void*)CMD_CHECK]
-------
Text=sizeof(CMD_CHECK)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(CMD_CHECK)]
-------
Text=(void*)CMD_ADD
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(void*)CMD_ADD]
-------
Text=sizeof(CMD_ADD)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(CMD_ADD)]
-------
Text=cgc_do_add
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_RM
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(void*)CMD_RM]
-------
Text=sizeof(CMD_RM)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(CMD_RM)]
-------
Text=cgc_do_rm()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_do_rm]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(void*)CMD_UPDATE
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(void*)CMD_UPDATE]
-------
Text=cmd
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cmd]
-------
Text=sizeof(CMD_UPDATE)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(CMD_UPDATE)]
-------
Text=cgc_do_update()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_do_update()]
-------
Text=(void*)CMD_ONSALE
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(void*)CMD_ONSALE]
-------
Text=cmd
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [cmd]
-------
Text=sizeof(CMD_ONSALE)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(CMD_ONSALE)]
-------
Text=cgc_do_onsale()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_do_onsale()]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=cgc_memcmp
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_memcmp]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_NOSALE,cmd,sizeof(CMD_NOSALE)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [(void*)CMD_NOSALE]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [cmd]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(CMD_NOSALE)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_nosale()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_do_nosale()]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))]
-------
Text=cgc_do_list()
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cgc_do_list()]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))]
-------
Text=-2
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [-2]
-------
Text=-1
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [-1]
-------
Text=p->barcode
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [p->barcode]
-------
Text=&inv
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [&inv]
-------
Text=(void*)bc
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(void*)bc]
-------
Text=&buy_list
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [&buy_list]
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(buy_status)]
-------
Text=(void*)BUY_MORE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(void*)BUY_MORE]
-------
Text=sizeof(BUY_MORE)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(BUY_MORE)]
-------
Text=cgc_list_destroy
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&buy_list
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [&buy_list]
-------
Text=1
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(Product)]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(Product)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [&buy_list]
-------
Text=p_copy->model_num
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [p_copy->model_num]
-------
Text=p_copy->cost
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [p_copy->cost]
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(buy_status)]
-------
Text=(void*)BUY_TERM
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(void*)BUY_TERM]
-------
Text=sizeof(BUY_TERM)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(BUY_TERM)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [&buy_list]
-------
Text=(char*)&cost
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(char*)&cost]
-------
Text=sizeof(cost)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(cost)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [&buy_list]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(unsignedint)]
-------
Text=p->model_num
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [p->cost]
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(char*)&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(float)]
-------
Text=p->desc
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\0']
-------
Text=p->desc
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [p->desc]
-------
Text=1
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [1]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(Product)]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(char*)p->barcode]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(char*)p->barcode]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(unsignedint)]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(float)]
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [DESC_TERM[0]]
-------
Text=(char*)p->desc
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(char*)p->desc]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(Product)]
-------
Text=&inv
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [&inv]
-------
Text=(void*)bc
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(void*)bc]
-------
Text=&inv
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [&inv]
-------
Text=&np
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [&np]
-------
Text=(char*)bc
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(char*)bc]
-------
Text=(char*)bc
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(char*)bc]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(unsignedint)]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(float)]
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [DESC_TERM[0]]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(Product)]
-------
Text=p->desc
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [p->desc]
-------
Text=(char*)&sale_percent
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(char*)&sale_percent]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(unsignedint)]
-------
Text=sale_percent
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sale_percent]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=&inv
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [&inv]
-------
Text=sizeof(options)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(options)]
-------
Text=NULL
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [NULL]
-------
Text=cur
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cur]
-------
Text=cur
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cur]
-------
Text=end
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [end]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(char*)p->barcode]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=SEND
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDOUT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(char*)&p->model_num]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(unsignedint)]
-------
Text=1
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [1]
-------
Text=SEND
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDOUT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(char*)&p->cost]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(float)]
-------
Text=2
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [2]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sfn
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->model_num,p->cost
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [p->model_num]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [p->cost]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SEND
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDOUT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(char*)&sale_price]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(float)]
-------
Text=3
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [3]
-------
Text=cgc_strlen
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_strlen]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->desc,'\0'
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 3
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [p->desc]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> ['\0']
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=d_len
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=SEND(STDOUT,p->desc,d_len)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [SEND]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [STDOUT,p->desc,d_len]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=SEND
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDOUT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=DESC_TERM
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [DESC_TERM]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [1]
-------
Text=&inv
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [&inv]
-------
Text=sizeof(cmd)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(cmd)]
-------
Text=(void*)CMD_BUY
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(void*)CMD_BUY]
-------
Text=sizeof(CMD_BUY)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(CMD_BUY)]
-------
Text=(void*)CMD_CHECK
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(void*)CMD_CHECK]
-------
Text=sizeof(CMD_CHECK)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(CMD_CHECK)]
-------
Text=(void*)CMD_ADD
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(void*)CMD_ADD]
-------
Text=sizeof(CMD_ADD)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(CMD_ADD)]
-------
Text=(void*)CMD_RM
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(void*)CMD_RM]
-------
Text=sizeof(CMD_RM)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(CMD_RM)]
-------
Text=cgc_do_rm
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_do_rm]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_UPDATE
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(void*)CMD_UPDATE]
-------
Text=cmd
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(CMD_UPDATE)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(CMD_UPDATE)]
-------
Text=cgc_do_update()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_do_update()]
-------
Text=(void*)CMD_ONSALE
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(void*)CMD_ONSALE]
-------
Text=cmd
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [cmd]
-------
Text=sizeof(CMD_ONSALE)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(CMD_ONSALE)]
-------
Text=cgc_do_onsale()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_do_onsale()]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcmp
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_NOSALE
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(void*)CMD_NOSALE]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cmd
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [cmd]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(CMD_NOSALE)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(CMD_NOSALE)]
-------
Text=cgc_do_nosale()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_do_nosale()]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_LIST,cmd,sizeof(CMD_LIST))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_memcmp]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [(void*)CMD_LIST,cmd,sizeof(CMD_LIST)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=cgc_do_list()
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cgc_do_list()]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))]
-------
Text=-2
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [-2]
-------
Text=-1
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [-1]
-------
Text=p->barcode
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->barcode]
-------
Text=&inv
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [&inv]
-------
Text=(void*)bc
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(void*)bc]
-------
Text=&buy_list
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&buy_list]
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(buy_status)]
-------
Text=(void*)BUY_MORE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [void*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [BUY_MORE]
-------
Text=sizeof(BUY_MORE)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(BUY_MORE)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [&buy_list]
-------
Text=1
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(Product)]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(Product)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [&buy_list]
-------
Text=p_copy->model_num
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [p_copy->model_num]
-------
Text=p_copy->cost
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [p_copy->cost]
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(buy_status)]
-------
Text=(void*)BUY_TERM
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [void*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [BUY_TERM]
-------
Text=sizeof(BUY_TERM)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(BUY_TERM)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [&buy_list]
-------
Text=(char*)&cost
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [char*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [&cost]
-------
Text=sizeof(cost)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(cost)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&buy_list]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [char*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(unsignedint)]
-------
Text=p->model_num
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [p->cost]
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [char*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(float)]
-------
Text=p->desc
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\0']
-------
Text=p->desc
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [p->desc]
-------
Text=1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(Product)]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [char*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [p->barcode]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(char*)p->barcode]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [char*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(unsignedint)]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [char*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(float)]
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [DESC_TERM[0]]
-------
Text=(char*)p->desc
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(char*)p->desc]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(Product)]
-------
Text=&inv
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [&inv]
-------
Text=(void*)bc
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(void*)bc]
-------
Text=&inv
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&inv]
-------
Text=&np
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&np]
-------
Text=(char*)bc
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [char*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [bc]
-------
Text=(char*)bc
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(char*)bc]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [char*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(unsignedint)]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [char*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(float)]
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [DESC_TERM[0]]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(Product)]
-------
Text=p->desc
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->desc]
-------
Text=(char*)&sale_percent
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [char*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [&sale_percent]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(unsignedint)]
-------
Text=sale_percent
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sale_percent]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=&inv
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [&inv]
-------
Text=sizeof(options)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(options)]
-------
Text=NULL
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [NULL]
-------
Text=cur
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cur]
-------
Text=cur
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cur]
-------
Text=end
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [end]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(char*)p->barcode]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=STDOUT
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDOUT]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(unsignedint)]
-------
Text=1
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [1]
-------
Text=STDOUT
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDOUT]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(float)]
-------
Text=2
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [2]
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->model_num
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p->model_num]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->cost
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p->cost]
-------
Text=STDOUT
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDOUT]
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(char*)&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(float)]
-------
Text=3
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [3]
-------
Text=cgc_strlen
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->desc
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p->desc]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\0'
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> ['\0']
-------
Text=SEND
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [SEND]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT,p->desc,d_len
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [STDOUT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [p->desc]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [d_len]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDOUT]
-------
Text=DESC_TERM
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [DESC_TERM]
-------
Text=1
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [1]
-------
Text=&inv
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&inv]
-------
Text=sizeof(cmd)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(cmd)]
-------
Text=(void*)CMD_BUY
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [void*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [CMD_BUY]
-------
Text=sizeof(CMD_BUY)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(CMD_BUY)]
-------
Text=(void*)CMD_CHECK
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(void*)CMD_CHECK]
-------
Text=sizeof(CMD_CHECK)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(CMD_CHECK)]
-------
Text=(void*)CMD_ADD
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(void*)CMD_ADD]
-------
Text=sizeof(CMD_ADD)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(CMD_ADD)]
-------
Text=(void*)CMD_RM
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(void*)CMD_RM]
-------
Text=sizeof(CMD_RM)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(CMD_RM)]
-------
Text=cgc_do_rm
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_UPDATE
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(void*)CMD_UPDATE]
-------
Text=sizeof(CMD_UPDATE)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(CMD_UPDATE)]
-------
Text=cgc_do_update()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_do_update]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(void*)CMD_ONSALE
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(void*)CMD_ONSALE]
-------
Text=cmd
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cmd]
-------
Text=sizeof(CMD_ONSALE)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(CMD_ONSALE)]
-------
Text=cgc_do_onsale()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_do_onsale()]
-------
Text=(void*)CMD_NOSALE
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(void*)CMD_NOSALE]
-------
Text=cmd
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [cmd]
-------
Text=sizeof(CMD_NOSALE)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(CMD_NOSALE)]
-------
Text=cgc_do_nosale()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_do_nosale()]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=cgc_memcmp
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_memcmp]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_LIST,cmd,sizeof(CMD_LIST)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [(void*)CMD_LIST]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [cmd]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(CMD_LIST)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_do_list()
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cgc_do_list()]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))]
-------
Text=-2
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [-2]
-------
Text=-1
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [-1]
-------
Text=p->barcode
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->barcode]
-------
Text=&inv
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&inv]
-------
Text=(void*)bc
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [void*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [bc]
-------
Text=&buy_list
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [buy_list]
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(buy_status)]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [void*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BUY_MORE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [BUY_MORE]
-------
Text=sizeof(BUY_MORE)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(BUY_MORE)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [&buy_list]
-------
Text=1
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(Product)]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(Product)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [&buy_list]
-------
Text=p_copy->model_num
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [p_copy->model_num]
-------
Text=p_copy->cost
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [p_copy->cost]
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(buy_status)]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [void*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BUY_TERM
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [BUY_TERM]
-------
Text=sizeof(BUY_TERM)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(BUY_TERM)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [&buy_list]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [char*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&cost
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&cost]
-------
Text=sizeof(cost)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(cost)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [buy_list]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [char*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&p->model_num
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.TypeNameContext'> [unsignedint]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=p->model_num
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->cost]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [char*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&sale_price
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.TypeNameContext'> [float]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=p->desc
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\0']
-------
Text=p->desc
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [p->desc]
-------
Text=1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(Product)]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [char*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->barcode
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->barcode]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [char*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [p->barcode]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [char*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&p->model_num
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.TypeNameContext'> [unsignedint]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [char*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&p->cost
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.TypeNameContext'> [float]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [DESC_TERM[0]]
-------
Text=(char*)p->desc
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [char*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [p->desc]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(Product)]
-------
Text=&inv
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [inv]
-------
Text=&inv
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&inv]
-------
Text=(void*)bc
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [void*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [bc]
-------
Text=&inv
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [inv]
-------
Text=&inv
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [inv]
-------
Text=&np
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [np]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [char*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [bc]
-------
Text=(char*)bc
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [char*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [bc]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [char*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&p->model_num
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.TypeNameContext'> [unsignedint]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [char*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&p->cost
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.TypeNameContext'> [float]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [DESC_TERM[0]]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(Product)]
-------
Text=p->desc
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->desc]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [char*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&sale_percent
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&sale_percent]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.TypeNameContext'> [unsignedint]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=sale_percent
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [sale_percent]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=&inv
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&inv]
-------
Text=&inv
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&inv]
-------
Text=sizeof(options)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(options)]
-------
Text=NULL
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [NULL]
-------
Text=cur
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cur]
-------
Text=cur
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cur]
-------
Text=end
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [end]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(char*)p->barcode]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDOUT]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(unsignedint)]
-------
Text=1
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [1]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDOUT]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(float)]
-------
Text=2
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [2]
-------
Text=p->model_num
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [p->cost]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDOUT]
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(char*)&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(float)]
-------
Text=3
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [3]
-------
Text=p->desc
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> ['\0']
-------
Text=SEND
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=STDOUT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [STDOUT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->desc
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [p->desc]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=d_len
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [d_len]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDOUT]
-------
Text=DESC_TERM
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [DESC_TERM]
-------
Text=1
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [1]
-------
Text=&inv
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [inv]
-------
Text=&inv
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [inv]
-------
Text=sizeof(cmd)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(cmd)]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [void*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_BUY
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [CMD_BUY]
-------
Text=sizeof(CMD_BUY)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(CMD_BUY)]
-------
Text=(void*)CMD_CHECK
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(void*)CMD_CHECK]
-------
Text=sizeof(CMD_CHECK)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(CMD_CHECK)]
-------
Text=(void*)CMD_ADD
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(void*)CMD_ADD]
-------
Text=sizeof(CMD_ADD)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(CMD_ADD)]
-------
Text=(void*)CMD_RM
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(void*)CMD_RM]
-------
Text=sizeof(CMD_RM)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(CMD_RM)]
-------
Text=(void*)CMD_UPDATE
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(void*)CMD_UPDATE]
-------
Text=sizeof(CMD_UPDATE)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(CMD_UPDATE)]
-------
Text=cgc_do_update
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_do_update]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_ONSALE
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(void*)CMD_ONSALE]
-------
Text=cmd
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(CMD_ONSALE)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(CMD_ONSALE)]
-------
Text=cgc_do_onsale()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_do_onsale()]
-------
Text=(void*)CMD_NOSALE
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(void*)CMD_NOSALE]
-------
Text=cmd
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [cmd]
-------
Text=sizeof(CMD_NOSALE)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(CMD_NOSALE)]
-------
Text=cgc_do_nosale()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_do_nosale()]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcmp
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_LIST
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(void*)CMD_LIST]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cmd
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [cmd]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(CMD_LIST)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(CMD_LIST)]
-------
Text=cgc_do_list()
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cgc_do_list()]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=cgc_memcmp((void*)CMD_QUIT,cmd,sizeof(CMD_QUIT))
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_memcmp]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.ArgumentExpressionListContext'> [(void*)CMD_QUIT,cmd,sizeof(CMD_QUIT)]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=-2
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [-2]
-------
Text=-1
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [-1]
-------
Text=p->barcode
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [barcode]
-------
Text=&inv
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [inv]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [void*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [bc]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=buy_list
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [buy_list]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(buy_status)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(buy_status)]
-------
Text=void*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void*]
-------
Text=BUY_MORE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [BUY_MORE]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(BUY_MORE)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(BUY_MORE)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [&buy_list]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(Product)]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(Product)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [&buy_list]
-------
Text=p_copy->model_num
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [p_copy->model_num]
-------
Text=p_copy->cost
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [p_copy->cost]
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(buy_status)]
-------
Text=void*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void*]
-------
Text=BUY_TERM
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [BUY_TERM]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(BUY_TERM)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(BUY_TERM)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [&buy_list]
-------
Text=char*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=&cost
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [cost]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(cost)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(cost)]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=buy_list
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [buy_list]
-------
Text=char*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=&p->model_num
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [p->model_num]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsignedint
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [unsignedint]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->model_num
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->cost]
-------
Text=char*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=&sale_price
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [sale_price]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=float
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [float]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->desc
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\0']
-------
Text=p->desc
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->desc]
-------
Text=1
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(Product)]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=char*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=p->barcode
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->barcode]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [char*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->barcode
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->barcode]
-------
Text=char*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=&p->model_num
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [p->model_num]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsignedint
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [unsignedint]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=&p->cost
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [p->cost]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=float
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [float]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [DESC_TERM[0]]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [char*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->desc
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->desc]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(Product)]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=inv
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [inv]
-------
Text=&inv
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [inv]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [void*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [bc]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=inv
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [inv]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=inv
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [inv]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=np
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [np]
-------
Text=char*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=bc
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [bc]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [char*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [bc]
-------
Text=char*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=&p->model_num
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [p->model_num]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsignedint
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [unsignedint]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=&p->cost
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [p->cost]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=float
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [float]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [DESC_TERM[0]]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(Product)]
-------
Text=p->desc
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [desc]
-------
Text=char*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=&sale_percent
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [sale_percent]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsignedint
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [unsignedint]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sale_percent
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [sale_percent]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=&inv
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [inv]
-------
Text=&inv
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [inv]
-------
Text=&inv
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [inv]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(options)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(options)]
-------
Text=NULL
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [NULL]
-------
Text=cur
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cur]
-------
Text=cur
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cur]
-------
Text=end
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [end]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(char*)p->barcode]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDOUT]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(unsignedint)]
-------
Text=1
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [1]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDOUT]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(float)]
-------
Text=2
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [2]
-------
Text=p->model_num
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [p->cost]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDOUT]
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(char*)&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(float)]
-------
Text=3
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [3]
-------
Text=p->desc
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> ['\0']
-------
Text=STDOUT
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [STDOUT]
-------
Text=p->desc
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [p->desc]
-------
Text=d_len
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [d_len]
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDOUT]
-------
Text=DESC_TERM
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [DESC_TERM]
-------
Text=1
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [1]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=inv
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [inv]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=inv
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [inv]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(cmd)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(cmd)]
-------
Text=void*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void*]
-------
Text=CMD_BUY
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [CMD_BUY]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(CMD_BUY)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(CMD_BUY)]
-------
Text=(void*)CMD_CHECK
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [void*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [CMD_CHECK]
-------
Text=sizeof(CMD_CHECK)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(CMD_CHECK)]
-------
Text=(void*)CMD_ADD
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(void*)CMD_ADD]
-------
Text=sizeof(CMD_ADD)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(CMD_ADD)]
-------
Text=(void*)CMD_RM
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(void*)CMD_RM]
-------
Text=sizeof(CMD_RM)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(CMD_RM)]
-------
Text=(void*)CMD_UPDATE
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(void*)CMD_UPDATE]
-------
Text=sizeof(CMD_UPDATE)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(CMD_UPDATE)]
-------
Text=cgc_do_update
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_ONSALE
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(void*)CMD_ONSALE]
-------
Text=sizeof(CMD_ONSALE)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(CMD_ONSALE)]
-------
Text=cgc_do_onsale()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_do_onsale]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(void*)CMD_NOSALE
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(void*)CMD_NOSALE]
-------
Text=cmd
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cmd]
-------
Text=sizeof(CMD_NOSALE)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(CMD_NOSALE)]
-------
Text=cgc_do_nosale()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_do_nosale()]
-------
Text=(void*)CMD_LIST
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(void*)CMD_LIST]
-------
Text=cmd
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [cmd]
-------
Text=sizeof(CMD_LIST)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(CMD_LIST)]
-------
Text=cgc_do_list()
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cgc_do_list()]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=cgc_memcmp
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_memcmp]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_QUIT,cmd,sizeof(CMD_QUIT)
Type=<class 'CParser.CParser.ArgumentExpressionListContext'>
Child Count = 5
0 : <class 'CParser.CParser.PassignmentExpressionContext'> [(void*)CMD_QUIT]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
2 : <class 'CParser.CParser.PassignmentExpressionContext'> [cmd]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [,]
4 : <class 'CParser.CParser.PassignmentExpressionContext'> [sizeof(CMD_QUIT)]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=-2
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [-2]
-------
Text=-1
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [-1]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=barcode
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=inv
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [inv]
-------
Text=void*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void*]
-------
Text=bc
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [bc]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_list
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [buy_list]
-------
Text=(buy_status)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [buy_status]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=void*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=BUY_MORE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [BUY_MORE]
-------
Text=(BUY_MORE)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [BUY_MORE]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [&buy_list]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(Product)]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(Product)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [&buy_list]
-------
Text=p_copy->model_num
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [p_copy->model_num]
-------
Text=p_copy->cost
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [p_copy->cost]
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(buy_status)]
-------
Text=void*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=BUY_TERM
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [BUY_TERM]
-------
Text=(BUY_TERM)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [BUY_TERM]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [&buy_list]
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=cost
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cost]
-------
Text=(cost)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [cost]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_list
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [buy_list]
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=p->model_num
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->model_num]
-------
Text=unsignedint
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [unsignedint]
-------
Text=p->model_num
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cost]
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=sale_price
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sale_price]
-------
Text=float
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [float]
-------
Text=p->desc
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [desc]
-------
Text='\0'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\0']
-------
Text=p->desc
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->desc]
-------
Text=1
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(Product)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(Product)]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=p->barcode
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [barcode]
-------
Text=char*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=p->barcode
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->barcode]
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=p->model_num
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->model_num]
-------
Text=unsignedint
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [unsignedint]
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=p->cost
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->cost]
-------
Text=float
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [float]
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [DESC_TERM]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.ExpressionContext'> [0]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text=char*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=p->desc
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->desc]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(Product)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(Product)]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=inv
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [inv]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=inv
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [inv]
-------
Text=void*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void*]
-------
Text=bc
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [bc]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=inv
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [inv]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=inv
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [inv]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=np
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [np]
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=bc
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [bc]
-------
Text=char*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=bc
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [bc]
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=p->model_num
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->model_num]
-------
Text=unsignedint
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [unsignedint]
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=p->cost
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->cost]
-------
Text=float
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [float]
-------
Text=DESC_TERM[0]
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 4
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [DESC_TERM]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [[]
2 : <class 'CParser.CParser.ExpressionContext'> [0]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> []]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(Product)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(Product)]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=desc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=sale_percent
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sale_percent]
-------
Text=unsignedint
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [unsignedint]
-------
Text=sale_percent
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sale_percent]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=inv
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [inv]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=inv
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [inv]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=inv
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [inv]
-------
Text=(options)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [options]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=NULL
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [NULL]
-------
Text=cur
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cur]
-------
Text=cur
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cur]
-------
Text=end
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [end]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(char*)p->barcode]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=STDOUT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(unsignedint)]
-------
Text=1
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [1]
-------
Text=STDOUT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(float)]
-------
Text=2
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [2]
-------
Text=p->model_num
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [p->cost]
-------
Text=STDOUT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(char*)&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(float)]
-------
Text=3
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [3]
-------
Text=p->desc
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> ['\0']
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [STDOUT]
-------
Text=p->desc
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [p->desc]
-------
Text=d_len
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [d_len]
-------
Text=STDOUT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=DESC_TERM
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [1]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=inv
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [inv]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=inv
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [inv]
-------
Text=(cmd)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [cmd]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=void*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=CMD_BUY
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [CMD_BUY]
-------
Text=(CMD_BUY)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [CMD_BUY]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [void*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_CHECK
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [CMD_CHECK]
-------
Text=sizeof(CMD_CHECK)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(CMD_CHECK)]
-------
Text=(void*)CMD_ADD
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(void*)CMD_ADD]
-------
Text=sizeof(CMD_ADD)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(CMD_ADD)]
-------
Text=(void*)CMD_RM
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(void*)CMD_RM]
-------
Text=sizeof(CMD_RM)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(CMD_RM)]
-------
Text=(void*)CMD_UPDATE
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(void*)CMD_UPDATE]
-------
Text=sizeof(CMD_UPDATE)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(CMD_UPDATE)]
-------
Text=(void*)CMD_ONSALE
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(void*)CMD_ONSALE]
-------
Text=sizeof(CMD_ONSALE)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(CMD_ONSALE)]
-------
Text=cgc_do_onsale
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_do_onsale]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_NOSALE
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(void*)CMD_NOSALE]
-------
Text=cmd
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(CMD_NOSALE)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(CMD_NOSALE)]
-------
Text=cgc_do_nosale()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_do_nosale()]
-------
Text=(void*)CMD_LIST
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(void*)CMD_LIST]
-------
Text=cmd
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [cmd]
-------
Text=sizeof(CMD_LIST)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(CMD_LIST)]
-------
Text=cgc_do_list()
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cgc_do_list()]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cgc_memcmp
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_QUIT
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [(void*)CMD_QUIT]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cmd
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [cmd]
-------
Text=,
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(CMD_QUIT)
Type=<class 'CParser.CParser.PassignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [sizeof(CMD_QUIT)]
-------
Text=-2
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [-2]
-------
Text=-1
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [-1]
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=inv
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [inv]
-------
Text=void*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=bc
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [bc]
-------
Text=buy_list
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [buy_list]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_status
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [buy_status]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=BUY_MORE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [BUY_MORE]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BUY_MORE
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [BUY_MORE]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&buy_list
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [&buy_list]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(Product)]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(Product)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [&buy_list]
-------
Text=p_copy->model_num
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [p_copy->model_num]
-------
Text=p_copy->cost
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [p_copy->cost]
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(buy_status)]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=BUY_TERM
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [BUY_TERM]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BUY_TERM
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [BUY_TERM]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&buy_list
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [&buy_list]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cost
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cost]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cost
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cost]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_list
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [buy_list]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->model_num
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->model_num]
-------
Text=unsignedint
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [unsigned]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=model_num
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cost
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sale_price
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [sale_price]
-------
Text=float
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [float]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=desc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\0'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\0']
-------
Text=p->desc
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [desc]
-------
Text=1
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(Product)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [Product]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=barcode
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=p->barcode
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [barcode]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->model_num
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->model_num]
-------
Text=unsignedint
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [unsigned]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->cost
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->cost]
-------
Text=float
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [float]
-------
Text=DESC_TERM
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [DESC_TERM]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=p->desc
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [desc]
-------
Text=(Product)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [Product]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=inv
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [inv]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=inv
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [inv]
-------
Text=void*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=bc
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [bc]
-------
Text=inv
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [inv]
-------
Text=inv
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [inv]
-------
Text=np
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [np]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=bc
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bc]
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=bc
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [bc]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->model_num
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->model_num]
-------
Text=unsignedint
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [unsigned]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->cost
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->cost]
-------
Text=float
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [float]
-------
Text=DESC_TERM
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [DESC_TERM]
-------
Text=[
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [0]
-------
Text=]
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(Product)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [Product]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sale_percent
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [sale_percent]
-------
Text=unsignedint
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [unsigned]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=sale_percent
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=inv
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [inv]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=inv
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [inv]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=inv
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [inv]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=options
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [options]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=NULL
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cur
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cur
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=end
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(char*)p->barcode]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(unsignedint)]
-------
Text=1
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [1]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(float)]
-------
Text=2
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [2]
-------
Text=p->model_num
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [p->cost]
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(char*)&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(float)]
-------
Text=3
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [3]
-------
Text=p->desc
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> ['\0']
-------
Text=STDOUT
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [STDOUT]
-------
Text=p->desc
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [p->desc]
-------
Text=d_len
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [d_len]
-------
Text=1
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [1]
-------
Text=inv
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [inv]
-------
Text=inv
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [inv]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cmd
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [cmd]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=CMD_BUY
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_BUY]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_BUY
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [CMD_BUY]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void*]
-------
Text=CMD_CHECK
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [CMD_CHECK]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(CMD_CHECK)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(CMD_CHECK)]
-------
Text=(void*)CMD_ADD
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [void*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [CMD_ADD]
-------
Text=sizeof(CMD_ADD)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(CMD_ADD)]
-------
Text=(void*)CMD_RM
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(void*)CMD_RM]
-------
Text=sizeof(CMD_RM)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(CMD_RM)]
-------
Text=(void*)CMD_UPDATE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(void*)CMD_UPDATE]
-------
Text=sizeof(CMD_UPDATE)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(CMD_UPDATE)]
-------
Text=(void*)CMD_ONSALE
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(void*)CMD_ONSALE]
-------
Text=sizeof(CMD_ONSALE)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(CMD_ONSALE)]
-------
Text=cgc_do_onsale
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_NOSALE
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(void*)CMD_NOSALE]
-------
Text=sizeof(CMD_NOSALE)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(CMD_NOSALE)]
-------
Text=cgc_do_nosale()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_do_nosale]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(void*)CMD_LIST
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(void*)CMD_LIST]
-------
Text=cmd
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cmd]
-------
Text=sizeof(CMD_LIST)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(CMD_LIST)]
-------
Text=cgc_do_list()
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cgc_do_list()]
-------
Text=(void*)CMD_QUIT
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [(void*)CMD_QUIT]
-------
Text=cmd
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [cmd]
-------
Text=sizeof(CMD_QUIT)
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [sizeof(CMD_QUIT)]
-------
Text=-2
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [-2]
-------
Text=-1
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [-1]
-------
Text=inv
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [inv]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=bc
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bc]
-------
Text=buy_list
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [buy_list]
-------
Text=buy_status
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [buy_status]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BUY_MORE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BUY_MORE
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [BUY_MORE]
-------
Text=&buy_list
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [&buy_list]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(Product)]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(Product)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [&buy_list]
-------
Text=p_copy->model_num
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [p_copy->model_num]
-------
Text=p_copy->cost
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [p_copy->cost]
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(buy_status)]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BUY_TERM
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BUY_TERM
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [BUY_TERM]
-------
Text=&buy_list
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [&buy_list]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cost
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cost]
-------
Text=cost
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cost]
-------
Text=buy_list
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [buy_list]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->model_num
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [model_num]
-------
Text=unsigned
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sale_price
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [sale_price]
-------
Text=float
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\0'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=desc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [Product]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=barcode
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->model_num
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [model_num]
-------
Text=unsigned
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->cost
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cost]
-------
Text=float
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=DESC_TERM
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=desc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [Product]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=inv
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [inv]
-------
Text=inv
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [inv]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=bc
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bc]
-------
Text=inv
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [inv]
-------
Text=inv
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [inv]
-------
Text=np
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [np]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=bc
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [bc]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->model_num
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [model_num]
-------
Text=unsigned
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->cost
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cost]
-------
Text=float
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=DESC_TERM
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [0]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [Product]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sale_percent
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [sale_percent]
-------
Text=unsigned
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=inv
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [inv]
-------
Text=inv
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [inv]
-------
Text=inv
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [inv]
-------
Text=options
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [options]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(char*)p->barcode]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(unsignedint)]
-------
Text=1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(float)]
-------
Text=2
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [2]
-------
Text=p->model_num
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [p->cost]
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(char*)&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(float)]
-------
Text=3
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [3]
-------
Text=p->desc
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> ['\0']
-------
Text=STDOUT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->desc
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [p->desc]
-------
Text=d_len
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [1]
-------
Text=inv
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [inv]
-------
Text=inv
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [inv]
-------
Text=cmd
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [cmd]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_BUY
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_BUY
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [CMD_BUY]
-------
Text=void*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=CMD_CHECK
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [CMD_CHECK]
-------
Text=(CMD_CHECK)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [CMD_CHECK]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [void*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_ADD
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [CMD_ADD]
-------
Text=sizeof(CMD_ADD)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(CMD_ADD)]
-------
Text=(void*)CMD_RM
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(void*)CMD_RM]
-------
Text=sizeof(CMD_RM)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(CMD_RM)]
-------
Text=(void*)CMD_UPDATE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(void*)CMD_UPDATE]
-------
Text=sizeof(CMD_UPDATE)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(CMD_UPDATE)]
-------
Text=(void*)CMD_ONSALE
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(void*)CMD_ONSALE]
-------
Text=sizeof(CMD_ONSALE)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(CMD_ONSALE)]
-------
Text=(void*)CMD_NOSALE
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(void*)CMD_NOSALE]
-------
Text=sizeof(CMD_NOSALE)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(CMD_NOSALE)]
-------
Text=cgc_do_nosale
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_do_nosale]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_LIST
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(void*)CMD_LIST]
-------
Text=cmd
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(CMD_LIST)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(CMD_LIST)]
-------
Text=cgc_do_list()
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cgc_do_list()]
-------
Text=(void*)CMD_QUIT
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [(void*)CMD_QUIT]
-------
Text=cmd
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypedefNameContext'> [cmd]
-------
Text=sizeof(CMD_QUIT)
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [sizeof(CMD_QUIT)]
-------
Text=-2
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [-2]
-------
Text=-1
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [-1]
-------
Text=inv
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [inv]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_list
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_status
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [buy_status]
-------
Text=BUY_MORE
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [BUY_MORE]
-------
Text=&buy_list
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [&buy_list]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(Product)]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(Product)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&buy_list]
-------
Text=p_copy->model_num
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [p_copy->model_num]
-------
Text=p_copy->cost
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [p_copy->cost]
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(buy_status)]
-------
Text=BUY_TERM
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [BUY_TERM]
-------
Text=&buy_list
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&buy_list]
-------
Text=cost
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cost]
-------
Text=cost
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cost]
-------
Text=buy_list
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=model_num
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sale_price
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sale_price]
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [Product]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=model_num
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cost
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [Product]
-------
Text=inv
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=inv
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [inv]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=inv
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=inv
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=np
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=bc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=model_num
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cost
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [Product]
-------
Text=sale_percent
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sale_percent]
-------
Text=inv
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [inv]
-------
Text=inv
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [inv]
-------
Text=inv
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [inv]
-------
Text=options
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [options]
-------
Text=(char*)p->barcode
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [char*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [p->barcode]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(unsignedint)]
-------
Text=1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(float)]
-------
Text=2
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [2]
-------
Text=p->model_num
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [p->cost]
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(char*)&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(float)]
-------
Text=3
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [3]
-------
Text=p->desc
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> ['\0']
-------
Text=p->desc
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [p->desc]
-------
Text=1
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [1]
-------
Text=inv
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=inv
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cmd
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [cmd]
-------
Text=CMD_BUY
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [CMD_BUY]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=CMD_CHECK
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_CHECK]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_CHECK
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [CMD_CHECK]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void*]
-------
Text=CMD_ADD
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [CMD_ADD]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(CMD_ADD)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(CMD_ADD)]
-------
Text=(void*)CMD_RM
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [void*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [CMD_RM]
-------
Text=sizeof(CMD_RM)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(CMD_RM)]
-------
Text=(void*)CMD_UPDATE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(void*)CMD_UPDATE]
-------
Text=sizeof(CMD_UPDATE)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(CMD_UPDATE)]
-------
Text=(void*)CMD_ONSALE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(void*)CMD_ONSALE]
-------
Text=sizeof(CMD_ONSALE)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(CMD_ONSALE)]
-------
Text=(void*)CMD_NOSALE
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(void*)CMD_NOSALE]
-------
Text=sizeof(CMD_NOSALE)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(CMD_NOSALE)]
-------
Text=cgc_do_nosale
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_LIST
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(void*)CMD_LIST]
-------
Text=sizeof(CMD_LIST)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(CMD_LIST)]
-------
Text=cgc_do_list()
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cgc_do_list]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(void*)CMD_QUIT
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [(void*)CMD_QUIT]
-------
Text=cmd
Type=<class 'CParser.CParser.TypedefNameContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cmd]
-------
Text=sizeof(CMD_QUIT)
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [sizeof(CMD_QUIT)]
-------
Text=-2
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [-2]
-------
Text=-1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [-1]
-------
Text=inv
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_status
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [buy_status]
-------
Text=BUY_MORE
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [BUY_MORE]
-------
Text=&buy_list
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [&buy_list]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(Product)]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(Product)]
-------
Text=&buy_list
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [buy_list]
-------
Text=p_copy->model_num
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p_copy->model_num]
-------
Text=p_copy->cost
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p_copy->cost]
-------
Text=sizeof(buy_status)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(buy_status)]
-------
Text=BUY_TERM
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [BUY_TERM]
-------
Text=&buy_list
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [buy_list]
-------
Text=cost
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cost
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cost]
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sale_price
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [Product]
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [Product]
-------
Text=inv
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=0
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [Product]
-------
Text=sale_percent
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=inv
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=inv
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=inv
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=options
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [options]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [char*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->barcode
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->barcode]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(unsignedint)]
-------
Text=1
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(float)]
-------
Text=2
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [2]
-------
Text=p->model_num
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [p->cost]
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(char*)&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(float)]
-------
Text=3
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [3]
-------
Text=p->desc
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> ['\0']
-------
Text=p->desc
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [p->desc]
-------
Text=1
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [1]
-------
Text=cmd
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [cmd]
-------
Text=CMD_BUY
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [CMD_BUY]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_CHECK
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_CHECK
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [CMD_CHECK]
-------
Text=void*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=CMD_ADD
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [CMD_ADD]
-------
Text=(CMD_ADD)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [CMD_ADD]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [void*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_RM
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [CMD_RM]
-------
Text=sizeof(CMD_RM)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(CMD_RM)]
-------
Text=(void*)CMD_UPDATE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(void*)CMD_UPDATE]
-------
Text=sizeof(CMD_UPDATE)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(CMD_UPDATE)]
-------
Text=(void*)CMD_ONSALE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(void*)CMD_ONSALE]
-------
Text=sizeof(CMD_ONSALE)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(CMD_ONSALE)]
-------
Text=(void*)CMD_NOSALE
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(void*)CMD_NOSALE]
-------
Text=sizeof(CMD_NOSALE)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(CMD_NOSALE)]
-------
Text=(void*)CMD_LIST
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(void*)CMD_LIST]
-------
Text=sizeof(CMD_LIST)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(CMD_LIST)]
-------
Text=cgc_do_list
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cgc_do_list]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_QUIT
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [(void*)CMD_QUIT]
-------
Text=cmd
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sizeof(CMD_QUIT)
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [sizeof(CMD_QUIT)]
-------
Text=-2
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [-]
1 : <class 'CParser.CParser.CastExpressionContext'> [2]
-------
Text=-1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [-]
1 : <class 'CParser.CParser.CastExpressionContext'> [1]
-------
Text=buy_status
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [buy_status]
-------
Text=BUY_MORE
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [BUY_MORE]
-------
Text=&buy_list
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [&buy_list]
-------
Text=sizeof(Product)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(Product)]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(Product)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(Product)]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=buy_list
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [buy_list]
-------
Text=p_copy->model_num
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p_copy->model_num]
-------
Text=p_copy->cost
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p_copy->cost]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(buy_status)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(buy_status)]
-------
Text=BUY_TERM
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [BUY_TERM]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=buy_list
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [buy_list]
-------
Text=cost
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cost]
-------
Text=Product
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [Product]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [Product]
-------
Text=0
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [Product]
-------
Text=options
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [options]
-------
Text=char*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=p->barcode
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->barcode]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(unsignedint)]
-------
Text=1
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(float)]
-------
Text=2
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [2]
-------
Text=p->model_num
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [p->cost]
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(char*)&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(float)]
-------
Text=3
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [3]
-------
Text=p->desc
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> ['\0']
-------
Text=p->desc
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [p->desc]
-------
Text=1
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [1]
-------
Text=cmd
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [cmd]
-------
Text=CMD_BUY
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [CMD_BUY]
-------
Text=CMD_CHECK
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [CMD_CHECK]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=CMD_ADD
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_ADD]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_ADD
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [CMD_ADD]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void*]
-------
Text=CMD_RM
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [CMD_RM]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(CMD_RM)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(CMD_RM)]
-------
Text=(void*)CMD_UPDATE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [void*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [CMD_UPDATE]
-------
Text=sizeof(CMD_UPDATE)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(CMD_UPDATE)]
-------
Text=(void*)CMD_ONSALE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(void*)CMD_ONSALE]
-------
Text=sizeof(CMD_ONSALE)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(CMD_ONSALE)]
-------
Text=(void*)CMD_NOSALE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(void*)CMD_NOSALE]
-------
Text=sizeof(CMD_NOSALE)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(CMD_NOSALE)]
-------
Text=(void*)CMD_LIST
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(void*)CMD_LIST]
-------
Text=sizeof(CMD_LIST)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(CMD_LIST)]
-------
Text=cgc_do_list
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(void*)CMD_QUIT
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [(void*)CMD_QUIT]
-------
Text=sizeof(CMD_QUIT)
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [sizeof(CMD_QUIT)]
-------
Text=-
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [-]
-------
Text=2
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [2]
-------
Text=-
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [-]
-------
Text=1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1]
-------
Text=buy_status
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [buy_status]
-------
Text=BUY_MORE
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [BUY_MORE]
-------
Text=&buy_list
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [&buy_list]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(Product)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(Product)]
-------
Text=(Product)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [Product]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_list
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [buy_list]
-------
Text=p_copy->model_num
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p_copy]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [model_num]
-------
Text=p_copy->cost
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p_copy]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cost]
-------
Text=(buy_status)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [buy_status]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=BUY_TERM
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [BUY_TERM]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_list
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [buy_list]
-------
Text=cost
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cost]
-------
Text=Product
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [Product]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [Product]
-------
Text=0
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [Product]
-------
Text=options
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [options]
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=p->barcode
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [barcode]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(unsignedint)]
-------
Text=1
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(float)]
-------
Text=2
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->model_num
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [p->cost]
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(char*)&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(float)]
-------
Text=3
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->desc
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> ['\0']
-------
Text=p->desc
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [p->desc]
-------
Text=1
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [1]
-------
Text=cmd
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [cmd]
-------
Text=CMD_BUY
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [CMD_BUY]
-------
Text=CMD_CHECK
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [CMD_CHECK]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_ADD
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_ADD
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [CMD_ADD]
-------
Text=void*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=CMD_RM
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [CMD_RM]
-------
Text=(CMD_RM)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [CMD_RM]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [void*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_UPDATE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [CMD_UPDATE]
-------
Text=sizeof(CMD_UPDATE)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(CMD_UPDATE)]
-------
Text=(void*)CMD_ONSALE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(void*)CMD_ONSALE]
-------
Text=sizeof(CMD_ONSALE)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(CMD_ONSALE)]
-------
Text=(void*)CMD_NOSALE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(void*)CMD_NOSALE]
-------
Text=sizeof(CMD_NOSALE)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(CMD_NOSALE)]
-------
Text=(void*)CMD_LIST
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(void*)CMD_LIST]
-------
Text=sizeof(CMD_LIST)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(CMD_LIST)]
-------
Text=(void*)CMD_QUIT
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [(void*)CMD_QUIT]
-------
Text=sizeof(CMD_QUIT)
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [sizeof(CMD_QUIT)]
-------
Text=-
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=2
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [2]
-------
Text=-
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1]
-------
Text=buy_status
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [buy_status]
-------
Text=BUY_MORE
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [BUY_MORE]
-------
Text=&buy_list
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [&buy_list]
-------
Text=(Product)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [Product]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [Product]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_list
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [buy_list]
-------
Text=p_copy
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p_copy]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=model_num
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p_copy
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p_copy]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cost
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_status
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [buy_status]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BUY_TERM
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [BUY_TERM]
-------
Text=buy_list
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [buy_list]
-------
Text=cost
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cost]
-------
Text=Product
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [Product]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [Product]
-------
Text=0
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [Product]
-------
Text=options
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [options]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=barcode
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(unsignedint)]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(float)]
-------
Text=p->model_num
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [p->cost]
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(char*)&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(float)]
-------
Text=p->desc
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> ['\0']
-------
Text=p->desc
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [p->desc]
-------
Text=1
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [1]
-------
Text=cmd
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [cmd]
-------
Text=CMD_BUY
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [CMD_BUY]
-------
Text=CMD_CHECK
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [CMD_CHECK]
-------
Text=CMD_ADD
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [CMD_ADD]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=CMD_RM
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_RM]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_RM
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [CMD_RM]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void*]
-------
Text=CMD_UPDATE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [CMD_UPDATE]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(CMD_UPDATE)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(CMD_UPDATE)]
-------
Text=(void*)CMD_ONSALE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [void*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [CMD_ONSALE]
-------
Text=sizeof(CMD_ONSALE)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(CMD_ONSALE)]
-------
Text=(void*)CMD_NOSALE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(void*)CMD_NOSALE]
-------
Text=sizeof(CMD_NOSALE)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(CMD_NOSALE)]
-------
Text=(void*)CMD_LIST
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(void*)CMD_LIST]
-------
Text=sizeof(CMD_LIST)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(CMD_LIST)]
-------
Text=(void*)CMD_QUIT
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [(void*)CMD_QUIT]
-------
Text=sizeof(CMD_QUIT)
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [sizeof(CMD_QUIT)]
-------
Text=2
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [2]
-------
Text=1
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1]
-------
Text=buy_status
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [buy_status]
-------
Text=BUY_MORE
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [BUY_MORE]
-------
Text=&buy_list
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [&buy_list]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [Product]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [Product]
-------
Text=buy_list
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [buy_list]
-------
Text=p_copy
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p_copy
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_status
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [buy_status]
-------
Text=BUY_TERM
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [BUY_TERM]
-------
Text=buy_list
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [buy_list]
-------
Text=cost
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cost]
-------
Text=Product
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [Product]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [Product]
-------
Text=0
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [Product]
-------
Text=options
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [options]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(char*)&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(unsignedint)]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(char*)&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(float)]
-------
Text=p->model_num
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [p->cost]
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(char*)&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(float)]
-------
Text=p->desc
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> ['\0']
-------
Text=p->desc
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [p->desc]
-------
Text=1
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [1]
-------
Text=cmd
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [cmd]
-------
Text=CMD_BUY
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [CMD_BUY]
-------
Text=CMD_CHECK
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [CMD_CHECK]
-------
Text=CMD_ADD
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [CMD_ADD]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_RM
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_RM
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [CMD_RM]
-------
Text=void*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=CMD_UPDATE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [CMD_UPDATE]
-------
Text=(CMD_UPDATE)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [CMD_UPDATE]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [void*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_ONSALE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [CMD_ONSALE]
-------
Text=sizeof(CMD_ONSALE)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(CMD_ONSALE)]
-------
Text=(void*)CMD_NOSALE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(void*)CMD_NOSALE]
-------
Text=sizeof(CMD_NOSALE)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(CMD_NOSALE)]
-------
Text=(void*)CMD_LIST
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(void*)CMD_LIST]
-------
Text=sizeof(CMD_LIST)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(CMD_LIST)]
-------
Text=(void*)CMD_QUIT
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [(void*)CMD_QUIT]
-------
Text=sizeof(CMD_QUIT)
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [sizeof(CMD_QUIT)]
-------
Text=2
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [2]
-------
Text=1
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1]
-------
Text=buy_status
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [buy_status]
-------
Text=BUY_MORE
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [BUY_MORE]
-------
Text=&buy_list
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&buy_list]
-------
Text=Product
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [Product]
-------
Text=Product
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [Product]
-------
Text=buy_list
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_status
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [buy_status]
-------
Text=BUY_TERM
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [BUY_TERM]
-------
Text=buy_list
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cost
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cost]
-------
Text=Product
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [Product]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [Product]
-------
Text=0
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [Product]
-------
Text=options
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [options]
-------
Text=(char*)&p->model_num
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [char*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(unsignedint)]
-------
Text=(char*)&p->cost
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [char*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(float)]
-------
Text=p->model_num
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [p->cost]
-------
Text=(char*)&sale_price
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [char*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(float)]
-------
Text=p->desc
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> ['\0']
-------
Text=p->desc
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [p->desc]
-------
Text=1
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [1]
-------
Text=cmd
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [cmd]
-------
Text=CMD_BUY
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [CMD_BUY]
-------
Text=CMD_CHECK
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [CMD_CHECK]
-------
Text=CMD_ADD
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [CMD_ADD]
-------
Text=CMD_RM
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [CMD_RM]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=CMD_UPDATE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_UPDATE]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_UPDATE
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [CMD_UPDATE]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void*]
-------
Text=CMD_ONSALE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [CMD_ONSALE]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(CMD_ONSALE)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(CMD_ONSALE)]
-------
Text=(void*)CMD_NOSALE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [void*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [CMD_NOSALE]
-------
Text=sizeof(CMD_NOSALE)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(CMD_NOSALE)]
-------
Text=(void*)CMD_LIST
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(void*)CMD_LIST]
-------
Text=sizeof(CMD_LIST)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(CMD_LIST)]
-------
Text=(void*)CMD_QUIT
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [(void*)CMD_QUIT]
-------
Text=sizeof(CMD_QUIT)
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [sizeof(CMD_QUIT)]
-------
Text=2
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=1
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_status
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [buy_status]
-------
Text=BUY_MORE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [BUY_MORE]
-------
Text=&buy_list
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [buy_list]
-------
Text=Product
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [Product]
-------
Text=Product
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [Product]
-------
Text=buy_status
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [buy_status]
-------
Text=BUY_TERM
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [BUY_TERM]
-------
Text=cost
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cost]
-------
Text=Product
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [Product]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [Product]
-------
Text=0
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [Product]
-------
Text=options
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [options]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [char*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&p->model_num
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&p->model_num]
-------
Text=sizeof(unsignedint)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.TypeNameContext'> [unsignedint]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [char*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&p->cost
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&p->cost]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.TypeNameContext'> [float]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=p->model_num
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->cost]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [char*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=&sale_price
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [&sale_price]
-------
Text=sizeof(float)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
2 : <class 'CParser.CParser.TypeNameContext'> [float]
3 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=p->desc
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> ['\0']
-------
Text=p->desc
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [p->desc]
-------
Text=1
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [1]
-------
Text=cmd
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [cmd]
-------
Text=CMD_BUY
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [CMD_BUY]
-------
Text=CMD_CHECK
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [CMD_CHECK]
-------
Text=CMD_ADD
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [CMD_ADD]
-------
Text=CMD_RM
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [CMD_RM]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_UPDATE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_UPDATE
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [CMD_UPDATE]
-------
Text=void*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=CMD_ONSALE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [CMD_ONSALE]
-------
Text=(CMD_ONSALE)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [CMD_ONSALE]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [void*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_NOSALE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [CMD_NOSALE]
-------
Text=sizeof(CMD_NOSALE)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(CMD_NOSALE)]
-------
Text=(void*)CMD_LIST
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(void*)CMD_LIST]
-------
Text=sizeof(CMD_LIST)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(CMD_LIST)]
-------
Text=(void*)CMD_QUIT
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [(void*)CMD_QUIT]
-------
Text=sizeof(CMD_QUIT)
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [sizeof(CMD_QUIT)]
-------
Text=buy_status
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [buy_status]
-------
Text=BUY_MORE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [BUY_MORE]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=buy_list
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [buy_list]
-------
Text=Product
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [Product]
-------
Text=Product
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [Product]
-------
Text=buy_status
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [buy_status]
-------
Text=BUY_TERM
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [BUY_TERM]
-------
Text=cost
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cost]
-------
Text=Product
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [Product]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [Product]
-------
Text=0
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [Product]
-------
Text=options
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [options]
-------
Text=char*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=&p->model_num
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [p->model_num]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=unsignedint
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [unsignedint]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=&p->cost
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [p->cost]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=float
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [float]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->model_num
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->cost]
-------
Text=char*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char*]
-------
Text=&sale_price
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'CParser.CParser.UnaryOperatorContext'> [&]
1 : <class 'CParser.CParser.CastExpressionContext'> [sale_price]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=float
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [float]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->desc
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->desc]
-------
Text='\0'
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> ['\0']
-------
Text=p->desc
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->desc]
-------
Text=1
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [1]
-------
Text=cmd
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [cmd]
-------
Text=CMD_BUY
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [CMD_BUY]
-------
Text=CMD_CHECK
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [CMD_CHECK]
-------
Text=CMD_ADD
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [CMD_ADD]
-------
Text=CMD_RM
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [CMD_RM]
-------
Text=CMD_UPDATE
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [CMD_UPDATE]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=CMD_ONSALE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_ONSALE]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_ONSALE
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [CMD_ONSALE]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void*]
-------
Text=CMD_NOSALE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [CMD_NOSALE]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(CMD_NOSALE)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(CMD_NOSALE)]
-------
Text=(void*)CMD_LIST
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [void*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [CMD_LIST]
-------
Text=sizeof(CMD_LIST)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(CMD_LIST)]
-------
Text=(void*)CMD_QUIT
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [(void*)CMD_QUIT]
-------
Text=sizeof(CMD_QUIT)
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [sizeof(CMD_QUIT)]
-------
Text=buy_status
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [buy_status]
-------
Text=BUY_MORE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [BUY_MORE]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_list
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [buy_list]
-------
Text=Product
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [Product]
-------
Text=Product
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [Product]
-------
Text=buy_status
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [buy_status]
-------
Text=BUY_TERM
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [BUY_TERM]
-------
Text=cost
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cost]
-------
Text=Product
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [Product]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [Product]
-------
Text=0
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [Product]
-------
Text=options
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [options]
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=p->model_num
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->model_num]
-------
Text=unsignedint
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [unsignedint]
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=p->cost
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [p->cost]
-------
Text=float
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [float]
-------
Text=p->model_num
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [model_num]
-------
Text=p->cost
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cost]
-------
Text=char*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [char]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=&
Type=<class 'CParser.CParser.UnaryOperatorContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [&]
-------
Text=sale_price
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sale_price]
-------
Text=float
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [float]
-------
Text=p->desc
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [desc]
-------
Text='\0'
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> ['\0']
-------
Text=p->desc
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->desc]
-------
Text=1
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [1]
-------
Text=cmd
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [cmd]
-------
Text=CMD_BUY
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [CMD_BUY]
-------
Text=CMD_CHECK
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [CMD_CHECK]
-------
Text=CMD_ADD
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [CMD_ADD]
-------
Text=CMD_RM
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [CMD_RM]
-------
Text=CMD_UPDATE
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [CMD_UPDATE]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_ONSALE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_ONSALE
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [CMD_ONSALE]
-------
Text=void*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=CMD_NOSALE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [CMD_NOSALE]
-------
Text=(CMD_NOSALE)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [CMD_NOSALE]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [void*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_LIST
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [CMD_LIST]
-------
Text=sizeof(CMD_LIST)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(CMD_LIST)]
-------
Text=(void*)CMD_QUIT
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [(void*)CMD_QUIT]
-------
Text=sizeof(CMD_QUIT)
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [sizeof(CMD_QUIT)]
-------
Text=buy_status
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [buy_status]
-------
Text=BUY_MORE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [BUY_MORE]
-------
Text=buy_list
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [buy_list]
-------
Text=Product
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [Product]
-------
Text=Product
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [Product]
-------
Text=buy_status
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [buy_status]
-------
Text=BUY_TERM
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [BUY_TERM]
-------
Text=cost
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cost]
-------
Text=Product
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [Product]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [Product]
-------
Text=0
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [Product]
-------
Text=options
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [options]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->model_num
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->model_num]
-------
Text=unsignedint
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [unsigned]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [int]
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->cost
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [p->cost]
-------
Text=float
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [float]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=model_num
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cost
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [char]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=&
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sale_price
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [sale_price]
-------
Text=float
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [float]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=desc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\0'
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> ['\0']
-------
Text=p->desc
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [desc]
-------
Text=1
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cmd
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [cmd]
-------
Text=CMD_BUY
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [CMD_BUY]
-------
Text=CMD_CHECK
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [CMD_CHECK]
-------
Text=CMD_ADD
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [CMD_ADD]
-------
Text=CMD_RM
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [CMD_RM]
-------
Text=CMD_UPDATE
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [CMD_UPDATE]
-------
Text=CMD_ONSALE
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [CMD_ONSALE]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=CMD_NOSALE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_NOSALE]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_NOSALE
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [CMD_NOSALE]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void*]
-------
Text=CMD_LIST
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [CMD_LIST]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(CMD_LIST)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(CMD_LIST)]
-------
Text=(void*)CMD_QUIT
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 4
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.TypeNameContext'> [void*]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
3 : <class 'CParser.CParser.CastExpressionContext'> [CMD_QUIT]
-------
Text=sizeof(CMD_QUIT)
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [sizeof(CMD_QUIT)]
-------
Text=buy_status
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [buy_status]
-------
Text=BUY_MORE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [BUY_MORE]
-------
Text=buy_list
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [buy_list]
-------
Text=Product
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [Product]
-------
Text=Product
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [Product]
-------
Text=buy_status
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [buy_status]
-------
Text=BUY_TERM
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [BUY_TERM]
-------
Text=cost
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cost]
-------
Text=Product
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [Product]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [Product]
-------
Text=0
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [Product]
-------
Text=options
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [options]
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->model_num
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [model_num]
-------
Text=unsigned
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=int
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p->cost
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 3
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [p]
1 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [->]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cost]
-------
Text=float
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=char
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sale_price
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [sale_price]
-------
Text=float
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text='\0'
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=desc
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cmd
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [cmd]
-------
Text=CMD_BUY
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [CMD_BUY]
-------
Text=CMD_CHECK
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [CMD_CHECK]
-------
Text=CMD_ADD
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [CMD_ADD]
-------
Text=CMD_RM
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [CMD_RM]
-------
Text=CMD_UPDATE
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [CMD_UPDATE]
-------
Text=CMD_ONSALE
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [CMD_ONSALE]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_NOSALE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_NOSALE
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [CMD_NOSALE]
-------
Text=void*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=CMD_LIST
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [CMD_LIST]
-------
Text=(CMD_LIST)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [CMD_LIST]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*
Type=<class 'CParser.CParser.TypeNameContext'>
Child Count = 1
0 : <class 'CParser.CParser.SpecifierQualifierListContext'> [void*]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_QUIT
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [CMD_QUIT]
-------
Text=sizeof(CMD_QUIT)
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 2
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sizeof]
1 : <class 'CParser.CParser.PostfixExpressionContext'> [(CMD_QUIT)]
-------
Text=buy_status
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [buy_status]
-------
Text=BUY_MORE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [BUY_MORE]
-------
Text=buy_list
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [Product]
-------
Text=Product
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [Product]
-------
Text=buy_status
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [buy_status]
-------
Text=BUY_TERM
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [BUY_TERM]
-------
Text=cost
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cost]
-------
Text=Product
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [Product]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [Product]
-------
Text=0
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [Product]
-------
Text=options
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [options]
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=model_num
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [p]
-------
Text=->
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cost
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sale_price
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [sale_price]
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cmd
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [cmd]
-------
Text=CMD_BUY
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [CMD_BUY]
-------
Text=CMD_CHECK
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [CMD_CHECK]
-------
Text=CMD_ADD
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [CMD_ADD]
-------
Text=CMD_RM
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [CMD_RM]
-------
Text=CMD_UPDATE
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [CMD_UPDATE]
-------
Text=CMD_ONSALE
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [CMD_ONSALE]
-------
Text=CMD_NOSALE
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [CMD_NOSALE]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=CMD_LIST
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_LIST]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_LIST
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [CMD_LIST]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=void*
Type=<class 'CParser.CParser.SpecifierQualifierListContext'>
Child Count = 1
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void*]
-------
Text=CMD_QUIT
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [CMD_QUIT]
-------
Text=sizeof
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=(CMD_QUIT)
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [(CMD_QUIT)]
-------
Text=buy_status
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [buy_status]
-------
Text=BUY_MORE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [BUY_MORE]
-------
Text=Product
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [Product]
-------
Text=Product
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [Product]
-------
Text=buy_status
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [buy_status]
-------
Text=BUY_TERM
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [BUY_TERM]
-------
Text=cost
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cost]
-------
Text=Product
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [Product]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [Product]
-------
Text=0
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [Product]
-------
Text=options
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [options]
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=p
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=sale_price
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cmd
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [cmd]
-------
Text=CMD_BUY
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [CMD_BUY]
-------
Text=CMD_CHECK
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [CMD_CHECK]
-------
Text=CMD_ADD
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [CMD_ADD]
-------
Text=CMD_RM
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [CMD_RM]
-------
Text=CMD_UPDATE
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [CMD_UPDATE]
-------
Text=CMD_ONSALE
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [CMD_ONSALE]
-------
Text=CMD_NOSALE
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [CMD_NOSALE]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_LIST
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_LIST
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [CMD_LIST]
-------
Text=void*
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 2
0 : <class 'CParser.CParser.TypeSpecifierContext'> [void]
1 : <class 'CParser.CParser.PointerContext'> [*]
-------
Text=CMD_QUIT
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [CMD_QUIT]
-------
Text=(CMD_QUIT)
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 3
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [(]
1 : <class 'CParser.CParser.ExpressionContext'> [CMD_QUIT]
2 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [)]
-------
Text=buy_status
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [buy_status]
-------
Text=BUY_MORE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [BUY_MORE]
-------
Text=Product
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [Product]
-------
Text=Product
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [Product]
-------
Text=buy_status
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [buy_status]
-------
Text=BUY_TERM
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [BUY_TERM]
-------
Text=cost
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cost]
-------
Text=Product
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [Product]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [Product]
-------
Text=0
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [0]
-------
Text=Product
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [Product]
-------
Text=options
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [options]
-------
Text=cmd
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [cmd]
-------
Text=CMD_BUY
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_BUY]
-------
Text=CMD_CHECK
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [CMD_CHECK]
-------
Text=CMD_ADD
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [CMD_ADD]
-------
Text=CMD_RM
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [CMD_RM]
-------
Text=CMD_UPDATE
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [CMD_UPDATE]
-------
Text=CMD_ONSALE
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [CMD_ONSALE]
-------
Text=CMD_NOSALE
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [CMD_NOSALE]
-------
Text=CMD_LIST
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [CMD_LIST]
-------
Text=void
Type=<class 'CParser.CParser.TypeSpecifierContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [void]
-------
Text=*
Type=<class 'CParser.CParser.PointerContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [*]
-------
Text=CMD_QUIT
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_QUIT]
-------
Text=(
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_QUIT
Type=<class 'CParser.CParser.ExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AssignmentExpressionContext'> [CMD_QUIT]
-------
Text=)
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_status
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=BUY_MORE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [Product]
-------
Text=Product
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [Product]
-------
Text=buy_status
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [buy_status]
-------
Text=BUY_TERM
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cost
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [Product]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [Product]
-------
Text=0
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [Product]
-------
Text=options
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=cmd
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_BUY
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_CHECK
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [CMD_CHECK]
-------
Text=CMD_ADD
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [CMD_ADD]
-------
Text=CMD_RM
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [CMD_RM]
-------
Text=CMD_UPDATE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [CMD_UPDATE]
-------
Text=CMD_ONSALE
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [CMD_ONSALE]
-------
Text=CMD_NOSALE
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [CMD_NOSALE]
-------
Text=CMD_LIST
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [CMD_LIST]
-------
Text=void
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=*
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_QUIT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_QUIT
Type=<class 'CParser.CParser.AssignmentExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ConditionalExpressionContext'> [CMD_QUIT]
-------
Text=Product
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [Product]
-------
Text=Product
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [Product]
-------
Text=buy_status
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [buy_status]
-------
Text=Product
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=Product
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_CHECK
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_CHECK]
-------
Text=CMD_ADD
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [CMD_ADD]
-------
Text=CMD_RM
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [CMD_RM]
-------
Text=CMD_UPDATE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [CMD_UPDATE]
-------
Text=CMD_ONSALE
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [CMD_ONSALE]
-------
Text=CMD_NOSALE
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [CMD_NOSALE]
-------
Text=CMD_LIST
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [CMD_LIST]
-------
Text=CMD_QUIT
Type=<class 'CParser.CParser.ConditionalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalOrExpressionContext'> [CMD_QUIT]
-------
Text=Product
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [Product]
-------
Text=Product
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [Product]
-------
Text=buy_status
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [buy_status]
-------
Text=CMD_CHECK
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_ADD
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [CMD_ADD]
-------
Text=CMD_RM
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [CMD_RM]
-------
Text=CMD_UPDATE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [CMD_UPDATE]
-------
Text=CMD_ONSALE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [CMD_ONSALE]
-------
Text=CMD_NOSALE
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [CMD_NOSALE]
-------
Text=CMD_LIST
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [CMD_LIST]
-------
Text=CMD_QUIT
Type=<class 'CParser.CParser.LogicalOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.LogicalAndExpressionContext'> [CMD_QUIT]
-------
Text=Product
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [Product]
-------
Text=Product
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [Product]
-------
Text=buy_status
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [buy_status]
-------
Text=CMD_ADD
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_ADD]
-------
Text=CMD_RM
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [CMD_RM]
-------
Text=CMD_UPDATE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [CMD_UPDATE]
-------
Text=CMD_ONSALE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [CMD_ONSALE]
-------
Text=CMD_NOSALE
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [CMD_NOSALE]
-------
Text=CMD_LIST
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [CMD_LIST]
-------
Text=CMD_QUIT
Type=<class 'CParser.CParser.LogicalAndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.InclusiveOrExpressionContext'> [CMD_QUIT]
-------
Text=Product
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [Product]
-------
Text=Product
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [Product]
-------
Text=buy_status
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [buy_status]
-------
Text=CMD_ADD
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_RM
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [CMD_RM]
-------
Text=CMD_UPDATE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [CMD_UPDATE]
-------
Text=CMD_ONSALE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [CMD_ONSALE]
-------
Text=CMD_NOSALE
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [CMD_NOSALE]
-------
Text=CMD_LIST
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [CMD_LIST]
-------
Text=CMD_QUIT
Type=<class 'CParser.CParser.InclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ExclusiveOrExpressionContext'> [CMD_QUIT]
-------
Text=Product
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [Product]
-------
Text=Product
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [Product]
-------
Text=buy_status
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [buy_status]
-------
Text=CMD_RM
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_RM]
-------
Text=CMD_UPDATE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [CMD_UPDATE]
-------
Text=CMD_ONSALE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [CMD_ONSALE]
-------
Text=CMD_NOSALE
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [CMD_NOSALE]
-------
Text=CMD_LIST
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [CMD_LIST]
-------
Text=CMD_QUIT
Type=<class 'CParser.CParser.ExclusiveOrExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AndExpressionContext'> [CMD_QUIT]
-------
Text=Product
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [Product]
-------
Text=Product
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=buy_status
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_RM
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_UPDATE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [CMD_UPDATE]
-------
Text=CMD_ONSALE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [CMD_ONSALE]
-------
Text=CMD_NOSALE
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [CMD_NOSALE]
-------
Text=CMD_LIST
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [CMD_LIST]
-------
Text=CMD_QUIT
Type=<class 'CParser.CParser.AndExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.EqualityExpressionContext'> [CMD_QUIT]
-------
Text=Product
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_UPDATE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_UPDATE]
-------
Text=CMD_ONSALE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [CMD_ONSALE]
-------
Text=CMD_NOSALE
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [CMD_NOSALE]
-------
Text=CMD_LIST
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [CMD_LIST]
-------
Text=CMD_QUIT
Type=<class 'CParser.CParser.EqualityExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.RelationalExpressionContext'> [CMD_QUIT]
-------
Text=CMD_UPDATE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_ONSALE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [CMD_ONSALE]
-------
Text=CMD_NOSALE
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [CMD_NOSALE]
-------
Text=CMD_LIST
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [CMD_LIST]
-------
Text=CMD_QUIT
Type=<class 'CParser.CParser.RelationalExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.ShiftExpressionContext'> [CMD_QUIT]
-------
Text=CMD_ONSALE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_ONSALE]
-------
Text=CMD_NOSALE
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [CMD_NOSALE]
-------
Text=CMD_LIST
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [CMD_LIST]
-------
Text=CMD_QUIT
Type=<class 'CParser.CParser.ShiftExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.AdditiveExpressionContext'> [CMD_QUIT]
-------
Text=CMD_ONSALE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_NOSALE
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [CMD_NOSALE]
-------
Text=CMD_LIST
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [CMD_LIST]
-------
Text=CMD_QUIT
Type=<class 'CParser.CParser.AdditiveExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.MultiplicativeExpressionContext'> [CMD_QUIT]
-------
Text=CMD_NOSALE
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_NOSALE]
-------
Text=CMD_LIST
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [CMD_LIST]
-------
Text=CMD_QUIT
Type=<class 'CParser.CParser.MultiplicativeExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.CastExpressionContext'> [CMD_QUIT]
-------
Text=CMD_NOSALE
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_LIST
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [CMD_LIST]
-------
Text=CMD_QUIT
Type=<class 'CParser.CParser.CastExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.UnaryExpressionContext'> [CMD_QUIT]
-------
Text=CMD_LIST
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_LIST]
-------
Text=CMD_QUIT
Type=<class 'CParser.CParser.UnaryExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PostfixExpressionContext'> [CMD_QUIT]
-------
Text=CMD_LIST
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
Text=CMD_QUIT
Type=<class 'CParser.CParser.PostfixExpressionContext'>
Child Count = 1
0 : <class 'CParser.CParser.PrimaryExpressionContext'> [CMD_QUIT]
-------
Text=CMD_QUIT
Type=<class 'CParser.CParser.PrimaryExpressionContext'>
Child Count = 1
0 : <class 'antlr4.tree.Tree.TerminalNodeImpl'> [CMD_QUIT]
-------
Text=CMD_QUIT
Type=<class 'antlr4.tree.Tree.TerminalNodeImpl'>
Child Count = 0
-------
