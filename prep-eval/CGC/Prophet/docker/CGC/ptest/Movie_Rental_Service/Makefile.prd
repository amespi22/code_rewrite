
###########################################
# THIS SCRIPT HAS BEEN AUTOMATICALLY GENERATED BY
#          genprog_setup.bash
###########################################

SHELL:=/bin/bash

include prd_include.mk

MYOBJ:=$(patsubst %.c,%.o, $(MYSRC))
MYINT:=$(patsubst %.c,%.i, $(MYSRC))

#external scripts/tools
ifeq (${PRD_BASE_DIR},)
FUNCREP:="./funcinsert.py"
else
FUNCREP:="${PRD_BASE_DIR}/funcinsert.py"
endif
DIET_GCC:=${DIET32PATH}/diet_gcc

#some prophet-related overhead
override:=0
ORIG_CC:=$(CC)
ifeq ($(CC),gcc)
override:=1
endif
ifeq ($(CC),cc)
override:=1
endif
ifeq ($(override),1)
CC:=gcc
CFLAGS:= $(CFLAGS) -nodefaultlibs -fno-stack-protector
endif

ifneq (${NODIET},)
	COMPILE ?= $(CC) $(CFLAGS)
else 
	COMPILE := $(DIET_GCC) 
endif
#end of prophet-related overhead

# directories
TMPDIR:=tmp
OBJDIR:=depobj
LIBSRC:=libsrc

# expansive Make terms
DEPS:=$(wildcard $(LIBSRC)/*.[csS]) 
IDIRS_:=$(LIBSRC)
INCDIRS:=$(patsubst %,-I%, $(IDIRS_))

# compilation flags
DEFAULT_FLAGS:=-m32 -fPIC -static-pie -shared -z now 
LDFLAGS:=-Wl,-pie,--no-dynamic-linker,--eh-frame-hdr,-z,now,-z,norelro,-T,script.ld,-static

REPDEP_OBJS:=$(patsubst %.c, $(OBJDIR)/%.o, $(patsubst $(LIBSRC)/%.c, $(OBJDIR)/%.o, $(DEPS) $(MYREP)))
DEP_OBJS:=$(patsubst %.c, $(OBJDIR)/%.o, $(patsubst $(LIBSRC)/%.c, $(OBJDIR)/%.o, $(DEPS) $(MYSRC)))

GENPROG_TMP := $(patsubst $(LIBSRC)/%.c, $(TMPDIR)/%.i, $(DEPS))

all: hook funcinsert


$(MYSRC):
	@touch $(MYSRC)
	@rm -f $(OBJDIR)/$(MYOBJ)
	@rm -f $(MYINT)

.PHONY: $(MYSRC) repair

$(OBJDIR)/$(MYOBJ): $(MYSRC) $(DEP_OBJS)
	@mkdir -p $(OBJDIR)
	@mkdir -p $(TMPDIR)
	$(COMPILE) $(DEFAULT_FLAGS) --save-temps -c $< -o $@  $(INCDIRS)
	@$(shell [[ -f "*.[os]" ]] && mv *.[os] $(TMPDIR)/ )

$(OBJDIR)/%.o: $(LIBSRC)/%.c 
	@mkdir -p $(OBJDIR)
	@mkdir -p $(TMPDIR)
	$(COMPILE) $(DEFAULT_FLAGS) --save-temps -c $< -o $@  $(INCDIRS)
	@$(shell [[ -f "*.[ios]" ]] && mv *.[ios] $(TMPDIR)/ )

hook: $(OBJDIR)/$(MYOBJ) 
	@echo $(DEP_OBJS)
	$(COMPILE) $(DEFAULT_FLAGS) -o libhook.so $(DEP_OBJS) $(LDFLAGS) $(INCDIRS)
	@$(COMPILE) $(DEFAULT_FLAGS) -o check $(DEP_OBJS) $(INCDIRS) 
	@echo -e "\nChecking for unbound functions or variables => U <func>"
	@nm check | (egrep -w 'U'; [[ "$$?" -ne "0" ]] || (echo "Error! Unbound functions!" && rm check && /bin/false))
	@rm check && echo -e " => SUCCESS! NO Unbound Functions\n"

genprog_cmd:
	@ >&2 echo --func-repair-script $(FUNCREP) --genprog $(FUNCINSERT_PARAMS)
	@echo --trampoline-compiler-opts $(DEFAULT_FLAGS) $(GENPROG_TMP) $(INCDIRS) 
	@echo --trampoline-linker-opts $(LDFLAGS) $(INCDIRS)
	@echo --func-repair-fn-name $(REPLACEME)
	@echo --func-repair-insert $(MYSRC)

all_c: hook

funcinsert: hook
	@echo $(FUNCREP) --do-not-override-so --bin $(BIN) --outbin $(DETOUR_BIN) --fn $(MYSRC) $(FUNCINSERT_PARAMS)
	$(FUNCREP) --do-not-override-so --bin $(BIN) --outbin $(DETOUR_BIN) --fn $(MYSRC) $(FUNCINSERT_PARAMS)

repair:
	$(COMPILE) $(DEFAULT_FLAGS) --save-temps -c $(MYREP) -o $(OBJDIR)/repair.o  $(INCDIRS)
	$(COMPILE) $(DEFAULT_FLAGS) -o libhook.so $(REPDEP_OBJS) $(LDFLAGS) $(INCDIRS)
	@$(COMPILE) $(DEFAULT_FLAGS) -o check $(REPDEP_OBJS) $(INCDIRS)
	@echo -e "\nChecking for unbound functions or variables => U <func>"
	@nm check | (egrep -w 'U'; [[ "$$?" -ne "0" ]] || (echo "Error! Unbound functions!" && rm check && /bin/false))
	@rm check && echo -e " => SUCCESS! NO Unbound Functions\n"
	$(FUNCREP) --do-not-override-so --bin $(BIN) --outbin $(BIN).repaired --fn $(MYREP) $(FUNCINSERT_PARAMS)

clean_genprog:
	rm -f repair.* *.cache coverage.*

clean_temp:
	rm -rf $(TMPDIR) $(OBJDIR)

clean_hook: clean_temp
	rm -f decompiled_source.[ios] decompiled_source.bc libhook.o
	rm -rf $(TMPDIR) $(OBJDIR)

clean: clean_genprog clean_hook
